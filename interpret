:- style_check(-singleton).

/* ATTIVA TRANSITIVA CON INFINITIVA  come complemento */
interp_trans_inf(fare,Controllo,PredV,LArgsV,SN,Svinf,LSP,CatV,Argomenti,NewAdjs_vp)
   :-
    subcat_on([PrimoArg|LArgs], PredV),
    interp_sogg(SN,PrimoArg,Sogg),
    interp_comp_inf(Svinf,LArgs,NLArgs,Y,FContr/RContr),
    discharge_pps(LSP,CatV,V,PrimoArg,NLArgs,_,Args_vp,Adjs_vp,LArgsV), 
    Argomenti the_list [Sogg|Args_vp] && [Y],
    Args = [Sogg|Args_vp],
    open_adjs(Args,Adjs_vp,NewAdjs_vp),!. 


interp_trans_inf(V,Controllo,PredV,LArgsV,SN,Svinf,LSP,CatV,Argomenti,NewAdjs_vp)
   :-
    subcat_on([PrimoArg|LArgs], PredV),
    interp_sogg(SN,PrimoArg,Sogg),
    interp_comp_inf(Svinf,LArgs,NLArgs,Y,FContr/RContr),
    extract_controller([Sogg|Args_vp],FContr/RContr,Controllo),
    discharge_pps(LSP,CatV,V,PrimoArg,NLArgs,_,Args_vp,Adjs_vp,LArgsV), 
    Argomenti the_list [Sogg|Args_vp] && [Y],
    Args = [Sogg|Args_vp],
    open_adjs(Args,Adjs_vp,NewAdjs_vp). 

/* ATTIVA TRANSITIVA CON FCOMP 
 passaggio del controllo alla fcomp
             il controllato (sogg della fcomp) e'implicito 
             se SI deve passare il controllo
             se NO non deve passare il controllo */

interp_trans_fcomp(Verbo,Modo,PredV,LArgsV1,SN1,Fcomp,ListaSP,CatV,Argomenti,NewAdjs_vp) 
:-
   subcat_on([PrimoArg|LArgs], PredV),
   interp_fcomp1(
      [PrimoArg|LArgs],
      Verbo,Modo,SN1,ListaSP,Fcomp,CatV,LArgsV1,
                           Argomenti,NewAdjs_vp).

interp_psyc_fcomp(Verbo,Modo,PredV,LArgsV1,
    Fcomp,ListaSP,CatV,Argomenti,NewAdjs_vp) 
    :-
   subcat_on([PrimoArg|LArgs], PredV),
   interp_fcomp1(
      [PrimoArg|LArgs],
      Verbo,Modo,Fcomp,ListaSP,CatV,LArgsV1,
                           Argomenti,NewAdjs_vp).

interp_fcomp1([PrimoArg|LArgs],V,Modo,SN1,LSP,Fcomp,CatV,LArgsV1,
                           Argomenti,NewAdjs_vp) 
    :-
     interp_sogg(SN1,PrimoArg,Sogg),
     interp_fcomp(Fcomp,LArgs,LAr,Y,ListaControlli),!,
     nonpredic_contr(Fcomp,Modo,[Sogg|Args_vp],ListaControlli),
    discharge_pps(LSP,CatV,V,PrimoArg,LAr,NLArgs,Args_vp,Adjs_vp,LArgsV), 
    Argomenti the_list [Sogg|Args_vp] && [Y],
    Args = [Sogg|Args_vp],
    LArgsV1=[PrimoArg|LArgs],
    open_adjs(Args,Adjs_vp,NewAdjs_vp),
      !.

interp_fcomp1([PrimoArg|LArgs],V,Modo,Fcomp,LSP,CatV,LArgsV1,
                           Argomenti,NewAdjs_vp) 
    :-
     interp_fcomp(Fcomp,LArgs,LAr,Y,ListaControlli),!,
     nonpredic_contr(Fcomp,Modo,[Sogg|Args_vp],ListaControlli),
    discharge_pps(LSP,CatV,V,PrimoArg,LAr,NLArgs,Args_vp,Adjs_vp,LArgsV), 
    Argomenti the_list [Sogg|Args_vp] && [Y],
    Args = [Sogg|Args_vp],
    LArgsV1=[PrimoArg|LArgs],
    open_adjs(Args,Adjs_vp,NewAdjs_vp),
      !.

assegna_controllo_fcomp(Indice,cong,Argomenti,[_,sogg=x]) :-
    Indice = indefinito,!. /* il controllore e' anche indefinito */

assegna_controllo_fcomp(Indice,ind,Argomenti,[sogg=CFunz/CRuolo|_]) :-
    Argomenti\=[],
    member(arg(funzione(CFunz),ruolo(CRuolo),SNContr),Argomenti),
    estrai_st(indice,SNContr,indice(SNContrx)),
    Indice = SNContrx. /* il controllore e' un argomento della principale */ 

assegna_controllo_fcomp(Indice,ind,Argomenti,[sogg=x]) :-
    Indice = indefinito. /* il controllore e' solo indefinito */

assegna_controllo_fcomp(Indice,ind,Argomenti,[_,sogg=x]) :-
    Indice = indefinito. /* il controllore e' anche indefinito */


/* controllo frase come complemento */


interp_fcomp(Fcomp/Funz,LArgs,NuovaLArgs,Y,ListaControlli) :-
                member(f/Funz/Ruolo/ListaControlli,LArgs),
                elimina(f/Funz/Ruolo/ListaControlli,LArgs,NuovaLArgs),
                Y = arg(funzione(Funz),ruolo(Ruolo),Fcomp), !.



/* CONTROLLO ASSERZIONE IN FORMA PASSIVA */
interp_ass_passiva(Verbo-Controllo,PredV,LArgsV,SN,Svinf,LSP,CatV, Argomenti,NewAdjs_vp)
:-
    subcat_on([PrimoArg|LArgs], PredV),
    interp_sv_ogg(SN,_,LArgs,NLArgs,Sogg),
    interp_comp_inf(Svinf,NLArgs,NuovaLArgs,Y,FContr/RContr),
    extract_controller([Sogg|Args_vp],FContr/RContr,Controllo),
    discharge_pps(LSP,CatV,V,PrimoArg,LArgs,NuovaLArgs,Args_vp,Adjs_vp,LArgsV), 
    Argomenti the_list [Sogg|Args_vp] && [Y],
    Args = [Sogg|Args_vp],
    open_adjs(Args,Adjs_vp,NewAdjs_vp). 


interp_ass_passiva(Verbo,PredV,LArgsV,SN,[],ListaSP,CatV,[Sogg|Args_vp],NewAdjs_vp) 
:-
       PredV=pred_v(Verbo,CatGr,CatV,Largs),
       subcat_on([PrimoArg|LArgs], PredV),
       interp_sv_ogg(SN,_,LArgs,NuovaLArgs,Sogg),
       interp_sv_pass(CatV,ListaSP,[PrimoArg|LArgs],_,Args_vp,Adjs_vp),
       member(sn/sogg/R1/ListaCat1,[PrimoArg|LArgs]), 
       member(sn/ogg/R/ListaCat,[PrimoArg|LArgs]), 
       LArgsV = [sp/obl/R1/ListaCat1,sn/sogg/R/ListaCat],
       Args = [Sogg|Args_vp],
       open_adjs(Args,Adjs_vp,NewAdjs_vp),
       !.

interp_ass_passiva(Verbo,PredV,LArgsV,SN,[],LSP,CatV,[Sogg,Obl|Args_vp],NewAdjs_vp) 
:-
       PredV=pred_v(Verbo,CatGr,CatV,Largs),
       subcat_on([PrimoArg|LArgs], PredV),
       interp_sv_ogg_pro(SN,_,LArgs,NuovaLArgs,Sogg),
   (
   LSP\=[],
   interp_sv_xx(CatV,Verbo,LSP,NuovaLArgs,_,
      Args_vp,Adjs_vp,LArgs1),
    member(sn/ogg/R/ListaCat,[PrimoArg|LArgs]), 
       LArgsV = [sn/sogg/R/ListaCat,NuovaLArgs]
   ;
   interp_sv_xa(
      CatV,Verbo,LSP,NuovaLArgs,_,
      Args_vp,Adjs_vp), 
    member(sn/ogg/R/ListaCat,[PrimoArg|LArgs]), 
       LArgsV = [sn/sogg/R/ListaCat]
   ;
   interp_sv_x(CatV,LSP,NovaLArgs,_,Args_vp,Adjs_vp),
    member(sn/ogg/R/ListaCat,[PrimoArg|LArgs]), 
       LArgsV = [sn/sogg/R/ListaCat]
    ),
   member(sn/sogg/R1/ListaCat1,[PrimoArg|LArgs]), 
       create_Pros(obl/R1/ListaCat1, 5, _, Obl),
       Args = [Sogg,Obl|Args_vp],
      open_adjs(Args,Adjs_vp,NewAdjs_vp),
      !.

interp_ass_passiva(Verbo,PredV,LArgsV,SN,Xcomp/acomp,LSP,CatV,Args,NewAdjs_vp) 
:-
       PredV=pred_v(Verbo,CatGr,CatV,Largs),
       subcat_on([PrimoArg|LArgs], PredV),
       interp_sv_ogg(SN,_,LArgs,NovaLArgs,Sogg),
       interp_xcomp(Xcomp/TipoXcomp,NovaLArgs,NuovaLArgs,X,Controllore,
                Arg_di_contr,ListaCat),    
       interp_sv_x(CatV,ListaSP,NuovaLArgs,_,Args_vp,Adjs_vp),
       (X\=form(ci),
        assegna_controllo_xcomp([Sogg,X|Args_vp],Controllore,Arg_di_contr,  
                  ListaCat);
        (X=form(ci);X=form(there))),
       member(sn/ogg/R/ListaC,[PrimoArg|LArgs]), 
       elimina(sn/ogg/R/ListaC,LArgs, NL),
       Lars = [sn/sogg/R/ListaC],
       append(Lars, NL, LArgsV1),
       Args = [Sogg,X|Args_vp],
       open_adjs(Args,Adjs_vp,NewAdjs_vp),
       !.

interp_ass_passiva(Verbo,PredV,LArgsV,SN,SN1,LSP,CatV,[Sogg,Ogg,Obl|Args_vp],NewAdjs_vp) 
:-
       PredV=pred_v(Verbo,CatGr,CatV,Largs),
       subcat_on([PrimoArg|LArgs], PredV),
       interp_sv_ogg(SN1,_,LArgs,NuovaLArgs,Ogg),
       interp_sv_ogg2(SN,NuovaLArgs,NovaLArgs,Sogg),
       interp_sv_x(CatV,LSP,NovaLArgs,_,Args_vp,Adjs_vp),
       member(sp/ogg2/R1/Pre/ListaCat1,[PrimoArg|LArgs]), 
       member(sn/ogg/R/ListaCat,[PrimoArg|LArgs]), 
       member(sn/sogg/R2/ListaCat2,[PrimoArg|LArgs]), 
       LArgsV = [sn/sogg/R1/ListaCat1,sn/ogg/R/ListaCat],
       create_Pros(obl/R2/ListaCat2, 5, _, Obl),
       Args = [Sogg,Ogg,Obl|Args_vp],
       open_adjs(Args,Adjs_vp,NewAdjs_vp),
       !.

/* ATTIVE INCOATIVE INVERSE */
   
interp_attiva_incoat(Verbo,PredV, SubCatOut,
     SN,ListaSP,CatV,Args,NewAdjs_vp) 
     :-
     subcat_on([PrimoArg|LArgs], PredV),
     interp_incoat([PrimoArg|LArgs],
              Verbo,SN,ListaSP,CatV,SubCatOut,Args,NewAdjs_vp).

interp_incoat([PrimoArg|LArgs],V,SN,LSP,CatV,LArgsV,Args,NewAdjs_vp) 
     :-
       interp_sv_ogg(SN,_,LArgs,NuovaLArgs,Sogg),
       interp_sv_inc(CatV,LSP,NuovaLArgs,_,Args_vp,Adjs_vp,Contr),
       assemble_args_adjs(PrimoArg,LArgs,[Sogg],Args_vp,Adjs_vp,   
            LArgsV,Args,NewAdjs_vp),       
       !.

interp_incoat([PrimoArg|LArgs],Verbo,SN,LSP,CatV,LArgsV,Args,NewAdjs_vp) 
      :-
       interp_sv_ogg(SN,_,LArgs,NuovaLArgs,Sogg),
       interp_sv_x(CatV,LSP,NuovaLArgs,_,Args_vp,Adjs_vp),
       LArgs = [S/F/R/[_|_]],
       LArgsV = [sn/sogg/R/[_],NuovaLArgs],
       Args = [Sogg|Args_vp],
       open_adjs(Args,Adjs_vp,NewAdjs_vp),
       !.

interp_incoat([PrimoArg|LArgs],V,SN,LSP,CatV,LArgsV,Args,NewAdjs_vp) 
      :-
       LSP=[sp(prep(a,cat(CatSP),Mod),SN1)|AltriSP],
       interp_sv_ogg(SN,_,LArgs,NuovaLArgs,Sogg),
       interp_sv_rifl(CatV,[sp(prep(a,cat(CatSP),Mod),SN1)|AltriSP],
                 NuovaLArgs,ListAr,Altr,[Ogg2|Args_vp],Adjs_vp,Contr),
       interp_sv_ogg_poss(Altr,NuovaLArgs,NovaLista,Ogg,Contr),
       assemble_args_adjs(PrimoArg,LArgs,[Sogg,Ogg2,Ogg],Args_vp,Adjs_vp,   
            LArgsV,Args,NewAdjs_vp),       
       !.

/* controllo delle imperative */

interp_attiva_imper(Verbo,Controllo,PredV,LArgsV1,
      SN,SN2,ListaSP,CatV,[Sogg,Ogg|Args_vp],NewAdjs_vp) 
      :-
      subcat_on([PrimoArg|LArgs], PredV),
      interp_imper(Controllo,[PrimoArg|LArgs],
           Verbo,SN,SN2,ListaSP,CatV,LArgsV1,[Sogg,Ogg|Args_vp],NewAdjs_vp).

interp_attiva_imper(Verbo,PredV,LArgsV1,
      SN,SN2,ListaSP,CatV,[Sogg,Ogg|Args_vp],NewAdjs_vp) 
      :-
      subcat_on([PrimoArg|LArgs], PredV),
      interp_imper([PrimoArg|LArgs],
           Verbo,SN,SN2,ListaSP,CatV,LArgsV1,[Sogg,Ogg|Args_vp],NewAdjs_vp).

interp_attiva_imper(Verbo,PredV,LArgsV1,SN,ListaSP,CatV,[Sogg|Args_vp],NewAdjs_vp) 
     :-
     subcat_on([PrimoArg|LArgs], PredV),
     interp_imper([PrimoArg|LArgs],
     Verbo,SN,ListaSP,CatV,LArgsV1,[Sogg|Args_vp],NewAdjs_vp).


interp_imper([PrimoArg|LArgs],Verbo,SN,SN2,LSP,CatV,LArgsV,Args,NewAdjs_vp)
      :-
       interp_sogg(SN,PrimoArg,Sogg),
       interp_sv_ogg(SN2,_,LArgs,NuovaLArgs,Ogg),
       (LSP\=[],
        interp_sv_xx(CatV,Verbo,LSP,NuovaLArgs,_,Args_vp,Adjs_vp,LArgsV1);
         interp_sv_x(CatV,LSP,NovaLArgs,_,Args_vp,Adjs_vp) ),
       assemble_args_adjs(PrimoArg,LArgs,[Sogg,Ogg],Args_vp,Adjs_vp,   
            LArgsV,Args,NewAdjs_vp),       
       !.

interp_imper(Controllo,[PrimoArg|LArgs],Verbo,SN,Svinf,LSP,CatV,LArgsV,[Sogg,Y|Args_vp],NewAdjs_vp) 
     :-
       interp_sogg_expl(SN,PrimoArg,Sogg),
       interp_comp_inf(Svinf,LArgs,NuovaLArgs,Y,FContr/RContr),
       Controllo=indefinito,
       (LSP\=[],
        interp_sv_xx(CatV,Verbo,LSP,NuovaLArgs,_,Args_vp,Adjs_vp,LArgsV);
         interp_sv_x(CatV,LSP,NovaLArgs,_,Args_vp,Adjs_vp),
         LArgsV1 = [PrimoArg|LArgs]
        ),
        assemble_args_adjs(PrimoArg,LArgs,[Sogg],Args_vp,Adjs_vp,   
            LArgsV,_,NewAdjs_vp),       
        !.

interp_imper([PrimoArg|LArgs],V,SN,LSP,CatV,LArgsV,Args,NewAdjs_vp)
       :-
       interp_sogg(SN,PrimoArg,Sogg),
       (LSP\=[],
         interp_sv_xx(CatV,V,LSP,LArgs,_,Args_vp,Adjs_vp,LArgsV1);
         interp_sv_x(CatV,LSP,ListaAr,_,Args_vp,Adjs_vp)),
        assemble_args_adjs(PrimoArg,LArgs,[Sogg],Args_vp,Adjs_vp,   
            LArgsV,Args,NewAdjs_vp),       
       !.

interp_imper([PrimoArg|LArgs],V,SN,LSP,CatV,LArgsV1,Args,NewAdjs_vp)
       :-
       interp_sogg_expl(SN,PrimoArg,Sogg),
       (LSP\=[],
         interp_sv_xx(CatV,V,LSP,LArgs,_,Args_vp,Adjs_vp,LArgsV);
         interp_sv_x(CatV,LSP,ListaAr,_,Args_vp,Adjs_vp) ),
        assemble_args_adjs(PrimoArg,LArgs,[Sogg],Args_vp,Adjs_vp,   
            LArgsV,Args,NewAdjs_vp),       
       !.

/* attiva transitiva con oggetto avverbiale */

interp_attiva_tr_avv(Verbo,PredV,
   LArgsV1,SN1,SN2,Ger,ListaSP,CatV,
   [Sogg,Ogg_avv,Y|Args_vp],NewAdjs_vp) 
   :-
   subcat_on([PrimoArg|LArgs], PredV),
   interp_avv1([PrimoArg|LArgs],
      Verbo,SN1,SN2,Ger,ListaSP,CatV,
      LArgsV1,[Sogg,Ogg_avv,Y|Args_vp],NewAdjs_vp).

interp_attiva_tr_avv(Verbo,PredV,
    LArgsV1,SN1,SN2,ListaSP,CatV,
    [Sogg,Ogg_avv|Args_vp],NewAdjs_vp) 
   :-
   subcat_on([PrimoArg|LArgs], PredV),
   interp_avv2([PrimoArg|LArgs],
    Verbo,SN1,SN2,ListaSP,CatV,
    LArgsV1,[Sogg,Ogg_avv|Args_vp],NewAdjs_vp).

interp_avv1([PrimoArg|LArgs],V,SN1,SN2,Ger,LSP,CatV,LArgsV,Argomenti,NewAdjs_vp) 
    :-
      Ger=gerundive(gerundive_coordinate(I,A,B)),
%      Gerun=gerundiva(I,A,B),
      interp_sogg(SN1,PrimoArg,Sogg),
      interp_sv_ogg_avv(SN2,LArgs,LArgs1,Ogg_avv),
      interp_comp_ger(gerundive_coordinate(I,A,B),LArgs1,_,Y,FContr/RContr),
      extract_controller([Sogg|Args_vp],FContr/RContr,Controllo),  
      interp_sv_x(CatV,LSP,ListaAr,NuovaLArgs,Args_vp,Adjs_vp), 
      Argomenti the_list [Sogg,Ogg_avv|Args_vp] && [Y],
      assemble_args_adjs(PrimoArg,LArgs,[Sogg,Ogg_avv],Args_vp,Adjs_vp,   
            LArgsV,_,NewAdjs_vp),       
      !.

interp_avv2([PrimoArg|LArgs],V,SN1,SN2,LSP,CatV,LArgsV, [Sogg,Ogg_avv|Args_vp],NewAdjs_vp) 
     :-
      interp_sogg(SN1,PrimoArg,Sogg),
      interp_sv_ogg_avv(SN2,LArgs,NuovaLArgs,Ogg_avv),
      discharge_pps(LSP,CatV,V,PrimoArg,LArgs,NLArgs,Args_vp,Adjs_vp,LArgsV), 
      Args = [Sogg,Ogg_avv|Args_vp],
      open_adjs(Args,Adjs_vp,NewAdjs_vp).  

interp_avv2([PrimoArg|LArgs],V,SN1,SN2,LSP,CatV,LArgsV,Args,NewAdjs_vp) 
      :-
       interp_sogg_posp(SN2,PrimoArg,Sogg),
       interp_ogg_prep(SN1,LArgs,NuovaLArgs,Ogg),
       interp_sv_x(CatV,LSP,NuovaLArgs,[],Args_vp,Adjs_vp),
      assemble_args_adjs(PrimoArg,LArgs,[Sogg,Ogg],Args_vp,Adjs_vp,   
            LArgsV,Args,NewAdjs_vp),       
      !.
/* ATTIVA TRANSITIVA */ 
/* questa è per le frasi idiomatiche */

interp_attiva_tr(Verbo,SuCatIn, SubCatOut, 
   SN1, SN2, ListaSP, CatV,Args_vp, NewAdjs_vp) 
   :-
   SuCatIn=pred_v(Verbo,CatGr,CatV,Args),
   select_subcat(idioms/ogg/form/_, SuCatIn, PredV),
   SN2=SN/Fun,
   trova_testa_SN(SN,Testa),
   subcat_on([PrimoArg|LArgs], PredV),
   on(idioms/ogg/form/Idiom,LArgs),
   on(Testa,Idiom),
   interpreta_attiva_tr([PrimoArg|LArgs],
      Verbo,SN1,SN2,ListaSP,CatV,SubCatOut,Args_vp,NewAdjs_vp). 

interp_attiva_tr(Verbo, SuCatIn, SubCatOut,
   SN1, SN2, ListaSP, CatV, Args_vp, NewAdjs_vp) 
   :-
   SuCatIn=pred_v(Verbo,CatGr,CatV,Args),
   subcat_on([PrimoArg|LArgs], SuCatIn),
   LArgs\=[idioms/ogg/_/_|_],
   interpreta_attiva_tr([PrimoArg|LArgs],
      Verbo,SN1,SN2,ListaSP,CatV,SubCatOut,Args_vp,NewAdjs_vp). 

interp_attiva_tr(Verbo, SuCatIn, SubCatOut,SN1, 
   ListaSP, CatV, Args_vp, NewAdjs_vp) 
   :-
   SuCatIn=pred_v(Verbo,CatGr,CatV,Args),
   subcat_on([PrimoArg|LArgs], SuCatIn),
   interpreta_attiva_tr([PrimoArg|LArgs],
      Verbo,SN1,[],ListaSP,CatV,SubCatOut,Args_vp,NewAdjs_vp). 

interp_attiva_tr_trenn(Verbo, Verbo1, SuCatIn, SubCatOut,
    SN1/sogg,SN2/ogg,Part, ListaSP, CatV,[Sogg, Ogg, X | Args_vp], NewAdjs_vp) 
   :-
   (subcat_on([PrimoArg|LArgs], SuCatIn),
    member(idioms/form/_, LArgs)
    ;
   Part=Trenn/form, 
   concatena(Verbo,Trenn,Verbo1),
   cat_gramm(Verbo1,CatGr,_,Arguments),
   subcat_on([PrimoArg|LArgs], Arguments),
    member(idioms/form/_, LArgs)
    ),
   interpreta_attiva_trenn([PrimoArg|LArgs],
      V,SN1/sogg,SN2/ogg,Part,ListaSP,CatV,
      SubCatOut,[Sogg, Ogg, X | Args_vp],
      NewAdjs_vp). 

interp_attiva_tr_ogg2(Verbo, Controllo,
   SuCatIn, SubCatOut,SN1/sogg,SN2/ogg2,SN3/ogg, ListaSP, CatV,
   [Sogg, Ogg, Ogg2 | Args_vp], NewAdjs_vp) 
   :-
   subcat_on([PrimoArg|LArgs], SuCatIn),
   interpreta_attiva_ogg2(Controllo,
      [PrimoArg|LArgs],
      Verbo,SN1/sogg,SN2/ogg2,SN3/ogg,ListaSP,CatV,
      SubCatOut,[Sogg, Ogg, Ogg2 | Args_vp],
      NewAdjs_vp). 

interp_attiva_tr_ogg2(Verbo, Controllo,
   SuCatIn, SubCatOut,SN1/sogg,SN2/F2,SN3/F3, ListaSP, CatV,
   Args, NewAdjs_vp) 
   :-
   subcat_on([PrimoArg|LArgs], SuCatIn),
   interpreta_attiva_ogg2(Controllo,[PrimoArg|LArgs],
      Verbo,SN1/sogg,SN2/F2,SN3/F3,ListaSP,CatV,
      SubCatOut,Args,NewAdjs_vp). 
 
interpreta_attiva_trenn([FArg|LArgs],V,SN1,SN2,Part,LSP,CatV,
      LArgsV,[Sogg, Ogg, X| Args_vp],NewAdjs_vp) 
   :-
   interp_nuclears(SN1,FArg,SN2,LArgs,NLArgs,Sogg,Ogg),
   interp_sv_part(Part,NLArgs,NLArgs1,P),
   interp_sv_x(CatV,LSP,NLArgs1,[],Args_vp,Adjs_vp),
   X=form(P),
   assemble_args_adjs(PArg,LArgs,[Sogg,Ogg],Args_vp,Adjs_vp,LArgsV,_,NewAdjs_vp).

interpreta_attiva_ogg2(_,[FArg|LArgs],V,SN1,SN2,SN3,
   LSP,CatV,LArgsV,Args,NewAdjs_vp)
   :-
   interp_nuclears(SN1,FArg,SN3,LArgs,NLArgs,Sogg,Ogg),
   interp_sv_ogg2(SN2,NLArgs,NLArgs1,Ogg2),
   interp_sv_x(CatV,LSP,NLArgs1,[],Args_vp,Adjs_vp),
   assemble_args_adjs(FArg,LArgs,[Sogg,Ogg,Ogg2],Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp).

interpreta_attiva_ogg2(_,[FArg|LArgs],V,SN1,SN2,SN3,LSP,CatV,LArgsV,Args,NewAdjs_vp)
   :-
   interp_nuclears(SN1,FArg,SN2,LArgs,NLArgs,Sogg,Ogg2),
   interp_sv_ogg2(SN3,NLArgs,NLArgs1,Ogg),
   interp_sv_x(CatV,LSP,NLArgs1,[],Args_vp,Adjs_vp),
   assemble_args_adjs(FArg,LArgs,[Sogg,Ogg,Ogg2],Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp).

interpreta_attiva_ogg2(Controllo,[FArg|LArgs],V,SN1,SN2,Comp,
   LSP,CatV,LArgsV,Argomenti,NewAdjs_vp)
   :-
   interp_nuclears(SN1,FArg,SN2,LArgs,NuovaLArgs,Sogg,Ogg),
   (interp_comp_inf(Comp,LArgs,NovaLArgs,Y,FContr/RContr),
    extract_controller([Sogg, Ogg],FContr/RContr,Controllo)
   ;
    interp_fcomp(Comp,LArgs,ListaAr,Y,LContr),!,
    nonpredic_contr(Comp,Modo,[Sogg|Args_vp],LContr)
   ),
   interp_sv_x(CatV,LSP,NovaLArgs1,[],Args_vp,Adjs_vp),
   Argomenti the_list [Sogg, Ogg|Args_vp] && [Y],
   assemble_args_adjs(FArg,LArgs,[Sogg,Ogg],Args_vp,Adjs_vp,LArgsV,_,NewAdjs_vp).

interpreta_attiva_ogg2(Controllo,[FArg|LArgs],V,SN1,Comp,SN2,
   LSP,CatV,LArgsV,Argomenti,NewAdjs_vp)
   :-
   interp_nuclears(SN1,FArg,SN2,LArgs,NuovaLArgs,Sogg,Ogg),
   (interp_comp_inf(Comp,LArgs,NovaLArgs,Y,FContr/RContr),
    extract_controller([Sogg, Ogg],FContr/RContr,Controllo)
   ;
    interp_fcomp(Comp,LArgs,ListaAr,Y,LContr),!,
    nonpredic_contr(Comp,Modo,[Sogg|Args_vp],LContr)
   ),
   interp_sv_x(CatV,LSP,NovaLArgs1,[],Args_vp,Adjs_vp),
   Argomenti the_list [Sogg, Ogg|Args_vp] && [Y],
   assemble_args_adjs(FArg,LArgs,[Sogg,Ogg],Args_vp,Adjs_vp,LArgsV,_,NewAdjs_vp).

interpreta_attiva_ogg2(Controllo,[FArg|LArgs],V,SN1,SN2,Comp,
   LSP,CatV,LArgsV,Argomenti,NewAdjs_vp)
   :-
   interp_sogg(SN1,FArg,Sogg),
   interp_sv_ogg2(SN2,LArgs,NLArgs,Ogg2),
   (interp_comp_inf(Comp,LArgs,NovaLArgs,Y,FContr/RContr),
    extract_controller([Sogg, Ogg2],FContr/RContr,Controllo)
   ;
    interp_fcomp(Comp,LArgs,ListaAr,Y,LContr),!,
    nonpredic_contr(Comp,Modo,[Sogg|Args_vp],LContr)
   ),
   interp_sv_x(CatV,LSP,NovaLArgs1,[],Args_vp,Adjs_vp),
   Argomenti the_list [Sogg, Ogg2|Args_vp] && [Y],
   assemble_args_adjs(FArg,LArgs,[Sogg,Ogg2],Args_vp,Adjs_vp,LArgsV,_,NewAdjs_vp).

interpreta_attiva_ogg2(Controllo,[FArg|LArgs],V,SN1,SN2,Comp,
   LSP,CatV,LArgsV,Argomenti,NewAdjs_vp)
   :-
   interp_sogg(SN1,FArg,Sogg),
   interp_sv_ogg2(Comp,LArgs,NLArgs,Ogg2),
   (interp_comp_inf(SN2,LArgs,NovaLArgs,Y,FContr/RContr),
    extract_controller([Sogg, Ogg2],FContr/RContr,Controllo)
   ;
    interp_fcomp(Comp,LArgs,ListaAr,Y,LContr),!,
    nonpredic_contr(Comp,Modo,[Sogg|Args_vp],LContr)
   ),
   interp_sv_x(CatV,LSP,NovaLArgs1,[],Args_vp,Adjs_vp),
   Argomenti the_list [Sogg, Ogg2|Args_vp] && [Y],
   assemble_args_adjs(FArg,LArgs,[Sogg,Ogg2],Args_vp,Adjs_vp,LArgsV,_,NewAdjs_vp).

interpreta_attiva_tr([FArg|LArgs],V,SN1,SN2,LSP,CatV,LArgsV,Args,NewAdjs_vp) 
  :-
   (SN1=[]/foc ; SN1=SN/foc),
   interp_sogg(SN2,FArg,Sogg),
   interp_sv_x(CatV,LSP,NLArgs,_,Args_vp,Adjs_vp),
   assemble_args_adjs(FArg,_,[Sogg],Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp).

interpreta_attiva_tr([FArg|LArgs],V,SN1,SN2,LSP,CatV,LArgsV,Args,NewAdjs_vp) 
   :-
   CatV \= risultato,
   LSP\=[], remove(sp(prep(Prep,cat(CatSP),Mod),SN), LSP, AltriSP),
   interp_sogg(SN1,FArg,Sogg),
   interp_sv_ogg_poss(SN2,LArgs,NLArgs,Ogg,Contr),
   interp_sv_rifl(CatV,[sp(prep(a,cat(CatSP),Mod),SN)|AltriSP],
      NLArgs,ListAr,AltrSP,[Ogg2|Args_vp],Adjs_vp,Contr),
   discharge_pps(LSP,CatV,V,FArg,ListAr,AltrSP,Args_vp,Adjs_vp,LArgsV),
   assemble_args_adjs(FArg,LArgs,[Sogg,Ogg,Ogg2],Args_vp,Adjs_vp,_,Args,NewAdjs_vp).


/* questa è per le frasi 'Gino ne costruiva molte' dove si deve generare un obl/tema */
interpreta_attiva_tr([FArg|LArgs],V,SN1,SN2,LSP,CatV,LArgsV,Args,NewAdjs_vp)
     :-
       gr(romance),
       interp_sogg(SN1,FArg,Sogg),
       interp_sv_ogg_ind(SN2,LArgs,NLArgs,Ogg,Contr,LCat,Gen),
       interp_sv_ana(CatV,LSP,NLArgs,[],Args_vp,Adjs_vp,Contr,LCat,Gen),
   assemble_args_adjs(FArg,LArgs,[Sogg,Ogg],Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp).

/* per le strutture attive inverse con soggetto vuoto */
interpreta_attiva_tr([FArg|LArgs],V,SN1,SN2,LSP,CatV,LArgsV,Args,NewAdjs_vp) 
      :-
       gr(romance),
       (CatV=perloc;CatV=dir_speech;CatV=riport_dir;CatV=ment_perloc),
       SN1=sn(indice(I), cat(Cats), pr(pro_picc, pro, _, P, G, N, Ca), 
            spec(def(+)), controllore(C))/_,
       interp_sogg_posp(SN2,FArg,Sogg),
       interp_sv_x(CatV,LSP,NLArgs,[],Args_vp,Adjs_vp),
   assemble_args_adjs(FArg,LArgs,[Sogg],Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp).

interpreta_attiva_tr([FArg|LArgs],V,SN1,SN2,LSP,CatV,LArgsV,Args,NewAdjs_vp) 
   :-
       gr(romance),
       SN1\= sn(indice(_),cat(_),cl(pro_imp,_,si,3,G,Num,[nom]),S, A, M, Ad)/F,
       interp_sogg(SN1,FArg,Sogg),
       interp_sv_ogg_poss(SN2,LArgs,NLArgs,Ogg,Contr),
       discharge_pps(LSP,CatV,V,FArg,LArgs,AltrSP,Args_vp,Adjs_vp,LArgsV),
       assemble_args_adjs(FArg,LArgs,[Sogg,Ogg],Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp).
 
interpreta_attiva_tr([FArg|LArgs],V,SN1,SN2,LSP,CatV,[FArg|LArgs],Args,NewAdjs_vp)
    :-
     interp_nuclears(SN1,FArg,SN2,LArgs,NLArgs,Sogg,Ogg),
     ditransitives(FArg,LArgs,NLArgs,[Sogg,Ogg],CatV,LSP,Args,NewAdjs_vp),!.

/* per gli oggetti partitivi */
interpreta_attiva_tr([FArg|LArgs],V,SN1,SN2,LSP,CatV,LArgsV,Args,NewAdjs_vp)
     :-
       gr(romance),
       SN2=[]/ogg, 
       LSP\=[],
       on(sp(prep(di,_,_),SN), LSP),
       elimina(sp(prep(di,_,_),SN),LSP,SP),
       interp_nuclears(SN1,FArg,SN/ogg,LArgs,NLArgs,Sogg,Ogg),
       interp_sv_x(CatV,SP,NLArgs,[],Args_vp,Adjs_vp),
   assemble_args_adjs(FArg,LArgs,[Sogg,Ogg],Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp).

/* per le strutture attive inverse */

interpreta_attiva_tr([FArg|LArgs],V,SN1,SN2,LSP,CatV,LArgsV,Args,NewAdjs_vp) 
      :-
       gr(romance),
       SN2\= sn(indice(_),cat(_),cl(rifl_corto,_,si,3,G,Num,C),S)/F,
       interp_sogg_posp(SN2,FArg,Sogg),
       interp_ogg_prep(SN1,LArgs,NLArgs,Ogg),
       interp_sv_x(CatV,LSP,NLArgs,[],Args_vp,Adjs_vp),
   assemble_args_adjs(FArg,LArgs,[Sogg,Ogg],Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp).

/* per le attive incoative */

interpreta_attiva_tr([FArg|LArgs],V,SN1,SN2,LSP,CatV,LArgsV,Args,NewAdjs_vp) 
    :-
       gr(romance),
       interp_sv_ogg(SN1,_,LArgs,NLArgs,Sogg),
       interp_sv_inc(CatV,LSP,NLArgs,_,Args_vp,Adjs_vp,Controllore),
   assemble_args_adjs(_,LArgs,[Sogg],Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp),
      !.

interpreta_attiva_tr([FArg|LArgs],V,SN1,SN2,LSP,CatV,LArgsV1,Args,NewAdjs_vp)
      :-
       interp_sv_ogg(SN1,_,LArgs,NuovaLArgs,Sogg),
       dis_obl_pps(LSP,CatV,V,FArg,LArgs,LArgsV1,Args_vp,Adjs_vp,LArgsV), 
       assemble_args_adjs(_,_,[Sogg],Args_vp,Adjs_vp,_,Args,NewAdjs_vp),
      !.

interpreta_attiva_tr([FArg|LArgs],V,SN1,SN2,LSP,CatV,LArgsV,Args,NewAdjs_vp):-
       gr(italiano),
       SN2=sn(indice(I), cat(Cats), pr(pro_picc, pro, _, P, G, N, Ca), 
            spec(def(+)), controllore(C))/foc,
       nonvar(C),
       SN0=sn(indice(I),cat(Cat),pr(vbl,vbl,_,P,G,_,acc),
                    controllore(C))/ogg,
       interp_sv_ogg(SN0,_,LArgs,NuovaLArgs,Ogg),
       interp_sogg(SN1,FArg,Sogg),
       interp_sv_x(CatV,LSP,LisArgs,_,Args_vp,Adjs_vp),
   assemble_args_adjs(FArg,_,[Sogg,Ogg],Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp),
      !.

interpreta_attiva_tr([FArg|LArgs],V,SN1,SN2,LSP,CatV,LArgsV,Args,NewAdjs_vp)
      :-
       gr(italiano),
       SN1=sn(indice(I), cat(Cats), pr(pro_picc, pro, _, P, G, N, Ca), 
            spec(def(+)), controllore(C))/_,
       nonvar(C),
       SN0=sn(indice(I),cat(Cat),pr(vbl,vbl,_,P,G,N,acc),
                    controllore(C))/ogg,
       interp_sv_ogg(SN0,_,LArgs,NLArgs,Ogg),
       gen_sym(sn,Simb),
       (SN2=[],
       SN=sn(indice(Simb), cat(Categ), pr(pro_picc, pro, _, 3, G1, sing, nom), 
            spec(def(+)), controllore(SimbCont))/sogg
       ;
        SN2\=[],
        SN=SN2),
       interp_sogg(SN,FArg,Sogg),
       interp_sv_x(CatV,LSP,NLArgs,_,Args_vp,Adjs_vp),
   assemble_args_adjs(FArg,_,[Sogg,Ogg],Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp),
      !.

interpreta_attiva_tr([FArg|LArgs],V,SN1,SN2,LSP,CatV,LArgsV,Args,NewAdjs_vp)
      :-
       interp_sogg(SN1,FArg,Sogg),
       dis_obl_pps(LSP,CatV,V,FArg,LArgs,LArgsV,Args_vp,Adjs_vp,LArgsV), 
       assemble_args_adjs(_,_,[Sogg],Args_vp,Adjs_vp,_,Args,NewAdjs_vp),
      !.

interpreta_attiva_tr([FArg|LArgs],V,SN1,LSP,CatV,LArgsV,Args,NewAdjs_vp) :-
       gr(romance),
%       SN1=_/topic,
       interp_sv_ogg(SN1,_,LArgs,NLArgs,Sogg),
       dis_obl_pps(LSP,CatV,V,FArg,LArgs,LArgsV,Args_vp,Adjs_vp,LArgsV),
       assemble_args_adjs(_,_,[Sogg],Args_vp,Adjs_vp,_,Args,NewAdjs_vp),
       !.


ditransitives(FArg,LArgs,NLArgs,[Sogg,Ogg],CatV,LSP,Args,NewAdjs_vp):-
       CatV = risultato,
       interp_sv_inc(CatV,LSP,NLArgs,_,Args_vp,Adjs_vp,Controllore),
       assemble_args_adjs(FArg,LArgs,[Sogg,Ogg],
                           Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp),!.

ditransitives(FArg,LArgs,NLArgs,[Sogg,Ogg],CatV,LSP,Args,NewAdjs_vp):-
       member(sp/obl/locativo/ListP/ListaC,NLArgs),
       !,
       NLArgs\=[], 
       LSP\=[],
       dis_obl_pps(LSP,CatV,V,FArg,LArgs,NLArgs,Args_vp,Adjs_vp,LArgsV), 
       assemble_args_adjs(FArg,LArgs,[Sogg,Ogg],Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp),
       !.

ditransitives(FArg,LArgs,NLArgs,[Sogg,Ogg],CatV,LSP,Args,NewAdjs_vp):-
       LSP\=[],
       dis_obl_pps(LSP,CatV,V,FArg,LArgs,NLArgs,Args_vp,Adjs_vp,LArgsV), 
       assemble_args_adjs(FArg,LArgs,[Sogg,Ogg],Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp),
       !.

ditransitives(FArg,LArgs,NLArgs,[Sogg,Ogg],CatV,LSP,Args,NewAdjs_vp):-
       interp_sv_x(CatV,LSP,NLArgs,[],Args_vp,Adjs_vp),
       LArgsV=[FArg|LArgs],
       assemble_args_adjs(FArg,LArgs,[Sogg,Ogg],Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp),
       !.


/*    CALCTEMPI5.PL   --   ott 91 */
/* file: CALCTEMPI5.PL   */

/****************
Calcola le relazioni di Reichenbach
   
   td = tempo del discorso
   tr = tempo di riferimento
   tes = tempo dell' evento o dello stato

   rel1 : td - tr
   rel2 : tr - tes
 
  N.B. il calcolo viene fatto solo per la frase principale,
       infinitive, completive e alcuno casi di subordinazione.
       Coordinate e relative vengono trattate
       come frasi principali indipendenti.


  Per poter utilizzare l'algoritmo di Allen vengono stabiliti
  dei reference intervals associati alla frase.
  Ad ogni frase principale viene associato come reference
  interval il suo TR. Ad ogni infinitiva, completiva o
  subordinata viene associato il tr della principale.
*******************/

/****************
Versione per memorizzare nella f-struttura le relazioni di Reichenbach


     per le varie frasi vengono memorizzati 
     i seguenti attributi:
    
     principale: rel1
                 rel2
                 relavv relazione indotta dall'avverbio
                 definitezza
     infinitiva: reltes (relazione fra tes matrice e infinitiva) 
                 definitezza 
     completiva: rel1
                 rel2
                 relavv
                 definitezza
                 reltr  (relazione fra i tr matr. e comp.)
     subordinata:rel1
                 rel2
                 relavv
                 definitezza
                 reltr  (relazione fra i tr matr. e comp.)
                 reltes (relazione fra i tes matr. e comp.)
  
    
      

il predicato principale e':

     calcola_tempi(Rete) (chiamato da gengraf)

N.B. solo la prima soluzione viene utilizzata !!!!!!!!
*******************/

/**************
• calcola_tempi(+rete).
• PREDICATO PRINCIPALE: 
trova tutti i nodo da cui parte una frase (hanno il tempo)
ed effettua il calcolo per ogni frase principale
e successivamente per ogni frase relativa •
***************/
 
calcola_tempi(Rete):-
  bagof(N1, N2 ^ arco(N1,N2,tempo,Rete), Nodi),
  calcola_tempi_princ(Nodi,Rete),
  calcola_tempi_relat(Nodi,Rete),
  !.

calcola_tempi_princ([],_).

calcola_tempi_princ([Nodo|Nodi],Rete):-
  is_principale(Nodo,Rete),
  calcola_tempo_princ(Nodo,Rete),
  !,
  calcola_tempi_princ(Nodi,Rete).

calcola_tempi_princ([_|Nodi],Rete):-
  calcola_tempi_princ(Nodi,Rete).

/**************
• calcola_tempi_relat(+nodi, +rete).
• Prende in input una lista di nodi di frase ed
esegue il calcolo per le frasi relative •
***************/

calcola_tempi_relat([],_).

calcola_tempi_relat([Nodo|Nodi],Rete):-
  is_relativa(Nodo,Rete),
  calcola_tempo_relat(Nodo,Rete),
  !,
  calcola_tempi_relat(Nodi, Rete).

calcola_tempi_relat([_|Nodi],Rete):-
  calcola_tempi_relat(Nodi,Rete).

/**************
• calcola_tempo_princ(+nodo, +rete).
• Calcolo per una frase principale.
Infinitive, completive e subordinate
vengono calcolate all'interno delle rispettive principali •
***************/
calcola_tempo_princ(Nodo,Rete):- 
  calcola_tempo(Nodo,_,_,R),
  w_ref_int(Nodo),
  !.

/**************
• w_ref_int(+nodo).
• Registra nella rete il reference interval della frase •
***************/

w_ref_int(Nodo):-
  rete(Rete), 
  nodo(Nodo)::indice::Ind1,
  concatena(Ind1,Rete,Ind), 
  w_ramo(Nodo,ref_int,[tr(Ind)],Rete).

/**************
• calcola_tempo_relat(+nodo, +rete).
• Tempo di una frase relativa •
***************/
/* la tratta come indipendente */
calcola_tempo_relat(Nodo,Rete):-
  calcola_tempo_princ(Nodo,Rete).


/* 
Cerca di legarla alla principale e usa come reference interval quello della frase principale
*/
calcola_tempo_relat(Nodo,Rete):-
  calcola_tempo(Nodo,Rel1,_,R),
  rete(Rete), 
  trova_nodo_principale(Nodo,NodoPrinc,Rete),
  nodo(NodoPrinc)::indice::Ind1,
  concatena(Ind1,Rete,IndPrinc), 
  w_arco(Nodo,N1,ref_int,Rete),
  w_foglia(N1,[tr(IndPrinc)],Rete),
  nodo(NodoPrinc)::rel1::[Rel1Princ],
  lega_tr_princ_rel(Nodo,Rel1,Rel1Princ,Rete), 
  nl,
  write(R),
  nl,nl,
  !.

/*****************
• lega_tr_princ_rel(
     +nodo, +trel_1_relat, +trel_1_princ, +rete).
• Lega i tr di frase principale e relativa.
Se le trel_1 coincidono pone i TR uguali altrimenti
non fa nulla. •
???????????????? */

lega_tr_princ_rel(Nodo,td(Ind)=tr(Ind),td(IndPr)=tr(IndPr),Rete):-
  w_arco(Nodo,NN,reltr,Rete),
  w_foglia(NN,[tr(Ind)=tr(IndPr)],Rete),
  !.

lega_tr_princ_rel(Nodo,tr(Ind) aftr td(Ind),tr(IndPr) aftr td(IndPr),Rete):-
  w_arco(Nodo,NN,reltr,Rete),
  w_foglia(NN,[tr(Ind)=tr(IndPr)],Rete),
  !.

lega_tr_princ_rel(Nodo,td(Ind) aftr tr(Ind),td(IndPr) aftr tr(IndPr),Rete):-
  w_arco(Nodo,NN,reltr,Rete),
  w_foglia(NN,[tr(Ind)=tr(IndPr)],Rete),
  !.

lega_tr_princ_rel(_,_,_,_).


/************* 
• trova_nodo_principale(+currentNode,-mainNode, +rete).
• partendo da un nodo currentNode si risale al nodo mainNode
relativo alla frase principale in cui currentNode è contenuto
*************/

trova_nodo_principale(N,N,Rete):- 
  is_principale(N,Rete).

trova_nodo_principale(N1,N2,Rete) :-
  arco(NN,N1,_,Rete),
  trova_nodo_principale(NN,N2,Rete).


/*******************
• 
calcola_tempo(+nodo, 
   -trel_1, -trel_2, -altre_relazioni).
•
Calcolo per una frase generica (di modo finito):
1. Determina trel_1_base a partire dal tempo
2. Determina trel_2_base a partire da trel_1_base, tempo, stato/evento            
3. Ricalcola le relazioni tenendo conto dei modificatori temporali
4. Calcolo per complementi frasali (completive e infinitive)
5. Calcolo subordinate (come aggiunti)
6. Calcolo definitezza
• 
*******************/

recuperaIndici(Nodo, Rete, Ind1, Ind, Tempo, Modo, Aspetto):-
  rete(Rete),
  nodo(Nodo)::indice::Ind1,
  concatena(Ind1,Rete,Ind),
  nodo(Nodo)::tempo::Tempo,
  nodo(Nodo)::modo::Modo,
  nodo(Nodo)::aspetto::Aspetto,
  !.
  
calcola_tempo(Nodo,Rel1,Rel2,Relazioni):-
  recuperaIndici(Nodo, Rete, Ind1, Ind, Tempo, Modo, Aspetto),
  trel_1(Ind,Modo,Tempo,Rel1Base),
  stato_evento(Aspetto,StatEv),
  trel_2(Ind,Tempo,StatEv,Rel1Base,Rel2Base),
  modificatori_temporali(Nodo,AdvNode/Tipo),
  avverbio(Ind,AdvNode/Tipo,Rel1Base,Rel2Base,Rel1,Rel2,RelAvv,PresStorico),
  calcola_complementi(Ind,Nodo,Rel1,RelComp),
  calcola_subordinate(Pred,Ind,Nodo,StatEv,Rel2,RelSub),
  calcola_definitezza(Pred,Modo,Aspetto,Rel2,Definitezza),
  eventuality(Aspetto,Rel2,AdvNode,Eventuality),
  Relazioni the_list [Rel1, Rel2] && RelAvv && 
     [definitezza(Ind, Definitezza)] && RelComp && RelSub,
  w_ramo(Nodo,rel1,[Rel1],Rete),
  w_ramo(Nodo,rel2,[Rel2],Rete),
  w_relavv(Nodo,RelAvv,Rete),
  w_ramo(Nodo,definitezza,Definitezza,Rete).

w_relavv(_,[],_):-
  !.

w_relavv(Nodo,RelAvv,Rete):-
  w_ramo(Nodo,relavv,RelAvv,Rete).


/* calcola se stato o evento dall' aspetto */

stato_evento(StatoEvento,stato):-
   stati(Stati),
   member(StatoEvento, Stati).
stato_evento(StatoEvento,evento):-
   eventi(Eventi),
   member(StatoEvento, Eventi).

stati([stato,
esistenza,
emotivo,
affettivo,
percettivo,
soggettivo,
presuppositivo,
ment_perloc,
ment_act,
attivita,
achiev_it]).

eventi([camb_attiv,
riport_dir,
risult_proc,
risultato,
ist_soc,
dir_speech,
achievirr,
achiev,
cambiamento,
perloc,
accomp,
achiev_tr]).

/*************** 
• trel_1(+timeIndex, +mood, +time, -trel_1).
• Calcola rel1 solo sulla base del tempo, senza tenere conto dei modificatori temporali •
***************/

trel_1(F,ind,pres,td(F)=tr(F)).               
trel_1(F,inf,pres,td(F)=tr(F)).               
trel_1(F,ger,pres,td(F)=tr(F)).               
trel_1(F,ind,pres,diverso(td(F),tr(F))).       
trel_1(F,ind,pres_progr,td(F)=tr(F)).     
trel_1(F,ind,pass_pross,tr(F) aftr td(F)).
trel_1(F,ind,pass_pross,td(F)=tr(F)).
trel_1(F,ind,imp,tr(F) aftr td(F)).
trel_1(F,ind,imp_progr,tr(F) aftr td(F)).
trel_1(F,ind,trap_pross,tr(F) aftr td(F)).
trel_1(F,ind,pass_rem,tr(F) aftr td(F)).
trel_1(F,cond,past,td(F) aftr tr(F)).
trel_1(F,cond,pres,td(F) aftr tr(F)).
trel_1(F,cond,trap_pross,tr(F) aftr td(F)).
trel_1(F,cong,pres,td(F)=tr(F)).
trel_1(F,ind,past,tr(F) aftr td(F)).
trel_1(F,ind,trap_rem,tr(F) aftr td(F)).
trel_1(F,ind,futuro,td(F) aftr tr(F)).
trel_1(F,ind,futuro_progr,td(F) aftr tr(F)).
trel_1(F,ind,futuro_ant,td(F) aftr tr(F)).
trel_1(F,imperat,pres,td(F)=tr(F)).


/* calcola rel2 senza tenere conto dei modificatori temporali */

trel_2(F,Tempo,_Aspetto,StatEv,Rel1,Rel2):-
  trel_2(F,Tempo,StatEv,Rel1,Rel2).
trel_2(F,pres_progr,achiev_tr,evento,_,prec_imm(tr(F),tes(F))).
trel_2(F,imp_progr,achiev_tr,evento,_,prec_imm(tr(F),tes(F))).
trel_2(F,imp_progr,accomp,evento,_,prec_imm(tr(F),tes(F))).
trel_2(F,imp_progr,stato,_,incluso(tr(F),tes(F))).
trel_2(F,pres,_,td(F)=tr(F),incluso(tr(F),tes(F))).
trel_2(F,pres,evento,td(F)=tr(F),prec_imm(tr(F),tes(F))).
trel_2(F,pres,_,diverso(td(F),tr(F)),contemporaneo(tr(F),tes(F))).
trel_2(F,pres_progr,evento,_,incluso(tr(F),tes(F))).
trel_2(F,pass_pross,_,tr(F) aftr td(F),tr(F)=tes(F)).
trel_2(F,pass_pross,_,td(F)=tr(F),tes(F) aftr tr(F)).
trel_2(F,imp,_,_,incluso(tr(F),tes(F))).
trel_2(F,imp,evento,_,prec_imm(tr(F),tes(F))).
trel_2(F,imp_progr,evento,_,incluso(tr(F),tes(F))).
trel_2(F,trap_pross,_,_,tes(F) aftr tr(F)).
trel_2(F,pass_rem,_,_,tr(F)=tes(F)).
trel_2(F,past,_,_,tr(F)=tes(F)).
trel_2(F,pass_rem,evento,_,prec_imm(tr(F),tes(F))).
trel_2(F,trap_rem,evento,_,prec_imm(tes(F),tr(F))).
trel_2(F,futuro,_,_,tr(F)=tes(F)).
trel_2(F,futuro,evento,_,prec_imm(tr(F),tes(F))).
trel_2(F,futuro,stato,_,incluso(tr(F),tes(F))).
trel_2(F,futuro_progr,evento,_,incluso(tr(F),tes(F))).
trel_2(F,futuro_ant,_,_,tes(F) aftr tr(F)).

trel_2(F,pres,evento,td(F) aftr tr(F),incluso(tr(F),tes(F))):-
  genre(legal),
  !.


/******************
• modificatori_temporali(+nodo,-adverbNode/-type).
• Cerca modificatori temporali (ne prende solo 1) •  
*******************/

modificatori_temporali(Nodo,AdvNode/Tipo) :-
  nodo(Nodo)::adjs::adj/Tipo::nodo(AdvNode),
  member(Tipo,[deittico,durata,clock_cal,frequenza,temporale]).

modificatori_temporali(Nodo,AdvNode/Tipo):-
  nodo(Nodo)::adjs::avv::nodo(AdvNode),
  nodo(Nodo)::adjs::avv::tipo::Tipo,
  member(Tipo,[deittico,durata,clock_cal,frequenza]).

modificatori_temporali(_,0/_) .


/*************
• avverbio(
   +timeIndex, +adverbNode/+type, +trel_1_base, +trel_2_base, 
   -trel_1, -trel_2, -adverbialRels, -preenteStorico).
• L'informazione sul presente storico forse va memorizzata • 
*************/

avverbio(F,0/_,Rel1,Rel2,Rel1,Rel2,[],improbabile):- 
  Rel1 = diverso(td(F), tr(F)),
  Rel2 = contemporaneo(tr(F),tes(F)),
  !. 

avverbio(_,0/_,Rel1,Rel2,Rel1,Rel2,[],nil):-
  !.

avverbio(F,AdvNode/Tipo,Rel1Base,Rel2Base,Rel1,Rel2,[RelAvv],PresStor):-
  esamina_mod_temp(AdvNode/Tipo,Testa,Config,Duraz),
  avverbio1(F,Tipo,Config,Duraz,Rel1Base,Rel2Base,Rel1,Rel2,PresStor),
  trel_avv(F,Testa,Tipo,Duraz,RelAvv).


/**************
• esamina_mod_temp(
   +advNode/+type, 
   -adverbialPred, -config,-duraz). ••
**************/   

esamina_mod_temp(AdvNode/deittico,Testa,Config,Duraz):-
  nodo(AdvNode)::config::Config,
  nodo(AdvNode)::duraz::Duraz,
  nodo(AdvNode)::pred_avv::Testa.

esamina_mod_temp(AdvNode/deittico,Testa,Config,Duraz):-
  nodo(AdvNode)::config::Config,
  nodo(AdvNode)::duraz::Duraz,
  nodo(AdvNode)::pred::Testa.

esamina_mod_temp(NAvv/deittico,Testa,Config,Duraz):-
  nodo(NAvv)::F/R::spec::config::Config,
  nodo(NAvv)::F/R::spec::duraz::Duraz,
  nodo(NAvv)::F/R::pred::Testa.

esamina_mod_temp(AdvNode/clock_cal,Testa,_,Duraz):-
  nodo(AdvNode)::duraz::Duraz,
  nodo(AdvNode)::pred_avv::Testa.

esamina_mod_temp(AdvNode/clock_cal,Testa,_,punt):-
  nodo(AdvNode)::sem_mark::a,
  nodo(AdvNode)::ogg/_::nodo(N),
  nodo(N)::pred::Testa.

esamina_mod_temp(AdvNode/temporale,Testa,_,punt):-
  nodo(AdvNode)::sem_mark::verso, 
  nodo(AdvNode)::ogg/_::nodo(N),
  nodo(N)::pred::Testa.

esamina_mod_temp(AdvNode/durata,Testa,_,non_punt):-
  nodo(AdvNode)::pred::per,
  nodo(AdvNode)::ogg/_::nodo(N),
  nodo(N)::pred::Unita,
  (nodo(N)::spec::card::Card,
   Testa = Card/Unita,
   !
   ;
   Testa = Unita).
 
esamina_mod_temp(AdvNode/frequenza,Testa,_,Duraz):-
  nodo(AdvNode)::duraz::Duraz,
  nodo(AdvNode)::pred_avv::Testa.


/**************
• avverbio1(
   +timeIndex, +tipo, +config, +duraz, +rel1Base, +rel2Base,
   -rel1, -rel2, -presStor).
••
**************/

avverbio1(_,Tipo,Config,_,Rel1Base,Rel2Base,_,_,_):- 
  esclude(Tipo,Config,Rel1Base,Rel2Base).

avverbio1(_,Tipo, Config, Duraz, Rel1Base, Rel2Base,Rel1, Rel2, nil):-
  tab_avv(Tipo,Config,Duraz,Rel1Base,Rel2Base,Rel1,Rel2).

avverbio1(F,Tipo,Config,Duraz,Rel1,Rel2,Rel1,Rel2,PresStor):-
  \+ tab_avv(Tipo,Config,Duraz,Rel1,Rel2,_,_),
  presente_storico(Tipo,Config,Rel1,Rel2,F,PresStor).

presente_storico(Tipo,_,Rel1,Rel2,F,improbabile):-
  member(Tipo,[durata,frequenza]),
  Rel1 = diverso(td(F),tr(F)),
  Rel2 = contemporaneo(tr(F),tes(F)),
  !.

presente_storico(deittico,[tr aftr td],Rel1,Rel2,F,probabile):-
  Rel1 = diverso(td(F),tr(F)),
  Rel2 = contemporaneo(tr(F),tes(F)),
  !.

presente_storico(_,_,_,_,_,nil).
                          
/*********
• trel_avv(
   +timeIndex, +advPred, +advType, +duraz,
    -trel_avv)
••
*********/

trel_avv(F,Testa,temporale,punt,tr(F)=Testa).
trel_avv(F,Testa,deittico,punt,tr(F)=Testa).
trel_avv(F,Testa,deittico,non_punt,incluso(tr(F),Testa)).
trel_avv(F,Testa,clock_cal,punt,tr(F)=Testa).
trel_avv(F,Testa,clock_cal,non_punt,incluso(tr(F),Testa)).
trel_avv(F,Testa,durata,non_punt,dura(tr(F),Testa)).
trel_avv(F,Testa,frequenza,iterato,iterato(te(F),Testa)).
trel_avv(F,Testa,frequenza,intervallato,intervallato(te(F),Testa)).
 
esclude(deittico,[tr aftr td],td(_) aftr tr(_),_).
esclude(deittico,[tr aftr td],td(_)=tr(_),_).
esclude(deittico,[td aftr tr],tr(_) aftr td(_),_).
esclude(clock_cal,[_],td(_)=tr(_),tr(_) aftr tes(_)).
esclude(clock_cal,[_],td(_)=tr(_),prec_imm(tr(_),tes(_))).


/**************
• 
tab_avv(
   +adverbType, +config, +duraz, 
   +trel_1_base, +trel_2_base, 
   -trel_1, -trel_2).
••
***************/

tab_avv(deittico,[tr aftr td],_,tr(F) aftr td(F),tes(F) aftr tr(F),tr(F) aftr td(F),tr(F)=tes(F)).
tab_avv(deittico,[tr aftr td],_,tr(F) aftr td(F),tes(F) aftr tr(F),tr(F) aftr td(F),tes(F) aftr tr(F)).
tab_avv(deittico,[td aftr tr],_,td(F) aftr tr(F),tes(F) aftr tr(F),td(F) aftr tr(F),incluso(tes(F),tr(F))).
tab_avv(deittico,[td aftr tr],_,td(F) aftr tr(F),tes(F) aftr tr(F),td(F) aftr tr(F),tes(F) aftr tr(F)).
tab_avv(deittico,[td aftr tr],_,td(F)=tr(F),incluso(tr(F),tes(F)),td(F) aftr tr(F),
  incluso(tr(F),tes(F))).
tab_avv(deittico,[td aftr tr],_,td(F)=tr(F),incluso(tr(F),tes(F)),td(F) aftr tr(F),tr(F)=tes(F)).
tab_avv(deittico,[td=tr],non_punt,tr(F) aftr td(F),tes(F) aftr tr(F),tr(F) aftr td(F),tr(F)=tes(F)).
tab_avv(deittico,[td=tr],non_punt,td(F) aftr tr(F),incluso(tr(F),tes(F)),td(F) aftr tr(F),
  incluso(tr(F),tes(F))).
tab_avv(deittico,[td=tr],non_punt,td(F)=tr(F),tes(F) aftr tr(F),tr(F) aftr td(F),tr(F)=tes(F)).
tab_avv(deittico,[td=tr],punt,td(F)=tr(F),incluso(tr(F),tes(F)),td(F)=tr(F),
  prec_imm(tes(F),tr(F))).
tab_avv(deittico,[td=tr],punt,td(F)=tr(F),tes(F) aftr tr(F),td(F)=tr(F),tes(F) aftr tr(F)).
tab_avv(deittico,[td=tr],punt,td(F) aftr tr(F),tr(F)=tes(F),td(F)=tr(F),tr(F) aftr tes(F)).
tab_avv(clock_cal,[tr aftr td],_,tr(F) aftr td(F),Rel2,tr(F) aftr td(F),Rel2).
tab_avv(clock_cal,[td aftr tr],_,td(F) aftr tr(F),Rel2,td(F) aftr tr(F),Rel2).
tab_avv(clock_cal,[td aftr tr],_,td(F)=tr(F),incluso(tr(F),tes(F)),td(F) aftr tr(F),
  incluso(tr(F),tes(F))).
tab_avv(clock_cal,[td aftr tr],_,td(F)=tr(F),incluso(tr(F),tes(F)),td(F) aftr tr(F),tr(F)=tes(F)).               


/*******************
• calcola_complementi(
   +matrixTimeIndex, +matrixNode, +matrixTrel_1, 
   -complementTrel).
• Calcolo per i complementi frasali •
*******************/

calcola_complementi(Fmat,N,Rel1Mat,RelComp):- 
  nodo(N)::fcomp/_::nodo(Nfcomp),
  !,
  calcola_completiva(Fmat,Nfcomp,Rel1Mat,RelComp).

calcola_complementi(Fmat,N,_Rel1Mat,RelInf):- 
  nodo(N)::vcomp/_::nodo(Nvcomp),
  calcola_infinitiva(Fmat,Nvcomp,RelInf),!.

calcola_complementi(_Fmat,_N,_,[]) .

/* calcolo per l'infinitiva , a seconda del controllo,aspetto,tempo,
  la relazione fra i due tes  */

calcola_infinitiva(Fmat,Ninf,Relazioni_Inf):-
  rete(Rete),
  nodo(Ninf)::indice::Finf1,
  concatena(Finf1,Rete,Finf),
  nodo(Ninf)::sogg/_::controllore::Ncontr,
  nodo(_N) :: Contr/_ :: indice :: Ncontr,
  nodo(Ninf)::tempo::Tinf,
  nodo(Ninf)::aspetto::AspettoInf,
  stato_evento(AspettoInf,StatEvInf),
  tab_inf(Fmat,Finf,Tinf,StatEvInf,Contr,RelInf),
  tab_def_inf(Fmat,Finf,AspettoInf,RelInf,DefInf),
  Relazioni_Inf the_list [RelInf] && [definitezza(Finf,DefInf)],
  w_ramo(Ninf,reltes,[RelInf],Rete),
  w_ramo(Ninf,definitezza,DefInf,Rete),
  w_ramo(Ninf,ref_int,[tr(Fmat)],Rete).
      

/* tabella tempi infinitiva */
tab_inf(Fmat,Finf,pres,_Aspetto,ogg,tes(Fmat) aftr tes(Finf)).
tab_inf(Fmat,Finf,pres,_Aspetto,ogg2,tes(Fmat) aftr tes(Finf)).
tab_inf(Fmat,Finf,pres,_,sogg,tes(Fmat)=tes(Finf)).
tab_inf(Fmat,Finf,pres,evento,sogg,tes(Fmat) aftr tes(Finf)).
tab_inf(Fmat,Finf,pass_pross,_,sogg,tes(Finf) aftr tes(Fmat)).
tab_inf(Fmat,Finf,pass,_,sogg,tes(Finf) aftr tes(Fmat)).
tab_inf(_Fmat,_Finf,pass,_,ogg2,[]):- 
  write('infinitiva e il controllo sono incompatibili').

/* calcolo per completiva :     
        calcola una relazione fra i tr di matrice e completiva*/
 /* il ref-int e' quello della frase princ. */

calcola_completiva(Fmat,Nfcomp,Rel1Mat,Relazioni_Comp):- 
  rete(Rete),
  calcola_tempo(Nfcomp,Rel1Comp,Rel2Comp,Relazioni),
  nodo(Nfcomp)::aspetto::AspettoComp,
  nodo(Nfcomp)::indice::Fcomp1,
  concatena(Fcomp1,Rete,Fcomp),
  tempo(Rel1Mat,Tmat),
  tempo(Rel1Comp,Tcomp), 
  tab_comp(Fmat,Fcomp,Tmat,Tcomp,Rel1Comp,Rel2Comp,AspettoComp,RelComp),
  Relazioni_Comp the_list Relazioni && [RelComp],
  w_ramo(Nfcomp,reltr,[RelComp],Rete),
  w_ramo(Nfcomp,ref_int,[tr(Fmat)],Rete).

/*****************
• tempo(+trel2, -tempo).
• Tabella usata da completiva.
Dalla relazione rel2 ricalcola i tempi • 
*****************/

tempo(td(_)=tr(_),pres).
/* tempo(incluso(td(_),tr(_)),pres).  */
tempo(td(_) aftr tr(_),futuro).
tempo(tr(_) aftr td(_),pass).
tempo(td(_) aftr tr(_),pass).
tempo(diverso(td(_),tr(_)),pres_stor).


/*************
• tab_comp(
      +matrixTimeIndex, +fcompTimeIndex, +matrixTime, +compTime, 
      +compTrel1, +compTrel2, +compAspect, -compTrel).
• Tabella tempi completiva •
***************/

tab_comp(_,Fcomp,_,_,td(Fcomp)=tr(Fcomp),incluso(tr(Fcomp),tes(Fcomp)),
                              attivita,azione_abitudinaria(Fcomp)).
tab_comp(Fmat,Fcomp,pres,pres,_,_,_,tr(Fmat)=tr(Fcomp)).
tab_comp(Fmat,Fcomp,pres,pass,_,_,_,tr(Fcomp) aftr tr(Fmat)).
tab_comp(Fmat,Fcomp,pres,futuro,_,_,_,tr(Fmat) aftr tr(Fcomp)).
tab_comp(Fmat,Fcomp,pass,pres,_,_,_,tr(Fmat) aftr tr(Fcomp)).
tab_comp(Fmat,Fcomp,pass,pass,_,_,_,tr(Fmat) aftr tr(Fcomp)).
tab_comp(Fmat,Fcomp,pass,pass,_,_,_,tr(Fcomp) aftr tr(Fmat)).
tab_comp(Fmat,Fcomp,pass,futuro,_,_,_,tr(Fmat) aftr tr(Fcomp)).
tab_comp(Fmat,Fcomp,futuro,pres,_,_,_,tr(Fmat)=tr(Fcomp)).
tab_comp(Fmat,Fcomp,futuro,pass,_,_,_,tr(Fmat)=tr(Fcomp)).
tab_comp(Fmat,Fcomp,futuro,futuro,_,_,_,tr(Fmat)=tr(Fcomp)). 
tab_comp(Fmat,Fcomp,_,pres_stor,_,_,_,diverso(tr(Fmat),tr(Fcomp))).


/* calcolo per le subordinate */

calcola_subordinate_multiple([],_,_,_,_,_,[]).

calcola_subordinate_multiple([AdjNode|AdjNodes],Subord,Fmat,N,StatEvMat,
   Rel2Mat,Relazioni_Sub):-
  calcola_tempo_sub(Subord,AdjNode,_R1,R2,Relazioni),
  rete(Rete),
  calcola_relazioni(AdjNode,Rete,Fmat,Subord,StatEvMat,Rel2Mat,R2,Relazioni,RelSub),
  calcola_subordinate_multiple(AdjNodes,Subord,Fmat,N,StatEvMat,Rel2Mat,RelsSub),
  append(RelSub,RelsSub,Relazioni_Sub).

calcola_subordinate(Subord,Fmat,N,StatEvMat,Rel2Mat,Relazioni_Sub):-
  rete(Rete),
  (nodo(N)::adj::nodo(N1);
   nodo(N)::adjs::adj::nodo(N1)),
  nodo(N1)::sub / prop::nodo(Nsub),
  !,
  nodo(N1)::sem_mark::Subord, /* pred -> sem_mark */
  calcola_tempo_sub(Subord,Nsub,_R1,R2,Relazioni),
  calcola_relazioni(Nsub,Rete,Fmat,Subord,StatEvMat,Rel2Mat,R2,Relazioni,Relazioni_Sub).

calcola_subordinate(Subord,Fmat,N,StatEvMat,Rel2Mat,Relazioni_Sub):-
  (N=n1
   ;
   nodo(n1)::FR::nodo(N)),
  nodo(n1)::adj::nodo(N1), 
  (nodo(N1)::sub/prop::adj::sem_mark::Subord;
   nodo(N1)::sem_mark::Subord),
  !,
  findall(AdjNode,adj_node(N1,AdjNode),AdjNodes),
  calcola_subordinate_multiple(AdjNodes,Subord,Fmat,n1,StatEvMat,Rel2Mat,Relazioni_Sub).

calcola_subordinate(_,_,_,_,_,[]) .


calcola_relazioni(Nsub,Rete,Fmat,Subord,StatEvMat,Rel2Mat,R2,Relazioni,Relazioni_Sub):-
  nodo(Nsub)::indice::Fsub1,
  concatena(Fsub1,Rete,Fsub),
  tab_sub(Fmat,Fsub,Subord,StatEvMat,Rel2Mat,R2,RelSub1,RelSub2),
  Relazioni_Sub the_list Relazioni && [RelSub1, RelSub2],
  w_ramo(Nsub,reltr,[RelSub1],Rete),
  w_ramo(Nsub,reltes,[RelSub2],Rete),
  w_ramo(Nsub,ref_int,[tr(Fmat)],Rete).

adj_node(N1,AdjNode):-
  nodo(N1)::sub/prop::adj::sub/prop::nodo(AdjNode).

adj_node(N1,AdjNode):-
  nodo(N1)::sub/prop::nodo(AdjNode),
  notnodcoord(AdjNode),
  notnodsubprop(N1),!.

adj_node(N1,AdjNode):-
  nodo(N1)::sub/prop::coord::nodo(AdjNode).

/*
calcola_tempo_sub(+Pred,+Nodo, -Rel1, -Rel2, -Relazioni)
*/

calcola_tempo_sub(Pred,Nodo,Rel1,Rel2,Relazioni):-
  rete(Rete),
  nodo(Nodo)::indice::Ind1,
  concatena(Ind1,Rete,Ind),
  nodo(Nodo)::tempo::Tempo,
  nodo(Nodo)::modo::Modo,
  nodo(Nodo)::aspetto::Aspetto,
  trel_1(Ind,Modo,Tempo,Rel1Base),
  stato_evento(Aspetto,StatEv),
  trel_2(Ind,Tempo,Aspetto,StatEv,Rel1Base,Rel2Base),
  modificatori_temporali(Nodo,AdvNode/Tipo),
  avverbio(Ind,AdvNode/Tipo,Rel1Base,Rel2Base,Rel1,Rel2,RelAvv,PresStorico),
  calcola_complementi(Ind,Nodo,Rel1,RelComp),
  calcola_definitezza(Pred,Modo,Aspetto,Rel2,Definitezza),
  eventuality(Aspetto,Rel2,AdvNode,Eventuality),
  Relazioni the_list [Rel1,Rel2] && RelAvv && 
      [definitezza(Ind,Definitezza)] && RelComp,
  w_ramo(Nodo,rel1,[Rel1],Rete),
  w_ramo(Nodo,rel2,[Rel2],Rete),
  w_relavv(Nodo,RelAvv,Rete),
  w_ramo(Nodo,definitezza,Definitezza,Rete).


/* tabella subordinatori 
tab_sub(+Fmat,+Fsub,+Subord,+StatEvmat,+Rel2mat,+Rel2sub,-Reltr,-Reltes)

   N.B. Tra Relmat,Rel2sub,Reltr,Reltes possono verificarsi
        delle incongruenze. Vedi transitivita' delle relazioni
        temporali di Allen 
*/

tab_sub(Fmat,Fsub,quando,_StatEvMat,
        incluso(tr(Fmat),tes(Fmat)),tr(Fsub)=tes(Fsub),
        tr(Fmat)=tr(Fsub),incluso(tes(Fsub),tes(Fmat))):- !.
tab_sub(Fmat,Fsub,quando,stato,
        incluso(tr(Fmat),tes(Fmat)),incluso(tr(Fsub),tes(Fsub)),
        tr(Fmat)=tr(Fsub),incluso(tes(Fmat),tes(Fsub))):- !.
tab_sub(Fmat,Fsub,when,stato,
        incluso(tr(Fmat),tes(Fmat)),incluso(tr(Fsub),tes(Fsub)),
        tr(Fmat)=tr(Fsub),incluso(tes(Fmat),tes(Fsub))):- !.
tab_sub(Fmat,Fsub,quando,_StatEvMat,
        incluso(tr(Fmat),tes(Fmat)),tr(Fsub) aftr tes(Fsub),
        tr(Fmat)=tr(Fsub),incluso(tes(Fsub),tes(Fmat))):- !.
tab_sub(Fmat,Fsub,quando,stato,_,_,
        tr(Fmat)=tr(Fsub),incluso(tes(Fmat),tes(Fsub))):- !.
tab_sub(Fmat,Fsub,where,stato,_,_,
        tr(Fmat)=tr(Fsub),incluso(tes(Fmat),tes(Fsub))):- !.
tab_sub(Fmat,Fsub,quando,evento,
        tr(Fmat)=tes(Fmat),tr(Fsub)=tes(Fsub),
        tr(Fmat)=tr(Fsub),tes(Fsub)=tes(Fmat)):- !.
tab_sub(Fmat,Fsub,quando,evento,_,_,
        tr(Fmat)=tr(Fsub),tes(Fsub) aftr tes(Fmat)):- !.
tab_sub(Fmat,Fsub,appena,evento,_,_,
        tr(Fmat)=tr(Fsub),tes(Fsub) aftr tes(Fmat)):- !.
tab_sub(Fmat,Fsub,poi,evento,_,_,
        tr(Fmat)=tr(Fsub),tes(Fsub) aftr tes(Fmat)):- !.
tab_sub(Fmat,Fsub,while,_StatEvMat,_,_,
        tr(Fmat)=tr(Fsub),incluso(tes(Fmat),tes(Fsub))):- !.
tab_sub(Fmat,Fsub,mentre,_StatEvMat,_,_,
        tr(Fmat)=tr(Fsub),incluso(tes(Fmat),tes(Fsub))):- !.
tab_sub(Fmat,Fsub,whereas,_StatEvMat,_,_,
        tr(Fmat)=tr(Fsub),incluso(tes(Fmat),tes(Fsub))):- !.
tab_sub(Fmat,Fsub,als,_StatEvMat,_,_,
        tr(Fmat)=tr(Fsub),incluso(tes(Fmat),tes(Fsub))):- !.
tab_sub(Fmat,Fsub,as,_StatEvMat,_,_,
        tr(Fmat)=tr(Fsub),incluso(tes(Fmat),tes(Fsub))):- !.
tab_sub(Fmat,Fsub,in_so_far_as,_StatEvMat,_,_,
        tr(Fmat)=tr(Fsub),incluso(tes(Fmat),tes(Fsub))):- !.
tab_sub(Fmat,Fsub,per,_StatEvMat,_,_,
        tr(Fmat)=tr(Fsub),incluso(tes(Fmat),tes(Fsub))):- !.
tab_sub(Fmat,Fsub,perché,_StatEvMat,_,_,
        tr(Fmat)=tr(Fsub),incluso(tes(Fmat),tes(Fsub))):- !.
tab_sub(Fmat,Fsub,perché,_StatEvMat,_,_,
        tr(Fmat)=tr(Fsub),incluso(tes(Fmat),tes(Fsub))):- !.
tab_sub(Fmat,Fsub,because,_StatEvMat,_,_,
        tr(Fmat)=tr(Fsub),incluso(tes(Fmat),tes(Fsub))):- !.
tab_sub(Fmat,Fsub,when,evento,
        tr(Fmat)=tes(Fmat),tr(Fsub)=tes(Fsub),
        tr(Fmat)=tr(Fsub),tes(Fsub)=tes(Fmat)):- !.
tab_sub(Fmat,Fsub,by,evento,
        tr(Fmat)=tes(Fmat),tr(Fsub)=tes(Fsub),
        tr(Fmat)=tr(Fsub),tes(Fsub)=tes(Fmat)):- !.
tab_sub(Fmat,Fsub,so,evento,
        tr(Fmat)=tes(Fmat),tr(Fsub)=tes(Fsub),
        tr(Fmat)=tr(Fsub),tes(Fsub)=tes(Fmat)):- !.
tab_sub(Fmat,Fsub,così,evento,
        tr(Fmat)=tes(Fmat),tr(Fsub)=tes(Fsub),
        tr(Fmat)=tr(Fsub),tes(Fsub)=tes(Fmat)):- !.
tab_sub(Fmat,Fsub,if,_StatEvMat,_,_,
        tr(Fmat)=tr(Fsub),
        diverso(tes(Fmat),tes(Fsub))):- !.
tab_sub(Fmat,Fsub,to_the_extent_that,_StatEvMat,_,_,
        tr(Fmat)=tr(Fsub),
        diverso(tes(Fmat),tes(Fsub))):- !.
tab_sub(Fmat,Fsub,ma,evento,_,_,
        td(Fmat)=tr(Fsub),incluso(tes(Fmat),tes(Fsub))):- !.


/* calcola definitezza */

/* definitezza frasi a tempo finito */

calcola_definitezza(Pred,_,_,_,'-'):- 
  nonvar(Pred),
  Pred=if,
  !.

calcola_definitezza(_,cond,Aspetto,_,'-'):- !.

calcola_definitezza(_,cong,Aspetto,_,'-'):- !.

calcola_definitezza(_,Modo,stato,_,'-'):-
  Modo=ind,
  nodo(N)::modo::Modo,
/*
   nodo(N)::F/R::qmark::Qop,
   nodo(N)::indice::Ind,
   nodo(N1)::antecedente::Ind,
   nodo(N1)::interpretazione::quantificata,
*/
  imperfettivo(Rel4).

calcola_definitezza(_,Modo,Aspetto,_,'+'):-
  stati(Stati),
  member(Aspetto,Stati).

calcola_definitezza(_,Modo,Aspetto,Rel4,'+'):- 
  eventi(Eventi),
  member(Aspetto,Eventi),
  perfettivo(Rel4).

calcola_definitezza(_,Modo,Aspetto,Rel4,'-'):-
  member(Aspetto,[accomp,achiev_tr]),
  imperfettivo(Rel4). 


perfettivo(tes(_) aftr tr(_)).
perfettivo(prec_imm(tes(_),tr(_))).
perfettivo(tr(_)=tes(_)).

imperfettivo(incluso(tr(_),tes(_))).
imperfettivo(prec_imm(tr(_),tes(_))).
imperfettivo(contemporaneo(tr(_),tes(_))).


/* definitezza infinitive */

tab_def_inf(Fmat,Finf,_,tes(Fmat) aftr tes(Finf),'-').

tab_def_inf(Fmat,Finf,_,tes(Finf) aftr tes(Fmat),'+').

tab_def_inf(Fmat,Finf,Aspettoinf,tes(Fmat)=tes(Finf),'+'):- 
  (Aspettoinf = attivita; 
   Aspettoinf = stato;
   Aspettoinf = achiev_it).

tab_def_inf(Fmat,Finf,Aspettoinf,tes(Fmat)=tes(Finf),'-'):-
  (Aspettoinf = accomp; 
   Aspettoinf = achiev_tr).

/************
• eventuality(+aspect, +trel_2, +adverbNode, -eventuality)
• eventuality = occorrenza multipla •
*************/
/* 'occorrenza singola dell'' evento' */
eventuality(achiev_it,_,AdvNode,single):-
  pathval(AdvNode,tipo,frequenza,_),
  pathval(AdvNode,duraz,iterato,_),
  !.

/* 'occorrenza multipla dell''evento' */
eventuality(achiev_it,Rel2,_,multiple):-
  imperfettivo(Rel2).

eventuality(achiev_it,Rel2,AdvNode,multiple):-
  perfettivo(Rel2),
  pathval(AdvNode,tipo,durata,_),
  !.

/* 'possibile occorrenza singola o multipla' */
eventuality(achiev_it,Rel2,_,single_or_multiple):-
  perfettivo(Rel2) ,
  !.

eventuality(_,_,_,none).

interp_sv_ogg_pro(SN/Funz,Tipo,LArgs,NLArgs,X) :-
            nonvar(SN),
             SN=sn(_,_,coordina([arg(funzione(Funz),ruolo(Ruolo),SN1),
                          arg(funzione(Funz),ruolo(Ruolo),SN2)|SN3])),
             ( nogen_member(sn/ogg/Ruolo/LCat,LArgs);
                nogen_member(sn/ogg_avv/Ruolo/LCat,LArgs) ),
             match_obj_cats(SN, LCat),
             erase_vp_int_args(SN, Funz, Ruolo, LCat, LArgs, NLArgs, X),
              !.

interp_sv_ogg_pro(SN/Funz,Tipo,LArgs,NLArgs,X) :-
             ( nogen_member(sn/ogg/Ruolo/LCat,LArgs);
                nogen_member(sn/ogg_avv/Ruolo/LCat,LArgs) ),
             match_obj_cats(SN, LCat),
             erase_vp_int_args(SN, Funz, Ruolo, LCat, LArgs, NLArgs, X),
              !.

idioms_listaform(LArgs,Test,NLArgs):-
      nogen_member(idioms/ogg/form/ListaForm,LArgs),
      nogen_member(Test,ListaForm),
      elimina(idioms/ogg/form/Lista,LArgs,NLArgs),
       !.

interp_sv_ogg(SN/Funz,Tipo,LArgs,NLArgs,X) :-
            nonvar(SN),
            SN =.. [sn,indice(Ind),cat(Cat),PR,Spec,args(Args),Mods,Adj],
            (PR=pr(Tipo, Pro, 3, G, N, C);
             PR=pr(Tipo, _, Pro, 3, G, N, C)),
            check_int_arg(SN, Funz, LArgs, LCat),
             Cat=LCat,
            (  (Args = [], N=plur, member(umano,Cat)) ;
                 (Args = [], N=sing) ;
                   Args\= []),
             feature_on(acc,C),
             SN1=..[sn,indice(Ind), cat(Cat), pr(Tipo, Pro, 3, G, N, C),Spec,args(Args),Mods,Adj],
             erase_vp_int_args(SN1, Funz, Ruolo, LCat, LArgs, NLArgs, X),
              !.

interp_sv_ogg(SN/Funz,Tipo,LArgs,NLArgs,X) :-
             nonvar(SN),
             SN=..[sn,indice(Ind), cat(Cat), PR, S],
             PR=..[Pr,Tipo, A, B, C, D, E, Caso],
             check_int_arg(SN, Funz, LArgs, LCat),
             feature_on(acc,Caso),
             match_obj_cats(SN, LCat),
              PR1=..[Pr,Tipo, A, B, C, D, E, [acc]],
             SN1=..[sn,indice(Ind), cat(Cat), PR1, S],
             erase_vp_int_args(SN1, Funz, Ruolo, LCat, LArgs, NLArgs, X),
              !.

interp_sv_ogg(SN/Funz,sn,LArgs,NLArgs,X) :-
            nonvar(SN),
             SN=sn(_,_,coordina([arg(funzione(Funz),ruolo(Ruolo),SN1),arg(funzione(Funz),ruolo(Ruolo),SN2)|SN3])),
             !,
             check_int_arg(SN, Funz, LArgs, LCat),
             match_obj_cats(SN, LCat),
             erase_vp_int_args(SN, Funz, Ruolo, LCat, LArgs, NLArgs, X),
              !.

interp_sv_ogg(SN/F,sn,LArgs,NLArgs,X) :-
            nonvar(SN),
      SN=..[sn,indice(Ind),cat(Cat),Name,Spec,args(Args),mods(Mods),adjs(Adj)],
      Name=..[N,Test, G, Nu],
      idioms_listaform(LArgs,Test,NLArgs),
      Testa=..[N,Test, G, Nu],
      X = arg(funzione(ogg),ruolo(form),sn(indice(Ind),cat(Cat),Testa,
              Spec,args(Args),mods(Mods),adjs(Adj))), !.


interp_sv_ogg(SN/Funz,sn,LArgs,NLArgs,X) :-
             check_int_arg(SN, Funz, LArgs, LCat),
             match_obj_cats(SN, LCat),
             erase_vp_int_args(SN, Funz, Ruolo, LCat, LArgs, NLArgs, X),
              !.

interp_sv_ogg(SN,sn,LArgs,NLArgs,X) :-
             check_int_arg(SN, ogg, LArgs, LCat),
             match_obj_cats(SN, LCat),
             erase_vp_int_args(SN, ogg, Ruolo, LCat, LArgs, NLArgs, X),
              !.

interp_sv_part(Form/form,LArgs,NLArgs,Form) :-
         idioms_listaform(LArgs,Form,NLArgs),
         !.

interp_sv_ogg_cog(SN,LArgs,NuovaLArgs,X) :-
      idioms_listaform(LArgs,Test,NuovaListaAr),
      nogen_member(sn/ogg/Ruolo/LCat,LArgs),
             match_obj_cats(SN, LCat),
            nonvar(SN),
      SN=sn(indice(Ind),cat(Cat),Name,Spec,args(Args),mods(Mods),adjs(Adj)),
      Name=..[N,Test, G, Nu],
      elimina(sn/ogg/Ruolo1/LCa,NuovaListaAr,NuovaLArgs),
      Testa=..[N,Test, G, Nu],
      X = arg(funzione(ogg),ruolo(form),sn(indice(Ind),cat(Cat),Testa,
              Spec,args(Args),mods(Mods),adjs(Adj))), !.

interp_sv_ogg_bound(SN/Funz,LArgs,NuovaLArgs,X) :-
             nogen_member(sn/ogg/theme_bound/ListaCat,LArgs) ,
             elimina(sn/ogg/theme_bound/Lista,LArgs,NuovaLArgs),
             X = arg(funzione(Funz),ruolo(theme_bound),SN), !.

interp_sv_ogg_ind(SN/Funz,LArgs,NuovaLArgs,X,Contr,ListaCat,Gen) :-
             nogen_member(sn/ogg/Ruolo/ListaCat,LArgs),
            nonvar(SN),
             SN=sn(indice(Ind),cat(Cat),Testa,spec(def('-'),part('+'),M,F,C,Q),
                         args(Args),Mods,Adj),
             (Testa=..[T,Tes,Gen,Nu];Testa=pr(_,_,_,Gen,_,_)),             
             elimina(sn/ogg/Ruolo/Lista,LArgs,NuovaLArgs),
             create_Pros(ogg/tema/Cat, 3, Contr, Subj),
             X = arg(funzione(Funz),ruolo(Ruolo),
                 sn(indice(Ind),cat(ListaCat),Testa,spec(def('-'),part('+'),M,F,C,Q),
                     args([Subj]),Mods,Adj)), !.

interp_sv_ogg_poss(SN/Funz,LArgs,NuovaLArgs,X,Contr) :-
      idioms_listaform(LArgs,Test,NuovaListaAr),
             nogen_member(sn/ogg/Ruolo/LCat,LArgs),
             match_obj_cats(SN, LCat),
            nonvar(SN),
             SN=sn(indice(Ind),cat(Cat),Name,Spec,args(Args),mods(Mods),adjs(Adj)),
      Name=..[N,Test, G, Nu],
             nogen_member(body_part,Cat),
      elimina(sn/ogg/Ruolo1/LCa,NuovaListaAr,NuovaLArgs),
             create_Pros(sogg/poss/Cat, 3, Contr, Subj),
       Testa=..[N,Test, G, Nu],
             X = arg(funzione(Funz),ruolo(form),sn(indice(Ind),cat(Cat),Testa,Spec, 
                   args([Subj]),mods(Mods),adjs(Adj))), !.

interp_sv_ogg_poss(SN/Funz,LArgs,NuovaLArgs,X,Contr) :-
             member(sn/ogg/Ruolo/LCat,LArgs),
            nonvar(SN),
             SN=sn(indice(Ind),cat(Cat),Testa,Spec,args(Args),Mods,Adj),
             match_obj_cats_spec(Cat, Spec, Ruolo, LCat, Args),
             elimina(sn/ogg/Ruolo/ListaCat,LArgs,NuovaLArgs),
             create_Pros(sogg/poss/Cat, 3, Contr, Subj),
             (Args=[Aggiun], Argo=[Subj,Aggiun]; Args=[], Argo=[Subj]),
             X = arg(funzione(Funz),ruolo(Ruolo),sn(indice(Ind),cat(Cat),
                     Testa,Spec,args(Argo),Mods,Adj)),
              !.

interp_sv_ogg_poss(SN/Funz,LArgs,NLArgs,X,Controllore) :-
             member(sn/ogg/Ruolo/LCat,LArgs),
            nonvar(SN),
             SN=sn(indice(Ind),cat(Cat),Testa,Spec,args(Args),Mods,Adj),
             match_obj_cats_spec(Cat, Spec, _, LCat, Args),
             erase_vp_int_args(SN, Funz, Ruolo, LCat, LArgs, NLArgs, X),
              !.

interp_sv_ogg_poss(ListaSP,LArgs,NuovaLArgs,X,Contr) :-
             nogen_member(sn/ogg/Ruolo/LCat,LArgs),
             nogen_member(pcomp/Role/LCat,LArgs),
             ListaSP=[sp(prep(P,cat(CatSP),Mod),SN)|AltriSP],
            nonvar(SN),
             SN=sn(indice(Ind),cat(Cat),Testa,Spec,args(Args),Mods,Adj),
             match_obj_cats_spec(Cat, Spec, Ruolo, LCat, Args),
             elimina(sn/ogg/Ruolo/LCat,LArgs,NuovaLArgs),
             create_Pros(sogg/poss/Cat, 3, Contr, Subj),
              (Args=[Aggiun], Argo=[Subj,Aggiun]; Args=[], Argo=[Subj]),
             X = arg(funzione(Funz),ruolo(Ruolo),sn(indice(Ind),cat(Cat),
                 Testa,Spec,args(Argo),Mods,Adj)),
              !.

interp_sv_ogg_avv(SN/Funz,LArgs,NLArgs,X) :-
            nonvar(SN),
             SN=sn(_,_,coordina([arg(funzione(Funz),ruolo(Ruolo),SN1)|_])),
             !,
             nogen_member(sn/ogg_avv/Ruolo/LCat,LArgs),
             match_obj_cats(SN, LCat),
             erase_vp_int_args(SN, Funz, Ruolo, LCat, LArgs, NLArgs, X),
              !.

interp_sv_ogg_avv(SN/Funz,LArgs,NLArgs,X) :-
             nogen_member(sn/ogg_avv/Ruolo/LCat,LArgs),
             match_obj_cats(SN, LCat),
             erase_vp_int_args(SN, Funz, Ruolo, LCat, LArgs, NLArgs, X),
              !.

interp_sv_comp(SN/Funz,LArgs,NLArgs,X) :-
             nogen_member(sn/Funz/Ruolo/LCat,LArgs),
             match_obj_cats(SN, LCat),
             erase_vp_int_args(SN, Funz, Ruolo, LCat, LArgs, NLArgs, X),
              !.

interp_sv_ogg2(SP/Funz,LArgs,NLArgs,X) :-
             nogen_member(sp/ogg2/R/a/LCat,LArgs),
             SP=sp(prep(P,cat(Cat),Mod),SN),
             match_obj_cats(SN, LCat),
             erase_vp_args(SN, ogg2, R, sp/ogg2/R/a/LCat, LArgs, NLArgs, X),
              !.

interp_sv_ogg2(SP/Funz,LArgs,NLArgs,X) :-
              nogen_member(sp/ogg2/R/a/LCat,LArgs),
             SP=sp(prep(P,cat(Cat),Mod),SN),
             match_pobj_cats(SN, LCat),
             erase_vp_args(SN, ogg2, R, sp/ogg2/R/a/LCat, LArgs, NLArgs, X),
              !.


/* Controllo di una lista di SP nel sintagma verbale  */
/* l' SP e' un aggiunto valido del verbo */
interp_sv_addr(CatV,[sp(prep(per,ListaCat,Mod),SN)|SP],LAs,NLAs,[X|ResArgs],ResAdjs,Controllore,Fun/Role)  
   :-
            nonvar(SN),
    SN = sn(indice(Simb),cat(C),Test,S,args(M),mods(Ar), adjs(Ad)) ,
    Test=..[L,N,G,Nu],
    elimina(sp(prep(Prep,ListaCat,Mod),SN),ListaSP,AltriSP),
    X = arg(funzione(adj),ruolo(subj_dis),Mod,SN),
    Fun=adj,Role=subj_dis,
    Controllore  = Simb, 
   interp_sv_x(CatV,SP,LAs,NLAs,ResArgs,ResAdjs).

interp_sv_ana(CatV,[sp(prep(Prep,ListaCat,Mod),SN)|SP],LAs,NLAs,[X|ResArgs],ResAdjs,Controllore,ListaCat,Gen)  
   :-
            nonvar(SN),
    SN = sn(indice(Simb),cat(ListaCat),cl(Tipo,'+',Pro,Pers,Gen,Num,Caso),
                   spec(def('-'))) ,
    elimina(sp(prep(Prep,ListaCat,Mod),SN),ListaSP,AltriSP),
    X = arg(funzione(adj),ruolo(tema),sn(indice(Simb),cat(ListaCat),
        cl(Tipo,'-',Pro,Pers,Gen,plur,Caso),spec(part('+')))),
                      Controllore  = Simb, 
   interp_sv_x(CatV,SP,LAs,NLAs,ResArgs,ResAdjs).

interp_sv_rifl(CatV,[sp(prep(Prep,cat(CatSP),Mod),SN)|AltriSP],LArgs,LArgs1, Altr,[X|ResArgs],ResAdjs,Controllore)  
:-
            nonvar(SN),
    SN = sn(indice(Simb),Cat,cl(Tipo,_,si,Pers,Gen,Num,Caso),Spec) ,     
    member(idioms/ogg2/form/ListaForm,LArgs),
    elimina(idioms/ogg2/form/ListaForm,LArgs,ListaArg1),
    elimina(sp(prep(Prep,CatSP,Mod),SN),ListaSP,AltriSp),
                            Altr=AltriSP,
   X = arg(funzione(ogg2),ruolo(form),SN),Controllore  = Simb.

interp_sv_rifl(CatV,[sp(prep(Prep,cat(CatSP),Mod),SN)|AltriSP],LArgs,LArgs1,Altr,[X|ResArgs],ResAdjs,Controllore)  
   :-
            nonvar(SN),
     SN = sn(indice(Simb),Cat,cl(Tipo,_,si,Pers,Gen,Num,Caso),Spec) ,     
                       Altr=AltriSP,LArgs1=LArgs,
     X = arg(funzione(ogg2),ruolo(form),SN),Controllore  = Simb.

interp_sv_rifl(CatV,[sp(prep(Prep,CatSP,Mod),SN)|AltriSP],LArgs, LArgs1,Altr,[X|ResArgs],ResAdjs,Controllore)  
   :-
            nonvar(SN),
    SN = sn(indice(Simb),Cat,cl(Tipo,_,Pro,Pers,Gen,Num,Caso),Spec) ,
    Pro\=ne,
    Altr=AltriSP,
    (LArgs\=[],
     elimina(sp/Funz/Ruolo/Prep/ListaCat,LArgs,LArgs1)
    ;
     LArgs=[], Funz=ogg2, Ruolo=benef),
    X = arg(funzione(Funz),ruolo(Ruolo),sn(indice(Simb),cat([umano,animato]),
             cl(Tipo,_,Pro,Pers,Gen,Num,Caso),Spec)),
    Controllore  = Simb.

interp_sv_rifl(CatV,[sp(prep(Prep,CatSP,Mod),SN)|AltriSP],LArgs, LArgs1,Altr,[X|ResArgs],ResAdjs,Controllore)  
  :-
            nonvar(SN),
    SN = sn(indice(Simb),Cat,cl(Tipo,_,Pro,Pers,Gen,Num,Caso),Spec) ,
    Pro\=ne,
    Altr=AltriSP,
    Funz=ogg2, Ruolo=benef,
    X = arg(funzione(Funz),ruolo(Ruolo),sn(indice(Simb),cat([umano,animato]),
              cl(Tipo,_,Pro,Pers,Gen,Num,Caso),Spec)),
    Controllore  = Simb.

interp_sv_inc_x(CatV,[sp(prep(a,cat(CatSP),Mod),SN)|AltriSP],LAs,NLAs,[X|ResArgs],RAs,Controllore)  
  :-
            nonvar(SN),
    SN = sn(indice(Simb),cat(_),cl(Tipo,_,Pro,Pers,Gen,Num,Caso),S),
    X = arg(funzione(ogg2),ruolo(benef),Mod,sn(indice(Simb),cat([umano,animato]),
              cl(Tipo,def('+'),Pro,Pers,Gen,Num,Caso),spec(def('+')))),
    Controllore = Simb,
    interp_sv_x(CatV,AltriSP,LAs,NLAs,ResArgs,RAs).

interp_sv_inc(CatV,[sp(prep(a,cat(CatSP),Mod),SN)|AltriSP],LAs,NLAs,[X|RAs],ResAdjs,Controllore)  
    :-
            nonvar(SN),
     SN = sn(indice(Simb),cat(_),cl(Tipo,_,Pro,Pers,Gen,Num,Caso),S),
     elimina(sp/Funz/Ruolo/Prep/ListaCat,LAs,LArgs1),
     X = arg(funzione(ogg2),ruolo(benef),sn(indice(Simb),cat([umano,animato]),
           cl(Tipo,def('+'),Pro,Pers,Gen,Num,Caso),spec(def('+')))),
     Controllore  = Simb,
    (LArgs1\=[],
     interp_sv_inc(CatV,AltriSP,LArgs1,NLAs,RAs,ResAdjs,Controllore)   
    ;
     LArgs1=[],
     interp_sv_x(CatV,AltriSP,LArgs1,NLAs,RAs,ResAdjs)).

interp_sv_inc(CatV,[sp(prep(Prep,cat(CatSP),Mod),SN)|AltriSP],LAs,NLAs,[X|ResArgs],RAs,Controllore)  
   :-
            nonvar(SN),
    SN \= sn(indice(Simb),cat(_),cl(Tipo,_,Pro,Pers,Gen,Num,Caso),S),
    nogen_member(body_part,CatSP),
    \+ nogen_member(astratto,CatSP),
    SN=sn(indice(Ind),Cat,Testa,Spec,args(Args),Mods,Adj),
    (
    findall(NP, on(arg(funzione(sogg), ruolo(poss), NP), Args), Nps),
    Nps = [],
    Sogg = arg(funzione(sogg),ruolo(poss),
           sn(indice(Simb),cat(CatSogg),
           pr(vbl,vbl,_,G,N,_),controllore(Controllore))),
    gen_sym(sn,Simb), Sogg1 = [Sogg]
    ;
    Sogg1 = Args),
    (elimina(sp/Funz/Ruolo/Ps/ListaCat,LAs,LArgs1)
    ;    
     elimina(obl/Ruolo/Ps/ListaCat,LAs,LArgs1)),
    X = arg(funzione(Funz),ruolo(Ruolo),Mod,sn(indice(Ind),Cat,Testa,Spec,
                  args(Sogg1),Mods,Adj)),
   interp_sv_x(CatV,AltriSP,LArgs1,NLAs,ResArgs,RAs).

interp_sv_o(CatV,[sp(prep(Prep,cat(CatSP),Mod),SN)|AltriSP],LAs,NLAs,[X|ResArgs],RAs,Controllore)  
  :-
   nogen_member(sp/Funz/Ruolo/Prep/ListaCat,LAs),
   interp_cat(CatSP,ListaCat),
   elimina(sp/Funz/Ruolo/Prep/ListaCat,LAs,LArgs1),
   X = arg(funzione(Funz),ruolo(Ruolo),Mod,SN),
   (LArgs1 \=[], 
    interp_sv_oo(CatV,AltriSP,LArgs1,NLAs,ResArgs,RAs,Controllore)
   ;
    interp_sv_x(CatV,AltriSP,LArgs1,NLAs,ResArgs,RAs)), !.

interp_sv_pass(CatV,[sp(prep(Prep,CatSP,Mod),SN1)|AltriSP],[PrimoArg|LArgs],NLAs,[X|ResArgs],RAs)  
   :-
    (Prep = da; Prep = by),
    PrimoArg = S1/F1/R1/Feat,
        X = arg(funzione(obl),ruolo(R1),Mod,SN1),
        gen_sym(sn,Simb),
    elimina(sn/ogg/Ruolo/ListaCat,LArgs,LAs),
    interp_sv_x(CatV,AltriSP,LAs,NLAs,ResArgs,RAs).

interp_sv_pass(CatV,[sp(indice(I),cat(CatSP),coordina([arg(funzione(Funz),ruolo(Ruolo),SP1),arg(funzione(Funz),ruolo(Ruolo),SP2)|SN2]))],[PrimoArg|LArgs],NLAs,[X|ResArgs],RAs)
    :-
     SP1\=[],
     SP1= sp(prep(Prep,CaSP,Mod),SN),
     SP2= sp(prep(Prp,CSP,Md),SN1),
    (Prep = da; Prep = by),
    PrimoArg = S1/F1/R1/Feat,
     assegna_funz_ruolo(arg, I, CatSP, SN, SN1, SN2, Funz, Ruolo, X),
    elimina(sn/ogg/Ruolo/ListaCat,LArgs,LAs),
    interp_sv_x(CatV,SP,LAs,NLAs,ResArgs,RAs).

interp_sv_pass(CatV,[_, sp(prep(Prep,CatSP,Mod),SN1)|AltriSP],[PrimoArg|LArgs],NLAs,[X|ResArgs],RAs)  
    :-
    (Prep = da; Prep = by),
    PrimoArg = S1/F1/R1/Feat,
    X = arg(funzione(obl),ruolo(R1),Mod,SN1),
    gen_sym(sn,Simb),
    elimina(sn/ogg/Ruolo/ListaCat,LArgs,LAs),
    interp_sv_x(CatV,AltriSP,LAs,NLAs,ResArgs,RAs).


/* Lista SP vuota fine del controllo */
interp_sv_x(_,[],[none/none/none],NuovaLArgs,[],[]) :-
         !.

interp_sv_x(_,[],LArgs,NuovaLArgs,Args,[]) :-
         completa_complementi_sp(LArgs,NuovaLArgs,Args),
         !.

/* l' SN e' un aggiunto valido del verbo */
interp_sv_x(CatV,[sn(indice(Simb),cat(Cat),Testa,Det, args(Args),mods(Mods),adjs(Adjs))|AltriSP],LArgs, NuovaLArgs,ResArgs,[X|ResAdjs])  
   :-
         nonvar(Testa),
         nogen_member(tempo,Cat),
         poss_agg_sv(temporale,ListaCatV),
         nogen_member(CatV,ListaCatV),
         (Det=spec(def('-'),part(_),mod(_),foc(_),card(_),quant(_)),
         Det1=spec(duraz(non_punt),config([tr<td]));
         Det\=spec(def('-'),_,_,_,_,_), Det1=Det),
         X = adj(temporale,sn(indice(Simb),cat(Cat),Testa,Det1,
               args(Args),mods(Mods),adjs(Adjs))),
         interp_sv_x(CatV,AltriSP,LArgs,NuovaLArgs,
                              ResArgs,ResAdjs).

/* l' SA e' un aggiunto valido del verbo */
interp_sv_x(CatV,[saa(indice(Simb),cat(Cat),Testa,args(Args),adjs(Adjs))|SP],LAs,NLAs,ResArgs,[X|ResAdjs])  
   :-
   check_adj_sa(Testa, Cat, CatV, Tipo_agg),
   X = adj(Tipo_agg,saa(indice(Simb),cat(Cat),Testa,args(Args),adjs(Adjs))),
   interp_sv_x(CatV,SP,LAs,NLAs,ResArgs,ResAdjs).

interp_sv_x(CatV,[saa(indice(Simb),cat(Cat),Testa,Spec,args(Args),adjs(Adjs))|SP],LAs,NLAs,ResArgs,[X|ResAdjs])  
   :-
   check_adj_sa(Testa, Cat, CatV, Tipo_agg),
   X = adj(Tipo_agg,saa(indice(Simb),cat(Cat),Testa,Spec,args(Args),adjs(Adjs))),
   interp_sv_x(CatV,SP,LAs,NLAs,ResArgs,ResAdjs).

interp_sv_x(CatV,[sp(prep(Prep,cat(CatSP),mod(Mod)),SN)|AltriSP],LAs,NLAs,RAs,[X|ResAdjs])  
    :-
    nonvar(Mod),
    SN=sn(Indice,cat(C),Name,Sp,args(Ar),mods(Mods),adjs(Adjs)),
    Name=..[N,Nom,Ge,Nu],
    Adjs=..[nome_mo,_,_,SN1],
    SN1=sn(Indi,cat(Ca),Fa,Spe,args(Arg),mods(Mod1),adjs(Adj)),
    Fa=..[N0,fa,Gen,Num],
    concat(Mod, '_', P1), concat(P1, fa, P2),
    X = adj(deittico,sp(prep(P2,CatSP,mod(Mod)),SN)),
    interp_sv_x(CatV,AltriSP,LAs,NLAs,RAs,ResAdjs).

interp_sv_x(CatV,[sp(prep(Prep,CatSP,Mod),SN)|AltriSP],LAs,NLAs,RAs,ResAdjs)  
   :-
   nonvar(SN), nonvar(LAs),
   SN=sn(indice(Simb),cat(_),cl(Tipo,_,Pro,Pers,Gen,Num,Caso),S),
   nonvar(CatSP),CatSP=cat([form]),
   interp_sv_x(CatV,AltriSP,LAs,NLAs,RAs,ResAdjs).

interp_sv_x(CatV,[sp(prep(Prep,CatSP,Mod),SN)|SP],LAs,NLAs,[X|ResArgs],RAs)  
  :-
  create_arg(SN, LAs, Prep, LA1s, X),
  interp_sv_x(CatV,SP,LA1s,NLAs,ResArgs,RAs). 

interp_sv_x(CatV,[sp(indice(I),cat(CatSP),coordina([arg(funzione(Funz),ruolo(Ruolo),SP1),arg(funzione(Funz),ruolo(Ruolo),SP2)|SP]))],LAs,NLAs,RAs,[X|ResAdjs])
   :-
   check_adjs(SP1, SP2, CatSP, CatV, X),
   interp_sv_x(CatV,SP,LAs,NLAs,RAs,ResAdjs). 

interp_sv_x(CatV,[sp(prep(Prep,cat(CatSP),Mod),SN)|AltriSP],LAs,NLAs,RAs,[X|ResAdjs])  
   :-
    SN\=[],
    create_adj(SN, Prep, Mod, CatSP, CatV, X),  
    interp_sv_x(CatV,AltriSP,LAs,NLAs,RAs,ResAdjs).
   
interp_sv_x(CatV,[[]],LAs,NLAs,[],[]):-!.

interp_sv_x(CatV,[Adjs|AltriSP],LAs,NLAs,RAs,[Adjs|ResAdjs]):-
%    AltriSP=[],Adjs=[],
    interp_sv_x(CatV,AltriSP,LAs,NLAs,RAs,ResAdjs),
    !.
            
/* istanzia come indefinito i complementi non realizzati lessicalmente */
completa_complementi_sp(LArgs, NuovaLArgs, Args) :-
   LArgs\=[],
   (
   on(sp/Funz/Ruolo/Prep/ListaCat, LArgs),
   elimina(sp/Funz/Ruolo/Prep/Lista,LArgs,NuovaLArgs)
   ;
   on(sn/Funz/Ruolo/ListaCat, LArgs),
   elimina(sn/Funz/Ruolo/Lista,LArgs,NuovaLArgs),
   Funz\=ogg
   ;
   on(pcomp/Ruolo/ListaCat,LArgs),
   elimina(Funz/Ruolo/Lista,LArgs,NuovaLArgs)
   ),
    (stratl(loc),
     Ruolo\=locativo
     ;
     \+ stratl(loc)),
     Args = [arg(funzione(Funz),ruolo(Ruolo),indefinito)],     
   !.

% completa_complementi_sp(LArgs, LArgs, [_|_]) .
completa_complementi_sp(LArgs, _, []) .


completa_complementi_sp1(LArgs,NuovaLArgs,Args,_) :-
    nogen_member(sp/Funz/Ruolo/Prep/ListaCat,LArgs),
    elimina(sp/Funz/Ruolo/Prep/Lista,LArgs,NuovaLArgs),
    (stratl(loc),
     Ruolo\=locativo
     ;
     \+ stratl(loc),
     Args = [arg(funzione(Funz),ruolo(Ruolo),indefinito)]),     
    !.

completa_complementi_sp1(LArgs,LArgs,[],_) :- !.

check_adjs(SP1, SP2, CatSP, CatV, X):-
   SP1\=[],
   SP1= sp(prep(Prep,CaSP,Mod),SN),
   SP2= sp(prep(Prp,CSP,Md),SN1),
   tipo_agg(Tipo_agg,Prep,ListaCatSP),
    (var(CatSP);
      nonvar(CatSP),
      interp_cat(CatSP,ListaCatSP)),
   poss_agg_sv(Tipo_agg,ListaCatV),
   nogen_member(CatV,ListaCatV),
   assegna_funz_ruolo(adj, I, CatSP, Prep, Mod, SN, SN1, ogg, Tipo_agg, X),
   !.

create_adj(SN, Prep, Mod, CatSP, CatV, X):-
   (Mod=mod(M), M\=[]; 
    nonvar(Mod), M=Mod),
   tipo_agg(Tipo_agg,M,ListaCatSP),
   (var(CatSP)
    ;
    nonvar(CatSP),
    interp_cat(CatSP,ListaCatSP)),
   poss_agg_sv(Tipo_agg,ListaCatV),
   nogen_member(CatV,ListaCatV),
    assegna_funz_ruolo(adj, Mod, CatSP, SN, Prep, Tipo_agg, X),!.
%   X = adj(Tipo_agg,sp(prep(Prep,cat(CatSP),mod(Mod)),SN)),!.

create_adj(SN, Prep, Mod, CatSP, CatV, X):-
    findall(N-Ta-LCsp, 
            (tipo_agg(Ta,Prep,LCsp), length(LCsp, N)),Constrs),
    orderconstr(Constrs, Constrs1),
    (var(CatSP)
     ;
     nonvar(CatSP),
    on(_-Tipo_agg-ListaCatSP, Constrs1),
    controlla_cat1(CatSP,ListaCatSP)),
    poss_agg_sv(Tipo_agg,ListaCatV),
    (nonvar(CatV),nogen_member(CatV,ListaCatV)
     ;var(CatV)),
    (CatV=percettivo, 
     (Tipo_agg=strumentale,
      nogen_member(strumento, CatSP)
      ;
       Tipo_agg\=strumentale)
     ;
    CatV\=percettivo 
    ),
    assegna_funz_ruolo(adj, Mod, CatSP, SN, Prep, Tipo_agg, X),!.
%    X = adj(Tipo_agg,sp(prep(Prep,cat(CatSP),Mod),SN)),!.

create_adj(SN, Prep, Mod, CatSP, CatV, X):-
    findall(N-Ta-LCsp,
            (tipo_agg(Ta,Prep,LCsp), length(LCsp, N)),Constrs),
    orderconstr(Constrs, Constrs1),
    (var(CatSP)
     ;
     nonvar(CatSP),
    on(_-Tipo_agg-ListaCatSP, Constrs1),
    interp_cat(CatSP,ListaCatSP)),
    assegna_funz_ruolo(adj, Mod, CatSP, SN, Prep, Tipo_agg, X),!.
%    X = adj(Tipo_agg,sp(prep(Prep,cat(CatSP),Mod),SN)),!.

create_adj(SN, Prep, Mod, CatSP, CatV, X):-
    findall(N-Ta-LCsp,
            (tipo_agg(Ta,Prep,LCsp), length(LCsp, N)),Constrs),
    orderconstr(Constrs, Constrs1),
    on(_-Tipo_agg-ListaCatSP, Constrs1),
    assegna_funz_ruolo(adj, Mod, CatSP, SN, Prep, Tipo_agg, X),!.
%    X = adj(Tipo_agg,sp(prep(Prep,cat(CatSP),Mod),SN)),


orderconstr(Constrs, C):-
   sort(Constrs, C),
   !.

create_arg(SN, LAs, Prep, LA1s, X):-
  nonvar(SN), nonvar(LAs),
  nogen_member(sp/Funz/Ruolo/Prep1/ListaCat,LAs),
  (Pre=Prep1;member(Prep,Prep1)),
  elimina(sp/Funz/Ruolo/Prep1/Lista,LAs,LA1s),
  assegna_funz_ruolo(arg, SN, Funz, Ruolo, X),!.

check_adj_sa(Testa, Cat, CatV, Tipo_agg):-
         nonvar(Testa),
         tipo_aagg(Tipo_agg,Cats),
         nogen_member(C, Cat),
         nogen_member(C, Cats),
         poss_agg_sa(Tipo_agg,ListaCatV),
         member(CatV,ListaCatV),!.


/* CONTROLLO DEI COMPLEMENTI PREDICATIVI */

/* ncomp per il verbo avere - deve selezionare i ruoli tematici*/
interp_ncomp_av(SN/ncomp,[PrimoArg|LArgs],NuovaLArgs,X,Contr,Arg_di_contr,CatSogg,R1) :-
             nonvar(SN), 
             trova_controllore_xcomp(ncomp,Ruolo,ListaCat,[sogg=Arg_di_contr],
                  [PrimoArg|LArgs],NuovaLArgs),
             SN=sn(Indice,cat(Cat),Testa,Det,args(Args),Mods,Adjs),
             ( (member(oggetto,Cat);member(animato,Cat)), 
                         R1=possess;
              (member(valutativo,Cat);member(emotivo,Cat)),
                         R1=stato),
             create_Pros(nil, 4, Contr, Sogg),
             Args1 the_list Args && [Sogg], 
             SN2=sn(Indice,cat(Cat),Testa,Det,args(Args1),Mods,Adjs),
             X = arg(funzione(ncomp),ruolo(R1),SN2), !.

/* acomp */
int_acomp(saa(indice(Ind),Cat,Testa,args(Args),Adj),R,X,Contr,CS):-
             Testa = agg(A,G,N),
             pred_a(A,CatSA,ListA), 
             percol_arg(ListA, CS),
             create_Pros(nil, 4, Contr, Sogg),
             Args1 the_list Args && [Sogg], 
             SA2=saa(indice(Ind),Cat,Testa,args(Args1),Adj),
             X = arg(funzione(acomp),ruolo(R),SA2) ,!.

int_acomp(saa(indice(Ind),Cat,coordina([SA1,SA2])),R,X,Contr,CS):-
           SA1=coord(saa(indice(Ind1),Cat, Testa, args(Args), adjs(Ad1))),       
           create_Pros(nil, 4, Contr, Sogg),
           Args1 the_list Args && [Sogg],
           SA2=coord(saa(indice(Ind2),Cat1,Testa1,args(Args2),adjs(Ad))),
           Args3 the_list Args1 && [Sogg],
           SA=coord(saa(indice(Ind2),Cat1,Testa1,args(Args3),adjs(Ad))),
           SA3=saa(indice(Ind), Cat, coordina(
                     [coord(saa(indice(Ind1),Cat,Testa,args(Args1),adjs(Ad1))),SA])),
           X = arg(funzione(acomp),ruolo(R),SA3) ,!.

int_acomp(avv(avv(pred_avv(Head), Type)),R,X,Contr,CS):-
             create_Pros(nil, 4, Contr, Sogg),
             Args1 the_list [] && [Sogg], 
             gen_sym(sn,Simb),
             SA2=avv(indice(Simb),cat(CS),avv(pred_avv(Head), Type),args(Args1)),
             X = arg(funzione(advcomp),ruolo(R),SA2) ,!.

/* ncomp */
int_ncomp(sn(Indice,cat(Cat),coordina([arg(funzione(ncomp),ruolo(prop),SN)|SNC])),R,X,Contr,CatSogg):-
             create_Pros(nil, 4, Contr, Sogg),
             Args1 the_list Args && [Sogg], 
             SN2=sn(Indice,cat(Cat),args(Args1),
                       coordina([arg(funzione(ncomp),ruolo(prop),SN)|SNC])),
             X = arg(funzione(ncomp),ruolo(prop),SN2), !.

int_ncomp(SN,R,X,Contr,CatSogg):-
             SN=sn(Indice,cat(Cat),Testa,Det,args(Args),Mods,Adjs),
             Testa=pr(possessivo, _, _, _, _, _),                  
             create_Pros(nil, 4, Contr, Sogg),
             Args1 the_list Args && [Sogg],
             Cat\=[],  CatSo=Cat,
             Role=possess, 
             SN2=sn(Indice,cat(CatSo),Testa,Det,args(Args1),Mods,Adjs),
             X = arg(funzione(ncomp),ruolo(Role),SN2), !.

int_ncomp(SN,R,X,Contr,CatSogg):-
            (SN=sn(Indice,cat(Cat),Testa,Det,args(Args),Mods,Adjs)
              ;
             SN=sn(Indice,cat(Cat),Testa,Det,controllore(Contr)), Mods=mods([]),Adjs=adjs([])                  
              ;
             SN=sn(Indice,cat(Cat),Testa), Mods=mods([]),Adjs=adjs([])),                  
            create_Pros(nil, 4, Contr, Sogg),
            Args1 the_list Args && [Sogg],
            percol_cat(Cat, CatSogg),
            SN2=sn(Indice,cat(CatSogg),Testa,Det,args(Args1),Mods,Adjs),
            X = arg(funzione(ncomp),ruolo(R),SN2), !.

int_ncomp(SN,R,X,Contr,CatSogg):-
            SN=sn(Indice,cat(Cat),Testa,Det,controllore(Controllo)), 
                     Mods=mods([]),Adjs=adjs([]),                
            create_Pros(nil, 4, Contr, Sogg),
            Args1 the_list Args && [Sogg],
            percol_cat(Cat, CatSogg),
            SN2=sn(Indice,cat(CatSogg),Testa,Det,controllore(Controllo),Args1),
            X = arg(funzione(ncomp),ruolo(R),SN2), !.

int_ncomp(SN,R,X,Contr,CatSogg):-
            SN=sn(Indice,cat(Cat),pr(vbl, vbl, _, 3, _, _, Case),controllore(Controllo)), 
                     Mods=mods([]),Adjs=adjs([]),                
            create_Pros(nil, 4, Contr, Sogg),
            Args1 the_list Args && [Sogg],
            percol_cat(Cat, CatSogg),
            SN2=sn(Indice,cat(CatSogg),pr(vbl, vbl, _, 3, _, Case),controllore(Controllo),args(Args1)),
            X = arg(funzione(ncomp),ruolo(R),SN2), !.

/* clitico */
interp_xcomp(SN1/_,  [PrimoArg|LArgs],NuovaLArgs,X,Contr,Arg_di_contr,CatSogg) :-
             nonvar(SN1), 
             SN1=sn(indice(Ind),cat(_),cl(clitico, _,lo,P,G,N,[acc]),spec(def(+))),
             trova_controllore_xcomp(ncomp,Ruolo,ListaCat,[sogg=Arg_di_contr],  
                        [PrimoArg|LArgs], NuovaLArgs),
             create_Pros(nil, 4, Contr, Sogg),
             Args1 the_list Args && [Sogg], 
             SN2=sn(indice(Ind),cat(CatSogg),cl(clitico, _, lo, P, G, N, [acc]), 
                          spec(def(+)),args(Args1),mods(Mods),adjs(Adjs)),
             X = arg(funzione(xcomp),ruolo(Ruolo),SN2), !.

interp_xcomp(SA1/acomp,[FArg|LArgs],NLArgs,X,Contr,Acontr,CatSogg):-
             nonvar(SA1),
             (SA1=[Z|Y], SA=Y
              ;
              SA=SA1), 
             trova_controllore_xcomp(acomp,R,ListaCat,[sogg=Acontr], 
                     [FArg|LArgs], NLArgs),
             int_acomp(SA,R,X,Contr,CatSogg),!.

interp_xcomp(SN/ncomp,[PrimoArg|LArgs],NLArgs,X,Contr,Acontr,CatSogg) :-
             nonvar(SN), 
             trova_controllore_xcomp(ncomp,prop,LCat,[sogg=Acontr],[PArg|LArgs],NLArgs),
             int_ncomp(SN,prop,X,Contr,CatSogg),!.

interp_xcomp(SN/ogg,[PrimoArg|LArgs],NLArgs,X,Contr,Acontr,CatSogg) :-
             nonvar(SN), 
             trova_controllore_xcomp(ncomp,prop,LCat,[sogg=Acontr],[PArg|LArgs],NLArgs),
             int_ncomp(SN,prop,X,Contr,CatSogg),!.


interp_xcomp(SN/XComp,[PrimoArg|LArgs],NLArgs,X,Contr,Acontr,CatSogg) :-
             XComp=qxcomp/P,
             nonvar(SN), 
             trova_controllore_xcomp(ncomp,prop,LCat,[sogg=Acontr],[PArg|LArgs],NLArgs),
             int_ncomp(SN,prop,X,Contr,CatSogg),!.

/*  controlla pcomp */
interp_xcomp(SP/pcomp,[PrimoArg|LArgs],NLArgs,X,Contr,Acontr,CatSogg) :-
             nonvar(SP), 
             trova_controllore_xcomp(pcomp,R,LCat,[sogg=Acontr],[PArg|LArgs],NLArgs),
             peep_coord_sp(SP,P,Cat,SN),
             int_pcomp(SN,P,Mod,Cat,R,X,Contr,CatSogg),!.

interp_xcomp(SP/pcomp,[PrimoArg|LArgs],NLArgs,X,Contr,Acontr,CatSogg) :-
             nonvar(SP), 
             trova_controllore_xcomp(pcomp,R,LCat,[sogg=Acontr],[PArg|LArgs],NLArgs),
             SP=sp(prep(a,cat(Cat),Mod),SN),
             member(pcomp/Ru/ListaCat, LArgs),
             int_pcomp(SN,P,Mod,Cat,Ru,X,Contr,CatSogg),!.

interp_xcomp(SP/ogg,[PrimoArg|LArgs],NLArgs,X,Contr,Acontr,CatSogg) :-
             nonvar(SP), 
             trova_controllore_xcomp(pcomp,R,LCat,[sogg=Acontr],[PArg|LArgs],NLArgs),
             peep_coord_sp(SP,P,Cat,SN),
             member(pcomp/Ru/ListaCat, LArgs),
             int_pcomp(SN,P,Mod,Cat,Ru,X,Contr,CatSogg),!.

interp_xcomp(SP/xcomp,[PrimoArg|LArgs],NLArgs,X,Contr,Acontr,CatSogg) :-
             nonvar(SP), 
             trova_controllore_xcomp(pcomp,R,LCat,[sogg=Acontr],[PArg|LArgs],NLArgs),
             peep_coord_sp(SP,P,Cat,SN),
             member(xcomp/Ru/ListaCat, LArgs),
             int_pcomp(SN,P,Mod,Cat,Ru,X,Contr,CatSogg),!.

interp_xcomp(Adj/xcomp,[PrimoArg|LArgs],NLArgs,X,Contr,Acontr,CatSogg) :-
             nonvar(Adj),
             trova_controllore_xcomp(xcomp,prop,LCat,[sogg=Acontr],[PArg|LArgs],NLArgs),
             Adj=..[Pref,Ruolo, sp(prep(P,cat(Cat),Mod),Args)],
             Args=..[args,Arg],
             member(Ar,Arg),
             Ar=..[arg,Funz,Ruo,SN],
             int_pcomp(SN,P,Mod,Cat,Ruolo,X,Contr,CatSogg),!.

interp_xcomp(SN/XComp,[PrimoArg|LArgs],NLArgs,X,Contr,Acontr,CatSogg) :-
             nonvar(SN),
             trova_controllore_xcomp(xcomp,prop,LCat,[sogg=Acontr],[PArg|LArgs],NLArgs),
             int_acomp(SN,prop,X,Contr,CatSogg),!.

interp_xcomp(SN/XComp,[PrimoArg|LArgs],NLArgs,X,Contr,Acontr,CatSogg) :-
             nonvar(SN),
             trova_controllore_xcomp(xcomp,prop,LCat,[sogg=Acontr],[PArg|LArgs],NLArgs),
             int_ncomp(SN,prop,X,Contr,CatSogg),!.

interp_xcomp(Avv/xcomp,[PrimoArg|LArgs],NLArgs,X,Contr,Acontr,CS):-
             nonvar(Avv),
             (Avv=avv(avv(pred_avv(Head), Type));
              Avv=avv(pred_avv(Head), Type)),
             create_Pros(nil, 4, Contr, Sogg),
             Args1 the_list [] && [Sogg], 
             gen_sym(sn,Simb),
             SA2=avv(indice(Simb),cat(CS),avv(pred_avv(Head), Type),args(Args1)),
             X = arg(funzione(advcomp),ruolo(R),SA2) ,!.

peep_coord_sp(SP,P,Cat,SN):-
             SP=sp(prep(P,cat(Cat),Mod),SN),
      !.

peep_coord_sp(SP,P,CatSP,SN2):-
     SP=sp(indice(I),cat(CatSP),coordina([
            arg(funzione(Funz),ruolo(Ruolo),SP1),
            arg(funzione(Funz),ruolo(Ruolo),SP2)])),
     SP1\=[],
     SP1= sp(prep(P,CaSP,Mod),SN),
     SP2= sp(prep(Prp,CSP,Md),SN1),
     SN2=sn(indice(I),cat(CatSP), coordina([arg(funzione(F), ruolo(R), SN), arg(funzione(F), ruolo(R), SN1)])),
      !.
peep_coord_sp(SP,P,CatSP,SN2):-
     SP=[sp(indice(I),cat(CatSP),coordina([
            arg(funzione(Funz),ruolo(Ruolo),SP1),
            arg(funzione(Funz),ruolo(Ruolo),SP2)]))],
     SP1\=[],
     SP1= sp(prep(P,CaSP,Mod),SN),
     SP2= sp(prep(Prp,CSP,Md),SN1),
     SN2=sn(indice(I),cat(CatSP), coordina([arg(funzione(F), ruolo(R), SN), arg(funzione(F), ruolo(R), SN1)])),
      !.

int_pcomp(sn(indice(_),cat(F),cl(clitico,_,Pro,_,_,_,[_]),spec(def(+))),P,_,_,R,X,_,_) :-
         X = form(Pro),
       (Pro=c;Pro=ci;Pro=there), !.

int_pcomp(SN,P,Mod,Cat,R,X,Contr,CatSogg) :-
            check_membership(body_part, Cat, P, R, Role), 
            create_Pros(sogg/poss/Cat, 3, Contr, Poss),
            Args = [Poss],             
            create_Pros(nil, 4, Contr, Sogg),
            SN=sn(indice(Ind),cat(Cat),Testa,Spec,args(Args),Mods,Adjs),             
            Ogg = arg(funzione(ogg),ruolo(Role), SN),
            Args1 = [Sogg,Ogg],
            SP=sp(prep(P),args(Args1),mods([Mod])), 
             (var(R), Ruol=Role;nonvar(R), Ruol=R; Ruol=Role),
            X = arg(funzione(pcomp),ruolo(Ruol),SP), !.

int_pcomp(SN,P,Mod,Cat,R,X,Contr,CatSogg) :-
             check_membership([], Cat, P, Ruolo, Role), 
             create_Pros(nil, 4, Contr, Sogg),
             peep_coordinate_np(SN, ogg, Role),
             Ogg = arg(funzione(ogg),ruolo(Role), SN),
             Args = [Sogg,Ogg],
             SP=sp(prep(P),args(Args),mods([Mod])), 
             (var(Ruolo), Ruol=Role; var(Ruolo), nonvar(R), Ruol=R;Ruol=Role),
             X = arg(funzione(pcomp),ruolo(Ruol),SP), 
             !.

int_pcomp(SN,P,Mod,Cat,R,X,Contr,CatSogg) :-
             check_membership([], Cat, P, Ruolo, Role),
             SN=sn(Indice,cat(Cat),Testa,Det,args(Args),Mods,Adjs),                  
             create_Pros(nil, 4, Contr, Sogg),
             peep_coordinate_np(SN, ogg, Role),
             Ogg = arg(funzione(ogg),ruolo(Role), SN),
             Args1 the_list Args && [Sogg],
             SN2=sn(Indice,cat(Cat),Testa,Det,args(Args1),Mods,Adjs),
             X = arg(funzione(pcomp),ruolo(Role),SN2), 
             !.

int_pcomp(SN,P,Mod,Cat,R,X,Contr,CatSogg) :-
             SN=sn(Indice,cat(Cat),Testa,Det,args(Args),Mods,Adjs),                  
             check_membership([], Cat, P, Ruolo, Role), 
             create_Pros(nil, 4, Contr, Sogg),
             Args1 the_list Args && [Sogg],
             SN2=sn(Indice,cat(Cat),Testa,Det,args(Args1),Mods,Adjs),
             X = arg(funzione(pcomp),ruolo(Role),SN2), 
             !.

int_pcomp(SN,a,Mod,Cat,R,X,Contr,CatSogg) :-
             nonvar(R),
             SN=sn(Indice,cat(Cat),Testa,Det,args(Args),Mods,Adjs),                  
             create_Pros(nil, 4, Contr, Sogg),
             Args1 the_list Args && [Sogg],
             SN2=sn(Indice,cat(Cat),Testa,Det,args(Args1),Mods,Adjs),
             X = arg(funzione(ncomp),ruolo(R),SN2), 
             !.

peep_coordinate_np(SN, F, R):-
             SN=sn(Indice,cat(Cat), coordina([arg(funzione(F), ruolo(R), SN1), arg(funzione(F), ruolo(R), SN2)])),
             !.
peep_coordinate_np(SN, F, R):-
             SN=sn(Indice,cat(Cat),Testa,Det,args(Args),Mods,Adjs),                  
             !.
peep_coordinate_np(SN, F, R):-
             SN=sn(Indice,cat(Cat),Testa,Controllore),                  
             !.

check_membership([], Cat, P, Ruolo, Ruolo):-
            nonvar(Ruolo),
            Ruolo=locativo,
            !,
            nogen_member(CC,Cat),
            tipo_agg(Ruolo,P,ListaCat1),
            nogen_member(CC,ListaCat1),!.

check_membership([], Cat, P, Ruolo, Role):-
            nogen_member(CC,Cat),
            tipo_agg(Role,P,ListaCat1),
            nogen_member(CC,ListaCat1),!.

check_membership([], Cat, di, Ruolo, Role):-
             nogen_member(CC,Cat),
             tipo_agg(Role,P,ListaCat1),
             nogen_member(CC,ListaCat1), !.

check_membership([], Cat, in, Ruolo, locat):-!.
check_membership([], Cat, P, Ruolo, Role):-
             Ruolo\=locativo, Role=Ruolo, !.

check_membership(CC, Cat, P, Ruolo, Role):-
            nonvar(CC), 
            CC\=[],
           Cat\=[], 
            (\+ nogen_member([],Cat),
            nogen_member(CC,Cat);
            true),
             tipo_agg(Role,P,ListaCat1),
            nogen_member(CC,ListaCat1),!.

check_membership([], Cat, P, Ruolo, Role):-
            nogen_member(CC,Cat),
            tipo_agg(Role,P,ListaCat1),
            poss_agg_san(Role, ListaCat),          
            nogen_member(CC,ListaCat),!.

percol_arg([], CatSogg):- !.

percol_arg(ListA, CatSogg):-
  ListA=[PrimoAr|ListArg],
     (CatSogg=[CSN|_],
       ( var(CSN),
         PrimoAr = sn/sogg/CatSogg 
        ;
         nonvar(CSN)) 
       ;
       PrimoAr \= sn/F/R
     ),!.

percol_cat(Cat, CatSogg):- 
    nonvar(CatSogg),!.

percol_cat(Cat, CatSogg):-
     (Cat\=[],  CatSogg=Cat
     ;
     Cat\=[_],  CatSogg=Cat
     ; 
     Cat\=[_|_], CatSogg=Cat
     ; 
     var(Cat)
     ; 
     nonvar(Cat), CatSogg=Cat), !.

/* CONTROLLA AGGIUNTI */

open_adjs(Args, [],[]):-!.
open_adjs(Args, [_/_],[]):-!.
open_adjs(Args, [A|B],[]):-var(A),var(B),!.
open_adjs(Args, Aggiunti,NAggiunti) 
   :-
   search_refl_pron(Args, AnyFunc, Feats),
   !,
   (Feats\=[],
   Feats=[Gen,Num],
   on(ContrFunc, [obl,ogg2, ogg, sogg]),
   AnyFunc\=ContrFunc,
   trova_Sncontrollore(Args, ContrFunc, _, Strutt),
   Strutt\=indefinito,
   (trova_testa_SN(Strutt,Testa),
    Testa=pPro,
    explore_head(Strutt)
       ;
    match_gen_num(Gen, Num, Strutt)
   ),
   !,
   openadjs(Args,Aggiunti,NAggiunti) 
   ;
   Feats=[],   
   openadjs(Args,Aggiunti,NAggiunti)), 
   !.

open_adjs(Args, Aggiunti,NAggiunti) 
   :-
   nl,nl,
   search_refl_pron(Args, AnyFunc, Feats),
   writenl(Win, 'Sorry, but your sentence contains a reflexive pronoun which does not match the features of its antecedent and binder'),
   nl,nl,
   fail,
   !.

quanthead(Head):-
   pr(pr_quantif, Part, Head, 3, mas, sing, [__1]).

search_refl_pron([], _, []):-!.

search_refl_pron([[]|Args], Func, [])
   :-
   search_refl_pron(Args, Func, Feats),!.

search_refl_pron([arg(funzione(AnyFunc), ruolo(_), SN)|Args], Func, [Gen, Num])
   :-
   (SN\=[],
    SN =.. [sn,_,_,pr(Tipo,_,Testa,_,Gen,Num,_)|_],
   (Tipo=rifl_lungo;Tipo=rifl_corto), 
   Func=AnyFunc,!
   ;
   search_refl_pron(Args, Func, [Gen, Num])),!.
   
search_refl_pron(Args, _, []):-!.

openadjs(_,[],[]).


openadjs(Args,[[]|Aggiunti],NAggiunti) 
   :-
   openadjs(Args,Aggiunti,NAggiunti). 
openadjs(Args,[Agg|Aggiunti],NAggiunti) 
   :-
   punct(Agg),
   openadjs(Args,Aggiunti,NAggiunti). 
openadjs(Args,[Agg|Aggiunti],[NAgg|NAggiunti]) 
   :-
   (
   Agg = adj(Tipo_agg,sp(prep(Prep,CatSP,Mod),SN))
   ;
   Agg = adj(temporale,sn(_,_,_,_,_,_,_))
   ),
   member(
       Tipo_agg, 
       [temporale, modale, causale, deittico,privation,
       strumentale, locativo, durata, clock_cal]),
   !,
   struttura_agg_chiuso(Args,Agg,NAgg),
   openadjs(Args,Aggiunti,NAggiunti). 

openadjs(Args,[Agg|Aggiunti],[NAgg|NAggiunti]) 
   :-
   Agg= adj(Tipo_agg,sp(prep(Prep),I,C,Testa,Spec,
            coordina([arg(A1), arg(A2)|_]))),
   assegna_controllo_xadj(Args,Prep,Controllore,default),
   Sogg = arg(funzione(sogg),ruolo(nil),
              sn(indice(Simb),
              pr(vbl,vbl,_,_G,_N,_),controllore(Controllore))),
   gen_sym(sn,Simb),
   NAgg = adj(Tipo_agg,sp(prep(Prep),I,C,Testa,Spec,coordina([arg(A1),
              arg(A2),Sogg|_]))),
   openadjs(Args,Aggiunti,NAggiunti).

openadjs(Args,[Agg|Aggiunti],[NAgg|NAggiunti]) :-
        Agg= adj(Tipo_agg,sp(prep(Prep,CatSP,Mod),SN)),
        SN=sn(I,Cat,
              coordina([arg(funzione(Funz),ruolo(Role),SN1),
                             arg(funzione(Funz),ruolo(Role),SN2)|_])),       
         assegna_controllo_xadj(Args,Prep,Controllore,default),
        Sogg = arg(funzione(sogg),ruolo(nil),
                   sn(indice(Simb),
                      pr(vbl,vbl,_,_G,_N,_),controllore(Controllore))),
        gen_sym(sn,Simb),
%        SN=sn(indice(SimbA),Cat,Testa,S,A,M,Ad),
        Funz=ogg, Role=Tipo_agg,
        Ogg = arg(funzione(ogg),ruolo(Tipo_agg),SN),
        NAgg = adj(Tipo_agg,sp(prep(Prep,CatSP,Mod),args([Sogg,Ogg]))),
   openadjs(Args,Aggiunti,NAggiunti).

openadjs(Args,[Agg|Aggiunti],[NAgg|NAggiunti]) :-
        Agg = adj(Tipo_agg,sp(prep(Prep,CatSP,Mod),SN)),
        assegna_controllo_xadj(Args,Prep,Controllore,default),
        Sogg = arg(funzione(sogg),ruolo(nil),
                   sn(indice(Simb),
                      pr(vbl,vbl,_,_G,_N,_),controllore(Controllore))),
        gen_sym(sn,Simb),
%        SN=sn(indice(SimbA),Cat,Testa,S,A,M,Ad),
        Ogg = arg(funzione(ogg),ruolo(Tipo_agg),SN),
        NAgg = adj(Tipo_agg,sp(prep(Prep,CatSP,Mod),args([Sogg,Ogg]))),
   openadjs(Args,Aggiunti,NAggiunti).

openadjs(Args,[Agg|Aggiunti],[NAgg|NAggiunti]) :-
        Agg = adj(Tipo_agg,sp(prep(Prep,CatSP,Mod),SN)),
        assegna_controllo_xadj(Args,Prep,Controllore,default),
        Sogg = arg(funzione(sogg),ruolo(nil),
                   sn(indice(Simb),
                      pr(vbl,vbl,_,_G,_N,_),controllore(Controllore))),
        gen_sym(sn,Simb),
        SN=cord(sn(I,Cat,
              coordina([arg(funzione(ogg),ruolo(Tipo_agg),SN1),
                             arg(funzione(ogg),ruolo(Tipo_agg),SN2)|_]))),       
        Ogg = arg(funzione(ogg),ruolo(Tipo_agg),SN),
        NAgg = adj(Tipo_agg,sp(prep(Prep,CatSP,Mod),args([Sogg,Ogg]))),
   openadjs(Args,Aggiunti,NAggiunti).

openadjs(Args,[Agg|Aggiunti],[NAgg|NAggiunti]) :-
     Agg = relativa(Topic,IP),
     Topic=topic(relativo, sn(Indice, Cat, PRel, controllore(Contr))),
     assegna_controllo_xadj(Args,Prep,Controllore,default),
     Contr=Controllore,
     NAgg = adj(circumst, Agg),
   openadjs(Args,Aggiunti,NAggiunti).

openadjs(Args,[Agg|Aggiunti],[NAgg|NAggiunti]) :-
   Agg = adj(Tipo_agg,saa(indice(SimbA),Cat,agg(A,G,N),
             args(LsArgs),Adjs)),
   assegna_contr_xadj_agg(Args,Cat,G,N,Controllore,default),
   Sogg = arg(funzione(sogg),ruolo(nil),
              sn(indice(Simb),
                 pr(vbl,vbl,_,G,N,_),controllore(Controllore))),
   gen_sym(sn,Simb),
   NAgg = adj(Tipo_agg,saa(indice(SimbA),Cat,
              agg(A,G,N),args([Sogg|LsArgs]),Adjs)),
   openadjs(Args,Aggiunti,NAggiunti).

openadjs(Args,[Agg|Aggiunti],[NAgg|NAggiunti]) :-
   (Agg = adj(Tipo_agg,saa(indice(SimbA),Cat,Pron,Spec,args(LsArgs),Adjs))
   ;
   Agg=[adj(Tipo_agg,saa(indice(SimbA),Cat,Pron,Spec,args(LsArgs),Adjs))]),
   (Pron=.. [pr, TipoPron, Polar, Head, Pers,G1,N1,Caso]
   ;
   Pron=.. [pr, TipoPron, Head, Pers,G1,N1,Caso]),
        (
          TipoPron=enfatico, Cat1=cat([TipoPron])
          ; 
          TipoPron=pr_quantif, 
         quanthead(Head),
         Cat1=cat([quantified])
          ;
           Cat1=Cat),
        assegna_contr_xadj_agg(Args,Cat1,G1,N1,Controllore,default),
        Sogg = arg(funzione(sogg),ruolo(nil),
                   sn(indice(Simb),
                      pr(vbl,vbl,_,G,N,_),controllore(Controllore))),
        gen_sym(sn,Simb),
       NAgg = adj(Tipo_agg,saa(indice(SimbA),Cat,Pron,Spec,args([Sogg|LsArgs]),Adjs)),
        openadjs(Args,Aggiunti,NAggiunti).

openadjs(Args,[Agg|Aggiunti],[NAgg|NAggiunti]) :-
   (Agg = saa(indice(SimbA),Cat,Pron,Spec,args(LsArgs),Adjs)
   ;
   Agg=sn(indice(SimbA),Cat,Pron,Spec,args(LsArgs),Mods,Adjs)/_
   ;
   Agg=[sn(indice(SimbA),Cat,Pron,Spec,args(LsArgs),Mods,Adjs)/_]),
   (Pron=.. [pr, TipoPron, Polar, Head, Pers,G1,N1,Caso]
   ;
   Pron=.. [pr, TipoPron, Head, Pers,G1,N1,Caso]),
        (
          TipoPron=enfatico, Tipo_agg=enfatic,
          Cat1=cat([TipoPron])
          ; 
          TipoPron=pr_quantif, Tipo_agg=quantif,
         quanthead(Head),
         Cat1=cat([quantified])
          ;
           Cat1=Cat),
        assegna_contr_xadj_agg(Args,Cat1,G1,N1,Controllore,default),
        Sogg = arg(funzione(sogg),ruolo(nil),
                   sn(indice(Simb),
                      pr(vbl,vbl,_,G,N,_),controllore(Controllore))),
        gen_sym(sn,Simb),
       NAgg = adj(valutativo,saa(indice(SimbA),Cat,Pron,Spec,args([Sogg|LsArgs]),Adjs)),
   openadjs(Args,Aggiunti,NAggiunti).

openadjs(Args,[Agg|Aggiunti],[NAgg|NAggiunti]) :-
        Agg = adj(durata,sn(indice(SimbA),Cat,Testa,_,_,_,_)),
        assegna_controllo_xadj(Args,Prep,Controllore,default),
        Sogg = arg(funzione(sogg),ruolo(nil),
                   sn(indice(Simb),
                      pr(vbl,vbl,_,_G,_N,_),controllore(Controllore))),
        gen_sym(sn,Simb),
        NAgg = adj(durata,sn(indice(SimbA),Cat,Testa,_,args([Sogg|_]),_,_)),
   openadjs(Args,Aggiunti,NAggiunti).

openadjs(Args,[Agg|Aggiunti],[Adj|NAggiunti]) :-
        (Agg = subordina(Adj); Agg = coordina(Adj)),
   openadjs(Args,Aggiunti,NAggiunti).

openadjs(Args,[Agg|Aggiunti],[Agg|NAggiunti]) :-
        functor(Agg, Fun, _), 
        (Fun=avv;Fun=adv;Fun=gerundive),
        openadjs(Args,Aggiunti,NAggiunti). 

openadjs(Args,[Agg|Aggiunti],NAggiunti) :-
        (Agg=[sn(indice(I), cat(_), cl(Tipo, _, Pro, P, _, _, Caso), spec(def(+)))/Tipo]
        ;
          Agg=sn(indice(I), cat(_), cl(Tipo, _, Pro, P, _, _, Caso), spec(def(+)))/Tipo),
        openadjs(Args,Aggiunti,NAggiunti). 

openadjs(Args,[Agg|Aggiunti],NAggiunti) :-
        Agg = [sp(prep(Prep,CatSP,Mod),SN),[]],
   openadjs(Args,Aggiunti,NAggiunti).

openadjs(Args,[Agg|Aggiunti],[NAgg|NAggiunti]) :-
        Agg = sp(prep(Prep,CatSP,Mod),SN),
        assegna_controllo_xadj(Args,Prep,Controllore,default),
        Sogg = arg(funzione(sogg),ruolo(nil),
                   sn(indice(Simb),
                      pr(vbl,vbl,_,_G,_N,_),controllore(Controllore))),
        gen_sym(sn,Simb),
        tipo_agg(Tipo_agg,Prep,LCatSP),
        Ogg = arg(funzione(ogg),ruolo(Tipo_agg),SN),
        NAgg = adj(circumst,sp(prep(Prep,CatSP,Mod),args([Sogg,Ogg]))),
   openadjs(Args,Aggiunti,NAggiunti).

openadjs(Args,[Agg|Aggiunti],[NAgg|NAggiunti]) :-
        Agg = saa(indice(SimbA),Cat,Testa,args(LsArgs),Adjs),
        Testa=agg(T,G,N),
        assegna_contr_xadj_agg(Args,Cat,G,N,Controllore,default),
        Sogg = arg(funzione(sogg),ruolo(nil),
                   sn(indice(Simb),
                      pr(vbl,vbl,_,G,N,_),controllore(Controllore))),
        gen_sym(sn,Simb),
       NAgg = adj(soggettivo,saa(indice(SimbA),Cat,Testa,args([Sogg|LsArgs]),Adjs)),
   openadjs(Args,Aggiunti,NAggiunti).

openadjs(Args,[Agg|Aggiunti],NAggiunti) :-
        compute_message('Feedback', percettivo, Agg, Message),
        openadjs(Args,Aggiunti,NAggiunti). 
   
compute_message(Win, CatV, Adj, Message):-
   Adj=sp(prep(Prep,cat(CatSP),Mod),SN),
   findall(ListaCatSP-Tipo_agg, tipo_agg(Tipo_agg,Prep,ListaCatSP), Cats),
   findall(Tipo_agg, tipo_agg(Tipo_agg,Prep,ListaCatSP), Tipi),
   findall(CatVerb-Tipo_agg, (poss_agg_sv(Tipo_agg,CatVerb), on(Tipo_agg, Tipi)), Catvs),
   individua_poss_agg(Catvs, CatV, PossAgg),
   individua_poss_comp(Cats, PossAgg, PossComp),
   active_output_win(Win),
   nl,nl,
   writenl(Win, 'Sorry, but your sentence is structurally ambiguous and cannot be parsed without special strategies: try to activate them!!'),
   nl,nl,
   writenl(Win,'The list of inherent features associated to your PP'),
   writenl(Win,CatSP),
   writenl(Win,'does not match with the allowable adjuncts of the verb'),
   writenl(Win,CatV),
   writenl(Win,'which only allows'),
   writenl(Win,PossAgg),
   writenl(Win,PossComp),
   !.

individua_poss_agg(Catvs, CatV, Poss):-
   on(Lista-Poss, Catvs),
   on(CatV, Lista),
   !.

individua_poss_comp(Cats, Poss, Lista):-
   on(Lista-Poss, Cats),
   !.

struttura_agg_chiuso(Args,Agg,NAgg):-
        Agg= adj(Tipo_agg,sp(prep(Prep,CatSP,Mod),SN)),
        SN=sn(indice(SimbA),Cat,Testa,controllore(Cont)),
        Ogg= arg(funzione(ogg),ruolo(nil),SN),
        NAgg= adj(Tipo_agg,sp(prep(Prep,CatSP,Mod),args([Ogg]))).

struttura_agg_chiuso(Args,Agg,NAgg):-
        Agg= adj(Tipo_agg,sp(prep(Prep,CatSP,Mod),SN)),
        SN=sn(indice(SimbA),Cat,Testa,S,A,M,Ad),
        Ogg= arg(funzione(ogg),ruolo(nil),SN),
        NAgg= adj(Tipo_agg,sp(prep(Prep,CatSP,Mod),args([Ogg]))).

struttura_agg_chiuso(Args,Agg,NAgg):-
        Agg= adj(Tipo_agg,sp(prep(Prep,CatSP,Mod),SN)),
        SN=args([arg(funzione(Funz),ruolo(Role),SN1)]),       
        Ogg= arg(funzione(Fun),ruolo(Rol),SN),
        Fun=ogg,Rol=tema,
        NAgg= adj(Tipo_agg,sp(prep(Prep,CatSP,Mod),args([Ogg]))).

struttura_agg_chiuso(Args,Agg,NAgg):-
        Agg= adj(Tipo_agg,sp(prep(Prep,CatSP,Mod),SN)),
        SN=sn(I,Cat,
              coordina([arg(funzione(Funz),ruolo(Role),SN1),
                             arg(funzione(Funz),ruolo(Role),SN2)|_])),       
        Ogg= arg(funzione(Funz),ruolo(Role),SN),
        Funz=ogg,Role=tema,
        NAgg= adj(Tipo_agg,sp(prep(Prep,CatSP,Mod),args([Ogg]))).

struttura_agg_chiuso(Args,Agg,NAgg):-
        Agg= adj(temporale,sn(indice(SimbA),Cat,Testa,S,A,M,Ad)),
        (S=spec(duraz(non_punt),config([tr<td])),
        Ruolo=non_punct
         ;
        Ruolo=punct),
        Ogg= arg(funzione(ogg),ruolo(Ruolo),sn(indice(SimbA),Cat,Testa,S,A,M,Ad)),
        NAgg= adj(temporale,sp(prep(nil,CatSP,Mod),args([Ogg]))).

struttura_agg_chiuso(Args,Agg,Agg):-
        Agg= adj(Tipo_agg,sp(prep(Prep,CatSP,Mod),SN)),
        SN=..[args|_],
        !.

/* l' SP e' un argomento del verbo */
interp_sv_xx(CatV,Verbo,[sp(prep(Prep,cat(CatSP),Mod),SN)|AltriSP],LArgs,_,ResArgs,ResAdjs,ListaArg1)  :-
            ( 
              argument_member(LArgs, ListP, ListaC),
             (member(Prep,ListP);Prep=ListP;member(ListP,Prep)),
             interp_cat(CatSP,ListaC),
             interp_sv_xx2(CatV,Verbo,
                [sp(prep(ListP,CatSP,Mod),SN)|AltriSP],LArgs,
                  NuovaLArgs,ResArgs,ResAdjs)
             ;
             AltriSP=[PrimoSP|Altri],
             PrimoSP=sp(prep(Prep2,cat(CatSP2),Mod2),SN1),
             argument_member(LArgs, ListP, ListaC),
             (member(Prep2,ListP);ListP=Prep2;member(ListP,Prep2)),
             interp_cat(CatSP2,ListaC),
             Lista1=sp(prep(Prep,cat(CatSP),Mod),SN),
             interp_sv_xx1(CatV,Verbo,
               [sp(prep(Prep2,CatSP2,Mod2),SN1),Lista1|Altri],LArgs,_,
                 ResArgs,ResAdjs,ListaArg1) ).

argument_member(LArgs, ListP, ListaC) :-
      LArgs\=[],
     ( nogen_member(sp/Funz/Ruolo/ListP/ListaC,LArgs)
       ;
       nogen_member(obl/Ruolo/ListP/ListaC,LArgs)).

eliminate_obl(LArgs, Funz, Ruolo, LArgs1) :-
      LArgs\=[],
     (elimina(sp/Funz/Ruolo/Prep1/ListaCat,LArgs,LArgs1)
       ;
      elimina(obl/Ruolo/Prep1/ListaCat,LArgs,LArgs1), Funz=obl).

eliminate_obl1(Prep, LArgs, Funz, Ruolo, LArgs1) :-
      LArgs\=[],
     (elimina(sp/Funz/Ruolo/Prep/ListaCat,LArgs,LArgs1)
       ;
      elimina(obl/Ruolo/Prep/ListaCat,LArgs,LArgs1), Funz=obl).

interp_sv_xx1(CatV,Verbo,[sp(prep(Prep,CatSP,Mod),SN)|AltriSP],LArgs,_,[X|ResArgs],ResAdjs,ListaArg1)  
:-
            LArgs \= [],
             eliminate_obl(LArgs, Funz, Ruolo, LArgs1),
             assegna_funz_ruolo(arg, SN, Funz, Ruolo, X),
            ( LArgs1 \= [],
              interp_sv_xx(CatV,Verbo,AltriSP,LArgs,_,
                            ResArgs,ResAdjs,LArgs1) ; 
            (AltriSP=[], ListaArg1=sp/Funz/Ruolo/Prep/ListaCat;
              ListaArg1=LArgs),
             interp_sv_x(CatV,AltriSP,LArgs1,NuovaLArgs,
                            ResArgs,ResAdjs)),
             !.


interp_sv_xx2(CatV,Verbo,[sp(prep(Prep,CatSP,Mod),SN)|AltriSP],LArgs,NuovaLArgs,[X|ResArgs],ResAdjs)
:-
             LArgs \= [],
             eliminate_obl1(Prep, LArgs, Funz, Ruolo, LArgs1),
             assegna_funz_ruolo(arg, SN, Funz, Ruolo, X),
            ( LArgs1 \= [],
              interp_sv_xx(CatV,Verbo,AltriSP,LArgs1,_,
                            ResArgs,ResAdjs,LArgs1) ; 
            (AltriSP=[], ListaArg1=sp/Funz/Ruolo/Prep/ListaCat;
              ListaArg1=LArgs),
             interp_sv_x(CatV,AltriSP,LArgs1,NuovaLArgs,
                            ResArgs,ResAdjs)),
             !.

interp_sv_oo(CatV,[sp(prep(Prep,CatSP,Mod),SN)|AltriSP],
LArgs,NuovaLArgs,[X|ResArgs],ResAdjs,Controllore)  :-
                       Prep = a,
                      SN = sn(indice(Ind),Cat,Spec,Testa,args(Args),Mods,Adj),
                     elimina(sp(prep(Prep,CatSP,Mod),SN1),ListaSP,AltriSP),
                     X = arg(funzione(ogg2),ruolo(benef),sn(indice(Ind),Cat,Spec,Testa,args(Args),Mods,Adj)),
                     Controllore = Ind, 
                      interp_sv_x(CatV,AltriSP,LArgs,NuovaLArgs,
                              ResArgs,ResAdjs).


/* dopo aver preso un obliquo ne cerca un secondo */
interp_sv_xa(CatV,AltriSP,LArgs, NuovaLArgs,[X|ResArgs],ResAdjs)  :-
             AltriSP\=[],
             AltriSP=[sp(prep(Prep,CatSP,Mod),SN)|AltrSP],
             Prep\=a,
             member(sp/Funz/Ruolo/Prep1/ListaCat,LArgs),
             (member(Prep,Prep1);Prep=Prep1;member(Prep1,Prep)),
             interp_cat(CatSP,ListaCat),
             elimina(sp/Funz/Ruolo/Prep1/ListaCat,LArgs,LArgs1),
             elimina(sp(prep(Prep,CatSP,Mod),SN),AltriSP,Lista1SP),
             SN = sn(indice(Ind),cat(CatSP),Testa,Spec,Args,Mods,Adjs),
              gen_sym(sn,Ind),
             X = arg(funzione(Funz),ruolo(Ruolo),SN),
             interp_sv_x(CatV,Lista1SP,LArgs1,NuovaLArgs,
                            ResArgs,ResAdjs),
             !.

interp_sv_xa(CatV,Verbo,AltriSP,LArgs,NuovaLArgs,[X|ResArgs],ResAdjs)  :-
             AltriSP\=[], nonvar(LArgs),
             AltriSP=[sp(prep(Prep,CatSP,Mod),SN)|AltrSP],
             member(sp/Funz/Ruolo/Prep1/ListaCat,LArgs),
             (member(Prep,Prep1);Prep=Prep1;member(Prep1,Prep)),
             elimina(sp/Funz/Ruolo/Prep1/ListaCat,LArgs,LArgs1),
             elimina(sp(prep(Prep,CatSP,Mod),SN),AltriSP,Lista1SP),
             assegna_funz_ruolo(arg, SN, Funz, Ruolo, X),
             interp_sv_x(CatV,Lista1SP,LArgs1,NuovaLArgs,
                            ResArgs,ResAdjs),
             !.

interp_sv_xa(CatV,Verbo,AltriSP,LArgs,NuovaLArgs,[X|ResArgs],ResAdjs)  :-
             AltriSP\=[], nonvar(LArgs),
             AltriSP=[sp(prep(Prep,CatSP,Mod),SN)|AltrSP],
             member(Funz/Ruolo/Prep1/ListaCat,LArgs),
             (member(Prep,Prep1);Prep=Prep1;member(Prep1,Prep)),
             elimina(Funz/Ruolo/Prep1/ListaCat,LArgs,LArgs1),
             elimina(sp(prep(Prep,CatSP,Mod),SN),AltriSP,Lista1SP),
             assegna_funz_ruolo(arg, SN, Funz, Ruolo, X),
             interp_sv_x(CatV,Lista1SP,LArgs1,NuovaLArgs,
                            ResArgs,ResAdjs),
             !.

interp_sv_xa(CatV,Verbo,AltriSP,LArgs,NuovaLArgs,[X|ResArgs],ResAdjs)  :-
             AltriSP\=[], nonvar(LArgs),
             AltriSP=[sp(prep(Prep,CatSP,Mod),SN)|AltrSP],
             member(Funz/Ruolo/Prep1/ListaCat,LArgs),
             (member(Prep,Prep1);Prep=Prep1;member(Prep1,Prep)),
             elimina(sp/Funz/Ruolo/ListaCat,LArgs,LArgs1),
             elimina(sp(prep(Prep,CatSP,Mod),SN),AltriSP,Lista1SP),
             assegna_funz_ruolo(arg, SN, Funz, Ruolo, X),
             interp_sv_x(CatV,Lista1SP,LArgs1,NuovaLArgs,
                            ResArgs,ResAdjs),
             !.

interp_sv_xa(CatV,Verbo,AltriSP,LArgs,NuovaLArgs,[X|ResArgs],ResAdjs)  :-
             AltriSP\=[], nonvar(LArgs),
             AltriSP=[sp(prep(Prep,CatSP,Mod),SN)|AltrSP],
             member(Funz/Ruolo/Prep1/ListaCat,LArgs),
             (member(Prep,Prep1);Prep=Prep1;member(Prep1,Prep)),
             member(Funz/Ruolo/ListaCat,LArgs),
             elimina(Funz/Ruolo/ListaCat,LArgs,LArgs1),
             elimina(sp(prep(Prep,CatSP,Mod),SN),AltriSP,Lista1SP),
             assegna_funz_ruolo(arg, SN, Funz, Ruolo, X),
             interp_sv_x(CatV,Lista1SP,LArgs1,NuovaLArgs,
                            ResArgs,ResAdjs),
             !.

interp_sv_xa(CatV,Verbo,AltriSP,LArgs,NuovaLArgs,[X|ResArgs],ResAdjs)  
:-
           LArgs\=[],
           ( ( ( member(sp/obl/Ruolo/a/ListaCat,LArgs),
                  Ruolo\=locativo
                 ;
                  nogen_member(sp/obl/Ruolo/Prep/ListaCat,LArgs),
                  Ruolo=goal
                 ;
                member(sp/ogg2/Ruolo/Prep/ListaCat,LArgs)
                ;
                member(sp/obl1/Ruolo/Prep/ListaCat,LArgs) ),
             elimina(sp/Funz/Ruolo/Prep/ListaCat,LArgs,LArgs1),
             SN = sn(indice(Ind),cat([umano,animato]),
                    pr(pr_quantif,exist,_,Pers,Gen,Num,Caso),
                                spec(def('-'),part('+'))),
             gen_sym(sn,Ind),
             X = arg(funzione(Funz),ruolo(Ruolo),SN));
                           AltriSP=[], var(LArgs)),
             interp_sv_x(CatV,AltriSP,LArgs1,NuovaLArgs,
                            ResArgs,ResAdjs),
             !.

interp_sv_xa(CatV,Verbo,AltriSP,LArgs, NuovaLArgs,[X|ResArgs],ResAdjs)  :-
             cat_gramm(Verbo, rifl, CatV, _),
             member(sn/ogg/Ruolo/ListaCat,LArgs),
             elimina(sn/ogg/Ruolo/ListaCat,LArgs,LArgs1),
             X = rifl('+'),
             interp_sv_x(CatV,AltriSP,LArgs1,NuovaLArgs,
                            ResArgs,ResAdjs),
             !.

interp_sv_xa(camb_attiv,fare,AltriSP,LArgs, NuovaLArgs,[X|ResArgs],ResAdjs)  :-
             AltriSP=sp(prep(Prep,CatSP,Mod),SN),
             nogen_member(sp/ogg2/Ruolo/Preps/ListaCat,LArgs),
             elimina(sp/ogg2/Ruolo/Preps/ListaCat,LArgs,LArgs1),
             X = arg(funzione(ogg2),ruolo(Ruolo),SN),
             interp_sv_x(CatV,[],LArgs1,NuovaLArgs,
                            ResArgs,ResAdjs),
             !.

/* COPULATIVA */

/* controlla copulativa */
interp_copul(Verbo,SuCatIn,LArgsV1,SN1,SN2,Xcomp/TipoXcomp,ListaSP,CatV,Args,NewAdjs_vp) :-
       subcat_on([PrimoArg|LArgs], SuCatIn),
       interp_copulat([PrimoArg|LArgs],
               Verbo,LArgsV1,SN1,SN2,Xcomp/TipoXcomp,ListaSP,CatV,Args,NewAdjs_vp).

interp_copul(Verbo,SuCatIn,
              LArgsV1,SN1,Xcomp/TipoXcomp,ListaSP,CatV,Args,NewAdjs_vp) :-
        subcat_on([PrimoArg|LArgs], SuCatIn),
       (Verbo=avere,
        ListaSP\=[],
        ListaSP=[SP|AltriSP],
        SP=sp(prep(_,_,_),SN),
        trova_testa_SN(SN,Testa),
        TipXcomp=pcomp, Xcom=SP, 
        (
         member(idioms/ogg/form/[Testa], LArgs),
         interp_copulat1([PrimoArg|LArgs],Verbo,LArgsV1,SN1,Xcomp/ogg,Xcom/TipXcomp,
              AltriSP,CatV,Args,NewAdjs_vp)
         ;
         interp_copulat([PrimoArg|LArgs],Verbo,LArgsV1,SN1,Xcomp/ogg,Xcom/TipXcomp,
              AltriSP,CatV,Args,NewAdjs_vp)
         )
         ;
      interp_copulat([PrimoArg|LArgs],
     Verbo,LArgsV1,SN1,Xcomp/TipoXcomp,ListaSP,CatV,Args,NewAdjs_vp)).


/* controlla il verbo avere */
interp_copulat1([PrimoArg|LArgs],
        Verbo,LArgsV,SN1,SN2,Xcomp/TipoXcomp,ListaSP,CatV,Args,NewAdjs_vp) 
     :-
       Verbo=avere,
       member(idioms/ogg/form/[_], LArgs),
       interp_sogg(SN1,PrimoArg,Sogg),
       (SN1=sn(indice(Ind),_,_,_,_,_,_)/sogg;
        SN1=sn(indice(Ind),_,_,_,_)/sogg),
       interp_sv_ogg_cog(SN2,LArgs,NuovaLArgs,Ogg),
       trova(cat(ListaCat),SN1),
       interp_xcomp_id(Ind,Xcomp/TipoXcomp,NuovaLArgs,NovaLArgs,X,Arg_di_contr,
            ListaCat,Contr),
       interp_sv_x(CatV,ListaSP,NovaLArgs,_,Args_vp,Adjs_vp),
       (X\=form(ci),
       assegna_controllo_xcomp([Sogg,Ogg,X|Args_vp],Contr,Arg_di_contr,ListaCat);
       X=form(ci)),
       assemble_args_adjs(PrimoArg,LArgs,[Sogg,Ogg,X],Args_vp,Adjs_vp,LArgsV,
           Args,NewAdjs_vp),       
        !.

interp_copulat([PrimoArg|LArgs],
         avere,LArgsV,SN1,SN2,Xcomp/TipoXcomp,ListaSP,CatV,Args,NewAdjs_vp) 
      :-
       interp_sogg(SN1,PrimoArg,Sogg),
       (SN1=sn(indice(Ind),_,_,_,_,_,_)/sogg;
        SN1=sn(indice(Ind),_,_,_,_)/sogg),
       interp_sv_ogg(SN2,_,LArgs,NuovaLArgs,Ogg),
       trova(cat(ListaCat),SN1),
       interp_xcomp_av(Ind,Xcomp/TipoXcomp,NuovaLArgs,NovaLArgs,X,Arg_di_contr,
             ListaCat,Contr),
       interp_sv_x(CatV,ListaSP,NovLArgs,_,Args_vp,Adjs_vp),
       (X\=form(ci),
      assegna_controllo_xcomp([Sogg,Ogg,X|Args_vp],Contr,Arg_di_contr,ListaCat);
       X=form(ci)),
       assemble_args_adjs(PrimoArg,LArgs,[Sogg,Ogg,X],Args_vp,Adjs_vp,LArgsV,
           Args,NewAdjs_vp),       
        !.

interp_copulat([PrimoArg|LArgs],
         avere,LArgsV,SN1,Xcomp/TipoXcomp,ListaSP,CatV,[X|Args],NewAdjs_vp) 
      :-
       interp_sogg_av(SN1,PrimoArg,Sogg,Ruolo2),
       trova(cat(ListaCat),SN1),
%       nogen_member(ferocious,ListaCat),
       interp_ncomp_av(Xcomp/TipoXcomp,LArgs,NuovaLArgs,X,Contr,Arg_di_contr,
            ListaCat,Ruolo1),
       ((Ruolo1=possess,Ruolo2=owner);
        (Ruolo1=stato,Ruolo2=esperiente)),    
       interp_sv_x(CatV,ListaSP,NuovaLArgs,_,Args_vp,Adjs_vp),
       (X\=form(ci),
      assegna_controllo_xcomp([Sogg,X|Args_vp],Contr,Arg_di_contr,ListaCat);
       X=form(ci)),
       assemble_args_adjs(PrimoArg,LArgs,[Sogg],Args_vp,Adjs_vp,LArgsV,
           Args,NewAdjs_vp),       
        !.

interp_copulat([PrimoArg|LArgs],
         Verbo,LArgsV,SN1,Xcomp/TipoXcomp,ListaSP,CatV,[X,Y|Args],NewAdjs_vp) 
      :-
       nonvar(TipoXcomp),
       TipoXcomp=qxcomp/P,
       (PrimoArg=sn/sogg/tema_bound/_, 
       (Verbo=esserci;Verbo=there_be),
        Primo=sn/sogg/tema_nonaff/_
       ;
        PrimoArg\=vcomp/prop/_/_,
        Primo=PrimoArg),
       interp_sogg(SN1, Primo, Sogg),
       trova(cat(ListaCat),SN1),
       interp_xcomp(Xcomp/ncomp,LArgs,NLArgs,X,Contr,Arg_di_contr,
            ListaCat),    
       interp_sv_x(CatV,ListaSP,NLArgs,_,Args_vp,Adjs_vp),
       (X\=form(ci),
        assegna_controllo_xcomp([Sogg,X|Args_vp],Contr,Arg_di_contr,ListaCat);
        (X=form(ci);X=form(there))),
       gen_sym(sn,Indice),
       SN2=sn(indice(Indice),cat(ListaCat), coordina([Sogg,X])),
       Y = arg(funzione(adj),ruolo(compar),mod(P),SN2),
       assemble_args_adjs(PrimoArg,LArgs,[Sogg],Args_vp,Adjs_vp,LArgsV,
           Args,NewAdjs_vp),       
        !.

interp_copulat([PrimoArg|LArgs],
         Verbo,LArgsV,SN1,Xcomp/TipoXcomp,ListaSP,CatV,[X|Args],NewAdjs_vp) 
      :-
       (PrimoArg=sn/sogg/tema_bound/_, 
       (Verbo=esserci;Verbo=there_be),
        Primo=sn/sogg/tema_nonaff/_
       ;
        PrimoArg\=vcomp/prop/_/_,
        Primo=PrimoArg),
       interp_sogg(SN1, Primo, Sogg),
       trova(cat(ListaCat),SN1),
       interp_xcomp(Xcomp/TipoXcomp,LArgs,NLArgs,X,Contr,Arg_di_contr,
            ListaCat),    
       interp_sv_x(CatV,ListaSP,NLArgs,_,Args_vp,Adjs_vp),
       (X\=form(ci),
        assegna_controllo_xcomp([Sogg,X|Args_vp],Contr,Arg_di_contr,ListaCat);
        (X=form(ci);X=form(there))),
%         NLArgs=TipoXcomp/prop/[],
       assemble_args_adjs(PrimoArg,LArgs,[Sogg],Args_vp,Adjs_vp,LArgsV,
           Args,NewAdjs_vp),       
        !.

interp_copulat([PrimoArg|LArgs],Verbo,LArgsV,SN1,Svinf,ListaSP,CatV,[X|Args],NewAdjs_vp) 
      :-
       interp_sogg_expl(SN1, PrimoArg, Sogg),
       interp_sv_x(CatV,ListaSP,NuovaLArgs,_,Args_vp,Adjs_vp),
       interp_comp_inf(Svinf,LArgs,_,X,FContr/RContr),
       assemble_args_adjs(PrimoArg,LArgs,[Sogg],Args_vp,Adjs_vp,LArgsV,
           Args,NewAdjs_vp),       
        !.

interp_copulat([PrimoArg|LArgs],Verbo,LArgsV,SN1,Xcomp/TipoXcomp,ListaSP,CatV,[X,Y|Args],NewAdjs_vp) 
      :-
        PrimoArg=sn/sogg/tema_bound/_, 
       (Verbo=esserci;Verbo=there_be),
        SN1=sn(I, C, cl(clitico, _, there, 3, _, sing, obl), spec(def(+)), args([]), mods([]), adjs([]))/_,
         Sogg = form(there),
         interp_xcomp(Xcomp/TipoXcomp,[PrimoArg|LArgs],NLArgs,X,Contr,Arg_di_contr,
            ListaCat),    
         interp_sv_x(CatV,ListaSP,NLArgs,_,Args_vp,Adjs_vp),
       Adjs_vp\=[], remove(Svinf,Adjs_vp,Adjs_vp1),
       interp_fcomp(Svinf,LArgs,_,Y,FContr/RContr),
       extract_controller([Sogg,Args_vp],FContr/RContr,Contr),
       assemble_args_adjs(PrimoArg,LArgs,[Sogg],Args_vp,Adjs_vp1,LArgsV,
           Args,NewAdjs_vp),       
        !.

interp_copulat([FArg|LArgs],Verbo,LArgsV,SN1,Svinf/Contr,ListaSP,CatV,[X|Args],NewAdjs_vp) 
     :-
       interp_sogg(SN1, FArg, Sogg),
       interp_sv_x(CatV,ListaSP,NuovaLArgs,_,Args_vp,Adjs_vp),
       interp_comp_inf(Svinf,[FArg|LArgs],_,X,FContr/RContr),
       extract_controller([Sogg,Args_vp],FContr/RContr,Contr),
       assemble_args_adjs(FArg,LArgs,[Sogg],Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp),       
        !.

interp_copulat([FArg|LArgs],Verbo,LArgsV,SN1,Agg/Funz,ListaSP,CatV,[X|Args],NewAdjs_vp) 
:-
       interp_sogg_expl(SN1, FArg, Sogg),
       interp_sv_x(CatV,ListaSP,NuovaLArgs,_,Args_vp,Adjs_vp),
       trova(indice(Controllore),Sogg),
       create_Pros(nil, 4, Cont, Sogg),
       Testa=agg(Agg,_,_),
       gen_sym(sn,Ind),
       SA=saa(indice(Ind),Cat,Testa,args([Sogg]),adjs([])),
       X=arg(SA),
       assemble_args_adjs(FArg,LArgs,[Sogg],Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp),       
        !.

interp_copulat([FArg|LArgs],Verbo,LArgsV,SN1,Agg/Funz,ListaSP,CatV,Args,NewAdjs_vp) 
:-
       trova(pr(deittico,Testa, 3, _, _, Caso),SN1),
       interp_sogg(SN1, FArg, Sogg),
       interp_sv_x(CatV,ListaSP,NuovaLArgs,_,Args_vp,Adjs_vp),
       assemble_args_adjs(FArg,LArgs,[Sogg],Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp),       
        !.

interp_copulat(LArgs,Verbo,LArgs,SN1/Funz,Xcomp/TipoXcomp,ListaSP,CatV,[X|Args],NewAdjs_vp) 
       :-
       Sogg = arg(funzione(sogg),ruolo(tema_bound),SN1),
       interp_xcomp(Xcomp/TipoXcomp,LArgs,NLArgs,X,Contr,Arg_di_contr,
            ListaCat),    
       interp_sv_x(CatV,ListaSP,NuovaLArgs,_,Args_vp,Adjs_vp),
       extract_controller([Sogg,Args_vp],sogg/RContr,Contr),
       assemble_args_adjs(FArg,LArgs,[Sogg],Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp),       
        !.

interp_copulat(LArgs,Verbo,LArgs,SN/Funz,Svinf/Contr,ListaSP,CatV,[X|Args],NewAdjs_vp) 
       :-
       Sogg = arg(funzione(sogg),ruolo(tema_bound),SN),
       interp_sv_x(CatV,ListaSP,NuovaLArgs,_,Args_vp,Adjs_vp),
       interp_comp_inf(Svinf,LArgs,_,X,FContr/RContr),
       extract_controller([Sogg,Args_vp],FContr/RContr,Contr),
       assemble_args_adjs(FArg,LArgs,[Sogg],Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp),       
        !.

interp_copulat(LArgs,Verbo,LArgs,SN/Funz,Svinf/Contr,ListaSP,CatV,[X|Args],NewAdjs_vp) 
       :-
       Sogg = arg(funzione(sogg),ruolo(tema_bound),SN),
       interp_sogg(SN/Funz, sn/sogg/tema_bound/CatSogg, Sogg),
       interp_sv_x(CatV,ListaSP,NuovaLArgs,_,Args_vp,Adjs_vp),
       interp_fcomp(Svinf,LArgs,_,X,FContr/RContr),
       extract_controller([Sogg,Args_vp],FContr/RContr,Contr),
       assemble_args_adjs(FArg,LArgs,[Sogg],Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp),       
        !.
interp_copulat(LArgs,Verbo,LArgs,SN/Funz,[]/xcomp,ListaSP,CatV,Args,NewAdjs_vp) 
       :-
       Sogg = arg(funzione(sogg),ruolo(tema_bound),SN),
       interp_sv_x(CatV,ListaSP,NuovaLArgs,_,Args_vp,Adjs_vp),
       assemble_args_adjs(FArg,LArgs,[Sogg],Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp),       
        !.

interp_attiva_tr_xcomp(Verbo,PredV,LArgsV1,
   SN/sogg, SN2/ogg, Xcomp/TipoXcomp, ListaSP,CatV, 
   Args_vp, NewAdjs_vp) 
   :-
   SN2 \= [],
   PredV=pred_v(Verbo, CatGr, CatV, SubCatIn),
   subcat_on([FArg | LArgs], SubCatIn), 
   on(CatGr, [trans, cop]),
   interp_attiva_xcomp([FArg | LArgs],
   SN/sogg, SN2/ogg, Xcomp/TipoXcomp, ListaSP,
   pred_v(Verbo, CatGr, CatV, SubCatIn), LArgsV1, Args_vp, NewAdjs_vp). 

interp_attiva_xcomp([FArg | LArgs],
   SN/sogg, SN2/ogg, Xcomp/TipoXcomp, ListaSP,
   pred_v(Verbo, CatGr, CatV, SubCatIn),LArgsV, Args, NewAdjs_vp)
:- 
   interp_sogg(SN / sogg, FArg, Sogg),
   interp_sv_ogg(SN2 / ogg,_, LArgs, LArgs1, Ogg),
   interp_sv_inc_x(CatV, ListaSP, NuovaLArgs, LArgs1, Args_vp, Adjs_vp, Contr),
   interp_xcomp(Xcomp/TipoXcomp, LArgs, NuovLArgs, X, Contr, Arg_di_contr, CatSogg),
   !,
   assemble_args_adjs(FArg,LArgs,[Sogg,Ogg,X],Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp),       
        !.
 

interp_attiva_xcomp([FArg | LArgs],
   SN/sogg, Xcomp/Fun, SN2/Rifl, ListaSP,
   pred_v(Verbo, CatGr, CatV, SubCatIn), LArgsV, Args, NewAdjs_vp)
   :-
   (Rifl=rifl_corto; Rifl=clitico; Rifl=rifl_lungo; Rifl=riflessivo),
   interp_sogg(SN/sogg,FArg,Sogg),
   interp_sv_ogg(SN2/ogg,_,LArgs,LArgs1,Ogg),
   interp_xcomp(Xcomp/Fun,LArgs,NuovaLArgs,X,Contr,Arg_di_contr,CatSogg),
   interp_sv_x(CatV,ListaSP,_,_,Args_vp,Adjs_vp),
   !,
   assegna_controllo_xcomp([Sogg,Ogg,X|Args_vp],Contr,Arg_di_contr,CatSogg),
   assemble_args_adjs(FArg,LArgs,[Sogg,Ogg,X],Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp),       
        !.

interp_attiva_xcomp([FArg | LArgs],
   SN/sogg, Xcomp/Fun, SN2/rifl_corto, ListaSP,
   pred_v(Verbo, CatGr, CatV, SubCatIn), LArgsV, Args, NewAdjs_vp)
   :-
   interp_sogg(SN/sogg,FArg,Sogg),
   interp_sv_ogg(SN2/ogg,_,LArgs,LArgs1,Ogg),
   interp_xcomp(Xcomp/OFun,LArgs,NuovaLArgs,X,Contr,Arg_di_contr,CatSogg),
   interp_sv_x(CatV,ListaSP,_,_,Args_vp,Adjs_vp),
   !,
   assegna_controllo_xcomp([Sogg,Ogg,X|Args_vp],Contr,Arg_di_contr,CatSogg),
   assemble_args_adjs(FArg,LArgs,[Sogg,Ogg,X],Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp),       
        !.
 
interp_attiva_xcomp([FArg | LArgs],
   SN/sogg, SN2/ogg, Xcomp/TipoXcomp, ListaSP,
   pred_v(Verbo, CatGr, CatV, SubCatIn), LArgsV, Args, NewAdjs_vp)
   :-
   interp_sogg(SN/sogg,FArg,Sogg),
   interp_sv_ogg(SN2/OFun,_,LArgs,LArgs1,Ogg),
   interp_sv_x(CatV,ListaSP,_,_,Args_vp,Adjs_vp),
   interp_comp_inf(Xcomp,[FArg|LArgs],_,X,FContr/RContr),
   extract_controller([Sogg,Ogg,Args_vp],FContr/RContr,Contr),
   !,
   assemble_args_adjs(FArg,LArgs,[Sogg,Ogg,X],Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp),       
        !.


interp_attiva_xcomp([FArg | LArgs],
   SN/sogg, SN2/ogg, Xcomp/TipoXcomp, ListaSP,
   pred_v(Verbo, CatGr, CatV, SubCatIn), LArgsV, Args, NewAdjs_vp)
   :-
   interp_sogg(SN/sogg,FArg,Sogg),
   interp_sv_ogg(SN2/OFun,_,LArgs,LArgs1,Ogg),
   interp_xcomp(Xcomp/TipoXcomp,LArgs,NuovaLArgs,X,Contr,Arg_di_contr,CatSogg),
   interp_sv_x(CatV,ListaSP,_,_,Args_vp,Adjs_vp),
   !,
   assegna_controllo_xcomp([Sogg,Ogg,X|Args_vp],Contr,Arg_di_contr,CatSogg),
   assemble_args_adjs(FArg,LArgs,[Sogg,Ogg,X],Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp),       
        !.


/* assegna_controllo_xadj assegna un controllore agli aggiunti aperti
 prendendo dalla struttura argomentale del verbo e privilegiando 
 l'ogg2/paziente (mario ha rubato un libro a gianni nella propria casa)
 quindi l'ogg/tema_aff (mario ha picchiato l'asino nella propria stalla) */

assegna_controllo_xadj(Args,Prep,Controllore,default) :-
   (Prep=da;Prep=from),
   trova_Sncontrollore(Args, sogg, _, Strutt),   
   !,
   trova(indice(Controllore),Strutt),
   !.

assegna_controllo_xadj(Args,Prep,Controllore,default) :-
   on(Fun-Role, 
      [ogg2-paziente, ogg-tema_aff, ogg-tema_eff, sogg-_]),
   trova_Sncontrollore(Args, Fun, Role, Strutt),   
   !,
   trova(indice(Controllore),Strutt),
   !.
assegna_controllo_xadj(Args,Prep,indefinito,default).

/***********************
assegna_contr_xadj_agg(
   +Args, cat(+CatAgg), +GenAgg, +NumAgg, 
   -Controllore, default) 
***********************/
assegna_contr_xadj_agg(
   Args, cat([CatAgg]), GenAgg, NumAgg,
   Controllore,default) 
   :-
   (CatAgg=soggettivo; CatAgg=enfatico),
   legal_fun_role(CatAgg, Fun, Role, ConstraintOnRole), 
   trova_Sncontrollore(Args, Fun, Role, ArgInfo),
   call(ConstraintOnRole),
   match_gen_num(GenAgg, NumAgg, ArgInfo),
   trova(cat(CatNome), ArgInfo),
   interp_modificatore_saa1(CatNome, cat([CatAgg])),
   !,
   trova(indice(Controllore),ArgInfo).

assegna_contr_xadj_agg(
   Args, cat([CatAgg]), GenAgg, NumAgg,
   Controllore,default) 
   :-
   stage_level(CatAgg),
   legal_fun_role(CatAgg, Fun, Role, ConstraintOnRole), 
   trova_Sncontrollore(Args, Fun, Role, ArgInfo),
   call(ConstraintOnRole),
   (CatAgg=quantif, match_gen_num(GenAgg, _, ArgInfo);
    CatAgg\=quantif, match_gen_num(GenAgg, NumAgg, ArgInfo)
    ),
   trova(cat(CatNome), ArgInfo),
   interp_modificatore_saa1(CatNome, cat([CatAgg])),
   !,
   trova(indice(Controllore),ArgInfo).
assegna_contr_xadj_agg(Args,Cat,G,N,indefinito,default).

/*****************
legal_fun_role(-LegalFunction, -Role, -ConstraintOnRole).
NB: true always succeds. It corrisponds to an empty constraint.
*****************/
legal_fun_role(quantif, ogg2, Role, Role\=form) .
legal_fun_role(soggettivo, sogg, _, true).
legal_fun_role(enfatico, sogg, _, true).
legal_fun_role(Cat, obl, Role,  (Role=agente, Cat\=quantif)).
legal_fun_role(Cat, ogg, Role, (on(Role, [tema_aff, tema_eff]), 
                    ( Cat\=enfatico, Cat\=quantif))).
legal_fun_role(_, sogg, _, true).
legal_fun_role(_, sogg_top, Role, true).
legal_fun_role(_, sogg_foc, Role, true).


/*****************
match_gen_num(+Gen, +Num, +ArgInfo).
== Succeds if adjective gender and number matches name gender and number 
*****************/
match_gen_num(Gen, Num, ArgInfo) :-
   trova(n(_,Gen,Num), ArgInfo).

match_gen_num(Gen, Num, ArgInfo) :-
   trova(npro(_,Gen,Num), ArgInfo).

match_gen_num(Gen, Num, ArgInfo) :-
   trova(pr(_,_,_,_,Gen, Num,_), ArgInfo).

match_gen_num(_, _, ArgInfo) :-
   trova(cl(_,_,_,_,_,_,_), ArgInfo).

stage_level(quantif).
stage_level(quantified).
stage_level(emotivo).
stage_level(valutativo).
stage_level(stato_temp).

assegna_controllo_xcomp(Args, Controllore, default, CatSogg) :-
   (
   assegna_controllo_bound(Args,Controllore,_,CatSogg)
   ;
   assegna_controllo_pcomp(Args,Controllore,_,CatSogg)
   ;
   assegna_controllo(Args,Controllore,_,CatSogg)
   ).

assegna_controllo_xcomp(Args,Controllore,Arg_di_contr) :-
   trova_Sncontrollore(Args, Arg_di_contr, _, Strutt),
   trova(indice(Controllore),Strutt),
   !.
                                            
assegna_controllo_xcomp(_Args,indefinito,_Arg_di_contr) :- 
   !.

assegna_controllo_bound(Args,Controllore,_,CatSogg) :-
   Ruolo=tema_bound,
   (
   trova_Sncontrollore(Args, ogg, Ruolo, Strutt),
   Funz=ogg
   ;
   trova_Sncontrollore(Args, sogg, Ruolo, Strutt),
   Funz=sogg
   ),
   !,           
   interp_sogg_bound(Strutt/Funz,sn/Funz/Ruolo/CatSogg,X),                                                               
   trova(indice(Controllore),Strutt).

assegna_controllo_pcomp(Args,Controllore,_,CatSogg) :- 
   on(Fun-Role, [pcomp-loc_origin, ogg-_, sogg-_]),
   trova_Sncontrollore(Args, Fun, Role, Strutt),
   !,
   trova(indice(Controllore),Strutt),
   !.

/********************
== Assegna il controllo a un xcomp
********************/
assegna_controllo(Args, Controllore, _, RestrController) :- 
   legal_xcomp_controller(Fun),
   member(arg(funzione(Fun), _, ArgInfo), Args),
   !,
   trova(cat(CatController), ArgInfo),
   member(Cat, CatController),
   member(Cat, RestrController),
   trova(indice(Controllore), ArgInfo),
   !.

legal_xcomp_controller(ogg2).
legal_xcomp_controller(ogg).
legal_xcomp_controller(_).


/* controlla il xcomp del verbo avere */
interp_xcomp_id(Ind,SP1/pcomp,[PrimoArg|LArgs],NuovaLArgs,X,Arg_di_contr,CatSogg,Controllore) :-
             nonvar(SP1), 
             trova_controllore_xcomp(idioms,Ruolo,ListaCat,[sogg=Arg_di_contr],
                         LArgs,NuovaLArgs),
             Ruolo=form,
             LArgs=[idioms/ogg/form/[T1]],
             SP1=sp(prep(P,Cat,Mod),SN),
             SN=sn(_,_,n(T,G,N),_,_,_,_),
             T=T1,
             build_pcomp_args(Ruolo,SN,[],P,Mod,X),
             !.

interp_xcomp_av(Ind,SP1/pcomp,LArgs,NuovaLArgs,X,Arg_di_contr,CatSogg,Controllore) :-
             nonvar(SP1), 
             SP1=sp(prep(Prep,cat(Cat),Mod),sn(indice(Indic),cat(Cat),Spec,
                         Testa,_,Mods,Adjs)),
             member(body_part,Cat),
             trova_controllore_xcomp(pcomp,Ruolo,ListaCat,[sogg=Arg_di_contr],
                    LArgs,NuovaLArgs),
             member(CC,Cat), member(CC,ListaCat),
             tipo_agg(Ruolo,Prep,ListaCat1),
             create_Pros(sogg/poss/CatSogg, 3, Ind, Poss),
             Args = [Poss],
             create_Pros(nil, 4, Cont, Sogg),
             SN1=sn(indice(Indic),cat(Cat),Spec,Testa,args(Args),Mods,Adjs),             
             build_pcomp_args(Ruolo,SN1,[Sogg],Prep,Mod,X),
             !.

interp_xcomp_av(Ind,SP1/pcomp,LArgs,NuovaLArgs,X,Arg_di_contr,CatSogg,Controllore) 
            :-
             nonvar(SP1), 
             trova_controllore_xcomp(pcomp,Ruolo,ListaCat,[sogg=Arg_di_contr],
                      LArgs,NuovaLArgs),
             SP1=sp(prep(P,cat(Cat),Mod),SN),
             member(CC,Cat),
             tipo_agg(Role,P,ListaCat1),
             member(CC,ListaCat1),
             create_Pros(nil, 4, Cont, Sogg),
             build_pcomp_args(Role,SN,[Sogg],P,Mod,X),
             !.

/* trova nella lista di argomenti del verbo quello relativo all'xcomp, lo elimina dalla lista e restituisce il controllore */

trova_controllore_xcomp(
   Funz, Ruolo, ListaCat,
   [sogg=Arg_di_contr],
   LArgs,NuovaLArgs) 
   :-
   LArgs\=[],
   (
   nogen_member(Funz/Ruolo/ListaCat, LArgs),
   elimina(Funz/Ruolo/Lista,LArgs,NuovaLArgs),
   Arg_di_contr = default
   ;
   nogen_member(Funz/Ruolo/ListaCat/[sogg=Arg_di_contr],LArgs),
   elimina(Funz/Ruolo/ListaCat/[sogg=Arg_di_contr],
      LArgs,NuovaLArgs)
   ;
   member(xcomp/Ruolo/ListaCat,LArgs),
   elimina(xcomp/Ruolo/ListaCat,LArgs,NuovaLArgs),
   Arg_di_contr = default
   ;
   member(xcomp/Ruolo/ListaCat/[sogg=Arg_di_contr],LArgs),
   elimina(xcomp/Ruolo/ListaCat/[sogg=Arg_di_contr],
      LArgs,NuovaLArgs)
   ;
   nogen_member(Funz/Ruolo/_, LArgs),
   elimina(Funz/Ruolo/_,LArgs,NuovaLArgs),
   Arg_di_contr = default
   ).

/* controllo dell'infinitiva come complemento */

interp_comp_mod(inf(Prep,Inf)/Funz,Args,Y,FContr/RContr):- 
                   Inf = infinitiva(I,V,S,C,Args,A),
                   Args=args([arg(funzione(FContr),ruolo(RContr),SN)]),
                   Y = arg(funzione(Funz),ruolo(prop),Inf), !.

interp_comp_inf([],LArgs,NLArgs,[],nil/nil):-!.
interp_comp_inf([]/[],LArgs,NLArgs,[],nil/nil):-!.
interp_comp_inf(inf(Prep,Inf)/Funz,LArgs,NLArgs,Y,FContr/RContr)
          :- 
          member(vcomp/Ruolo/Prep1/[sogg=FContr/RContr],LArgs),
          (Prep=ad, Prep1=a,Ruolo1=Ruolo
                    ;
           (member(Prep,Prep1),
                 Prep=Prep1;
               Prep=[],member(none,Prep1)),
                     Ruolo1=Ruolo
                     ;
            (gr(english), Prep=but
                      ; gr(italiano), Prep=ma),
                Ruolo1=propexcept),
           erase_vp_prop_args(pred,Inf,vcomp/Ruolo/Prep1/_,LArgs,NLArgs,Y),
           !.


interp_comp_inf(inf(Prep,Inf)/Funz,LArgs,NLArgs,Y,x/x)
           :- 
           member(vcomp/Ruolo/Prep1/[sogg=x],LArgs),
           (member(Prep,Prep1);Prep=Prep1),
           erase_vp_prop_args(pred,Inf,vcomp/Ruolo/Prep1/_,LArgs,NLArgs,Y),
           !.

interp_comp_inf(Inf/Funz,LArgs,NLArgs,Y,FContr/RContr)
           :- 
           member(f/fcomp/Ruolo/[sogg=x],LArgs),
           erase_vp_prop_args(npred,Inf,f/fcomp/Ruolo/_,LArgs,NLArgs,Y),
           !.

interp_comp_inf(Inf/_Funz,LArgs,NLArgs,Y,x/x)
           :- 
           member(vcomp/Ruolo/Prep1/[sogg=x],LArgs),
           erase_vp_prop_args(pred,Inf,vcomp/Ruolo/_/_,LArgs,NLArgs,Y),
           !.

interp_comp_inf(inf(Prep,Inf)/Funz,LArgs,NLArgs,Y,FContr/RContr)
           :- 
           member(vcomp/Ruolo/_/[sogg=FContr/RContr],LArgs),
           erase_vp_prop_args(pred,Inf,vcomp/Ruolo/_/_,LArgs,NLArgs,Y),
           !.

interp_comp_inf(Inf,LArgs,NLArgs,Y,FContr/RContr)
           :- 
           member(vcomp/Ruolo/_/[sogg=FContr/RContr],LArgs),
           erase_vp_prop_args(pred,Inf,vcomp/Ruolo/_/_,LArgs,NLArgs,Y),
           !.

interp_comp_ger(Ger,LArgs,NLArgs,Y,sogg/RContr)
           :- 
           member(sadv/Funz/Ruolo/_,LArgs),
           erase_vp_prop_args(npred,Ger,sadv/Funz/Ruolo/_,LArgs,NLArgs,Y),
           !.

interp_infinitiva_tr_ogg(Controllo,Controllo1,
   Verbo,SN/ogg,Svinf,ListaSP,CatV,PredV,LArgsV1,[Sogg,Ogg,Y|Args_vp],NewAdjs_vp) 
:-
subcat_on([PrimoArg|LArgs], PredV),
interpreta_infinitiva_tr_ogg(Controllo,Controllo1,[PrimoArg|LArgs],
Verbo,SN/ogg,Svinf,ListaSP,CatV,LArgsV1,[Sogg,Ogg,Y|Args_vp], NewAdjs_vp).

interpreta_infinitiva_tr_ogg(Controllo,Controllo1,[PrimoArg|LArgs],
Verbo,SN,Svinf1,ListaSP,CatV,LArgsV,[Y|Args],NewAdjs_vp) 
:-
       interp_sv_ogg(SN,_,LArgs,NuovaLArgs,Ogg),
       interp_comp_inf(Svinf1,NuovaLArgs,_,Y,FContr/RContr),
       create_Pros(PrimoArg, 1, Controllo, Subj),
       extract_controller([Subj,Ogg|Args_vp],FContr/RContr,Controllo1),
       interp_sv_x(CatV,ListaSP,ListaAr,NovaLArgs,Args_vp,Adjs_vp),
       assemble_args_adjs(PrimoArg,LArgs,[Subj,Ogg],Args_vp,Adjs_vp,   
            LArgsV,Args,NewAdjs_vp),       
       !.

interp_infinitiva_trans(Controllo,
   Verbo,SN,ListaSP,CatV,PredV,LArgsV1,Args_vp,  
        NewAdjs_vp) 
:-
subcat_on([PrimoArg|LArgs], PredV),
interpreta_infinitiva_trans(Controllo,[PrimoArg|LArgs],Verbo,SN,ListaSP,CatV,LArgsV1,Args_vp, 
            NewAdjs_vp).


interpreta_infinitiva_trans(Controllo,[PrimoArg|LArgs],Verbo,SN,ListaSP,CatV,LArgsV,Args,NewAdjs_vp)
 :-
       ListaSP=[sp(prep(Prep,cat(CatSP),Mod),SN1)|AltriSP],
       interp_sv_ogg_poss(SN,LArgs,NuovaLArgs,Ogg,Controllore),
       interp_sv_rifl(CatV,[sp(prep(a,cat(CatSP),Mod),SN1)|AltriSP],NuovaLArgs,    
             ListAr,Altr,[Obl|Args_vp],Adjs_vp,Controllore),       
       create_Pros(PrimoArg, 1, Controllo, Subj),
       interp_sv_x(CatV,AltriSP,NuovaLArgs,_,Args_vp,Adjs_vp),
       assemble_args_adjs(PrimoArg,LArgs,[Subj,Ogg,Obl],Args_vp,Adjs_vp,   
            LArgsV,Args,NewAdjs_vp),       
         !.

interpreta_infinitiva_trans(Controllo, [PrimoArg|LArgs],Verbo,SN,ListaSP,CatV,LArgsV,Args,NewAdjs_vp) 
:-
       ListaSP\=[],
       ListaSP=[sp(prep(Prep,cat(CatSP),Mod),SN)|AltriSP],
       interp_sv_ogg_poss(SN,LArgs,NuovaLArgs,Ogg,Controllore),
       interp_sv_rifl(CatV,[sp(prep(a,cat(CatSP),Mod),SN)|AltriSP],NuovaLArgs,
                 ListAr,Altr,[Obl|Args_vp],Adjs_vp,Controllore),       
       create_Pros(PrimoArg, 1, Controllo, Subj),
       interp_sv_x(CatV,AltriSP,NuovaLArgs,_,Args_vp,Adjs_vp),
       assemble_args_adjs(PrimoArg,LArgs,[Subj,Ogg],Args_vp,Adjs_vp,   
            LArgsV,Args,NewAdjs_vp),       
         !.

interpreta_infinitiva_trans(Controllo,[FArg|LArgs],Verbo,SN,ListaSP,CatV,LArgsV,Args,NewAdjs_vp) 
:-
       interp_sv_ogg(SN,Tipo,LArgs,NLArgs,Ogg),
       dis_obl_pps(ListaSP,CatV,Verbo,FArg,LArgs,NLArgs,Args_vp,Adjs_vp,LArgsV),
       (on( sn/ogg/Rol/Catogg,LArgs);
       on( sn/ogg_avv/Rol/Catogg,LArgs)),
       (nonvar(Tipo),
            (Tipo=rifl_corto,
              member(CC,Catogg),
              member(CC,CatSogg)
              ;
             Tipo\=rifl_corto)
        ;var(Tipo)),
       create_Pros(FArg, 1, Controllo, Subj),
       assemble_args_adjs(FArg,LArgs,[Subj,Ogg],Args_vp,Adjs_vp,   
            _,Args,NewAdjs_vp),       
         !.

interpreta_infinitiva_trans(Contr,[FArg|LArgs],Verbo,SN,ListaSP,CatV,LArgsV,Args,NewAdjs_vp) 
       :-
       interp_sv_ogg(SN,Tipo,LArgs,NLArgs,Ogg),
       interp_sv_x(CatV,ListaSP,NLArgs,_,Args_vp,Adjs_vp),
       (on( sn/ogg/Rol/Catogg,LArgs);
       on( sn/ogg_avv/Rol/Catogg,LArgs)),
       (nonvar(Tipo),
            (Tipo=rifl_corto,
              member(CC,Catogg),
              member(CC,CatSogg)
              ;
             Tipo\=rifl_corto)
        ;var(Tipo)),
       create_Pros(FArg, 1, Contr, Subj),
       assemble_args_adjs(FArg,LArgs,[Subj,Ogg],Args_vp,Adjs_vp,   
            LArgsV,Args,NewAdjs_vp),       
         !.

interp_infin_trans_fcomp(Contr,Verbo,ListaSP,Fcomp,CatV,PredV,LArgsV,[Y|Args],NewAdjs_vp) 
       :-
       subcat_on([FArg|LArgs], PredV),
       interp_fcomp(Fcomp,LArgs,ListaAr,Y,ListaControlli),!,
       nonpredic_contr(Fcomp,Modo,[Sogg|Args_vp],ListaControlli),
       interp_sv_x(CatV,ListaSP,ListaAr,NuovaListaAr,Args_vp,Adjs_vp),
       create_Pros(FArg, 1, Contr, Subj),
       assemble_args_adjs(FArg,LArgs,[Subj],Args_vp,Adjs_vp,   
            LArgsV,Args,NewAdjs_vp),       
         !.

interp_infinitiva_trans_inf(Contr,Contr1,Verbo,Svinf1,ListaSP,CatV,PredV,LArgsV,[Y|Args],NewAdjs_vp) 
       :-
       subcat_on([PrimoArg|LArgs], PredV),
       interp_comp_inf(Svinf1,LArgs,_,Y,FContr/RContr),
       create_Pros(PrimoArg, 1, Contr, Subj),
       extract_controller([Subj|Args_vp],FContr/RContr,Contr1),
       interp_sv_x(CatV,ListaSP,ListaAr,NuovaLArgs,Args_vp,Adjs_vp),
       assemble_args_adjs(FArg,LArgs,[Subj],Args_vp,Adjs_vp,   
            LArgsV,Args,NewAdjs_vp),       
       !.

interp_inf_intr_inf(Controllo,Controllo1,
Verbo,Svinf1,ListaSP,CatV,PredV,LArgsV,[Subj,Y|Args_vp],Adjs_vp) 
:-
       subcat_on([PrimoArg|LArgs], PredV),
       interp_sv_x(CatV,ListaSP,LArgs,NuovaLArgs,Args_vp,Adjs_vp),
       interp_comp_inf(Svinf1,LArgs,_,Y,FContr/RContr),
       create_Pros(PrimoArg, 1, Controllo, Subj),
       extract_controller([Subj|Args_vp],FContr/RContr,Controllo1),
       assemble_args_adjs(PrimoArg,LArgs,[Subj],Args_vp,Adjs_vp,LArgsV,
           Args,NewAdjs_vp),       
       !.


interp_infinitiva_intr(Controllo,Verbo,PredV,LArgsV1,ListaSP,CatV,[Sogg|Args_vp],NewAdjs_vp)
     :-
      PredV=pred_v(Verbo,CatGr,CatV,SubCatIn),
      interp_infinitintr(Controllo,SubCatIn,CatGr,Verbo,LArgsV1,ListaSP,CatV,[Sogg|
         Args_vp],NewAdjs_vp).

interp_infinitiva_intr(Controllo,
   Verbo,SN,PredV,LArgsV1,ListaSP,CatV,[Sogg|Args_vp],NewAdjs_vp)
   :-
      PredV=pred_v(Verbo,CatGr,CatV,SubCatIn),
     interp_infinitintr(Controllo,SubCatIn,CatGr,Verbo,SN,LArgsV1,ListaSP,CatV,[
       Sogg|Args_vp],NewAdjs_vp).

interp_infinitintr(Contr,SubCatIn,CatGr,Verbo,LArgsV,ListaSP,CatV,Args,NewAdjs_vp)
 :-
       (subcat_on([PrimoArg|LArgs], SubCatIn)
        ;
       SubCatIn=PrimoArg),
       (CatGr=intr;CatGr=inac;CatGr=rifl;CatGr=vatm),
       discharge_ambs_pps(ListaSP,CatV,Verbo,PrimoArg,SubCatIn,NLArgs,Args_vp,Adjs_vp,LArgsV), 
       create_Pros(PrimoArg, 1, Contr, Subj),
       assemble_args_adjs(_,_,[Subj],Args_vp,Adjs_vp,_,Args,NewAdjs_vp),       
       !.

interp_infinitintr(Controllo,SubCatIn,CatGr,Verbo,SN,LArgsV,ListaSP,CatV,Args,NewAdjs_vp)
 :-
       (subcat_on([PrimoArg|LArgs], SubCatIn)
        ;
       SubCatIn=PrimoArg),
       (CatGr=intr;CatGr=inac;CatGr=rifl;CatGr=vatm),
       interp_sv_x(CatV,ListaSP,LArgs,_,Args_vp,Adjs_vp),
       PrimoArg = sn/sogg/Ruolo/CatSogg,
       SN1 = sn(indice(Ind), cat([umano]), 
         cl(pro_imp, _, si, Pers, G, Num, [nom]), 
         spec(def(-),part(+)), 
         args(_), mods(_), adjs(_)),
       gen_sym(sn, Ind),
       Sogg = arg(funzione(sogg),ruolo(Ruolo),SN1),
       gen_sym(sn,Simb),
       assemble_args_adjs(PrimoArg,LArgs,[Subj],Args_vp,Adjs_vp,LArgsV,
           Args,NewAdjs_vp),       
       !.

interp_infinitiva_cop(Controllo,
  Verbo,Xcomp/TipoXcomp,PredV,LArgsV,ListaSP,CatV,[Subj, X|Args_vp],NewAdjs_vp)
:-
       (subcat_on([PrimoArg|LArgs], PredV)
        ;
       SubCatIn=PrimoArg),
       interp_xcomp(Xcomp/TipoXcomp,LArgs,NovaLArgs,X,Contr,Arg_di_contr,LCat),
       create_Pros(PrimoArg, 1, Controllo, Subj),
       interp_sv_x(CatV,ListaSP,ListaAr,_,Args_vp,Adjs_vp),
       assemble_args_adjs(PrimoArg,LArgs,[Subj],Args_vp,Adjs_vp,LArgsV,
           _,NewAdjs_vp),       
       !.

interp_infinitiva_ell(Controllo,
    Verbo,ListaSP,CatV,PredV,LArgsV,[Subj,Ogg|Args_vp],NewAdjs_vp) 
 :-
       (subcat_on([PrimoArg|LArgs], PredV)
        ;
       SubCatIn=PrimoArg),
       create_Pros(PrimoArg, 1, Controllo, Subj),
      (on(sn/ogg/Ruolo1/Cat, LArgs)
       ;on(sn/ogg_avv/Ruolo1/Cat, LArgs)),
       Ogg = arg(funzione(ogg),ruolo(Ruolo1),
                  sn(indice(Simb),cat(Cat),
              pr(pro_grande,pPro,_,_,_,_,[acc]),controllore(indefinito))),
       gen_sym(sn,Simb),
       interp_sv_x(CatV,ListaSP,ListaAr,_,Args_vp,Adjs_vp),
       assemble_args_adjs(PrimoArg,LArgs,[Subj],Args_vp,Adjs_vp,LArgsV,
           _,NewAdjs_vp),       
       !.

/* CONTROLLO GERUNDIVE */

interp_gerundiva_tr_ogg2(Controllo,Verbo,SN,Svinf,ListaSP,CatV,PredV,LArgsV1,Args_vp,NewAdjs_vp) 
  :-
   subcat_on([PrimoArg|LArgs], PredV),
   interpreta_gerundiva_tr_ogg2(Controllo,[PrimoArg|LArgs],Verbo,SN,Svinf,ListaSP, 
       CatV,LArgsV1,Args_vp,NewAdjs_vp).

interp_gerundiva_tr(Verbo,SN,ListaSP,CatV,PredV,LArgsV1,Args_vp, NewAdjs_vp) 
   :-
   subcat_on([PrimoArg|LArgs], PredV),
   interpreta_gerundiva_tr([PrimoArg|LArgs],Verbo,SN,ListaSP,CatV,LArgsV1,Args_vp,
    NewAdjs_vp).

interp_gerundiva_ell(Verbo,ListaSP,CatV,PredV,LArgsV1,[Sogg,Ogg|Args_vp],  
        NewAdjs_vp,controllore(Ctr)) 
   :-
   subcat_on([PrimoArg|LArgs], PredV),
   interpreta_gerundiva_ell([PrimoArg|LArgs],Verbo,ListaSP,CatV,LArgsV1,[Sogg,Ogg| 
     Args_vp], NewAdjs_vp,controllore(Ctr)).

interp_gerundiva_intr(Verbo,ListaSP,CatV,PredV,LArgsV1,[Sogg|Args_vp],NewAdjs_vp) 
   :-
     subcat_on([PrimoArg|LArgs], PredV),
      interpreta_gerundiva_intr([PrimoArg|LArgs],CatGr,Verbo,ListaSP,CatV,
         LArgsV1,[Sogg|Args_vp],NewAdjs_vp).

interp_gerundiva_copul(Verbo,SN,Xcomp/TipoXcomp,ListaSP,CatV,PredV,LArgsV1,Args_vp,  
        NewAdjs_vp) 
   :-
     subcat_on([PrimoArg|LArgs], PredV),
     interpreta_gerundiva_copul([PrimoArg|LArgs],Verbo,SN,Xcomp/TipoXcomp,ListaSP,
       CatV,LArgsV1,Args_vp,NewAdjs_vp).

interpreta_gerundiva_copul([PrimoArg|LArgs],Verbo,SN, Xcomp/TipoXcomp,ListaSP,CatV,LArgsV,[Subj,Ogg,X|Args_vp],NewAdjs_vp) 
   :-
      Verbo=have,
      interp_sv_ogg_cog(SN,LArgs,NuovaLArgs,Ogg),
      interp_xcomp(Xcomp/TipoXcomp,NuovaLArgs,NovaLArgs,X,   
                 Controllore,Arg_di_contr,ListaCat),
      interp_sv_x(CatV,ListaSP,_,_,Args_vp,Adjs_vp),
      create_Pros(PrimoArg, 1, indefinito, Subj),
       assemble_args_adjs(PrimoArg,LArgs,[Subj, Ogg],Args_vp,Adjs_vp,LArgsV,
           Args,NewAdjs_vp),       
       !.

interpreta_gerundiva_intr([PrimoArg|LArgs],CatGr,Verbo,ListaSP,CatV,LArgsV,Args,NewAdjs_vp) 
:-
       (CatGr=intr;CatGr=inac),
       discharge_ambs_pps(ListaSP,CatV,Verbo,PrimoArg,[PrimoArg|LArgs],NLArgs,Args_vp,Adjs_vp,LArgsV),
       create_Pros(PrimoArg, 1, indefinito, Subj),
       assemble_args_adjs(PrimoArg,LArgs,[Subj],Args_vp,Adjs_vp,LArgsV,
           Args,NewAdjs_vp),       
       !.

interpreta_gerundiva_ell([PrimoArg|LArgs],Verbo,ListaSP,CatV,LArgsV,[Subj,Ogg|Args_vp], NewAdjs_vp,controllore(Ctr))
:-
       create_Pros(PrimoArg, 1, indefinito, Subj),
       create_Pros(LArgs, 2, Ctr, Ogg),
       interp_sv_x(CatV,ListaSP,ListaAr,_,Args_vp,Adjs_vp),
       assemble_args_adjs(PrimoArg,LArgs,[Subj],Args_vp,Adjs_vp,LArgsV,
           _,NewAdjs_vp),       
       !.

interpreta_gerundiva_tr([PrimoArg|LArgs],Verbo,SN,ListaSP,CatV,LArgsV,Args,NewAdjs_vp)
     :-
       interp_sv_ogg(SN,_,LArgs,NuovaLArgs,Ogg),
       discharge_pps(ListaSP,CatV,Verbo,PrimoArg,NuovaLArgs,NLArgs,Args_vp,Adjs_vp,
          LArgs1), 
       create_Pros(PrimoArg, 1, indefinito, Subj),
       assemble_args_adjs(PrimoArg,LArgs,[Subj, Ogg],Args_vp,Adjs_vp,LArgsV,
           Args,NewAdjs_vp),       
      !.

interpreta_gerundiva_tr([PrimoArg|LArgs],Verbo,SN,LSP,CatV,LArgsV, Args, NewAdjs_vp)
      :-
       (Ogge=ogg;Ogge=ogg_avv),
       (var(SN);SN=Og/F, var(Og)),
       on(sn/Ogge/Ruolo1/Cat1,LArgs),
       create_Pros(PrimoArg, 1, indefinito, Subj),
       interp_sv_x(CatV,LSP,ListaAr,_,Args_vp,Adjs_vp),
       assemble_args_adjs(PrimoArg,LArgs,[Subj],Args_vp,Adjs_vp,LArgsV,
           Args,NewAdjs_vp),       
       !.

interpreta_gerundiva_tr([PrimoArg|LArgs],Verbo,Fcomp,ListaSP,CatV,LArgsV,[Subj,Y|Args_vp],NewAdjs_vp)
     :-
       interp_fcomp(Fcomp,LArgs,ListaAr,Y,ListaControlli),!,
       nonpredic_contr(Fcomp,Modo,[Subj|Args_vp],ListaControlli),
       interp_sv_x(CatV,ListaSP,NuovaLArgs,_,Args_vp,Adjs_vp),
       create_Pros(PrimoArg, 1, indefinito, Subj),
       assemble_args_adjs(PrimoArg,LArgs,[Subj],Args_vp,Adjs_vp,LArgsV,
           _,NewAdjs_vp),       
       !.

interpreta_gerundiva_tr_ogg2(Controllo,
   [PrimoArg|LArgs],Verbo,SN,Svinf1,ListaSP,CatV,LArgsV,[Subj,Ogg,Y|Args_vp],NewAdjs_vp)
:-
       interp_sv_ogg(SN,_,LArgs,NuovaLArgs,Ogg),
       interp_sv_x(CatV,ListaSP,_,_,Args_vp,Adjs_vp),
       interp_comp_inf(Svinf1,LArgs,_,Y,FContr/RContr),
       create_Pros(PrimoArg, 1, Controllo, Sogg1),
       extract_controller([Sogg1,Ogg|Args_vp],FContr/RContr,Controllo1),
       create_Pros(PrimoArg, 1, Controllo1, Subj),
       assemble_args_adjs(PrimoArg,LArgs,[Subj, Ogg],Args_vp,Adjs_vp,LArgsV,
           _,NewAdjs_vp),       
       !.

/* controlla participiali */

interp_part_pass(Cont, Verbo,PredV,LArgsV1, ListaSP,CatV,[Sogg|Args_vp],Adjs_vp,Cat) 
:-
      PredV=pred_v(Verbo,CatGr,CatV,SubCatIn),
      subcat_on([PrimoArg|LArgs], SubCatIn),
      interpreta_part_pass(Cont, Verbo,[PrimoArg|LArgs],CatGr,LArgsV1, ListaSP,
            CatV,[Sogg|Args_vp],Adjs_vp,Cat).

interp_part_tr(Cont, Verbo,SN,PredV,LArgsV1, ListaSP,CatV,[Sogg,Ogg|Args_vp],Adjs_vp,Cat) 
:-
       subcat_on([PrimoArg|LArgs], PredV),
       interpreta_part_tr(Cont, Verbo,[PrimoArg|LArgs],SN,LArgsV1, ListaSP,CatV,[
            Sogg,Ogg|Args_vp],Adjs_vp,Cat).


interpreta_part_pass(Cont, Verbo,[PrimoArg|LArgs],CatGr,LArgsV1, ListaSP,CatV,[Subj|Args_vp],Adjs_vp,Cat) :-
       (CatGr=intr;CatGr=inac;CatGr=vatm;CatGr=rifl),
      discharge_pps(ListaSP,CatV,Verbo,PrimoArg,LArgs,NLArgs,Args_vp,Adjs_vp,
         LArgs1), 
       create_Pros(PrimoArg, 1, Cont, Subj),
       !.

interpreta_part_pass(Cont, Verbo,[PrimoArg|LArgs],CatGr,LArgsV1,ListaSP,CatV,[Subj|Args_vp],Adjs_vp,Cat) 
:-
       CatGr=trans,
       (nonvar(Cat),nonvar_member(CatV,Cat)
        ;var(Cat)),
       interp_sv_pass(CatV,ListaSP,[PrimoArg|LArgs],_,Args_vp,Adjs_vp),
       create_Pros(LArgs, 2, Cont, Subj),
       LArgsV1 = [PrimoArg|LArgs],   
       !.

interpreta_part_pass(Cont, Verbo,[PrimoArg|LArgs],CatGr,LArgsV1,ListaSP,CatV,[Subj|Args_vp],Adjs_vp,Cat) 
:-
      discharge_pps(ListaSP,CatV,Verbo,PrimoArg,LArgs,NLArgs,Args_vp,Adjs_vp,LArgs1), 
       create_Pros(LArgs, 2, Cont, Subj),
       !.


interpreta_part_tr(Cont, Verbo,[PrimoArg|LArgs],SN,LArgsV1,ListaSP,CatV,[Subj,Ogg|Args_vp],Adjs_vp,Cat) 
:-
       interp_sv_ogg(SN,_,LArgs,NuovaLArgs,Ogg),
       interp_sv_x(CatV,ListaSP,NuovaLArgs,_,Args_vp,Adjs_vp),
       LArgsV1 = [PrimoArg|LArgs],   
       create_Pros(PrimoArg, 1, Cont, Subj),
       !.
/* controllo psicologiche */

interp_psych(Verbo,PredV,LArgsV,SN,LSP,CatV,[Sogg|Args_vp],NewAdjs_vp) 
:-
      PredV=pred_v(Verbo,CatGr,CatV,SubCatIn),
      subcat_on([PrimoArg|LArgs], SubCatIn),
      interp_sogg(SN,PrimoArg,Sogg),
      discharge_pps(LSP,CatV,Verbo,PrimoArg,LArgs,NLArgs,Args_vp,Adjs_vp,LArgsV), 
      assemble_args_adjs(PrimoArg,LArgs,[Sogg],Args_vp,Adjs_vp,   
            LArgsV,Args,NewAdjs_vp),       
      !.

/* psicologiche con infinita soggetto */
interp_psyc_inf_sogg(Verbo,Controllo,PredV,LArgsV,Svinf,SN,ListaSP,CatV,
          [Y|Args],NewAdjs_vp) 
:-
      PredV=pred_v(Verbo,CatGr,CatV,SubCatIn),
      subcat_on([PrimoArg|LArgs], SubCatIn),
    interp_sv_ogg(SN,_,LArgs,NuovaLArgs,Ogg),
    interp_sv_x(CatV,ListaSP,NuovaLArgs,_,Args_vp,Adjs_vp),
    interp_comp_inf(Svinf,[PrimoArg|LArgs],_,Y,FContr/RContr),
    extract_controller(Args_vp,FContr/RContr,Controllo),
       LArgsV1 = [PrimoArg|LArgs],   
    assemble_args_adjs(PrimoArg,LArgs,[Ogg],Args_vp,Adjs_vp,   
            LArgsV,Args,NewAdjs_vp),       
    !.

interp_intr_inf_sogg(V,Controllo,PredV,LArgsV1,Svinf,LSP,CatV,
           [Y|Args],NewAdjs_vp) 
:-
      PredV=pred_v(V,CatGr,CatV,SubCatIn),
      subcat_on([PrimoArg|LArgs], SubCatIn),
      discharge_pps(LSP,CatV,V,PrimoArg,LArgs,NLArgs,Args_vp,Adjs_vp,LArgsV), 
    interp_comp_inf(Svinf,[PrimoArg|LArgs],_,Y,FContr/RContr),
    extract_controller(Args_vp,FContr/RContr,Controllo),
       LArgsV1 = [PrimoArg|LArgs],   
    assemble_args_adjs(PrimoArg,LArgs,[],Args_vp,Adjs_vp,   
            LArgsV,Args,NewAdjs_vp),       
    !.


/* ATTIVA INTRANSITIVA E RIFLESSIVA CON INFINITIVA COME COMPLEMENTO */
interp_rifl_inf(Verbo,Controllo,PredV,LArgsV1,
     SN1,Svinf,ListaSP,CatV,Argomenti,NewAdjs_vp) 
     :-
      PredV=pred_v(Verbo,CatGr,CatV,SubCatIn),
      subcat_on([PrimoArg|LArgs], SubCatIn),
      interp_intr_infin(CatGr,
      [PrimoArg|LArgs],Controllo,Verbo,SN1,Svinf,
       LArgsV1,ListaSP,CatV,Argomenti,NewAdjs_vp).
      
interp_intr_inf(Verbo,Controllo,PredV,LArgsV1,
     SN,Svinf,ListaSP,CatV,Argomenti,NewAdjs_vp) 
     :-
      subcat_on([PrimoArg|LArgs], PredV),
      PredV=pred_v(Verbo,CatGr,CatV,_),
      interp_intr_infin(CatGr,[PrimoArg|LArgs],Controllo,Verbo,SN,Svinf,
       LArgsV1,ListaSP,CatV,Argomenti,NewAdjs_vp).

interp_intr_infin(CatGr,[PrimoArg|LArgs],
  Controllo,Verbo,SN,Svinf,LArgsV,LSP,CatV,[Y|Args],NewAdjs_vp) 
:-
    (CatGr=inac;CatGr=intr;CatGr=rifl;CatGr=vatm),
    interp_sogg(SN,PrimoArg,Sogg),
    interp_comp_inf(Svinf,LArgs,NuovaList,Y,FContr/RContr),
    extract_controller([Sogg|Args_vp],FContr/RContr,Controllo),
    discharge_pps(LSP,CatV,Verbo,PrimoArg,NuovaList,NLArgs,Args_vp,Adjs_vp,LArgsV), 
    assemble_args_adjs(PrimoArg,LArgs,[Sogg],Args_vp,Adjs_vp,_,Args,NewAdjs_vp),       
       !.

interp_mod_inf(Controllo,Verbo,SN1,Svinf,CatV,Argomenti,Adjs_vp) :-
     Sogg = SN1,
    interp_comp_mod(Svinf,_,Y,FContr/RContr),
    extract_controller([Sogg|Args_vp],FContr/RContr,Controllo),
    Argomenti the_list [Sogg|Args_vp] && [Y],
    !.

interp_cop_inf_sogg(Verbo,Controllo,PredV, LArgsV,
   Svinf,Xcomp/acomp,ListaSP,CatV,
     [X,Y|Args_vp],NewAdjs_vp) 
    :-
    subcat_on([PrimoArg|LArgs], PredV),
    interp_xcomp(Xcomp/TipoXcomp,[PrimoArg|LArgs],NLArgs,X,Contr, Arg_di_contr,CatSogg),
    interp_comp_inf(Svinf,NLArgs,_,Y,FCont/RCont),
    (ListaSP\=[],
    interp_sv_addr(CatV,ListaSP,NovaLArgs,_,Args_vp,Adjs_vp,Controllo,FContr/RContr),
    trova_Sncontrollore([Y|Args_vp],FContr,RContr,SNContr)
     ;
     interp_sv_x(CatV,ListaSP,NovaLArgs,_,Args_vp,Adjs_vp)
     ;
     ListaSP=[],Args_vp=[],
       Controllo=indefinito,!),
    assemble_args_adjs(PrimoArg,LArgs,[Y],Args_vp,Adjs_vp,   
            LArgsV,Args,NewAdjs_vp),       
    !.

/* ATTIVA INTRANSITIVA */

/*  controllo riflessive inerenti  */

interp_rifl_int(Verbo,PredV,LArgsV,SN1,Xcomp/pcomp,ListaSP,CatV,Args,NewAdjs_vp) 
      :-
      PredV=pred_v(Verbo,CatGr,CatV,SubCatIn),
      subcat_on([PrimoArg|LArgs], SubCatIn),
      interp_sogg(SN1,PrimoArg,Sogg),
      interp_xcomp(Xcomp/pcomp,[PrimoArg|LArgs],NuovaLArgs,X,
           Controllore,Arg_di_contr,CatSogg),
      interp_sv_x(CatV,ListaSP,NovaLArgs,_,Args_vp,Adjs_vp),
      assegna_controllo_xcomp([Sogg,X],Controllore,Arg_di_contr,CatSogg),   
      assemble_args_adjs(PrimoArg,LArgs,[Sogg,X],Args_vp,Adjs_vp,LArgsV,
           Args,NewAdjs_vp),       
      !.

interp_rifl_int(V,PredV,LArgsV1,SN1,LSP,CatV,Args,NewAdjs_vp) 
   :-
     PredV=pred_v(V,CatGr,CatV,SubCatIn),
     interp_intr(CatGr,SubCatIn,V,SN1,LSP,CatV,LArgsV1,Args,NewAdjs_vp). 

interp_rifl_fcomp(V,Modo,PredV,LArgsV1,
     SN1,Fcomp,LSP,CatV,Args,NewAdjs_vp) 
      :-
      PredV=pred_v(V,CatGr,CatV,SubCatIn),
      interp_intr_fcomp(V,Modo,PredV,Fcomp,SN1,LArgsV1,LSP,CatV,Args,NewAdjs_vp). 

interp_attiva_intr(Verbo,PredV,LArgsV,SN,ListaSP,CatV,Args,NewAdjs_vp) 
    :-
      PredV=pred_v(Verbo,CatGr,CatV, SubCatIn),
      interp_intr(CatGr,SubCatIn,Verbo,SN,ListaSP,CatV,LArgsV,Args,NewAdjs_vp).


interp_intr(CatGr,SubCatIn,Verbo,SN,LSP,CatV,LArgsV,Args,NewAdjs_vp) 
      :-
       CatGr=inac,
       subcat_on([PrimoArg|LArgs], SubCatIn),
       interp_sogg_inac(SN,PrimoArg,NLArgs,Sogg,Contr,LCat,G),
       interp_sv_ana(CatV,LSP,NLArgs,_,Args_vp,Adjs_vp,Contr,LCat,G),             
       assemble_args_adjs(PrimoArg,LArgs,[Sogg],Args_vp,Adjs_vp,   
            LArgsV,Args,NewAdjs_vp),       
       !.

interp_intr(CatGr,SubCatIn,Verbo,SN,LSP,CatV,LArgsV,Args,NewAdjs_vp) 
      :-
       (CatGr=intr;CatGr=inac;CatGr=vimp;CatGr=psyc;CatGr=rifl;CatGr=cop),
       subcat_on([PrimoArg|LArgs], SubCatIn),
       (        
        interp_sogg(SN,PrimoArg,Sogg),
        discharge_ambs_pps(LSP,CatV,Verbo,PrimoArg,SubCatIn,NLArgs,Args_vp,
         Adjs_vp,LArgsP)
       ;
        discharge_pps(LSP,CatV,Verbo,PrimoArg,LArgs,NLArgs,Args_vp,
         Adjs_vp,LArgsP), 
        interp_sogg(SN,PrimoArg,Sogg)
       ), 
       assemble_args_adjs(PrimoArg,LArgs,[Sogg],Args_vp,Adjs_vp,   
            LArgsV,Args,NewAdjs_vp),       
       !.

interp_intr(CatGr,SubCatIn,Verbo,SN,LSP,CatV,LArgsV,Args,NewAdjs_vp) 
      :-
       (CatGr=intr;CatGr=inac;CatGr=vimp;CatGr=psyc;CatGr=rifl;CatGr=cop),
       subcat_on([PrimoArg|LArgs], SubCatIn),
       interp_sogg(SN,PrimoArg,Sogg),
       interp_sv_x(CatV,LSP,LArgs,NuovaLArgs,Args_vp,Adjs_vp),
       assemble_args_adjs(PrimoArg,LArgs,[Sogg],Args_vp,Adjs_vp,   
            LArgsV,Args,NewAdjs_vp),       
      !.

interp_intr(CatGr,SubCatIn,Verbo,SN,ListaSP,CatV,LArgsV,Args,NewAdjs_vp) 
:-
       CatGr=vatm,
       subcat_on([PrimoArg|LArgs], SubCatIn),
       interp_sogg_atm(SN,Verbo,PrimoArg,Sogg),
       interp_sv_x(CatV,ListaSP,LArgs,_,Args_vp,Adjs_vp),             
       assemble_args_adjs(PrimoArg,LArgs,[Sogg],Args_vp,Adjs_vp,   
            LArgsV,Args,NewAdjs_vp),       
       !.

interp_intr(CatGr,SubCatIn,Verbo,SN,ListaSP,CatV,LArgsV,Args,NewAdjs_vp) 
       :-
       CatGr=vimp,
       subcat_on([PrimoArg|LArgs], SubCatIn),
       interp_sogg_expl(SN1,PrimoArg,Sogg),
       interp_sv_ogg_bound(SN,LArgs,NuovaLArgs,Ogg),
       interp_sv_x(CatV,ListaSP,NuovaLArgs,_,Args_vp,Adjs_vp),             
       assemble_args_adjs(PrimoArg,LArgs,[Sogg,Ogg],Args_vp,Adjs_vp,   
            LArgsV,Args,NewAdjs_vp),       
       !.

interp_intr(CatGr,SubCatIn,Verbo,SN,LSP,CatV,LArgsV,Args,NewAdjs_vp) 
      :-
       subcat_on([PrimoArg|LArgs], SubCatIn),
       interp_sogg(SN,PrimoArg,Sogg),
       interp_sv_x(CatV,LSP,LArgs,NuovaLArgs,Args_vp,Adjs_vp),
       assemble_args_adjs(PrimoArg,LArgs,[Sogg],Args_vp,Adjs_vp,   
            LArgsV,Args,NewAdjs_vp),       
      !.

interp_intr_fcomp(V,Modo,PredV,Fcomp,SN,LArgsV,ListaSP,CatV,Args,NewAdjs_vp) 
      :-
      subcat_on([PrimoArg|LArgs], PredV),
      interp_fcomp1([PrimoArg|LArgs],V,Modo,SN,ListaSP,Fcomp,CatV, 
            LArgsV,Args,NewAdjs_vp). 

/* CONTROLLO DEL SOGGETTO DELLA FRASE  */

interp_sogg(SN/Funz,sn/sogg/Ruolo/CatSogg,X) :-
   nonvar(SN),
   SN=sn(_,_,coordina([arg(funzione(Funz),ruolo(Ruolo),SN1)|_])),
   !,
       trova_cat_SN(SN,CatSN),
       interp_cat(CatSN,CatSogg),
       X = arg(funzione(Funz),ruolo(Ruolo),SN), !.

interp_sogg(SN/Funz,sn/Funz/Ruolo/CatSogg,X) :-
   nonvar(SN),
       Ruolo=tema_bound,
       SN= sn(indice(Simb),cat(_),
              pr(clitico,it,_,_,_,_),
              spec(def(_), part(_), mod(_), foc(_), card(_), quant(_)),
                  args(Ar),mods(Mo),adjs(Ad)),
       SN1= sn(indice(Simb),cat(Cat),
               pr(pro_expl,form,_,_,_,_,[nom]),spec([]),controllore(indefinito)),
       X = arg(funzione(sogg),ruolo(form),SN1), !.


interp_sogg(SN/Funz,sn/sogg/Ruolo/CatSogg,X) 
   :-
   nonvar(SN),
       (gr(romance)
        ;
         (SN \= sn(indice(Simb),cat(Cat),
           pr(pro_picc,pro,_,P,G,N,Ca),
           spec(def('+')),controllore(SimbContr))
         ;
          SN = sn(indice(Simb),cat(Cat),
           pr(pro_picc,pro,_,P,G,N,Ca),
           spec(def('+')),controllore(SimbContr))
%        ,nonvar(SimbContr)
         )
       ),
       trova_cat_SN(SN,CatSN),
       interp_cat(CatSN,CatSogg),
       X = arg(funzione(Funz),ruolo(Ruolo),SN).

interp_sogg_in(SN/Funz,sn/sogg/Ruolo/CatSogg,X) :-
          nonvar(SN),
            SN=sn(indice(Ind),cat(Cat),pr(pr_quantif, Pro, 3, G, N, C),Spec,args(Args),Mods,Adj),
             interp_cat(Cat,ListaCat),
             (  (Args = [], N=plur, member(umano,Cat)) ;
                 (Args = [], N=sing) ;
                   Args\= []),
             X = arg(funzione(Funz),ruolo(Ruolo),SN), !.

interp_sogg_inac(SN/Funz,LArgs,NuovaLArgs,X,Controllore,ListaCat,Gen) :-
           nonvar(SN),
              LArgs = sn/sogg/Ruolo/ListaCat,
             SN=sn(indice(Ind),cat([Cat]),Testa,spec(def('-'),part(+),M,F,C,Q),args(Args),Mods,Adj),
              (Testa=..[T,Te,Gen,Nu]; Testa=pr(_,_,_,Gen,_,_)),             
              Cat = ListaCat,
             (  (Args = [], N=plur, member(umano,Cat)) ;
                 (Args = [], N=sing) ;
                   Args\= []),
             Sogg = arg(funzione(ogg),ruolo(tema),
                        sn(indice(Simb),cat(ListaCat),
                        pr(vbl,vbl,_,G,N,_),controllore(Controllore))),
              gen_sym(sn,Simb),
              X = arg(funzione(Funz),ruolo(Ruolo),sn(indice(Ind),cat(Cat),Testa,spec(def('-'),part('+'),M,F,C,Q),args([Sogg]),Mods,Adj)), !.

interp_sogg_posp(SN/Funz,sn/sogg/Ruolo/CatSogg,X) :-
        SN \= sn(indice(Simb),cat(Cat),
           pr(pro_picc,pro,_,P,G,N,Ca),
           spec(def('+')),controllore(SimbContr)),
       trova_cat_SN(SN,CatSN),
       interp_cat(CatSN,CatSogg),
       X = arg(funzione(sogg),ruolo(Ruolo),SN), !.

interp_ogg_prep(SN/Funz,LArgs,NuovaLArgs,X) :-
 SN=sn(I,C,coordina([arg(funzione(Fun),ruolo(Ruolo),SN1),arg(funzione(Fun),ruolo(Ruolo),SN2)|SN3])),
   !,
             ( member(sn/ogg/Ruolo/ListaCat,LArgs);
                member(sn/ogg_avv/Ruolo/ListaCat,LArgs) ),
               trova_cat_SN(SN,CatSN),
             (ListaCat\=[_],interp_cat(CatSN,ListaCat); ListaCat=[_]),
             ( elimina(sn/ogg/Ruolo/ListaCat,LArgs,NuovaLArgs);
               elimina(sn/ogg_avv/Ruolo/ListaCat,LArgs,NuovaLArgs)),
             Fun=foc,
             X = arg(funzione(foc),ruolo(Ruolo),sn(I,C,coordina([arg(funzione(Fun),ruolo(Ruolo),SN1),arg(funzione(Fun),ruolo(Ruolo),SN2)|SN3]))), !.

interp_ogg_prep(SN/Funz,LArgs,NuovaLArgs,X) 
   :-
        SN \= sn(indice(Simb),cat(Cat),
           pr(pro_picc,pro,_,P,G,N,Ca),
           spec(def('+')),controllore(SimbContr)),
             ( member(sn/ogg/Ruolo/ListaCat,LArgs);
                member(sn/ogg_avv/Ruolo/ListaCat,LArgs) ),
               trova_cat_SN(SN,CatSN),
             (ListaCat\=[_],interp_cat(CatSN,ListaCat); ListaCat=[_]),
             ( elimina(sn/ogg/Ruolo/ListaCat,LArgs,NuovaLArgs);
               elimina(sn/ogg_avv/Ruolo/ListaCat,LArgs,NuovaLArgs)),
       X = arg(funzione(foc),ruolo(Ruolo),SN), !.

interp_sogg_expl(SN/Funz,expl/sogg/Ruolo/CatSogg,X) :-
       SN= sn(indice(Simb),cat(CatSogg),
                           pr(pro_picc,pro,_,_,_,_,[nom]),S,controllore(_)),
       SN1= sn(indice(Simb),cat(CatSogg),
                           pr(pro_expl,form,_,_,_,_,[nom]),spec([]),controllore(indefinito)),
       X = arg(funzione(sogg),ruolo(form),SN1), !.

interp_sogg_expl(SN/Funz,sn/Funz/Ruolo/CatSogg,X) :-
       nonvar(SN),
       SN= sn(indice(Simb),cat(Cat),
              pr(clitico,_,it,_,_,_,_),
              spec(def(_)),args(Ar),mods(Mo),adjs(Ad)),
       SN1= sn(indice(Simb),cat(Cat),
               pr(pro_expl,form,_,_,_,_,[nom]),spec([]),controllore(indefinito)),
       X = arg(funzione(sogg),ruolo(form),SN1), !.

/*19 dicembre*/
interp_sogg_atm(SN/Funz,Verbo,sn/sogg/form/CatSogg,X) :-
       gr(english),
       SN= sn(indice(Simb),_,
              pr(clitico,pro,it,_,_,_,Caso),S,A,M,Ad),
       SN1= sn(indice(Simb),cat([]),
               pr(pro_expl,form,_,_,_,_,[nom]),spec([]),
               controllore(indefinito)),
       X = arg(funzione(sogg),ruolo(form),SN1), !.

interp_sogg_atm(SN/Funz,Verbo,expl/sogg/Ruolo/CatSogg,X) :-
        gr(italiano),
        Verbo=nevicare,
        cat_gramm(Verbo, CatGr, CatV, LArgsV),
        pred_n(neve,_,CatSo,_),
       SN = sn(indice(Sim),cat(CatSo),
                           pr(pro_picc,pro,_,P,_,N,[nom]),S,controllore(indefinito)),
       SN1 = sn(indice(Sim),cat(CatSo),
                           pr(pro_n,neve,_,P,fem,N,[nom]),S),
       X = arg(funzione(sogg),ruolo(danger),SN1), !.

interp_sogg_av(SN/Funz,sn/sogg/Ruolo/CatSogg,X,Ruolo2) :-
       trova_cat_SN(SN,CatSN),
       interp_cat(CatSN,CatSogg),
       X = arg(funzione(Funz),ruolo(Ruolo2),SN), !.

interp_sogg_xcomp(SN/Funz/Ruolo/CatSogg,sn/sogg/Ruolo/CatSogg,X) :-
       trova_cat_SN(SN,CatSN),
       interp_cat(CatSN,CatSogg),
       X = arg(funzione(Funz),ruolo(Ruolo),SN), !.

interp_sogg_bound(Strutt/Funz,sn/Funz/Ruolo/CatSogg,X) :-
       trova_cat_Strutt(Strutt,CatSN),
       interp_cat_bound(CatSN,CatSogg),
       X = arg(funzione(Funz),ruolo(Ruolo),Strutt), !.

interp_nom(SN/Funz,sn/avv_nom/Ruolo/CatAvv,X) :-
       trova_cat_SN(SN,CatSN),
       interp_cat(CatSN,[tempo]),
       X = arg(funzione(Funz),ruolo(Ruolo),SN), !.

interp_agnt(SA/Funz,saa/adj_sa/CatAvv,X) :-
       trova_cat_SA(SA,CatSA),
       interp_cat(CatSA,[emotivo]),
       X = arg(funzione(Funz),ruolo(Ruolo),SA), !.

/* controllo categorie fra un SN e un argomento del verbo */

/* CatSN  e' istanziato e sara' una lista */
% interp_cat([],CatArgVerbo) :- !.

interp_cat(C,C) :- !.

interp_cat(_,[]) :- !.

interp_cat([],C) :- !.
interp_cat(nil,C) :- !.
interp_cat(C,nil) :- !.
interp_cat([any|Var],CatAV) :-!.
interp_cat(CatSN,[any|Var]) :-!.

interp_cat([CatSN|Var],CatAV) :-
       var(Var),
       nonvar(CatSN),
       nogen_member(CatSN, CatAV),
       !.

interp_cat([Cat1, Cat2|Var],CatAV) :-
       var(Var),
       nonvar(Cat1),
       CatSN=CatAV,
       nogen_member(Cat1, CatAV),
       interp_cat([Cat2|Var],CatAV),
       !.
interp_cat(CatSN,CatAV) :-
       nonvar(CatSN),
       nogen_member(CC,CatSN),
       nogen_member(CC,CatAV),!.

interp_cat(CatSN,CatAV) :-
       nonvar(CatSN),
       CatSN=[coll, real, soc, set],
       nogen_member(luogo,CatAV).

interp_cat(CatSN,CatAV) :-
       nonvar(CatSN),
       CatSN=[ind, real, quant, locat],
       nogen_member(luogo,CatAV).

interp_cat(CatSN,CatAV) :-
       nonvar(CatSN),
       CatSN=[ind, real, quant, gen_locat],
       nogen_member(luogo,CatAV).

interp_cat(CatSN,CatAV) :-
       nonvar(CatSN),
       nogen_member(oggetto,CatSN),
       nogen_member(materiale,CatAV).

interp_cat(CatSN,CatAV) :-
       nonvar(CatSN),
       nogen_member(umano,CatSN),
       nogen_member(informa,CatAV),
       \+ nogen_member(danger,CatAV).

/*
interp_cat(CatSN,CatAV) :-
       nonvar(CatSN),
       nogen_member(umano,CatSN),
       nogen_member(date,CatAV).
*/

interp_cat(CatSN,CatAV) :-
       nonvar(CatSN),
       nogen_member(plant,CatSN),
       nogen_member(animato,CatAV).

interp_cat(CatSN,CatAV) :-
       nonvar(CatSN),
       nogen_member(umano,CatSN),
       nogen_member(plant,CatAV).

interp_cat(CatSN,CatAV) :-
       nonvar(CatSN),
       nogen_member(oggetto,CatSN),
       nogen_member(proprt,CatAV).

interp_cat(CatSN,CatAV) :-
       nonvar(CatSN),
       nogen_member(legale,CatSN),
       nogen_member(umano,CatAV).

interp_cat(CatSN,CatAV) :-
       nonvar(CatSN),
       nogen_member(legale,CatSN),
       nogen_member(sociale,CatAV).

interp_cat(CatSN,CatAV) :-
       nonvar(CatSN),
       nogen_member(descrittivo,CatSN),
       nogen_member(attivita,CatAV).

interp_cat(CatSN,CatAV) :-
       nonvar(CatSN),
       nogen_member(umano,CatSN),
       nogen_member(istituzione,CatAV).

interp_cat(CatSN,CatAV) :-
       nonvar(CatAV),
       nogen_member(umano,CatAV),
       nogen_member(istituzione,CatSN).

interp_cat(CatSN,CatAV) :-
       nonvar(CatSN),
       CatSN=[ind, real, nat, hum],
       nogen_member(umano,CatAV).

interp_cat(CatSN,CatAV) :-
       nonvar(CatSN),
       CatSN=[ind, real, nat, relat],
       nogen_member(umano,CatAV).

interp_cat(CatSN,CatAV) :-
       nonvar(CatSN),
       CatSN=[ind, real, soc, role],
       nogen_member(umano,CatAV).

interp_cat(CatSN,CatAV) :-
       nonvar(CatSN),
       CatSN=[coll, real, soc, hum_set],
       nogen_member(umano,CatAV).

interp_cat(CatSN,CatAV) :-
       nonvar(CatSN),
       CatSN=[coll, real, mil, hum_set],
       nogen_member(astratto,CatAV).

interp_cat(CatSN,CatAV) :-
       nonvar(CatSN),
       CatSN=[ind, real, mil, role],
       (nogen_member(umano,CatAV)
        ;
        nogen_member(istituzione,CatAV)).
     
interp_cat(CatSN,CatV) :-
       nonvar(CatSN),
       CatSN=[ind, abst, soc, state],
       (nogen_member(astratto,CatAV)
        ;nogen_member(stato,CatAV)).

interp_cat(CatSN,CatAV) :-
       nonvar(CatSN),
       CatSN=[ind, abst, quant, temp],
       (nogen_member(astratto,CatAV)
        ;nogen_member(tempo,CatAV)).

interp_cat(CatSN,CatAV) :-
       nonvar(CatSN),
       CatSN=[ind, real, phys, nonliv],
       nogen_member(oggetto,CatAV).

interp_cat(CatSN,CatAV) :-
       nonvar(CatSN),
       CatSN=[ind, real, soc, nonliv],
       (nogen_member(astratto,CatAV)
        ;nogen_member(oggetto,CatAV)).

interp_cat(CatSN,CatAV) :-
       nonvar(CatSN),
       nogen_member(ist_soc,CatSN),
       nogen_member(umano,CatAV).

interp_cat(CatSN,CatAV) :-
       nonvar(CatSN),
       nogen_member(sostanza,CatSN),
       nogen_member(edible,CatAV).

interp_cat(CatSN,CatAV) :-
       nonvar(CatSN),
       CatSN=[ist_soc, instit, hum],
       nogen_member(umano,CatAV).

/* controlli inversi */
interp_cat(CatSN,CatAV) :-
       nonvar(CatAV),
       nogen_member(umano,CatAV),
       nogen_member(informa,CatSN),
       \+ nogen_member(danger,CatSN).

/*
interp_cat(CatSN,CatAV) :-
       nonvar(CatAV),
       nogen_member(umano,CatAV),
       nogen_member(date,CatSN).
*/

interp_cat(CatSN,CatAV) :-
       nonvar(CatAV),
       nogen_member(umano,CatAV),
       nogen_member(plant,CatSN).

interp_cat(CatSN,CatAV) :-
       nonvar(CatAV),
       nogen_member(ist_soc,CatAV),
       nogen_member(umano,CatSN).

interp_cat(CatSN,CatAV) :-
       nonvar(CatAV),
       CatAV=[coll, real, soc, set],
       nogen_member(luogo,CatSN).

interp_cat(CatSN,CatAV) :-
       nonvar(CatAV),
       CatAV=[ind, real, nat, hum],
       nogen_member(umano,CatSN).

interp_cat(CatSN,CatAV) :-
       nonvar(CatAV),
       CatAV=[ind, real, nat, relat],
       nogen_member(umano,CatSN).

interp_cat(CatSN,CatAV) :-
       nonvar(CatAV),
       CatAV=[ind, real, soc, role],
       nogen_member(umano,CatSN).

interp_cat(CatSN,CatAV) :-
       nonvar(CatAV),
       CatAV=[coll, real, soc, hum_set],
       nogen_member(umano,CatSN).

interp_cat(CatSN,CatAV) :-
       nonvar(CatAV),
       CatAV=[coll, real, mil, hum_set],
       nogen_member(astratto,CatSN).

interp_cat(CatSN, CatAV) :-
  nonvar(CatAV),
  nogen_member(nonhuman,CatAV),
  nogen_member(animato, CatSN) .

interp_cat(CatSN, CatAV) :-
  nonvar(CatAV),
  nogen_member(plant,CatAV),
  nogen_member(animato, CatSN) .

interp_cat(CatSN, CatAV) :-
  nonvar(CatAV),
  nogen_member(sostanza,CatAV),
  nogen_member(edible, CatSN) .

interp_cat(CatSN, CatAV) :-
  nonvar(CatAV),
  gr(english),
  nogen_member(nonhuman,CatAV),
  (nogen_member(animato, CatSN)
        ;
        nogen_member(istituzione,CatSN)).

interp_cat(CatSN,CatAV) :-
       nonvar(CatAV),
       CatAV=[ind, real, mil, role],
       (nogen_member(umano,CatSN)
        ;
        nogen_member(istituzione,CatSN)).
     
interp_cat(CatSN,CatAV) :-
       nonvar(CatAV),
       CatAV=[ind, abst, soc, state],
       (nogen_member(astratto,CatSN)
        ;nogen_member(stato,CatSN)).

interp_cat(CatSN,CatAV) :-
       nonvar(CatAV),
       CatAV=[ind, abst, quant, temp],
       (nogen_member(astratto,CatSN)
        ;nogen_member(tempo,CatSN)).

interp_cat(CatSN,CatAV) :-
       nonvar(CatAV),
       CatAV=[ind, real, phys, nonliv],
       nogen_member(oggetto,CatSN).

interp_cat(CatSN,CatAV) :-
       nonvar(CatAV),
       CatAV=[ind, real, soc, nonliv],
       (nogen_member(astratto,CatSN)
        ;nogen_member(oggetto,CatSN)).

/* CatSn non e' istanziato ( esempio pronomi relativi )  
   riporta nell' SN le categorie dell' argomento verbale.
   per il controllo delle relative .  */

interp_cat(CatSN,CatAV) :-
       var(CatSN),
       CatSN=CatAV,
       !.

interp_cat(CatSN,CatAV) :-
       nogen_member(CC,CatSN),
       CC=date,
       nogen_member(CT,CatAV),
       CT=tempo.

interp_cat(CatSN,CatAV) :-
       \+ nogen_member(date,CatSN),
       \+ nogen_member(tempo,CatSN),
       \+ nogen_member(date,CatAV),
       \+ nogen_member(tempo,CatAV).

%interp_cat(C,D) :- !.

interp_cat_bound(CatSN,CatAA) :-
       nonvar(CatSN),
       CatSN\=[CSN|_],nonvar(CSN),
       nogen_member(CC,CatSN),  
       nogen_member(CC,CatAA).


interp_cat_bound([CatSN|CatSNs],CatAA) :-
       var(CatSN),
       [CatSN|CatSNs]=CatAA, 
       !.

 /* CONTROLLA IL SINTAGMA  NOMINALE  */

/*
   NB. Gli argomenti del nome non sono considerati obbligatori
       Se un SP puo' essere considerato argomento del nome
       questo viene fatto obbligatoriamente.
       L'ordine degli argomenti e l'ordine fra argomenti e aggiunti
       non e' preso in considerazione.
*/

control_np(Testa,Mod0,Mod1,Nom_mod,CatN,Adjs):-
       nonvar(Testa),
       interp_modificatore_sn(Testa,CatN,Mod0),
       interp_modificatore_sn0(CatN,Nom_mod,Subj),
       interp_modificatore_sn1(CatN,Mod1),
       Adjs the_list Mod0 && Mod1 && Nom_mod,
       !.

interp_sn(LArgs,Testa,Adjmod,Mod2,ListaSP,Inf,Cinf,CatN,Arguments,Adjuncts,R) :-
       nonvar(Testa),
       interp_modificatore_sn(_,CatN,Mod2),
       interp_relative(CatN,R),
       interp_sn_x(Role,Testa,CatN,ListaSP,LArgs,Nla,Argomenti1,Aggiunti,Spec),
       ( Inf \= [],
         interp_comp_inf(Inf/vcomp,Nla,_,Y,FContr/RContr),
         extract_controller(Argomenti1,FContr/RContr,Cinf),
         Arguments the_list Argomenti1 && [Y] 
         ;
         Cinf \= [], Cinf=fcomp,
         Y = arg(funzione(fcomp),ruolo(prop),Inf),
         Arguments the_list Argomenti1 && [Y] 
         ;
         Inf = [],Arguments=Argomenti1),
        Adjuncts the_list Aggiunti && Adjmod && Mod2, !.

interp_sp(_,_, _, _,[],_, _, _)  :-
   !.
interp_sp(F,Loc, Fl, Testa, sp(prep(P,cat(Cat),mod(M)),SN), CatN, Argomenti1, Aggiunti) :-
   interp_testa(Testa,Stem,Cat,LArgs),
   ListaSP=[sp(prep(P,cat(Cat),mod(M)),SN)],
   assertpp(F,sp(prep(P,cat(Cat),mod(M)),SN),P,Loc,Fl),
   interp_sn_x(
      Role,Testa,CatN,ListaSP,LArgs,Nla,Argomenti1, Aggiunti,Spec),
   !.

interp_testa(npro(Nopro,Gen,Num),nil,CatN,LArgs) :-
                       pred_np(Nopro,nil,CatN,LArgs),!. 

interp_testa(npro(Nopro,Gen,Num),nil,[],[]) :-!.

interp_testa(pr(TipoPron,Pro,Pers,Gen,Num,Caso),nil,CatN,LArgs) :-
                       pred_p(pro,Pro,nil,CatN,LArgs),!.       

interp_testa(pr(TipoPron,_, Pro,Pers,Gen,Num,Caso),nil,CatN,LArgs) :-
                       pred_p(pro,Pro,nil,CatN,LArgs),!.       


interp_testa(cl(TipoPron,Pro,Pers,Gen,Num,Caso),nil,CatN,LArgs) :-
                       pred_p(pro,Pro,nil,CatN,LArgs),!.       
interp_testa(n(Nome,Gen,Num),Stem,CatN,LArgs) :-
                       pred_n(Nome,Stem,CatN,LArgs). 

interp_testa(agg(Agg,Gen,Num),CatA,LArgs) :-
                       pred_a(Agg,CatA,LArgs). 
interp_testa(agg(Agg,Gen,Num),CatA,LArgs) :-
                       pred_ap(Agg,CatA,LArgs). 

interp_sa1(Testa,ListaSP,Inf,Cinf,Cat,Argomenti,Aggiunti) :-
       interp_testa(Testa,Cat,LArgs),
       interp_sa_x(Cat,ListaSP,LArgs,Nla,Argomenti1,Aggiunti),
       ( Inf \= [],
         interp_comp_inf(Inf/vcomp,Nla,_,Y,FContr/RContr),
        extract_controller(Argomenti1,FContr/RContr,Cinf),

         Argomenti the_list Argomenti1 && [Y]
        ;
         Inf = [],Argomenti=Argomenti1), !.


interp_sa2(M,Testa,ListaSP,Cat,Argomenti,Aggiunti) :-
       interp_sa_x(Cat,ListaSP,LArgs,Nla,Argomenti1,Aggiunti),
        !.

interp_sa_x(_,[],LArgs,Nla,Args_impliciti,[]) :-
               Args_impliciti = [],
               Nla=LArgs.

interp_sa_x(CatAgg,[sp(prep(Prep,cat(CatSP),Mod),SN)|AltriSP],LArgs,Nla,
               [X|ResArgs],ResAdjs)  
    :-
             nogen_member(sp/Funzione/Ruolo/Preps/ListaCat,LArgs),
             elimina(sp/Funzione/Ruolo/Preps/Lista,LArgs,NuovaLArgs),
             X = arg(funzione(Funzione),ruolo(Ruolo),SN),
             interp_sa_x(CatAgg,AltriSP,NuovaLArgs,Nla,
                            ResArgs,ResAdjs),
             !.

interp_sa_x(CatAgg,[adj(Type,sp(prep(Prep,cat(CatSP),Mod),SN))|AltriSP],LArgs,Nla,
               ResArgs,[X|ResAdjs])  
             :-
             grep_adjs_sp_role(Prep, _, CatSP, CatAgg, Funz, Ruolo),
             X = arg(funzione(Funz),ruolo(Ruolo),SN),
             interp_sa_x(CatAgg,AltriSP,NuovaLArgs,Nla,
                            ResArgs,ResAdjs),
             !.

interp_sa_x(CatAgg,[Adj|AltriSP],LArgs,Nla,
               ResArgs,[X|ResAdjs])  
             :-
             Adj=sp(indice(I),cat(C),coordina([arg(funzione(Funz),ruolo(Ruolo),SN1),  
                                  arg(funzione(Funz),ruolo(Ruolo),SN2)|SN3])),
             nogen_member(sp/Funzione/Ruolo/Prep/ListaCat,LArgs),
             X = arg(funzione(Funzione),ruolo(Ruolo),Adj),
             interp_sa_x(CatAgg,AltriSP,NuovaLArgs,Nla,
                            ResArgs,ResAdjs),
             !.
/* Lista SP vuota fine del controllo */
interp_sn_x(_,_,_,[],LArgs,Nla,Args_impliciti,[],_) :-
               Args_impliciti = [],
               Nla=LArgs.

/* l' SP marcato con la preposizione "di" puo' essere sogg/ogg del nome */
interp_sn_x(Role,n(Nome,G,N),CatN,
 [sp(prep(P,cat(CatSP),Mod),SN)|AltriSP],LArgs,Nla,[X|ResArgs],ResAdjs,Spec)  
             :-
             build_np_args(n, CatSP, P, Nome, CatN, LArgs, SN, X),
             interp_sn_x(Role,Testa,CatN,AltriSP,NuovaLArgs,Nla,
                            ResArgs,ResAdjs,Spec),
             !.

interp_sn_x(Role,pr(Tipo, Pro, 3, G, N, C),CatN,
  [sp(prep(P,cat(CatSP),Mod),SN)|AltriSP],LArgs,Nla,[X|ResArgs],ResAdjs,Spec)  
    :-
             build_np_args(Tipo, CatSP, P, Nome, CatN, LArgs, SN, X),
             interp_sn_x(Role,Testa,CatN,AltriSP,NuovaLArgs,Nla,
                            ResArgs,ResAdjs,Spec),
             !.

interp_sn_x(Role,pr(Tipo, Spec, Pro, 3, G, N, C),CatN,
  [sp(prep(P,cat(CatSP),Mod),SN)|AltriSP],LArgs,Nla,[X|ResArgs],ResAdjs,Spec)  
    :-
             build_np_args(Tipo, CatSP, P, Nome, CatN, LArgs, SN, X),
             interp_sn_x(Role,Testa,CatN,AltriSP,NuovaLArgs,Nla,
                            ResArgs,ResAdjs,Spec),
             !.

interp_sn_x(Role,pr(Tipo, Spec, Pro, 3, G, N, C),CatN,
  [sp(prep(P,cat(CatSP),Mod),SN)|AltriSP],LArgs,Nla,ResArgs,[X|ResAdjs],Spec)  
    :-
             grep_adjs_sp_role(P, _, CatSP, CatN, Funz, Ruolo),
             X = arg(funzione(Funz),ruolo(Ruolo),SN),
             interp_sn_x(Role,Testa,CatN,AltriSP,NuovaLArgs,Nla,
                            ResArgs,ResAdjs,Spec),
             !.

/* l' SP marcato con la preposizione "di" puo' essere sogg/ogg del nome */
interp_sn_x(Role,Testa,CatN,[sp(indice(I),cat(CatSP),coordina([arg(funzione(Funz),ruolo(Ruolo),SP1),arg(funzione(Funz),ruolo(Ruolo),SP2)|SP]))],LArgs,Nla,[X|ResArgs],ResAdjs,_)  :-
             nogen_member(sp/Funzione/Ruolo/Prep/ListaCat,LArgs),
            ( controlla_cat1(CatSP,ListaCat);
               ( nogen_member(-abst,ListaCat), (Ccat=geogr;Ccat=locat),
              nogen_member(Ccat,CatSP)) ),
           elimina(sp/Funzione/Ruolo/Prep/Lista,LArgs,NuovaLArgs),
            SP1= sp(prep(Prep,CaSP,Mod),SN),
            SP2= sp(prep(Prp,CSP,Md),SN1),
             SN=sn(Indice,cat(C),Name1,Sp,args(Ar),Mods,Adjs),
             Name1=..[N,Nom,Ge,Nu],
            SN1=sn(Indi,cat(Ca),Name,Spe,args(Arg),Mo,Adj),
             Name=..[N0,Nome,Gen,Num],
             (concat('_',Nome,Test),concat(Nom,Test,Tes)),
             X = arg(funzione(Funzione),ruolo(Ruolo),sn(indice(I),cat(CatSP),n(Tes,mas,plur),Sp,coordina([arg(funzione(Funzione),ruolo(Ruolo),SN),arg(funzione(Funzione),ruolo(Ruolo),SN1)|SP]))),
             interp_sn_x(Role,Testa,CatN,AltriSP,NuovaLArgs,Nla,
                            ResArgs,ResAdjs,_),
             !.

/* l' SP e' un aggiunto valido del nome - UN SP CON DUE SN14 */
interp_sn_x(Role,Testa,CatN,[sp(prep(Prep,cat(CatSP),Mod),sn(I,C,coordina([arg(funzione(Funz),ruolo(Ruolo),SN1),arg(funzione(Funz),ruolo(Ruolo),SN2)|SN])))|AltriSP],LArgs,Nla,ResArgs,[X|ResAdjs],_)  :-
             grep_adjs_sp_role(Prep, _, CatSP, CatN, Funz, Ruolo),
             concat_heads_sn(SN1, SN2, Tes, Sp),  
             X =adj(Ruolo,sp(prep(Prep),I,C,n(Tes,mas,plur),Sp,
                    coordina([arg(funzione(Funz),ruolo(Ruolo),SN1),
                    arg(funzione(Funz),ruolo(Ruolo),SN2)|SN]))),
             interp_sn_x(Role,Testa,CatN,AltriSP,LArgs,Nla,ResArgs,ResAdjs,_), !.


interp_sn_x(Role,pr(Tipo, Pro, 3, G, N, C),CatN,
  [sp(prep(P,cat(CatSP),Mod),SN)|AltriSP],LArgs,Nla,[X|ResArgs],ResAdjs,Spec)  
    :-
             build_np_args(Tipo, CatSP, P, Nome, CatN, LArgs, SN, X),
             interp_sn_x(Role,Testa,CatN,AltriSP,NuovaLArgs,Nla,
                            ResArgs,ResAdjs,Spec),
             !.

/* l' SP e' un argomento del nome (preposizione \= "di" ) */
interp_sn_x(Role,Testa,CatN,
  [sp(prep(by,cat(CatSP),mod(parte)),SN)|AltSP],LArgs,Nla,[X|ResArgs],ResAdjs,Spec)  :-
            ( \+ nogen_member(umano,CatN), 
              \+ nogen_member(animato,CatN)),
             controlla_cat1(CatSP,CatN),
             X = arg(funzione(sogg),ruolo(agente),SN),
             interp_sn_x(Role,Testa,CatN,AltSP,NuovaLArgs,Nla,
                            ResArgs,ResAdjs,Spec),
             !.

/* 16 DUE SP COORDINATI */
interp_sn_x(Role,Testa,CatN,[sp(indice(I),cat(CatSP),coordina([arg(funzione(Funz),ruolo(Ruolo),SP1),arg(funzione(Funz),ruolo(Ruolo),SP2)|SP]))],LArgs,Nla,ResArgs,[X|ResAdjs],_)  :-
             SP1= sp(prep(Prep,CaSP,Mod),SN),
             grep_adjs_sp_role(Prep, SP1, CatSP, CatN, adj, Ruolo),
             concat_heads_sp(SP1, SP2, Tes, Sp),
             X =adj(Ruolo,sp(prep(Prep),indice(I),cat(CatSP),n(Tes,mas,plur),Sp,  
                    coordina([arg(funzione(adj),ruolo(Ruolo),SP1),
                    arg(funzione(adj),ruolo(Ruolo),SP2)|SP]))),
             interp_sn_x(Role,Testa,CatN,AltriSP,LArgs,Nla,ResArgs,ResAdjs,_), !.

/* un sp con due sn coordinati */
interp_sn_x(Role,Testa,CatN,sp(prep(Prep,cat(CatSP),Mod),cord(sn(I,C,coordina([arg(funzione(Funz),ruolo(Ruolo),SN1),arg(funzione(Funz),ruolo(Ruolo),SN2)|SN])))),LArgs,Nla,ResArgs,[X|ResAdjs],_)  :-
             grep_adjs_sp_role(Prep, _, CatSP, CatN, Funz, Ruolo),
             concat_heads_sn(SN1, SN2, Tes, Sp),  
             X =adj(Ruolo,sp(prep(Prep),I,C,n(Tes,mas,plur),Sp,
                    coordina([arg(funzione(Funz),ruolo(Ruolo),SN1),
                    arg(funzione(Funz),ruolo(Ruolo),SN2)|SN]))),
             interp_sn_x(Role,Testa,CatN,AltriSP,LArgs,Nla,ResArgs,ResAdjs,_), 
             !.

interp_sn_x(Role,Testa,CatN,sp(indice(I),cat(CatSP),
coordina([arg(funzione(Funz),ruolo(Ruolo),SP1),arg(funzione(Funz),ruolo(Ruolo),SN1)|_])),LArgs,Nla,ResArgs,[X|ResAdjs],_)  :-
               SP1 = sp(prep(Prep,cat(Cat),[]),SN),
               grep_adjs_sp_role(Prep, _, CatSP, CatN, Funz, Ruolo),
               concat_heads_sn(SN, SN1, Tes, Sp),  
               X =adj(Ruolo,sp(prep(Prep),indice(I),cat(CatSP),n(Tes,mas,plur),
                      Sp,coordina([arg(funzione(Funz),ruolo(Ruolo),SN),
                        arg(funzione(Funz),ruolo(Ruolo),SN1)|_]))),
               interp_sn_x(Role,Testa,CatN,AltriSP,LArgs,Nla,ResArgs,ResAdjs,_), 
               !.

interp_sn_x(Role,Testa,CatN,[sp(prep(Prep,cat(CatSP),Mod),sn(I,C,coordina([arg(funzione(Funz),ruolo(Ruolo),SN1),arg(funzione(Funz),ruolo(Ruolo),SN2)|SN])))|AltriSP],LArgs,Nla,ResArgs,[X|ResAdjs],_)  :-
             grep_args_sp_role(Prep, LArgs, CatSP, NuovaLArgs, Funz, Ruolo),                
             concat_heads_sn(SN1, SN2, Tes, Sp),  
             X =adj(Ruolo,sp(prep(Prep),I,C,n(Tes,mas,plur),Sp,
                    coordina([arg(funzione(Funz),ruolo(Ruolo),SN1),
                    arg(funzione(Funz),ruolo(Ruolo),SN2)|SN]))),
             interp_sn_x(Role,Testa,CatN,AltriSP,NuovaLArgs,Nla,ResArgs,ResAdjs,_), 
             !.

interp_sn_x(Role,Testa,CatN,[sp(prep(Prep,cat(CatSP),Mod),SN)|AltriSP],LArgs,Nla,[X|ResArgs],ResAdjs,_)  :-
             grep_args_sp_role(Prep, LArgs, CatSP, NuovaLArgs, Funz, Ruolo),                
             X = arg(funzione(Funz),ruolo(Ruolo),SN),
             interp_sn_x(Role,Testa,CatN,AltriSP,NuovaLArgs,Nla,ResArgs,ResAdjs,_),
             !.

/* un sp con due sn coordinati */
interp_sn_x(Role,Testa,CatN,[sp(prep(Prep,cat(CatSP),Mod),cord(sn(I,C,coordina([arg(funzione(Funz),ruolo(Ruolo),SN1),arg(funzione(Funz),ruolo(Ruolo),SN2)|SN]))))|AltriSP],LArgs,Nla,ResArgs,[X|ResAdjs],_)  :-
               LArgs = [],
               ( Prep = di ; Prep = of ; Prep = von),
             concat_heads_sn(SN1, SN2, Tes, Sp),  
%               grep_adjs_sp_role(Prep, _, CatSP, CatN, Funz, Tipo_agg),
             X =adj(specif,sp(prep(Prep),I,C,n(Tes,mas,plur),Sp,
                    coordina([arg(funzione(adj),ruolo(specif),SN1),
                    arg(funzione(adj),ruolo(specif),SN2)|SN]))),
             interp_sn_x(Role,Testa,CatN,AltriSP,LArgs,Nla,ResArgs,ResAdjs,_), 
             !.

interp_sn_x(Role,Testa,CatN,[sp(prep(Prep,cat(CatSP),Mod),sn(I,C,coordina([arg(funzione(Funz),ruolo(Ruolo),SN1),arg(funzione(Funz),ruolo(Ruolo),SN2)|SN])))|AltriSP],LArgs,Nla,ResArgs,[X|ResAdjs],_)  :-
               LArgs = [],
               ( Prep = di ; Prep = of ; Prep = von),
             concat_heads_sn(SN1, SN2, Tes, Sp),  
             X =adj(specif,sp(prep(Prep),indice(I),cat(CatSP),n(Tes,mas,plur),Sp,  
                    coordina([arg(funzione(adj),ruolo(specif),SN1),
                    arg(funzione(adj),ruolo(specif),SN2)|SN]))),
             interp_sn_x(Role,Testa,CatN,AltriSP,LArgs,Nla,ResArgs,ResAdjs,_), !.

interp_sn_x(Role,Testa,CatN,[sp(prep(Prep,cat(CatSP),Mod),SN)|AltriSP],LArgs,Nla,ResArgs,[X|ResAdjs],_)  :-
               LArgs = [],
               ( Prep = di ; Prep = of ; Prep = von),
               X =adj(specif,sp(prep(Prep,CatSP,Mod),SN)),
               interp_sn_x(Role,Testa,CatN,AltriSP,LArgs,Nla,ResArgs,ResAdjs,_), !.

interp_sn_x(Role,Testa,CatN,[sp(prep(Prep,cat(CatSP),Mod),SN)|AltriSP],LArgs,Nla,ResArgs,[X|ResAdjs],_)  :-
               grep_adjs_sp_role(Prep, _, CatSP, CatN, Funz, Tipo_agg),
               X =adj(Tipo_agg,sp(prep(Prep,CatSP,Mod),SN)),
               interp_sn_x(Role,Testa,CatN,AltriSP,LArgs,Nla,ResArgs,ResAdjs,_), !.

interp_sn_x(Role,Testa,CatN,[possessivo(Agg,Gen1,Num1)|AltriSP],LArgs,Nla, [X|ResArgs],ResAdjs,Spec)  :-
            ( ( nogen_member(informa,CatN), 
                \+ nogen_member(oggetto,CatN),
                    Ruolo = creator) ;
              ( nogen_member(attivita,CatN), Ruolo = agente) ;
                Ruolo = poss),
               X = arg(funzione(sogg),ruolo(Ruolo),
                                sn(indice(Simb),cat([]),
                                possessivo(Agg,Gen1,Num1),spec(def('+')))), 
               gen_sym(sn,Simb),
               interp_sn_x(Role,Testa,CatN,AltriSP,LArgs,Nla,
                              ResArgs,ResAdjs,Spec),
                              !.

interp_sn_x(Role,Testa,CatN,AltriSP,LArgs,Nla,ResArgs,[X|ResAdjs],Spec):-
             remove(sp(prep(Prep,cat(CatSP),Mod),SN), AltriSP, LSP),
             check_ambiguous_preps([Prep|_]), 
             tipo_agg(Tipo_agg,Prep,ListaCatSP),                            
             X =adj(Tipo_agg,sp(prep(Prep,CatSP,Mod),SN)),
             interp_sn_x(Role,Testa,CatN,LSP,LArgs,Nla,ResArgs,ResAdjs,_),
              !.

completa_argomenti_sn(LArgs,NuovaLArgs,Args) :-
    member(sn/Funzione/Ruolo/ListaCat,LArgs),
    elimina(sn/Funzione/Ruolo/ListaCat,LArgs,NuovaLArgs),
    Args = [arg(funzione(Funzione),ruolo(Ruolo),indefinito)],!.

completa_argomenti_sn(LArgs,NuovaLArgs,Args) :-
    member(sp/Funzione/Ruolo/Prep/ListaCat,LArgs),
    elimina(sp/Funzione/Ruolo/Prep/ListaCat,LArgs,NuovaLArgs),
    Args = [arg(funzione(Funzione),ruolo(Ruolo),indefinito)],!.

completa_argomenti_sn(LArgs,LArgs,[]) :- !.

check_ambiguous_adverbs([P|R]):-
   find_pos(P, I, X, AllP),
   length(X,L),
   (1 < L,
    onelook([P|R],sint_avv,[av],nil),
    \+ onelook([P|R],sint_avv,p, nil)
    ;
    1 < L,
    onelook([P|R],sint_avv,[p],nil),
    onelook(R,sint_avv,[_],[d,n,r,ng,a,v,q])
    ;
    L=1),
   !.
check_ambiguous_preps([P|R]):-
   find_pos(P, I, X, AllP),
   length(X,L),
   (1 < L,
    onelook([P|R],sint_avv,[p],[s,d,av])
    ;
    L=1),
   !.


/* controlla che gli aggettivi siano dei modificatori validi */

interp_modificatore_sn(_,CatN,Nil) :- Nil=..[_,[]],!.
interp_modificatore_sn(_,CatN,[]) :- !.
interp_modificatore_sn(_,[],_) :- !.
interp_modificatore_sn(_,CatN,Mods):-
          check_cats_saa(ListaCatSA, CatN),  
          Mods=..[mod_a,saa(_,cat(ListaCatSA),coordina([_|_]))],!.

interp_modificatore_sn(_,CatN,Mods):-
          check_cats_saa(ListaCatSA, CatN),  
          Mods=..[mod_r,saa(_,cat(ListaCatSA),coordina([_|_]))],!.

interp_modificatore_sn(_,CatN,Mods):-
         check_cats_saa(ListaCatSA, CatN),  
          Mods=..[mod_a,saa(_,cat(ListaCatSA),_,_,_,_)],!.

interp_modificatore_sn(_,CatN,Mods):-
         check_cats_saa(ListaCatSA, CatN),  
          Mods=..[mod_r,saa(_,cat(ListaCatSA),_,_,_,_)],!.

interp_modificatore_sn(Testa,CatN,Mods):- 
             trova_tipo_SN(Testa,Tipo),
             Tipo\=pr,
             Mods=..[mod_d,saa(_,cat(ListaCatSA),_,_,_,_)],!.

interp_modificatore_sn(_,CatN,Mods):-
         check_cats_saa(ListaCatSA, CatN),  
          Mods=..[mod_a,sa(_,cat(ListaCatSA),_,_)],!.

interp_modificatore_sn(_,CatN,Mods):-
         check_cats_saa(ListaCatSA, CatN),  
          Mods=..[mod_r,sa(_,cat(ListaCatSA),_,_)],!.

interp_modificatore_sn(Testa,CatN,Mods):- 
             trova_tipo_SN(Testa,Tipo),
             Tipo\=pr,
             Mods=..[mod_d,sa(_,cat(ListaCatSA),_,_)],!.
interp_modificatore_sn(Testa,CatN,Mod).

interp_modificatore_sn0(CatN,[],[]) :- !.
interp_modificatore_sn0(CatN,nome_mod([]),[])  :-!.
interp_modificatore_sn0(CatN,SN,Subj):-
            atomic(SN),!.
interp_modificatore_sn0(CatN,mod(SN),[])  :-
             trova_cat_SN(SN, ListaCatSN),
             interp_cat(CatN,ListaCatSN), 
             !.
interp_modificatore_sn0(CatN,Mods,[])  
        :-
             nogen_member(nquant,ListaCatSN),
             Mods=..[nome_mod,sn(_,cat(ListaCatSN),n(_,G,N),_,_,_,_)],!.

interp_modificatore_sn0(CatN,nome_mod(SN),Subj)
         :-
         trova_cat_SN(SN, ListaCatSN),
         (
          (
           (on(istituzione, ListaCatSN)
             ;
             on(umano,ListaCatSN)),
           (on(oggetto, CatN)
            ;
             on(astratto, CatN)),
             Subj = arg(funzione(sogg),ruolo(actor),SN)
           ;
           Subj=[])
         ;
         interp_cat(CatN,ListaCatSN)), 
         !.
interp_modificatore_sn0(CatN,Mod,[]):-
         !.

interp_modificatore_sn1(CatN,Mod) :- Mod=..[mod,[]],!.
interp_modificatore_sn1(CatN,[]) :- !.
interp_modificatore_sn1(CatN,Mod) :- !.

interp_modificatore_saa1(CatN,[]) :- !.
interp_modificatore_saa1(CatN,Cat)  :-
                   Cat=..[cat,CatA],
                   nogen_member(enfatico, CatA), 
                   !.

interp_modificatore_saa1(CatN,Cat)  :-
                   Cat=..[cat,CatA],
           nogen_member(quantified, CatA), 
           !.

interp_modificatore_saa1(CatN,Cat)  :-
                   Cat=..[cat,CatA],
           check_cats_saa(CatA, CatN),  
           !.

interp_relative(CatTesta,[]) :- !.
interp_relative(CatTesta,[Rel|Rels]) :- 
                   trova_cat_rel(Rel,cat(CatRel)),
                   member(CC,CatTesta),
                   member(CC,CatRel),!,
                   interp_relative(CatTesta,Rels).
interp_relative(CatTesta,[Rel|Rels]).

estraitesta(SN, Testa) :- (SN =.. [sn,_,_,Testa|_],!).

/* trova la categoria di un SN */
trova_cat_SN(SN,Cat) :- (SN =.. [sn,_,cat(Cat)|_] ,!).
trova_cat_SN(SN,Cat) :- (SN =.. [sn_int,_,cat(Cat)|_] ,!).
trova_cat_SP(SN,Cat) :- (SN =.. [sp, prep(P,cat(Cat),Mod)|Rest] ,!).
trova_t_g_n(SN,T, G, N) :- (SN =.. [sn,_,_,n(T,G,N)|_] ,!).
trova_t_g_n(SN,T, G, N) :- (SN =.. [sn,_,_,pr(_,T,_,G,_,_)|_] ,!).
trova_t_g_n(SN,T, G, N) :- (SN =.. [sn,_,_,pr(_,_,T,_,G,N,_)|_] ,!).
trova_t_g_n(SN,T, G, N) :- (SN =.. [sn,_,_,cl(_,T,_,_,_,_,_)|_] ,!).
trova_t_g_n(SN,T, G, N) :- (SN =.. [sn,_,_,npro(T,G,N)|_] ,!).

trova_testa_SN(SN,Testa) :- (SN =.. [sn,_,_,n(Testa,_,_)|_] ,!).
trova_testa_SN(SN,Testa) :- (SN =.. [sn,_,_,pr(_,Testa,_,_,_,_)|_] ,!).
trova_testa_SN(SN,Testa) :- (SN =.. [sn,_,_,pr(_,_,Testa,_,_,_,_)|_] ,!).
trova_testa_SN(SN,Testa) :- (SN =.. [sn,_,_,cl(_,Testa,_,_,_,_,_)|_] ,!).
trova_testa_SN(SN,Testa) :- (SN =.. [sn,_,_,npro(Testa,_,_)|_] ,!).
trova_testa_SN(SN,Testa) :- (SN =.. [sn_int,_,_,n(Testa,_,_)|_] ,!).

trova_tipo_SN(SN,n) :- (SN =.. [sn,_,_,coordina(Coord)] ,!).
trova_tipo_SN(SN,n) :- (SN =.. [sn,_,_,n(Testa,_,_)|_] ,!).
trova_tipo_SN(SN,pr) :- (SN =.. [sn,_,_,pr(clitico,_,Testa,_,_,_,_)|_] ,!).
trova_tipo_SN(SN,pr) :- (SN =.. [sn,_,_,pr(rifl_corto,_,Testa,_,_,_,_)|_] ,!).
trova_tipo_SN(SN,pr) :- (SN =.. [sn,_,_,pr(rifl_lungo,_,Testa,_,_,_,_)|_] ,!).
trova_tipo_SN(SN,pr) :- (SN =.. [sn,_,_,pr(_,Testa,_,_,_,_)|_] ,!).
trova_tipo_SN(SN,pr) :- (SN =.. [sn,_,_,pr(_,Testa,_,_,_,_,_)|_] ,!).
trova_tipo_SN(SN,pr) :- (SN =.. [sn,_,_,cl(_,Testa,_,_,_,_,_)|_] ,!).
trova_tipo_SN(SN,np) :- (SN =.. [sn,_,_,npro(Testa,_,_)|_] ,!).

trova_caso(SN,Caso) :- (SN =.. [sn,_,_,pr(clitico,_,Testa,_,_,_,Caso)|_] ,!).
trova_caso(SN,Caso) :- (SN =.. [sn,_,_,pr(rifl_corto,_,Testa,_,_,_,Caso)|_] ,!).
trova_caso(SN,Caso) :- (SN =.. [sn,_,_,pr(rifl_lungo,_,Testa,_,_,_,Caso)|_] ,!).
trova_caso(SN,Caso) :- (SN =.. [sn,_,_,pr(_,Testa,_,_,_,_,Caso)|_] ,!).
trova_caso(SN,Caso) :- (SN =.. [sn,_,_,pr(_,Testa,_,_,_,Caso)|_] ,!).
trova_caso(SN,Caso) :- (SN =.. [sn,_,_,cl(_,Testa,_,_,_,_,Caso)|_] ,!).

trova_cat_Strutt(Strutt,Cat) :- (Strutt =.. [sn,_,cat(Cat)|_] ,!).
/* trova l'indice di un SN */
trova_ind_SN(SN,Ind) :- (SN =.. [sn,indice(Ind)|_] ,!).

trova_ind_SN(SN,Ind) :- (SN =.. [sn_int,indice(Ind)|_] ,!).

trova_cat_SA(SA1,Cat) :- (SA1 =.. [saa,_,cat(Cat)|_] ,!).

trova_cat_SA(SA1,Cat) :- (SA1 =.. [sa,_,cat(Cat)|_] ,!).

explore_head(Strutt):-
   trova_tipo_clitico(Strutt,Tipo),
   Tipo=pro_grande,
   !.

trova_tipo_clitico(SN,Tipo) :- 
            nonvar(SN),
            gr(romance),
            (SN =.. [sn,_,_,cl(Tipo, _, _, _, _, _, _)|_] ,!).

trova_tipo_clitico(SN,Tipo) :- 
            nonvar(SN),
            gr(germanic),
            (SN =.. [sn,_,_,pr(Tipo, _, _, _, _, _, _)|_] ,!).

trova_tipo_clitico(SN,Tipo) :- 
            nonvar(SN),
            gr(germanic),
            (SN =.. [sn,_,_,pr(Tipo, _, _, _, _, _)|_] ,!).

/* trova la categoria in una relativa */
trova_cat_rel(Rel,cat(CatRel)) :-
      Rel = relativa(topic(relativo,sn(_,cat(CatRel),_,_)),_) ,!.

trova_cat_rel(Rel,cat(CatRel)) :-
      Rel = avversativa(relativa(topic(relativo,sn(_,cat(CatRel),_,_)),_)) ,!.




/* CONTROLLO SINTAGMA AGGETTIVALE */

/*   NB.  l' argomento del SA se c'e' e' obbligatorio */

interp_sa(Agg,SP,CatTesta,Args) :-
                        pred_a(Agg,[sn/Testa/CatTesta|LArgs]),
                        interp_args_sa(SP,LArgs,Args), !.

interp_args_sa([],[],[]) :- !.   /* l'aggettivo non ha argomenti */
interp_args_sa(sp(prep(Prep,CatSP,Mod),Sn),
                         [Funz/Ruolo/Prep/ListaCat],Args) :-
                 member(CC,CatSP),
                 member(CC,ListaCat),    /* 1 arg. obblig. */
                 Args = [arg(funzione(Funz),ruolo(Ruolo),Sn)], !.

determine_agreement_head_mod(F2,[],Num):-!.
determine_agreement_head_mod(F,Nom_mod,Num):-
   onelook(F,np_head_bar,v,nil),
   Nom_mod\=[],
   remove(nome_mod(SN),Nom_mod,_),
   SN=..[sn,I,C,n(H,G,Nu)|_],
   Nu=Num,!.
determine_agreement_head_mod(F,Nom_mod,Num):-
   \+ onelook(F,np_head_bar,v,nil),
   !.
determiner_check(GF, Q, Nom_mod, F, F1, F2, Det1):-
   F=[F1|F2],
   check_q(Q),   
   check_empty_cost(Nom_mod),
   (
     GF=subj,
    (onelook(F,np_head_bar,n,nil)
    ;
     Det1\=[],
     Det1\=spec(def('0'), part(_), mod(Mo), foc(_), card(_), quant([]))),
     find_pos(F1, I, Xx, Si),
     Xx\=[],
     \+ nogen_member(v-F1, Xx)
    ;
     GF\=subj,
     onelook(F,np_head_bar,[i,n],nil)
    ;
    (Det1\=[],
     Det1\=spec(def('0'), part(_), mod(Mo), foc(_), card(_), quant([])),
     F2=[That|_], 
      (That\=that;That=that,
       testa(F1,Testa,Gen,Num,Pers,Caso,Tipo),
       Testa=..[_,Head|_],
       check_subcn_factive(Head))
     ;
      Det1=[]
    ;
     Det1\=[],
     Det1=spec(def('0'), part(_), mod(Mo), foc(_), card(_), quant([])),
    check_empty_cost1(Nom_mod)
    )
   ;
   onelook(F,np_head_bar,n,nil)
   ),
   onelook(F,np_head_bar,n,nil),
   (GF=adj_pr,
    \+ onelook(F2,np_head_bar,v,nil)
    ;
    GF\=adj_pr), 
    !.

determiner_check(GF, Q, Nom_mod, F, F1, F2, Det1):-
   F=[F1|F2],
   F2=[F3,_|F5],
   check_q(Q),   
   \+ check_empty_cost(Nom_mod),
   (
     GF=subj,
    (onelook(F,np_head_bar,n,nil)
    ;
     Det1\=[],
     Det1\=spec(def('0'), part(_), mod(Mo), foc(_), card(_), quant([]))),
     find_pos(F1, I, Xx, Si),
     Xx\=[],
     \+ nogen_member(v-F1, Xx)
    ;
     GF\=subj,
     onelook(F,np_head_bar,[i,n],nil)
    ;
    (Det1\=[],
     Det1\=spec(def('0'), part(_), mod(Mo), foc(_), card(_), quant([])),
     F2=[That|_], 
      (That\=that;That=that,
       testa(F1,Testa,Gen,Num,Pers,Caso,Tipo),
       Testa=..[_,Head|_],
       check_subcn_factive(Head))
     ;
      Det1=[]
    ;
     Det1\=[],
     Det1=spec(def('0'), part(_), mod(Mo), foc(_), card(_), quant([])),
    check_empty_cost1(Nom_mod)
    )
   ;
   onelook(F,np_head_bar,n,nil)
   ),
   onelook(F,np_head_bar,n,nil),
   (GF=adj_pr,
    \+ onelook(F2,np_head_bar,v,nil)
    ;
    GF\=adj_pr), 
    \+ onelook(F5,np_head_bar,v,nil),
    !.

check_passive_cop_there(SN):-
         gr(english),                          
         SN\=sn(indice(_), cat(_), cl(clitico, _, there, _, _, _, Case), 
                     spec(def(+)), args(_), mods(_), adjs(_)),
          !.

/* sogg-verbo-xcomp */
check_there_sent(SN1, CliticoDat, CliticDat, Pro) :- 
        (gr(italiano),      
          CliticoDat\=[],
          CliticoDat=sp(prep(_, _, _), sn(indice(I), 
                     cat(C), cl(clitico, _, Ci, _, _, _, Case), 
                     spec(def(+)))),
          (Ci=ci;Ci=c),
          CliticDat=CliticoDat, Pro=ci
         ;
         gr(english),                          
         SN1=sn(indice(_), cat(_), cl(clitico, _, there, _, _, _, Case), 
                     spec(def(+)), args(_), mods(_), adjs(_)),
          CliticDat=sp(prep(_, _, _), sn(indice(_), 
                     cat(_), cl(clitico, _, there, _, _, _, [_]), 
                     spec(def(+)))), Pro=there
        ).

check_deict(SN):-
     SN\=[],
     SN=sn(indice(_),cat(_),pr(deittico,_,_,_,_,_),_,_,_,_).

check_propnoun(SN):-
     SN\=[],
     SN=sn(indice(_), cat(_), npro(_, _, _), S, args([]), mods([]), adjs([])).

check_defnoun(SN):-
     SN\=[],
     SN=sn(indice(_), cat(_), n(_, _, _), spec(def(+), part(_), mod(_), foc(_), 
            card(_), quant(_)), args(_), mods(_), adjs(_)).

check_indefnoun(SN):-
     SN\=[],
     SN=sn(indice(_), cat(_), n(_, _, _), spec(def(-), part(_), mod(Mod), foc(_), 
            card(_), quant(_)), args(_), mods(_), adjs(_)),
     Mod\=[].

check_coordn(SN):-
     SN\=[],
     SN=sn(indice(_),cat(_),coordina([arg(funzione(Funz),ruolo(Ruolo),SNA),
                        arg(funzione(Funz),ruolo(Ruolo),SNAb),
                        arg(funzione(Funz),ruolo(Ruolo),SNAa)])). 

/* o c'è il clitico accusativo, oppure quello dativo
 la prima si applica sia ad avere che ad essere, la 
 seconda clausola solo ad essere, inoltre il cliticodat
 può essere presente solo con il verbo essere */
search_clitic_acc_dat(CliticoAcc,CliticoDat,Verbo,Xcomp):-
            (CliticoAcc\=[],
             CliticoAcc=sn(indice(_), cat(_), cl(clitico, _, lo, 3, mas, sing, _), spec(S)),
                         Xcomp=CliticoAcc
             ;
              Verbo\=avere, Verbo\=have,
              CliticoDat\=[],
              Xcomp=[CliticoDat|_]
             ;
              CliticoAcc=[],
              CliticoDat=[]),
             !.

/* il SP si può chiamare quando c'è il verbo essere e viene
  calcolato come aggiunto; mentre se c'è il verbo avere
  deve essere calcolato come pcomp e viene fatto più in basso */

search_sp_essere(Verbo,SN1,Xcomp,SN,Sogg,Xcom):-
            (Verbo=essere; Verbo=be),
            (check_little_pro([SN1|_]),
            SN=SN1,Xcom=Xcomp, Sogg=sogg 
            ;
            check_propnoun(Xcomp),
            SN=Xcomp,Xcom=SN1,Sogg=sogg
            ;
            check_coordn(Xcomp), 
            SN=Xcomp,Xcom=SN1,Sogg=sogg                        
            ;
            SN=SN1,Xcom=Xcomp, Sogg=sogg)
            ;
             SN=SN1,Xcom=Xcomp, Sogg=sogg,
             !.

assegna_funzione_sogg(SN1, Tipo, SN, Sogg):-
              gr(italiano),
              (check_little_pro([SN1]),
                (Tipo=nome,Sogg=sogg_foc
                   ; 
                  Tipo\=nome, Sogg=sogg)
                ;
                 SN=SN1,
                Sogg=sogg),
              !.

assegna_funzione_sogg(SN1, Tipo, SN, Sogg):-
              gr(english),
              Sogg=sogg,
              !.

/* per le frasi c'era una volta una bambina, in cui "una volta" non e' il 
soggetto inverso ma il SN che segue */

sn_avv(F,X,Pro, Tipo, SN1, SN3, SP, Gen, Num, Pers) :-
   sn_semplice(adj,Locs,[],[],SN2,Ge,Nu,Per,C,F,Y),
   get_cues(Pro,Cue),
    (
        (Y=[];Y=[Q], punct(Q)),X=Y,SN1=SN2,SN3=[],!
      ;
     (  
         (Y=[sia|F11] ; Y=[piuttosto_che|F11]),
          sn_coordinati(comp,adj,RestoNom,_,_,_,_,SN2,F11,F2)
           ; 
         (Y=[','|F11] ; Y=[e|F11]; Y=[and|F11]),
          sn_coordinati(coo,adj,RestoNom,_,_,_,_,SN2,F11,F2)
           ; 
         (Y=[or|F11]; Y=[o|F11]; Y=[oppure|F11]),
          sn_coordinati(dis,adj,RestoNom,_,_,_,_,SN2,F11,F2)
         ), 
    recover_locativo(Cue,RestoNom, SN4, SP),
   avverbiale_nominale(SN4, Pro, Tipo, Gen,Num,Pers, SN1, SN3, F2, X)
     ;
     SNall=SN2, F2=Y,
    recover_locativo(Cue,SNall, SN4, SP),
   avverbiale_nominale(SN4, Pro, Tipo, Gen,Num,Pers, SN1, SN3, F2, X)),
   !.

get_cues([],[]):-!.
get_cues(Pro,Cue):-
     Pro\=[],
      (Pro=there;Pro=ci;Pro=c),
      Cue=[in],!.

recover_locativo([],SN, SN, []):-!.

recover_locativo(Cue,SN1, SN, SP1):-
  Cue\=[],
  estrai_stmod(mods,SN1, Mods,Head),
  estrai_stadj(adj,Mods, Adj,Mod),
  estrai_st(sp,Adj,SP),
  estrai_st(prep,SP,Prep),
  estrai_st(sn,SP,SNP),
  trova_tipo_SN(SNP,N),
  (N=n;N=np),
  Prep=prep(P,C,M),
  Prep1=prep(P,cat(C),M),
  (on(P,Cue);tipo_agg(Type,P,Sems), Type=locativo),
  SP1=sp(Prep1,SNP),
  SN1= sn(indice(I),cat(Cat), T, S, A, Mods, Ad),
  SN= sn(indice(I),cat(Cat), T, S, A, mods(Mod), Ad),
  !.

recover_locativo(Cue,SN1, SNcoord, SP1):-
  Cue\=[],
  SN1=..[sn,Ico,C,coordina(Args)],
  remove(Arg1,Args,Args2),
  Args2=..[F,Ars2,R],
  Ars2=..[arg,Fu,Ro,SN2],
  estrai_stmod(mods,SN2, Mods,Head),
  estrai_stadj(adj,Mods, Adj,Mod),
  estrai_st(sp,Adj,SP),
  estrai_st(prep,SP,Prep),
  estrai_st(sn,SP,SNP),
  Prep=prep(P,Ca,M),
  Prep1=prep(P,cat(Ca),M),
  SP1=sp(Prep1,SNP),
  (on(P,Cue);tipo_agg(Type,P,Sems), Type=locativo),
  SN2= sn(indice(I),cat(Cat), T, S, A, Mods, Ad),
  SN= sn(indice(I),cat(Cat), T, S, A, mods(Mod), Ad),
  Argo2=arg(Fu,Ro,SN),
  ArgsNew=[Arg1,Argo2],
  SNcoord=..[sn,Ico,C,coordina(ArgsNew)],
  !.

recover_locativo(Cue,SN, SN, []):-!.

avverbiale_nominale(SN2, Pro, Tipo, Gen,Num,Pers, SN1, SN3, F1, Sf):-
     SN2= sn(indice(I),cat(Cat), T, S, A, M, Ad),
     Cat\=[],
     member(tempo, Cat),
     ( Pro\=[],
      (Pro=there;Pro=ci;Pro=c),
      Cat1=[tempo, unreal]
     ;
      Pro=[],
      Cat1=[tempo]), 
      SN3=sn(indice(I),cat(Cat1), T, S, A, M, Ad),
     soggetto_inverso(Tipo,Part,SN1,Gen,Num,Pers,F1,Sf),
     !.

avverbiale_nominale(SN2, Pro, Tipo, Gen,Num,Pers, SN1, SN3, F1, Sf):-
  (SN2=sn(indice(_), cat(_), 
        pr(Tipo, P, Pe, Ge, Nu, Ca),
          spec(def(D), part(Part), mod(_), foc(_), card(_), quant(Q)), 
           args(A), mods(M), adjs(Ad)), Gen=Ge,Num=Nu,Pers=Pe
  ;
    SN2\=sn(indice(_), cat(_), 
        pr(Tipo, P, Pe, Ge, Nu, Ca),
          spec(def(D), part(Part), mod(_), foc(_), card(_), quant(Q)), 
            args(A), mods(M), adjs(Ad)),
          Tipo=nome, Gen=Ge,Num=Nu,Pers=Pe),
   SN1=SN2, SN3=[], Gen=Ge,Num=Nu,Pers=Pe, Sf=F1.



verb_phrasecopul([sn(SN, Gen, Num, Pers),
    LSP0, LSP1, SA1, Avv1, Avv2,
    Voc, Neg, parent(Par), Sub_n, comps(Comps)], 
    [CliticoAcc, CliticoDat], 
    v(Verbo, Modo, Tempo, Pers1, Num1, 
      Gen1), 
    PredV, LArgsV1, Supporto, 
    cat(CatV), 
    args(Args), 
    adjs(Adjs), 
    H0) 
    :-
          try_remove(Comps, SN1/Xcomp, ListaSPs),
          (Xcomp=acomp, Xcom=acomp;
           Xcomp=sa, Xcom=acomp;
           Xcomp=svinf, Xcom=vcomp;
           Xcomp=sn, Xcom=ncomp;
           Xcomp=sp, Xcom=pcomp;
           Xcomp=ncomp, Xcom=ncomp;
           Xcomp=pcomp, Xcom=pcomp;
           Xcomp=xcomp, SN1=..[Pref|_], Pref\=inf, Pref\=ip, Xcom=xcomp),
          PredV=pred_v(Verbo,CatGr,CatV,PrimoArg),
          ListaSP the_list LSP0 && LSP1 && SP1 && SA1 && ListaSPs,
          grammaticality_check(interp_copul, 
               [Verbo,PredV,LArgsV1,SN/sogg,SN1/Xcom,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3], Adjs)
         ;
          try_remove(Comps, Inf/vcomp, ListaSPs), 
          PredV=pred_v(Verbo,CatGr,CatV,PrimoArg),
          remove(controllo(Controllo), ListaSPs, ListaSP2),
          ListaSP the_list LSP0 && LSP1 && SP1 && SA1 && ListaSP2,
          grammaticality_check(interp_copul, 
               [Verbo,PredV,LArgsV1,SN/sogg,Inf/vcomp,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3], Adjs)
         ;
          try_remove(Comps, Inf/fcomp, ListaSPs), 
          PredV=pred_v(Verbo,CatGr,CatV,PrimoArg),
          remove(controllo(Controllo), ListaSPs, ListaSP2),
          ListaSP the_list LSP0 && LSP1 && SP1 && SA1 && ListaSP2,
          grammaticality_check(interp_copul, 
               [Verbo,PredV,LArgsV1,SN/sogg,Inf/fcomp,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3], Adjs).


verb_phrasecopul([sn(SN, Gen, Num, Pers),
    LSP0, LSP1, SA1, Avv1, Avv2,
    Voc, Neg, parent(Par), Sub_n, comps(Comps)], 
    [CliticoAcc, CliticoDat], 
    v(Verbo, Modo, Tempo, Pers1, Num1, 
      Gen1), 
    PredV, LArgsV1, Supporto, 
    cat(CatV), 
    args(Args), 
    adjs(Adjs), 
    H0) 
    :-
     remove(SN1, Comps, ListaSPs),
      SN1=..[Pref|_], Pref\=inf, Pref\=ip, Xcom=xcomp,
          PredV=pred_v(Verbo,CatGr,CatV,PrimoArg),
          ListaSP the_list LSP0 && LSP1 && SP1 && SA1 && ListaSPs,
          grammaticality_check(interp_copul, 
               [Verbo,PredV,LArgsV1,SN/sogg,SN1/Xcom,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3], Adjs),
      !.

verbal_phrase_copul([sn(SN1,Gen,Num,Pers),LSP0,LSP1,SA1,Avv1,Avv2,Voc,Neg,parent(Par),Sub_n],[CliticoAcc,CliticoDat],
                          v(Verbo,Modo,Tempo,Pers,Num,Gen),
                          PredVs, LArgsV1,
                          Supporto,
                          cat(CatV),
                          args(Args),
                          adjs(Adjs), F, X, H0) 
             :-
             choose_predv(PredVs, PredV, CatGr, CatV),
             PredV=pred_v(Verb,CatGr,CatV,PrimoArg),
             Verb\=avere,Verb\=have,
             check_there_sent(SN1, CliticoDat, CliticDat, Pro),                            
             gen_sym(f,Simb),
             sint_avv(F,Tempo,Avv3/F1,Tipo3),
             sn_avv(F1, F2, Pro,Tipo, SN, SN2, SP0, Gen, Num, Pers),
             assegna_funzione_sogg(SN1, Tipo, SN, Sogg),
             xcomp_ci(SP0,CliticDat,Xcom,Gen,Num,pcomp),
             sint_prep(SP1,F2,X),
             choose_predv(PredVs, PredV0, CatGr, CatV),
             select_subcatt(Fun/prop/_, Fun=xcomp, PredV0, PredV1),
             (
              (Pro=ci, Verbo=esserci;       
               Pro=there, Verbo=there_be),
               ListaSP the_list LSP0 && LSP1 && SP1 && SA1 && SN2,
          grammaticality_check(interp_copul, 
               [Verbo,PredV1,LArgsV1,SN/Sogg,Xcom/pcomp,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3], Adjs)
                          ;
               ListaSP the_list LSP0 && LSP1 && SA1,
               (SP0=[],SP1=[], Xcomp=CliticDat;
                SP1=[SP], nonvar(SP), Xcomp=SP; 
                SP0=[SP], nonvar(SP), Xcomp=SP),
          grammaticality_check(interp_copul, 
               [Verbo,PredV1,LArgsV1,SN/Sogg,Xcomp/pcomp,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3], Adjs)
               ).

verbal_phrase_copul([sn(SN1,Gen,Num,Pers),LSP0,LSP1,SA1,Avv1,Avv2,Voc,Neg,parent(Par),Sub_n],[CliticoAcc,CliticoDat],
                          v(Verbo,Modo,Tempo,Pers,Num,Gen),
                          PredVs, LArgsV1,
                          Supporto,
                          cat(CatV),
                          args(Args),
                          adjs(Adjs), F, F4, H0) 
          :-
             choose_predv(PredVs, PredV, CatGr, CatV),
          PredV=pred_v(Verbo,CatGr,CatV,[PrimoArg|LastArg]),
          Verbo = avere,
          sint_avv(F,Tempo,Avv3/F1,Tipo3),
          oggetto(SN2,TOgg,PredV,Controllo,CliticoAcc,F1,F2,H0,nil),
          xcomp(LastArg,Xcomp,_Gen,_Num,pcomp,F2,F3),
          sint_prep(ListaSP2,F3,F4),
          ListaSP the_list ListaSP0 &&  ListaSP1 && ListaSP2 && SA1, 
          grammaticality_check(interp_copul, 
               [Verbo,PredV,LArgsV1,SN1/sogg,SN2/ogg,Xcomp/pcomp,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4], Adjs).

verbal_phrase_copul([sn(SN1,Gen,Num,Pers),LSP0,LSP1,SA1,Avv1,Avv2,Voc,Neg,parent(Par),Sub_n],[CliticoAcc,CliticoDat],
                          v(Verbo,Modo,Tempo,Pers,Num,Gen),
                          PredVs, LArgsV1,
                          Supporto,
                          cat(CatV),
                          args(Args),
                          adjs(Adjs), F, F3, H0) 
             :-
             choose_predv(PredVs, PredV, CatGr, CatV),
             PredV=pred_v(Verbo,CatGr,CatV,[PrimoArg|LastArg]),
             advs_preobj(F,F1,Avv3,Avv4),
             search_clitic_acc_dat(CliticoAcc,CliticoDat,Verbo,Xcomp),
             xcomp(LastArg,Xcomp,Gen1,Num1,TipoXcomp, F1, F2),
             search_sp_essere(Verbo,SN1,Xcomp,SN,Sogg,Xcom),                     
             sint_prep3(F2,F3,LSP,H0,nil),
             ListaSP the_list LSP && LSP0 && SA1 && LSP1,
            (   var(TipoXcomp),
                   select_subcatt(Fun/_/_/_, Fun = vcomp, PredV, PredV1)                         
                   ;
                   TipoXcomp=fcomp,
                   select_subcatt(Fun/_/_, Fun = f/fcomp, PredV, PredV1)                         
               ;
              select_subcatt(Fun/_/_, Fun = sn/sogg, PredV, PredV1) ),                         
          grammaticality_check(interp_copul, 
               [Verbo,PredV1,LArgsV1,SN/Sogg,Xcom/TipoXcomp,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4], Adjs).


verbal_phrase_copul([sn(SN1,Gen,Num,Pers),LSP0,LSP1,SA1,Avv1,Avv2,Voc,Neg,parent(Par),Sub_n],[CliticoAcc,CliticoDat],
                          v(Verbo,Modo,Tempo,Pers,Num,Gen),
                          PredVs, LArgsV1,
                          Supporto,
                          cat(CatV),
                          args(Args),
                          adjs(Adjs),F,F4,H0) 
        :-
        choose_predv(PredVs, PredV, CatGr, CatV),
        PredV=pred_v(Verbo,CatGr,CatV,[PrimoArg|LastArg]),
                        Verb\=avere,
        advs_preobj(F,F1,Avv3,Avv4),
        sn_avv(F1,F2,Pro, Tipo, SN1, SN2, SP0, Gen, Num, Pers),
        xcomp(LastArg,Xcomp,Gen,Num,TipoXcomp,F2,F3),
        sint_prep(SP1,F3,F4),
        select_subcat([sn/sogg/_/_, Fun/prop/_], PredV, PredV1),
        ListaSP the_list 
        LSP0 && LSP1 && SP0 && SP1 && CliticoDat && SA1 && SN2,
        grammaticality_check(interp_copul, 
               [Verbo,PredV1,LArgsV1,SN1/sogg_foc,Xcomp/TipoXcomp,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4], Adjs).


verbal_phrase_cop([svinf(Svinf,Controllo),LSP0,LSP1,SA1,Avv1,Avv2,Voc,Neg,parent(Par)],[CliticoAcc,CliticoDat],
                          v(Verbo,Modo,Tempo,Pers,Num,Gen),
                          PredV, LArgsV1,
                          Supporto,
                          cat(CatV),
                          args(Args),
                          adjs(Adjs),F,X,H0) 
          :-
          PredV=pred_v(Verbo,CatGr,CatV,PrimoArg),
          sint_avv(F,Tempo,Avv3/F1,Tipo3),
          gen_sym(f,Simb),
          acomp(Xcomp,_Gen,_Num,F1,F2),
          sint_prep3(F2,F3,LSP2,H0,nil),
          nom_avv(SN2,PredV,_,_,_,F3,F4),
          check_cat_temp(SN2),
          sint_prep(LSP3,F4,F5),
          agnt_sa(post,SA3,Gen1,Num1,F5,X),
          select_subcatt(Fun/prop/_/_, Fun = vcomp, PredV, PredV1),
          ListaSP the_list 
          LSP0 && LSP1 && SN2 && LSP2 && LSP3 && SA1 && SA2 && SA3,
          grammaticality_check(interp_cop_inf_sogg, 
               [Verb,Controllo,PredV,LArgsV1,Svinf/sogg,Xcomp/acomp,ListaSP,CatV],Args,
               Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3], Adjs).

/* COMPLEMENTI PREDICATIVI - XCOMP  */

xcomp(Args,X, Gen1, Num1, TipoXcomp, F,F) :-
   nonvar(X),
   X =sn(indice(_),cat(_),cl(clitico, _, lo, _, _, 
            _, [acc]), spec(def(+))).

xcomp(Args,[X|Y],Gen,Num,acomp,F,F1) :- 
   nonvar(X),
   acomp_clit([X|Y],Gen,Num,F,F1).

xcomp(Args,X,Gen,Num,acomp,F,F1) :-
   sublist(Args, Arg),
   (on(acomp/Prop/_, Arg);
   on(xcomp/prop/_, Arg)),
   acomp(X,Gen,Num,F,F1).

xcomp(Args,X,Gen,Num,ncomp,F,F1) :- 
   sublist(Args, Arg),
   (on(ncomp/Prop/_, Arg);
   on(xcomp/prop/_, Arg)),
   ncomp(X,Gen,Num,F,F1).

xcomp(Args,X,Gen,Num,qxcomp/P,F,F1) :- 
   sublist(Args, Arg),
   (on(ncomp/Prop/_, Arg);
   on(xcomp/prop/_, Arg)),
   qxcomp(P,X,Gen,Num,F,F1).

xcomp(Args,X,_Gen,_Num,pcomp,F,F1) :-
   sublist(Args, Arg),
   (on(pcomp/Prop/_, Arg);
   on(xcomp/prop/_, Arg)),
   pcomp(X,_Gen,_Num,F,F1).

xcomp(Args,CStr,Gen,Num,Funz,F,F1) :-
   infinitiva(CStr,Funz,F,F1,_,_).

xcomp_ci([],
   sp(prep(_, _, _), 
      sn(indice(_), 
         cat(_), cl(
            clitico, _, Pro, _, _, _, [_]), 
         spec(def(+)))),
   sp(prep(_, _, _), 
      sn(indice(_), 
         cat(_), cl(
            clitico, _, Pro, _, _, _, [_]), 
         spec(def(+)))), _, _, pcomp):-!.

xcomp_ci(
   [sp(prep(in, _, _),SN)],ClitDat,sp(prep(in, _, _),SN), _, _, pcomp):-!.

pcomp(X,_Gen,_Num,F,F1):- pcmp(X,F,F1).

pcmp(SP,F,F1):-  sp(_,SP,F,F1).

nom_avv(SN,PredV,_,_,Tipo,F,X) :-
    (F=[],X=[], SN=[];F=[P], punct(P),X=[P], SN=[]),!.

nom_avv(SN,PredV,_,_,Tipo,F,X) :-
    extr_args(PredV, Cues),
    sn_semplice(adj,Loc,Cues,[],SN,G,N,P,C,F,X),
     trova_tipo_SN(SN,T),
   (gr(germanic), 
     T=pr, Tipo=clitico
    ;
     T=n, Tipo=sn),
     !.

nom_avv([],_,_,_,_,F,F):-!.

agnt_sa(Pos,SA,Gen,Num,F,X):-  
    (F=[],X=[], SA=[];F=[P], punct(P),X=[P], SA=[]),!.

agnt_sa(Pos,SA,Gen,Num,F,X):-  
   saa(F,Pos,SA,_,Gen,Num,M,X),
   !.

agnt_sa(_,[],_,_,F,F):-!.

acomp_clit([X|SA],Gen,Num,F,F1):- 
   saa_clit(F,[X|SA],Gen,Num,M,F1).

acomp(SA,Gen,Num,F,X):-  
   saa(F,post,SA,_,Gen,Num,M,X).

ncomp(SN,Gen,Num,F,X):- 
   sint_n(ncomp,Loc,[],SN,Gen,Num,Pers,Caso,F,X,nil,nil),
   member(nom,Caso).

qxcomp(P,SN,Gen,Num,[P|F],X) 
   :- 
   (
    gr(italiano),extract_head(p-P, come, I), 
    prep(P,P)
    ;
    gr(english),extract_head(p-P, as, I), 
    prep(P,P)
    ;
    gr(deutsch),extract_head(p-P, als, I), 
    prep(P,P)
    ),
   sint_n(ncomp,Loc,[],SN,Gen,Num,Pers,Caso,F,X,nil,nil),
   member(nom,Caso).

qxcomp(P,SN,Gen,Num,[P|F],X) 
   :- 
   (
    gr(italiano),
    (extract_head(e-P, piu_di, I);
     extract_head(e-P, meno_di, I)), 
    cconju(P)
    ;
    gr(english),
    (extract_head(e-P, less_than, I); 
     extract_head(e-P, more_than, I)),     
    cconju(P)
    ;
    gr(deutsch),
    (extract_head(e-P, mehr_als, I); 
     extract_head(e-P, weniger_als, I)),
    cconju(P)
    ),
   sint_n(ncomp,Loc,[],SN,Gen,Num,Pers,Caso,F,X,nil,nil),
   member(nom,Caso).

np_double_bar(GF,Cues,CCats,Stem,Ind,Det,Poss1,Mod1,Mod2,Nome_mo1,Nome_mo,Testa,Gen,Num,Pers,LCat,Caso,Tipo,Nome,LArgsN,F,X) :- (F=[],X=[];F=[P], punct(P),X=[P]),!.


/* right-hand-side di sn_semplice  */

np_double_bar(GF,Cues,CCats,Stem,Ind,Det,Poss1,Mod1,Mod2,Nome_mo1,Nome_mo,Testa,Gen,Num,Pers,LCat,Caso,Tipo,Nome,LArgsN,F,X)
   :-
   quant_phrase(Cues,Poss,Mod2,LCats,Q,mod(Mo),Nom_mod,Det1,Gen0,Num0,Caso,TipoQ,F,F1),
   modificatore(F1,Cues,Det1,Mod1,Nom_mod1,Gen0,Num0,LCats,F2),
   !,
   np_head_bar(GF,F2,Cues,CCats,Poss,Mod2,Q,Mo,M,Det1,Nom_mod,Stem,Ind,Det, 
      Poss1,Nom_mod1,Testa,Gen,Num,Pers,LCats,Caso,Tipo,TipoQ,Nome,LArgsN,
      Nome_mo,Nome_mo1,X),
   assign_type(Tipo,TipoQ),
   assign_gend(Gen, Gen0),
   assign_num(Num, Num0),
   assign_cats(Nom_mod, Nom_mod1, LCats, LCat).

checkTypes(Type,Q,Types):-
       nonvar(Q),
       Types=..[Type,Q],
       !.
checkTypes(Type,Q,Types):-
       var(Q),
       nonvar(Types),
       Types=..[Type,Q],
       !.
checkTypes(Type,Q,Type):-
       var(Q),
       !.
       

/*********
np_head_bar(+GF,+Ccats,+Poss,+Mod2,+Q,+Mo,+Det1,+Nom_mod,Stem,Ind,Det,Poss1,Nom_mod1,Testa,Gen,Num,Pers,ListaCat,Caso,Tipo,Nome,LArgsN)
*********/
np_head_bar(GF,F,Cues,CCats,Poss,Mod2,Q,Mo,M,Det1,Nom_mod,Stem,Ind,Det,Poss1,Nom_mod1,Testa,Gen,Num,Pers,ListaCat,Caso,Tipo,TipoQ,Nome,LArgsN,N1,N2,X)
			:-
   F=[F1|F2],
   (
     ((Nom_mod1\=nome_mod([]);
     Nom_mod1\=[]),
    (Nom_mod\=nome_mod([]);
     Nom_mod\=[])),
     GF=subj,
     find_pos(F1, I, Xx, Si),
     Xx\=[],
     \+ on(v-F1, Xx)
    ;
     GF\=subj,
    onelook(F,np_head_bar,n,nil)
    ;
     Det1\=[],
     Det1\=spec(def('0'), part(_), mod(Mo), foc(_), card(_), quant([]))
     ),
   testa(F1,Testa,Gen,Num,Pers,Caso,Tipo),
   np_head(F2,CCats,Poss,Mod2,Q,Mo,M,Det1,Nom_mod,Stem,Ind,Det,Poss1,
        Nom_mod1,Testa,Gen,Num,Pers,ListaCat,Caso,Tipo,Nome,LArgsN,X),
   N1=Nom_mod, N2=Nom_mod1, !.

np_head_bar(GF,F,Cues,CCats,Poss,Mod2,Q,Mo,M,Det1,Nom_mod,Stem,Ind,Det,Poss1,Nom_mod1,Testa,Gen,Num,Pers,ListaCat,Caso,Tipo,TipoQ,Nome,LArgsN,N1,N2,X)
			:-
   F=[F1|F2],
   Nom_mod=nome_poss(NP),
   testa(F1,Testa,Gen,Num,Pers,Caso,Tipo),
   np_head(F2,CCats,Poss,Mod2,Q,Mo,M,Det1,Nom_mod,Stem,Ind,Det,Poss1,
        Nom_mod1,Testa,Gen,Num,Pers,ListaCat,Caso,Tipo,Nome,LArgsN,X),
   N1=Nom_mod, N2=Nom_mod1, !.

np_head_bar(GF,F,Cues,CCats,Poss,Mod2,Q,Mo,M,Det1,Nom_mod,Stem,Ind,Det,Poss1,Nom_mod1,Testa,Gen,Num,Pers,ListaCat,Caso,Tipo,TipoQ,Nome,LArgsN,N1,N2,X)
			:-
   F=[F1|F2],
   (
   (
    (Det1\=[],
     Det1\=spec(def('0'), part(_), mod(Mo), foc(_), card(_), quant([])),
    (Nom_mod1\=nome_mod([]);
     Nom_mod1\=[]),
    (Nom_mod\=nome_mod([]);
     Nom_mod\=[])),
     GF=subj,
     find_pos(F1, I, Xx, Si),
     Xx\=[],
     \+ on(v-F1, Xx)
    ;
     GF\=subj,
    onelook(F,np_head_bar,n,nil))
     ;
    (Det1=[]
     ;
    (Nom_mod1=nome_mod([]);
     Nom_mod1=[])
     ;
     (Nom_mod=nome_mod([]);
      Nom_mod=[])),
     (GF=subj,
     find_pos(F1, I, Xx, Si),
     Xx\=[],
     \+ on(v-F1, Xx)
     ;
      GF\=subj,
      onelook(F,np_head_bar,n,nil))
     ;
     Nom_mod=nome_poss(NP)),
   testa(F1,Testa,Gen,Num,Pers,Caso,Tipo),
   np_head(F2,CCats,Poss,Mod2,Q,Mo,M,Det1,Nom_mod,Stem,Ind,Det,Poss1,
        Nom_mod1,Testa,Gen,Num,Pers,ListaCat,Caso,Tipo,Nome,LArgsN,X),
   N1=Nom_mod, N2=Nom_mod1, !.

/*19 dicembre*/
np_head_bar(GF,[F|X],Cues,CCats,Poss,Mod2,Q,Mo,M,Det1,Nom_mod,Stem,Ind,Det,Poss1,Nom_mod1,Testa,Gen,Num,Pers,ListaCat,Caso,Tipo,TipoQ,Nome,LArgsN,N1,N2,X)
   :-
    Nom_mod=[],
    Poss=[],
    Mod2=[],
    Mo=[],
   pro(F,Clit),
   Clit=..[Cl,Tipo,_,Pro,Pers,Gen,Num,Caso],
   !,
   (Cues=[]; 
    Cues\=[], on(that, Cues), Tipo\=deittico;
    Cues\=[], on(D, Cues), D\=that),
   (
   Cl = cl, Pro = there,
   Testa =..[Cl,Tipo,_,Pro,Pers,Gen,Num,Caso]
    ;
   Clitico=pr(Tipo,_,Pro,Pers,Gen,Num,Caso),
   Testa = Clitico,
   pred_p(pro,Pro,nil,ListaCat,LArgsN)
     ),
   Det  = spec(def(+)),
   gen_sym(sn,Ind), retraction(np_head_bar, r).

np_head_bar(GF,F,Cues,CCats,Poss,Mod2,Q,Mo,M,Det1,Nom_mod,Stem,Ind,Det,Poss1,Nom_mod1,Testa,Gen,Num,Pers,ListaCat,Caso,Tipo,TipoQ,Nome,LArgsN,N1,N2,X)
    :-
   np_pronom(F,Poss,Mod2,Q,Mo,Det1,Nom_mod,Stem,Ind,Det,Poss1,Nom_mod1,  
        Testa,Gen,Num,Pers,ListaCat,Caso,Tipo,TipoQ,Nome,LArgsN,N1,N2,X),!.

np_head_bar(GF,F,Cues,CCats,Poss,Mod2,Q,Mo,M,Det1,Nom_mod,Stem,Ind,Det,Poss1,Nom_mod1,Testa,Gen,Num,Pers,ListaCat,Caso,Tipo,TipoQ,Nome,LArgsN,N1,N2,X)
    :-
   !,
   Nom_mod=[],
    Poss=[],
    Mod2=[],
    Mo=[],
    pronom_generic(F,Cues,Poss,Nom_mod,Mod2,Q,Mo,Det1,Ind,Det,Testa,Gen,Num,Pers,ListaCat,Caso,Tipo,LArgsN,X),!.

np_head(F,CCats,Poss,Mod2,Q,Mo,M,Det1,Nom_mod,Stem,Ind,Det,Poss1,Nom_mod1,Testa,Gen,Num,Pers,ListaCat,Caso,Tipo,Nome,LArgsN,F)
   :-
   !,
   Poss1=Poss,
    (Mo=[];
     (Mo\=[], 
      Mo=pr(deittico, _, M, _, _, _, _),
      var(Q),
      Det1=spec(def(Def),part(Part),mod(Mo),
         foc(Foc),card(Card),Types),
    checkTypes(Type,Q,Types),
     Det=spec(def(Def),part(Part),mod(M),
         foc(Foc),card(Card),Types) 
      ;
      Mo\=[], Nom_mod1=Mo)),
    gen_sym(sn,Ind), 
   (
   Tipo = nome,
   (Testa=n(Nome,_,_)
    ;Testa=nn(Nome,_,_)),
   pred_n(Nome,Stem,ListaCat,LArgsN),
   (strath(head),
   check_compat(CCats,ListaCat)
     ;
    \+ strath(head) 
    ),   
   (nonvar(Det);var(Det),Det=Det1),
   retraction(np_noun,n) 
   ;
   Tipo = nopro,
   Testa=npro(Nome,_,_),
   pred_np(Nome,Stem,ListaCat,LArgsN),
   check_compat(CCats,ListaCat),   
   (Det1=spec(def(Def),part(Part),mod(Mo),foc(Foc),card(Card),Types),
   checkTypes(Type,Q,Types),
      Det=spec(def(Def),part(Part),mod(M),foc(Foc),card(Card),Types)),
   retraction(np_npro,n) 
   ).

np_pronom(F,Poss,Mod2,Q,Mo,Det1,Nom_mod,Stem,Ind,Det,Poss1,Nom_mod1,Testa,Gen,Num,Pers,ListaCat,Caso,Tipo,TipoQ,Nome,LArgsN,[],Nom_mod1,F)
     :-
     Nom_mod\=[],
     Nom_mod1=[],
     !,
     pronom_prehead0(Poss,Det1,Nom_mod,Stem,Ind,Det,Poss1,Testa,Gen,Num,
                Pers,ListaCat,Caso,Tipo,Nome,LArgsN).

np_pronom(F,Poss,Mod2,Q,Mo,Det1,Nom_mod,Stem,Ind,Det,Poss1,Nom_mod1,Testa,Gen,Num,Pers,ListaCat,Caso,Tipo,TipoQ,Nome,LArgsN,Nom_mod,[],F)
     :-
     Nom_mod1\=[],
     !,
     pronom_prehead1(Poss,Det1,Nom_mod1,Stem,Ind,Det,Poss1,Testa,Gen,Num,
          Pers,ListaCat,Caso,Tipo,Nome,LArgsN).

np_pronom(F,Poss,Mod2,Q,Mo,Det1,Nom_mod,Stem,Ind,Det,Poss1,Nom_mod1,Testa,Gen,Num,Pers,ListaCat,Caso,Tipo,TipoQ,Nome,LArgsN,N1,N2,F)
     :-
    gr(romance),Mod2\=[],
    pronom_premod(Mod2,Det1,Ind,Det,Testa,Gen,Num,Pers,ListaCat,Tipo,LArgsN).

np_pronom(F,Poss,Mod2,Q,Mo,Det1,Nom_mod,Stem,Ind,Det,Poss1,Nom_mod1,Testa,Gen,Num,Pers,ListaCat,Caso,Tipo,TipoQ,Nome,LArgsN,N1,N2,F)
     :-
    Poss\=[],
    (gr(english), 
     Poss=..[Tipo,Pro, Gen, Num],
     Pro=her
    ;
    gr(Gr), Gr\=english),
    pronom_poss(Poss,Det1,Ind,Det,Testa,Gen,Num,Pers,ListaCat,Caso,Tipo,LArgsN).

np_pronom(F,Poss,Mod2,Q,Mo,Det1,Nom_mod,Stem,Ind,Det,Poss1,Nom_mod1,Testa,Gen,Num,Pers,ListaCat,Caso,Tipo,TipoQ,Nome,LArgsN,N1,N2,F)
     :-
    nonvar(Q),
    quanthead(Q),
    Det1=spec(def(Def), part(Part), mod(_), foc(_), 
               card(_), quant(Q)), 
    sel_p(Part, Def),
    (var(TipoQ);
     nonvar(TipoQ),
     (TipoQ=personale;
      TipoQ=quant)
     ),
    pronominalizer(Q,Det1,Ind,Det,Testa,Gen,Num,Pers,ListaCat,Caso,TipoQ,LArgsN).

np_pronom(F,Poss,Mod2,Q,Mo,Det1,Nom_mod,Stem,Ind,Det,Poss1,Nom_mod1,Testa,Gen,Num,Pers,ListaCat,Caso,Tipo,TipoQ,Nome,LArgsN,N1,N2,F)
     :-
    nonvar(Q), 
    Det1=spec(def(Def), part(Part), mod(_), foc(_), 
               card(_), quant(Q)), 
      (Part='-', Def='0'
       ;
       Part\='-'),
    (gr(english),
     cardinale(F,Card, _, _), 
     Card = 1, 
     concat(Q, 'one', Q1)
     ;
     Q1=Q),
    pronom_quant(Q1,Det1,Ind,Det,Testa,Gen,Num,Pers,ListaCat,Caso,TipoQ,LArgsN).

np_pronom(F,Poss,Mod2,Q,Mo,Det1,Nom_mod,Stem,Ind,Det,Poss1,[],Testa,Gen,Num,Pers,ListaCat,Caso,Tipo,TipoQ,Nome,LArgsN,N1,N2,F)
     :-
    Mo\=[],    
    Mo=pr(deittico, _, Pro, 3, Gen, Num, _),
    checkthat(F, Pro),
    !,
    pronom_quant_mod(Q,Mo,Det1,Ind,Det,Testa,Gen,Num,Pers,ListaCat,Caso,TipoQ,LArgsN).

checkthat(F, that):-
     onelook(F,pron_that,[x,e],[v,vc,aux]),!.

checkthat(F, Pro):-Pro\=that,!.

pronom_prehead0(Poss,Det1,Nom_mod,Stem,Ind,Det,Poss1,Testa,Gen,Num,Pers,ListaCat,Caso,nome,Nome,LArgsN)
     :-
    Nom_mod=nome_mod(sn(indice(Ind), cat(ListaCat), 
                    Testa, S, args(_), mods(_), adjs(_))), 
    Testa=..[N,Nome, Gen, Num], 
    Poss1=Poss,
    (pred_n(Nome,Stem,ListaCat,LArgsN);
     pred_np(Nome,Stem,ListaCat,LArgsN)),
    Det=Det1.

pronom_prehead1(Poss,Det1,Nom_mod,Stem,Ind,Det,Poss1,Testa,Gen,Num,Pers,ListaCat,Caso,nome,Nome,LArgsN)
   :-
    Nom_mod\=[],    
   Nom_mod=nome_mod(sn(indice(Ind), 
                      cat(ListaCat), Testa, S, 
                       args(_), mods(_), adjs(_))), 
    Testa=..[N,Nome, Gen, Num], 
    Poss1=Poss,
    (pred_n(Nome,Stem,ListaCat,LArgsN);
     pred_np(Nome,Stem,ListaCat,LArgsN)),
    Det1=spec(def(Def),part(Part),mod(Mo),
         foc(F),card(Card), Types),
   checkTypes(Type,Q,Types),
     (Mo=[],
     Det=Det1
      ;
      Mo\=[], 
      Mo=pr(deittico, _, M, _, _, _, _),
      var(Q),
      Det=spec(def(Def),part(Part),mod(M),
         foc(F),card(Card),Types),
         checkTypes(Type,Q,Types)).

pronom_premod(Mod2,Det1,Ind,Det,Testa,Gen,Num,Pers,Cat,pro_picc,[])
   :-
    (Mod2=..[Mod,saa(indice(Simb), cat(Cat), agg(Agg, Gen, Num), args(Ar), adjs(Ad))]
     ;
     Mod2=..[Mod,sa(indice(Simb), cat(Cat), agg(Agg, Gen, Num), args(Ar))]
     ),
    gen_sym(sn,Ind), 
    Testa=pr(pro_picc,pPro,3,Gen,Num,_),
    Det=Det1. 

pronom_poss(Poss,Det1,Ind,Det,Testa,Gen,Num,Pers,ListaCat,Caso,Tipo,LArgsN)
   :-
   Poss=..[Tipo,Pro, Gen, Num],
    ListaCat=[],
    LArgsN=[],
    Testa = pr(Tipo,Pro,3,Gen,Num,_),
    gen_sym(sn,Ind),
    Det=Det1.

pronom_quant(Q,Det1,Ind,Det,Testa,Gen,Num,Pers,ListaCat,Caso,pr_quantif,LArgsN)
   :-
   pronominalizer(Q,Det1,Ind,Det,Testa,Gen,Num,Pers,ListaCat,Caso,pr_quantif,LArgsN).

pronom_quant(Q,Det1,Ind,Det,Testa,Gen,Num,Pers,ListaCat,Caso,quant,LArgsN)
   :-
   pronominalizer(Q,Det1,Ind,Det,Testa,Gen,Num,Pers,ListaCat,Caso,pr_quantif,LArgsN).

pronom_quant_mod(Q,Mo,Det1,Ind,Det,Testa,Gen,Num,Pers,ListaCat,Caso,deittico,LArgsN)
			:-
   Mo=pr(deittico, _, Pro, 3, Gen, Num, _),
   pronominalizer(Pro,Det1,Ind,Det,Testa,Gen,Num,Pers,ListaCat,Caso,deittico,LArgsN).

pronominalizer(Pro,Det1,Ind,Det,Testa,Gen,Num,Pers,ListaCat,Caso,Tipo,LArgsN)
   :-
    \+ integer(Pro),
    Testa = pr(Tipo,Pro,3,Gen,Num,Caso),
    Det1=spec(def(Def),part(Part),mod(M),foc(F),card(Card),Types),
   checkTypes(Type,Q,Types),
    spec_pron(spec(def(Def)),Tipo,Part,Det),
    pred_p(pro,Pro,nil,ListaCat,LArgsN),
    gen_sym(sn,Ind),
     (Tipo=deittico
       ;
      Tipo=quant
       ;
      Tipo\=deittico, Tipo\=quant, Mod=[]),
     (Det=spec(def(Def1),part(Part),mod(Mod),foc(F),card(Card),Types),
   checkTypes(Type,Q,Types)
      ;
      Det=spec(def(Def1),Part,mod(Mod),foc(F),card(Card),Types),
   checkTypes(Type,Q,Types)
     ).

pronominalizer(Pro,Det1,Ind,Det,Testa,Gen,Num,Pers,ListaCat,Caso,Tipo,LArgsN)
   :-
    (cardinale(Pro,Car, _, _);Tipo=quant),     
    Testa = pr(Tipo,Pro,3,Gen,Num,Caso),
    Det1=spec(def(Def),part(Part),mod(M),foc(F),card(Card),Types),
   checkTypes(Type,Q,Types),
    spec_pron(spec(def(Def)),Tipo,Part,Det),
       LArgsN=[],
    (pred_n(Pro, Stem, ListaCat, Sub);
       ListaCat=[nquant]),
    gen_sym(sn,Ind),
     (Det=spec(def(Def1),part(Part),mod(Mod),foc(F),card(Card),Types),
   checkTypes(Type,Q,Types)
      ;
      Det=spec(def(Def1),Part,mod(Mod),foc(F),card(Card),Types),
   checkTypes(Type,Q,Types)
     ).

pronom_generic(F,Cues,Poss,Nom_mod,Mod2,Q,Mo,Det1,Ind,Det,Testa,Gen,Num,Pers,ListaCat,Caso,Tipo,LArgsN,X):-
    pronom(F,Cues,Det1,Ind,Det,Testa,Gen,Num,Pers,ListaCat,Caso,Tipo,LArgsN,X).

pronom([P|F],Cues,Det1,Ind,Det,Testa,Gen,Num,Pers,ListaCat,Caso,TipoPron,LArgsN,X) :-
    pro(P,pr(TipoPron,Part,Pro,Pers,Gen,Num,Caso)), 
   !,
   (Cues=[]; 
    Cues\=[], on(that, Cues), Tipo\=deittico;
    Cues\=[], on(D, Cues), D\=that),
    TipoPron\=pr_int, TipoPron\=prorel,
     Testa = pr(TipoPron,Pro,Pers,Gen,Num,Caso),
     Det1=spec(def(Def),part(Part),mod(M),foc(Foc),card(Card),Types),
   checkTypes(Type,Q,Types),
     spec_pron(spec(def(Def)),TipoPron,Part,Det),
     pred_p(pro,Pro,nil,ListaCat,LArgsN),
         gen_sym(sn,Ind),
     retraction(pronom,r),
     Det=spec(def(Def1),part(Part),mod(M),foc(Foc),card(Card),Types),
   checkTypes(Type,Q,Types),
    quantif_double(F,Q,Part,Gen,Num,X).

quant_phrase(Cues,Poss,Mod2,ListaCat,Q,mod(M),Nom_mod,Spec,Gen,Num,Caso,Type,F,X) :-
  quant_double_bar(Foc,Def,Types,Part,mod(M),Gen,Num,Caso,F,F1),
   checkTypes(Type,Q,Types),
  quant_poss_deit(Cues,Q,Def,Part,Poss,Deitt,Card,Gen1,Num1,Def1,F1,F2),
  (var(M), M=Deitt;
   nonvar(M)),
  mod_part(Spec,Nom_mod1,Gen2,Num2,F2,F3),
  modificatore(F3,Cues,[],Mod2,Nom_mod2,Gen0,Num0,ListaCat,F4),
  append_list(Nom_mod1, Nom_mod2, Nom_mod),
  quant_bar(Poss,Part,Def,Q,card(Card),Gen,Num,F4,X),
  build_quant_spec(Poss, Def, Q, Part, M, Foc, Card, Type, Def1, Spec),!.


mod_part(Det,Nom_mod,Gen,Num,F,X):-
       nome_quant(F,Nome,Gen,Num,F1),
       quantificatore(F1,Q,Part,Gen0,Num0,X),
       Q=exist, 
       gen_sym(sn,Ind),
       Testa=n(Nome, Gen, Num), 
       pred_n(Nome,_,_,_),
       Nom_mod=nome_mod(sn(indice(Ind),cat(Cat),Testa,Det,
            args(Args),mods(Mods),adjs(Adjs)),
            _,_,_,_).

mod_part(Det,[],Gen,Num,F,F):-!.

checktermT(Type, Q, TermT):-
   var(Q), nonvar(TermT), TermT=..[Type,Q],
   nonvar(Q), 
    !.

checktermT(Type, Q, TermT):-
   nonvar(Q),var(Type),
   TermT=..[quant,Q],
    !.

checktermT(Type, Q, TermT):-
   nonvar(Q), TermT=..[Type,Q],
    !.

checktermT(Type, Q, TermT):-
   nonvar(Type),
    !.

checktermT(Type, Q, TermT):-
   var(Q),var(Type),
    !.
    
quant_double_bar(Foc,Def,TermT,Pt,Mod,Gen,Num,Caso,F,X):-
   focalizer(F,Foc,Ff),
   quant_double(Ff,Type,Q,Pt,Gen,Num,F1),
   checktermT(Type, Q, TermT),
   quant_one_bar(F1,Def,Pt,Mod,Gen,Num,Caso,X).

quant_double(F,quant,Q,Pt,Gen,Num,X):-
   quantificatore(F,Q,Pt,Gen,Num,F1),
   quantif_double(F1,Q1,'+',Gen,Num,X).

quant_double(F,quant,Q,Pt,Gen,Num,X):-
   quantificatore(F,Q,'-',Gen,Num,X).

   
quant_double(F,Type,Q,Pt,Gen,Num,F):-!.

focalizer(F,W,X):-
   F=[W|X],
   quant2(W).

focalizer(F,Foc,F):-!.


nome_quant(F,Nome,Gen,Num,X):-
    F=[Nome|X],
    (gr(romance),
    (Nome=parte ; Nome=paio; Nome=numero)
   ; 
    gr(english),
    (Nome=part ; Nome=pair; Nome=number)
    ),
    nome(F1,Nome,Gen,Num),!.


quant_one_bar(F,Def,Part,Dm,Gen,Num,Caso,X):-
    quant_art(F,Def,Gen,Num,Caso,F1),
    quant_other(T,M,Gen,Num,Caso,F1,F2),
    quant_ord(U,M,Gen,Num,F2,X),
    (var(T), Dm=..[D,M];nonvar(T), Dm=..[D,T]).

quant_art([A|F],Def,Gen,Num,Caso,F):-
     gr(deutsch),
    art(A,Art,Def,Gen,Num,Caso).

quant_art([A|F],Def,Gen,Num,_,F):-
    ( gr(english); gr(romance)),
    onelook(F,quant_art,[a,d,n,q,r],nil),
     art(A,Art,Def,Gen,Num).

quant_art(F,'0',Gen,Num,_,F):-
     gr(english),!.

quant_art([Art|F],Def,Gen,Num,Caso,F):-
   (gr(romance), Gr=italiano;
     gr(deutsch), Gr=deutsch),
     extract_head(d-Art, Artic, I),
     nonvar(Artic),
     onelook(F,quant_art,[a,d,n,q,r],v),
     lookart(Gr,Artic,Def,Gen,Num,Caso),!.

quant_art(F,Def,Gen,Num,_,F):- Def='0',!.

quant_other(mod,Q,Gen,Num,_,[E|F],F):- 
   expl_exc(E,Q,G,N),!.

quant_other(T,Q,Gen,Num,_,F,F):-!. 

quant_ord(ord,Q,Gen,Num,[O|F],F) :-
   ordinale(O,Q,Gen,Num),!.

quant_ord(T,Q,Gen,Num,F,F) :-!.

quant_bar(Poss,Part,Def,Q,card(Card),Gen,Num,F,X) :-
  (
   var(Q),
   (
    (Poss\=[]; nonvar(Part)), X=F
     ;
    quant_b(card(Card),Part,Q,Gen,Num,F,X)
    )
   ;
    nonvar(Q),
   (
    Q\=any,
    quant_b(card(Card),Part,Q,Gen,Num,F,X)
    ;
    gr(english), Q=any,
    quant_b(card(Card),Part,Q,Gen,Num,F,F1),
    F1=[F2|X],
    prep(F2,P), P=of
   )
   ;
   nonvar(Def), X=F
  ).

quant_b(card(Card1),Part,Int,Gen,Num,F,X) :-
    F=[F1|F2],
    cardinale(F1,Card,Gen,Num),  
  (
    (F2=[or|F3];
     F2=[oppure|F3];
     F2=[o|F3]),
/*   !,            */
   (
    F3=[F4|X],
    cardinale(F4,Q,Gen,Num),
    concat([Card,'-or-'],C1), 
     concat([C1, Q], Card1)
     ;
    intens(F3,int(Int)/X),
     (Int=more;Int=piu_), Part='>',
     concat([Card,'-or-'],C1), 
     concat([C1, Int], Card1)
    )
    ;
   Card=Card1, X=F2
    ).

quant_b(Card,Part,Q,Gen,Num,F,X):-
    quantificatore(F,Q,Part,Gen,Num,X),
    !.
    
quant_b(Card,Part,Q,Gen,Num,F,F):-!.


deitt(F,Cues, Head, Deitt,X) :-
   (Cues\=[],
    on(that,Cues), X=F
     ;
    Cues\=[],
    on(D,Cues), D\=that, X=F
     ;
    Cues=[],
    F=[F1|X],    
    pro(F1,pr(deittico,Part,Head,Pers,Gen,Num,Caso)),
    Deitt=pr(deittico,Part,Head,Pers,Gen,Num,Caso),
       retraction(deitt, d)
      ),!.

deitt(F,Cues, Head, Deitt,F) :-!.

verify_that(Q, F):-
         F=[X|F1],
         stackxp(P-Len-Loc-SN),
         SN=..[sn|_],
         termin(I-[Y-X]), 
         I is Loc + 1,
         !.

quant_poss_deit(_,Q,Def,_,[],Deitt,_,Gen1,Num1,Def,F,X) :-
    gr(english),
    deitt(F,[],such, Deitt,F1),
    quant_art(F1,'-',_,_,_,X).

quant_poss_deit(Cues,Q,'0',Part,Poss,Deitt,_,Gen1,Num1,'0',F,X):-
   var(Q),
   deitt(F,Cues,Head, Deitt,F1),
   quantificatore(F1,Q,Part,Gen,Num,X), 
   (var(Q),
    \+ verify_that(Q, F1)
    ;
    nonvar(Q)),
   F\=F1.

quant_poss_deit(_,Q,Def,Part,Poss,_,Card,Gen1,Num1,_,F,X) :-
   gr(italiano),var(Q),
   quant_poss_bar(Q,Part,Poss,Card,Gen1,Num1,F,X).
 
quant_poss_deit(_,Q,Def,Part,Poss,_,Card,Gen1,Num1,_,F,X) :-
   gr(italiano),
   quant_poss(Q,Part,Poss,Card,Gen1,Num1,F,X).

quant_poss_deit(Cues,Q,'0',Part,Poss,_,Card,Gen1,Num1,_,F,X) :-
   gr(germanic),
   var(Q),
%   (gr(english), Cues=[]; gr(deutsch)),
   quant_poss_bar(Q,Part,Poss,Card,Gen1,Num1,F,X).

quant_poss_deit(_,_,_,_,[],[],_,_,_,_,F,F):-!.


quant_poss_bar(Q,Part,Poss,_,Gen1,Num1,F,X) :-
    F=[F1|F2],
   possessivo(F1/F2,Poss,Gen1,Num1),
   (
   multiplelook(F2,quant_poss_bar,[d,r,a]),
   quant_poss(Q,Part,Poss,Card,Gen1,Num1,F2,X)
    ;
   multiplelook(F2,quant_poss_bar,[n,g,a]), X=F2
   ).

quant_poss_bar(Q,Part,Poss,_,Gen1,Num1,F,F) :-!.

quant_poss(Q,Part,Poss,Card,Gen1,Num1,F,X) :-
   (
    quantificatore(F,Q,Part,Gen,Num,F2)
    ;
    F=[F1|F2],
    cardinale(F1,Card,Gen,Num)),
    F2=[F3|X],    
    possessivo(F3/X,Poss,Gen1,Num1).


/* tabella dello specificatore dei pronomi */

spec_pron(_,pr_quantif,'-', spec(def('+'),part('-'),mod(M),foc(F),card(Card),Types)):-           
   checkTypes(Type,Q,Types),
        !.
spec_pron(_,pr_quantif,'+', spec(def('-'),part('+'),mod(M),foc(F),card(Card),Types)):-       
   checkTypes(Type,Q,Types),
        !.
spec_pron(_,personale,_, spec(def('+'),_,_,_,_,_)):- !.
spec_pron(spec(def('0')),deittico,_, spec(def('+'),_,_,_,_,_)):- !.
spec_pron(_,deittico,'-', spec(def('+'),part('-'),mod(M),foc(F),card(Card),Types)):-       
   checkTypes(Type,Q,Types),
        !.
spec_pron(_,deittico,'+', spec(def('-'),part('+'),mod(M),foc(F),card(Card),Types)):-       
   checkTypes(Type,Q,Types),
        !.
spec_pron(spec(Def,Part,_,Foc,_,_),_,_, spec(Def,Part,_,Foc,_,_)):- !.
spec_pron(spec(Def,_,_,Foc,_,_),_,_, spec(Def,_,Foc,_,_,_)):- !.
spec_pron(_,_,_, spec(def('+'),_,_,_,_,_)):- !.
spec_pron(_,_, spec(def('+'),_,_,_,_,_)):- !.

/* tabella dello specificatore frasi interrogative */
spec_int(X,spec(def('0'),part(Part),quant(Q)),Gen,Num) :-
    quantif_int(X,Q,Part,Gen,Num), nonvar(Q).

check_determiner([]) :-
   !.
check_determiner('0') :-
   !.
check_determiner(-) :-
   !.
check_determiner(+) :-
   !.
check_determiner(Det1) :-
   Det1=spec(Def, Part, 
              mod(Mod), foc(_), card(_), Q).


check_catssnm1(Cat):-
    \+ nogen_member(tempo, Cat),
    \+ nogen_member(hum_set, Cat),
    !.

check_catssnm1(Cat):-
    (member(nquant,Cat);
     member(quantita,Cat)),
     !.

check_catssnm2(Cat):-
    \+ nogen_member(tempo, Cat),
    member(luogo,Cat), 
     !.
check_catssnm3(Cat):-
    \+ nogen_member(tempo, Cat),!.

check_catssnm3(Cat):-
      \+ nogen_member(oggetto,Cat),
       (\+ genre(legal),
         (member(relazionale,Cat);
           member(sociale,Cat))
        ; 
         (member(neg_prop,Cat); 
         member(quantita,Cat);
         member(quant,Cat);
         member(data,Cat);
         member(proprt,Cat);
         member(astratto,Cat);
         member(istituzione,Cat);
         member(surname, Cat))
        ), 
        !.

check_catssnm4(Cat):-
    \+ nogen_member(tempo, Cat),!.

check_catssnm4(Cat):-
      (\+ genre(legal),
         (member(relazionale,Cat);
           member(sociale,Cat))
        ; 
         (member(neg_prop,Cat); 
         member(quantita,Cat);
         member(quant,Cat);
         member(data,Cat);
         member(istituzione,Cat);
         member(surname, Cat))
        ),
        !.

check_catssnm5(Cat,Cat1):-
    member(C, Cat),
    member(C, Cat1),!.

check_catssnm5(Cat,Cat1):-
    (
      (member(relazionale,Cat1);
          member(relat,Cat1);
          member(soc,Cat1); 
         member(sociale,Cat1)), 
      (member(umano,Cat);
          member(hum,Cat);
         member(animato,Cat))
      ;
      member(tempo, Cat1), member(tempo, Cat)
      ;
      member(istituzione, Cat1), 
      (
       member(istituzione, Cat)
         ;
       member(astratto, Cat)
       )), 
      !.

check_catssnm6(Cat, Cat1):-
    member(C, Cat),
    member(C, Cat1),!.

check_catssnm6(Cat,Cat1):-
      (member(relazionale,Cat1);
        member(sociale,Cat1)), 
      (member(umano,Cat);
       member(animato,Cat)), 
      !.

check_catssnm6(Cat,Cat1):-
      genre(legal),
      Cat1=[],!.


/***********************************************************/

interp_nuclears(SN1,FArg,SN2,LArgs,NuovaLArgs,Sogg,Ogg):-
   interp_sogg(SN1,FArg,Sogg),
   interp_sv_ogg(SN2,_,LArgs,NuovaLArgs,Ogg),
   !.

build_pcomp_args(R,SN,Farg,P,Mod,X):-
             Ogg = arg(funzione(ogg),ruolo(R), SN),
             append([Ogg],[Farg],Args),
             SP=sp(prep(P),args(Args),mods(Mod)), 
             X = arg(funzione(pcomp),ruolo(form),SN), 
             !.

erase_vp_args(SN, Funz, R, Fun_Rol_Cats, LArgs, NLArgs, X):-
             elimina(Fun_Rol_Cats,LArgs,NLArgs),
             X = arg(funzione(Funz),ruolo(R),SN), 
             !.

erase_vp_int_args(SN, Funz, R, LCat, LArgs, NLArgs, X):-
             ( elimina(sn/ogg/R/LCat,LArgs,NLArgs);
               elimina(idioms/ogg/R/LCat,LArgs,NLArgs);
              elimina(sn/ogg_avv/R/LCat,LArgs,NLArgs)),
             X = arg(funzione(Funz),ruolo(R),SN), 
             !.

erase_vp_prop_args(npred,Prop,Mp/Funz/Ruolo/_,LArgs,NuovaLArgs,Y):-
              elimina(Mp/Funz/Ruolo/_,LArgs,NuovaLArgs),
              Y = arg(funzione(Funz),ruolo(Ruolo),Prop),
              !.

erase_vp_prop_args(pred,Prop/_,Funz/Ruolo/Preps/_,LArgs,NLArgs,Y):-
              elimina(Funz/Ruolo/Preps/_,LArgs,NLArgs),
              Y = arg(funzione(Funz),ruolo(Ruolo),Prop),
              !.

erase_vp_prop_args(pred,Prop,Funz/Ruolo/Preps/_,LArgs,NLArgs,Y):-
              elimina(Funz/Ruolo/Preps/_,LArgs,NLArgs),
              Y = arg(funzione(Funz),ruolo(Ruolo),Prop),
              !.

check_int_arg(SN, Funz, LArgs, LCat):-
          interp_oggetto_pro_piccolo(SN/Funz),
         ( member(sn/ogg/Ruolo/LCat,LArgs);
           member(idioms/ogg/form/LCat,LArgs);
          member(sn/ogg_avv/Ruolo/LCat,LArgs) ),
         !.

match_obj_cats(sn(I, Cat, pr(vbl, vbl, B, 3, D, E, C), Contr),LCat):-!.

match_obj_cats(SN, LCat):-
             trova_cat_SN(SN,CatSN),
             (LCat\=[_],
              interp_cat(CatSN,LCat); 
              LCat=[_]),
             !.

match_pobj_cats(SN, LCat):-
             trova_cat_SP(SN,CatSN),
             (LCat\=[_],
              interp_cat(CatSN,LCat); 
              LCat=[_]),
             !.

match_obj_cats_spec(Cat, Spec, R, LCat, Args):-
             (Args=[]
              ;
              Args\=[], on(Arg,Args),
              Arg=..[A,B,C,SN],
              C=..[_,Role],
              Role\=poss),
             (R=tema_eff; member(body_part,Cat)),
             spec(Spec) \= spec(def('-'),part('+'),M,F,C,Q),
             (LCat\=[_],
              interp_cat(CatSN,LCat); 
              LCat=[_]),
             !.

interp_oggetto_pro_piccolo(SN/Funz):-
        SN\=[],
        SN \= sn(indice(Simb),cat(Cat),
           pr(pro_picc,pro,_,P,G,N,Ca),
           spec(def('+')),controllore(SimbContr)),
        (var(Funz), Funz=ogg; nonvar(Funz)).

build_np_args(n, CatSP, P, Nome, CatN, LArgs, SN, X):-
             (P=di;P=of;P=von),
             pred_n(Nome,Stem,CatN,LArgs),
             grep_funct_role(Stem, CatN, CatSP, SN, X),
             !.

build_np_args(Tipo, CatSP, P, Nome, CatN, LArgs, SN, X):-
             nonvar(Tipo),
             (P=di;P=of;P=von),
             (
              Tipo=pr_quantif,
              nonvar(LArgs),
              member(sn/Funz/R/ListaCat,LArgs),
              CatN = CatSP,
              elimina(sn/Funz/R/ListaCat,LArgs,NuovaLArgs)
             ;
              Tipo\=pr_quantif,
              nonvar(LArgs),
              member(sn/Funz/R/ListaCat,LArgs),
              member(CC,CatSP),
              member(CC,ListaCat),
              elimina(sn/Funz/R/ListaCat,LArgs,NuovaLArgs)
              ;
              Tipo\=n,
              Tipo\=pr_quantif,
              (
               member(materia,CatSP), 
               Funz=adj, R=matter
               ;              
               Funz=adj, R=specif)
              ),
              X = arg(funzione(Funz),ruolo(R),SN),
              !.
              
build_np_args(Tipo, CatSP, P, Nome, CatN, LArgs, SN, X):-
             (
              (P=di;P=of;P=von), S=di
              ;
              (P=da;P=by;P=von), S=da
             ),
             CatN\=[],
             grep_funct_role(S, CatN, CatSP, SN, X),
             !.

grep_funct_role(passivo, CatN, CatSP, SN, X):-
             X = arg(funzione(ogg),ruolo(tema),SN),
             !.
grep_funct_role(psych, CatN, CatSP, SN, X):-
             ( 
              nogen_member(ferocious,CatSP), 
              Funz=ogg,R=causer_emot
             ;
              Funz=sogg, R=esper),  
             X = arg(funzione(Funz),ruolo(R),SN),
             !.
grep_funct_role(Stem, CatN, CatSP, SN, X):-
             cat_gramm(Stem, trans, CatV, ListaA),
             X = arg(funzione(ogg),ruolo(tema),SN),             
             !.
grep_funct_role(di, CatN, CatSP, SN, X):-
             ( \+ nogen_member(informa,CatN), 
                \+ nogen_member(animato,CatN)), 
              (nogen_member(relazionale,CatSP)
             ;
              nogen_member(relazionale,CatN), nogen_member(umano,CatSP) 
            ),
            assegna_funz_ruolo(arg, SN, sogg, poss, X),
            !.
grep_funct_role(di, CatN, CatSP, SN, X):-
            ( \+ nogen_member(umano,CatN), 
              \+ nogen_member(animato,CatN)), 
            ( nogen_member(animato,CatSP) ;
             nogen_member(umano,CatSP);
             nogen_member(hum_set, CatSP) ),
            ( 
              ( nogen_member(tempo,CatN),
               Funz = ogg,      Ruolo = subj_dis) ;
              ( nogen_member(istituzione,CatN),nogen_member(umano,CatSP),
               Funz = ogg,      Ruolo = poss) ;
              ( nogen_member(stato,CatN),
                (nogen_member(umano,CatSP);nogen_member(animato,CatSP)),
               Funz = sogg,     Ruolo = esperiente) ;
              ( nogen_member(valutativo,CatN),
               nogen_member(ferocious,CatSP),
               Funz = sogg,     Ruolo = malef) ;
              ( nogen_member(legale,CatN),
               nogen_member(informa,CatSP),
               Funz = sogg,     Ruolo = defint) ;
              ( nogen_member(umano,CatSP),
               Funz = sogg,     Ruolo = creator) ;
              ( nogen_member(attivita,CatN), Funz = sogg, Ruolo = agente) ;
               Funz = sogg,  Ruolo = poss),
             assegna_funz_ruolo(arg, SN, Funz, Ruolo, X), 
             !.
grep_funct_role(da, CatN, CatSP, SN, X):-
             ( \+ nogen_member(umano,CatN),  
               \+ nogen_member(animato,CatN)),
             ((nogen_member(umano,CatSP), Ruolo=source);
              nogen_member(luogo,CatSP), Ruolo=proven),  
             assegna_funz_ruolo(arg, SN, obl, Ruolo, X),
             !.

assegna_funz_ruolo(arg, SN, Funz, Ruolo, X)
     :-
     (SN=sn(indice(I),cat(C),coordina([arg(funzione(Funz),ruolo(Ruolo),SN1),  
                                  arg(funzione(Funz),ruolo(Ruolo),SN2)|SN3])),
      SN1=sn(Indice,cat(Cac),Name1,Sp,args(Ar),Mods,Adjs),
      SN2=sn(Indic,cat(Ca),Name,Spe,args(Arg),Md,Ad),
             Name1=..[N,Nom,Ge,Nu],
             Name=..[N0,Nome,Gen,Num],
      (concat('_',Nome,Test),concat(Nom,Test,Tes)),
      X =arg(funzione(Funz),ruolo(Ruolo),sn(indice(I),cat(C),n(Tes,mas,plur),Sp,
            coordina([arg(funzione(Funz),ruolo(Ruolo),SN1),
                      arg(funzione(Funz),ruolo(Ruolo),SN2)|SN3])))
      ;
      X = arg(funzione(Funz),ruolo(Ruolo),SN),
      (Funz=obl;Funz=ogg2)
      ),!.

assegna_funz_ruolo(adj, Mod, CatSP, SN, Prep, Tipo_agg, X)
     :-
    SN\=sn(indice(I),cat(C),coordina([arg(funzione(Funz),ruolo(Ruolo),SN1),  
                                  arg(funzione(Funz),ruolo(Ruolo),SN2)|SN3])),
    X = adj(Tipo_agg,sp(prep(Prep,cat(CatSP),Mod),SN)),!.

assegna_funz_ruolo(adj, Mod, CatSP, SN, Prep, Ruolo, X)
     :-
    SN=sn(indice(I),cat(C),coordina([arg(funzione(Funz),ruolo(Ruolo),SN1),  
                                  arg(funzione(Funz),ruolo(Ruolo),SN2)|SN3])),
     SN1=sn(Indice,cat(Cc),Name1,Sp,args(Ar),mods(Mods),adjs(Adjs)),
     SN2=sn(Indi,cat(Ca),Name,Spe,args(Arg),mods(Mod1),adjs(Adj)),
             Name1=..[N,Nom,Ge,Nu],
             Name=..[N0,Nome,Gen,Num],
     (concat('_',Nome,Test),concat(Nom,Test,Tes)),
     X = adj(Ruolo,sp(prep(Prep,CatSP,Mod),sn(indice(I),cat(CatSP),
             coordina([arg(funzione(Funz),ruolo(Ruolo),SN1),
             arg(funzione(Funz),ruolo(Ruolo),SN2)|SP])))),
     nonvar(Funz),
     !.

assegna_funz_ruolo(adj, I, CatSP, Prep, Mod, SN, SN1, Funz, Ruolo, X)
     :-
     SN=sn(Indice,cat(C),Name1,Sp,args(Ar),mods(Mods),adjs(Adjs)),
     SN1=sn(Indi,cat(Ca),Name,Spe,args(Arg),mods(Mod1),adjs(Adj)),
             Name1=..[N,Nom,Ge,Nu],
             Name=..[N0,Nome,Gen,Num],
     (concat('_',Nome,Test),concat(Nom,Test,Tes)),
     X = adj(Ruolo,sp(prep(Prep,CatSP,Mod),sn(indice(I),cat(CatSP),
             coordina([arg(funzione(Funz),ruolo(Ruolo),SN),
             arg(funzione(Funz),ruolo(Ruolo),SN1)|SP])))),
      Funz=obl,!.

assegna_funz_ruolo(arg, I, CatSP, SN, SN1, SN2, Funz, Ruolo, X)
     :-
     SN=sn(Indice,cat(C),Name1,Sp,args(Ar),mods(Mods),adjs(Adjs)),
     SN1=sn(Indi,cat(Ca),Name,Spe,args(Arg),mods(Mod1),adjs(Adj)),
             Name1=..[N,Nom,Ge,Nu],
             Name=..[N0,Nome,Gen,Num],
     (concat('_',Nome,Test),concat(Nom,Test,Tes)),
     X =arg(funzione(Funz),ruolo(Ruolo),sn(indice(I),cat(C),n(Tes,mas,plur),Sp,
            coordina([arg(funzione(Funz),ruolo(Ruolo),SN1),
                      arg(funzione(Funz),ruolo(Ruolo),SN2)|SN3]))),
      (Funz=obl;Funz=ogg2),!.

concat_heads_sn(SN1, SN2, Tes, Sp):-
            SN1=sn(Indice,cat(Cac),Name1,Sp,args(Ar),Mods,Adjs),
            SN2=sn(Indic,cat(Ca),Name,Spe,args(Arg),Md,Ad),
             Name1=..[N,Nom,Ge,Nu],
             Name=..[N0,Nome,Gen,Num],
             (concat('_',Nome,Test),concat(Nom,Test,Tes)),
            !.
concat_heads_sn(SN1, SN2, Nome, Sp):-
             Name=..[N0,Nome,Gen,Num],
            SN2=sn(Indic,cat(Ca),Name,Sp,args(Arg),Md,Ad),
            !.

concat_heads_sp(SP1, SP2, Tes, Sp):-
            SP1 = sp(prep(Prep,cat(Cat),Mod),SN),
            SP2= sp(prep(Prp,CSP,Md),SN1),
            concat_heads_sn(SN, SN1, Tes, Sp).

grep_adjs_sp_role(Prep, SP, CatSP, CatN, Funz, Tipo_agg):-
             (nonvar(Prep), Prp=Prep, Funz=ogg
             ;
              var(Prep),
              SP = sp(prep(Prp,CSP,Md),SN1), Funz=adj
             ;
              nonvar(Prep), nonvar(Funz)
              ),
               tipo_agg(Tipo_agg,Prep,ListaCatSP),
              (var(CatSP);
                nonvar(CatSP),
                interp_cat(CatSP,ListaCatSP)), 
               poss_agg_sn(Tipo_agg,ListaCatN),
               (
                 CatN=nil,
                 nogen_member(CC,ListaCatN)
                  ;
                  controlla_cat1(CatN,ListaCatN)
                  ;
                  nogen_member(-abst,CatN), 
                  Ccat=geogr,
                  nogen_member(Ccat,CatSP)
                ),
              !.

grep_adjs_sp_role(Prep, SP, CatSP, CatN, Funz, Tipo_agg):-
             (nonvar(Prep), Prp=Prep, Funz=ogg
             ;
              var(Prep),
              SP = sp(prep(Prp,CSP,Md),SN1), Funz=adj
             ;
              nonvar(Prep), nonvar(Funz)
              ),
               tipo_agg(Tipo_agg,Prep,ListaCatSP),
              (var(CatSP);
                nonvar(CatSP),
                interp_cat(CatSP,ListaCatSP)), 
               poss_agg_sn(Tipo_agg,ListaCatN),
               (
                 CatN=nil,
                 nogen_member(CC,ListaCatSP)
                 ;
                  controlla_cat1(CatN,ListaCatSP)
                 ;
                  nogen_member(-abst,CatN), 
                  Ccat=geogr,
                  nogen_member(Ccat,CatSP)
               ),
              !.

grep_args_sp_role(Prep, LArgs, CatSP, NuovaLArgs, Funz, Ruolo):-
             LArgs\=[],
             Prep \= di, Prep \= of, Prep \= von,
             nogen_member(sp/Funz/Ruolo/Prep/ListaCat,LArgs),
             nogen_member(CC,CatSP),
             nogen_member(CC,ListaCat),
             elimina(sp/Funz/Ruolo/Prep/Lista,LArgs,NuovaLArgs),
             !.

check_cats_saa(ListaCatSA, CatN):-!.
check_cats_saa(ListaCatSA, CatN):-
  (ListaCatSA=[OneCat]
   ;
    on(OneCat, ListaCatSA)
  ),
  findall(Tipoagg, (tipo_aagg(Tipoagg, AllCats), on(OneCat,AllCats)), Types),
  on(Tipo_agg, Types),
  poss_agg_san(Tipo_agg, ListaCatN),
  nogen_member(CCCC, CatN),
  nogen_member(CCCC, ListaCatN),
  !.

discharge_ambs_pps(LSP,CatV,V,FirstArg,SubCatIn,NLArgs,Args_vp,Adjs_vp,LArgsV):- 
       (on(PLArgs, SubCatIn),
         (list(PLArgs),
          PLArgs=[FirstArg|LArgs]
         ;
          SubCatIn=[FirstArg|LArgs]
         ;
          SubCatIn=[FirstArg|LArgs], 
          \+ list(LArgs)),
       FirstArg=Cos/Fun/Ro/_,
       (LSP\=[],
       interp_sv_xx(CatV,V,LSP,LArgs,NLArgs,Args_vp,Adjs_vp,LArgs1),
                 LArgsV=[FirstArg|LArgs]
       ;
       interp_sv_xa(CatV,V,LSP,LArgs,_,Args_vp,Adjs_vp),Args_vp\=[],   
                 LArgsV=[FirstArg|LArgs])
        ;
       interp_sv_x(CatV,LSP,NLArgs,_,Args_vp,Adjs_vp),
                 LArgsV=[FirstArg]
       ),!.

dis_obl_pps([],CatV,V,FArg,LArgs,NLArgs,[],[],[]):-!.
dis_obl_pps(LSP,CatV,V,FArg,LArgs,NLArgs,Args_vp,Adjs_vp,LArgsV):- 
       LSP\=[],
       (interp_sv_xx(CatV,V,LSP,LArgs,_,Args_vp,Adjs_vp,LArgs1),
                 LArgsV=LArgs
       ;
       interp_sv_xa(CatV,V,LSP,LArgs,_,Args_vp,Adjs_vp),Args_vp\=[],   
                 LArgsV=[FArg|LArgs]),!.

dis_obl_pps(LSPs,CatV,V,FArg,LArgs,NLArgs,Args_vp,Adjs_vp,LArgsV):- 
       LSPs\=[],
       (LSPs=[LSP];LSP=LSPs),
       (interp_sv_xx(CatV,V,LSP,LArgs,_,Args_vp,Adjs_vp,LArgs1),
                 LArgsV=LArgs
       ;
       interp_sv_xa(CatV,V,LSP,NLArgs,_,Args_vp,Adjs_vp),Args_vp\=[],   
                 LArgsV=[FArg|LArgs]),!.

discharge_pps(LSPs,CatV,V,FArg,LArgs,NLArgs,Args_vp,Adjs_vp,LArgsV):- 
       (LSPs\=[],
       (LSPs=[LSP];LSP=LSPs),
       (interp_sv_xx(CatV,V,LSP,LArgs,NLArgs,Args_vp,Adjs_vp,LArgs1),
                 LArgsV=[FArg|LArgs]
       ;
       interp_sv_xa(CatV,V,LSP,LArgs,_,Args_vp,Adjs_vp),Args_vp\=[],   
                 LArgsV=[FArg|LArgs])
        ;
       interp_sv_x(CatV,LSPs,NLArgs,_,Args_vp,Adjs_vp),
                 LArgsV=[FArg|LArgs]
       ),!.

assemble_args_adjs(PArg,LArgs,Firstargs,Args_vp,Adjs_vp,LArgsV,Args,NewAdjs_vp):-
       (LArgsV = [PArg|LArgs]
        ;
        LArgsV = LArgs),
       Args the_list Firstargs && Args_vp,
       open_adjs(Args,Adjs_vp,NewAdjs_vp),
       !.

trova_Sncontrollore(Args_vp,FContr,RContr,SNContr):-
(
member(arg(funzione(FContr),ruolo(RContr),SNContr),Args_vp)
;
member(arg(funzione(FContr),ruolo(RContr),_,SNContr),Args_vp)
),!.

create_Pros(Args, N, Control, PRO):-
       (N=1, Args= sn/sogg/Ruolo/Cat, Funz=sogg, Case=nom, S=[] ;
        N=2, Args= [sn/Ogge/Ruolo/Cat|_], (Ogge=ogg;Ogge=ogg_avv),
                   Funz=ogg, Case=acc, S=[];
        N=3, Args= Funz/Ruolo/Cat, 
                  (Funz=sogg, Case=gen, S=def('+')
                   ;
                   Funz=ogg, Case=part, S=def('+'))
        ),
        PRO = arg(funzione(Funz),ruolo(Ruolo),
              sn(indice(Simb),cat(Cat),
              pr(pro_grande,pPro,_,_,_,[Case]),spec(S),
                             controllore(Control))), 
       gen_sym(sn,Simb),!.

create_Pros(Ruolo, 4, Cont, PRO):-
        nonvar(Ruolo),
             PRO = arg(funzione(sogg),ruolo(Ruolo),
                        sn(indice(Simb),
                        pr(vbl,vbl,_,_,_,_),controllore(Cont))),
             gen_sym(sn,Simb), !.

create_Pros(Funz/R/Cat, 5, _, Obl):-
        nonvar(R),
            Obl = arg(funzione(Funz),ruolo(R),
                   sn(indice(Simb),cat(Cat),
                 pr(pr_quantif,exist,_,Pers,Gen,Num,Caso),
             spec(def('-'),part('+'),mod(M),foc(F),card(C),quant(Q)))),
              gen_sym(sn,Simb), !.

create_Pros(Args, N, Cont, PRO):-
         Args=A/_, nonvar(A),
       (N=1, Args= sn/sogg/Ruolo/Cat, Funz=sogg, Case=nom, S=[] ;
        N=2, Args= [sn/Ogge/Ruolo/Cat|_], (Ogge=ogg;Ogge=ogg_avv),
                   Funz=ogg, Case=acc, S=[];
        N=3, Args= Funz/Ruolo/Cat, 
                  (Funz=sogg, Case=gen, S=def('+')
                   ;
                   Funz=ogg, Case=part, S=def('+'))
        ),
        PRO = arg(funzione(Funz),ruolo(Ruolo),
              sn(indice(Simb),cat(Cat),
              pr(pro_grande,pPro,_,_,_,[Case]),spec(S),
                             controllore(Control))), 
                  (var(Cont), Control=indefinito; Control=Cont),
       gen_sym(sn,Simb),!.

create_Pros(Args, N, Cont, PRO):-
        PRO = arg(funzione(sogg),ruolo(creator),
              sn(indice(Simb),cat(Cat),
              pr(pro_grande,pPro,_,_,_,[Case]),spec(S),
                             controllore(Control))), 
                  (var(Cont), Control=indefinito; Control=Cont),
       gen_sym(sn,Simb),!.


nonpredic_contr(Fcomp,Modo,Largs,LContr):-
     Z = arg(funzione(sogg),ruolo(X),sn(_,_,pr(pro_picc,pro,_,_,_,_),   
        controllore(Imp))),
    (( trova(Z,Fcomp),
       assegna_controllo_fcomp(Imp,Modo,Largs,LContr)
         )
     ;  true),    /* not(trova(Z,Fcomp)) */
     !.

extract_controller(Args,FContr/RContr,Controllo):-
     ((trova_Sncontrollore(Args,FContr,RContr,SNContr),
               estrai_st(indice,SNContr,indice(SNContrx)),
               Controllo=SNContrx,!);
        Controllo=indefinito),
       !.

sel_p('-', '+'):-!.
sel_p('-', '0'):-!.

sel_p(Part, Def):-
       Part\='-'.

ass_def(Q, Poss, Def, Def1):-
    var(Q), 
    Poss\=[], 
    nonvar(Def), 
    Def1='+'.

buildquant(TermT,Term):-
   (var(TermT), 
   Term=..[quant,[]]
   ;
   nonvar(TermT),
   Term=TermT),
   !.

build_quant_spec(Poss, Def, Q, Part, M, F, Card, Type, Def1, Spec):-
   (
   ass_def(Q, Poss, Def, Def1)
   ;
   Poss\=[], nonvar(Def1)
   ),
   Spec=spec(def(Def1), part(Part), mod(M),foc(F),card(Card),Term),
   checktermT(Type, Q, TermT),
   buildquant(TermT,Term),
   !.

build_quant_spec(Poss, '0', Q, Part, M, F, Card, Type, Def1, Spec):-
   nonvar(Q),
   (Part='-', Def1='0'; (Part=exist; Part='+'), Def1='-'),
   Spec=spec(def(Def1),part(Part),mod(M),foc(F),card(Card),Term),
   checktermT(Type, Q, TermT),
   buildquant(TermT,Term),
   !.

build_quant_spec(Poss, Def, Q, Part, M, F, Card, Type, Def1, Spec):-
   (var(Type);nonvar(Type),Type\=card),
   Spec=spec(def(Def), part(Part), mod(M),foc(F),card(Card),Term),
   checktermT(Type, Q, TermT),
   buildquant(TermT,Term),
   !.

build_quant_spec(Poss, Def, Q, Part, M, F, Card, card, Def1, Spec):-
   Card=Q,
   Spec=spec(def(Def),part(Part),mod(M),foc(F),card(Card),Term),
   checktermT(card, Card, TermT),
   buildquant(TermT,Term),
   !.

/* conversione da albero a grafo */
/* 6 sett 90 */
/* file: alb_graf.pl */

/* file richiesti : toquintus.pl
                    varie19.pl
                    arc2_net.pl      stampa      */


/* 
il grafo e composto da:
    archi:     arco(Da_nodo,A_nodo,Attributo,Rete)
    foglie:    foglia(Nodo,Valore,Rete)
    rete:      rete(rete)    
*/


/* conversione di un albero letto da un file */

fileconv(NomeFile,Rete) :- 
     estendi_nome_file(NomeFile,'.alb',ExFileName),
     see(ExFileName),
     read(Frase),
     read(Alb),
     seen,
     write_wrap(Frase,65),nl,
     converti(Alb,Rete).
     

/* conversione di un albero in grafo  */

converti(Alb, Rete) :-
          clear_net(_),
          gen_sym(n,0),
          w_rete(Rete),
          gen_sym(n,Radice),
          conv_alb(Alb,Radice,Rete),
          aggiusta_relative(Rete),
          nodo_coord(Rete),
          genera_tab_ref(Rete),
          crearef_ints.


crearef_ints:-
          aspetto(Rete),
          calcola_tempi(Rete).

crearef_ints.

/*
            conv_alb(Albero,Nodo,Rete)
  
    converte Albero in grafo attaccandolo al nodo Nodo 
    rete e' l'indice di rete */


/* una variabile e' convertita come foglia */
conv_alb(Val,Nodo,Rete) :- var(Val),
                           w_foglia(Nodo,Val,Rete), !.


/* regole di conversione particolari */

/*   Alb => nil :: nil   indica che Alb non va inserito nel grafo */
conv_alb(Alb,_Nodo,_Rete) :- Alb => nil :: nil , !.


/* Alb => nil :: ListaValori    dove Attributo=nil
   indica che ListaValori va direttamente attaccata a Nodo */
conv_alb(Alb,Nodo,Rete) :- Alb =>nil::ListaValori,
      apply_conv_alb(ListaValori,Nodo,Rete), !.


/* Alb => Attributo :: ListaValori 
   Attributo diverso da nil indica che ListaValori va attaccata 
   ad un nodo connessso a Da_nodo con attributo Attributo */
conv_alb(Alb,Da_nodo,Rete) :- Alb => Attributo :: ListaValori,
      w_arco(Da_nodo,A_nodo,Attributo,Rete),
      apply_conv_alb(ListaValori,A_nodo,Rete), !.


/* non si ha un albero in ingresso ma la struttura:
        Attributo::ListaValori                           */
conv_alb(Attributo::ListaValori,Da_nodo,Rete) :-  
      is_list(ListaValori), 
      w_arco(Da_nodo,A_nodo,Attributo,Rete),
      apply_conv_alb(ListaValori,A_nodo,Rete), !.


/* un atomo, una struttura X/Y o una lista  sono  convertiti come foglia */
conv_alb(Val,Nodo,Rete) :- (atomic(Val);Val=_X/_Y;Val=[];Val=[_|_]),
                           w_foglia(Nodo,Val,Rete), !.


/* regola di conversione generale */
conv_alb(Alb,Da_nodo,Rete) :- 
     Alb =.. [Func|Argomenti],
     w_arco(Da_nodo,A_nodo,Func,Rete),
     apply_conv_alb(Argomenti,A_nodo,Rete), !.

/*
         apply_conv_alb(ListaAlberi,Nodo,Rete)
    
       genera i grafi per ciascun albero di ListaAlb
       e li connette al nodo Nodo)
 */

apply_conv_alb([],_,_) :- !.
apply_conv_alb([T|C],Da_nodo,Rete) :-
        conv_alb(T,Da_nodo,Rete),
        apply_conv_alb(C,Da_nodo,Rete).


ramo(Nodo, Attributo, Valore, Rete) :-
   arco(Nodo, NodoMid, Attributo, Rete),
   foglia(NodoMid, Valore, Rete).

/* asserisce in memoria i vari predicati */

w_rete(Rete) :-
   assertz(rete(Rete)).

w_arco(Da_nodo, A_nodo, Attributo, Rete) :-
   gen_sym(n, A_nodo),
   !,
   assertz(arco(Da_nodo,A_nodo,Attributo,Rete)).

w_foglia(Nodo,Valore,Rete) :-
   assertz(foglia(Nodo,Valore,Rete)).

w_ramo(DaNodo, Attributo, Valore, Rete) :-
   gen_sym(n, ANodo),
   assertz(arco(DaNodo,ANodo,Attributo,Rete)),
   assertz(foglia(ANodo,Valore,Rete)).

/* regole specifiche di conversione */

/*   
        Albero => Attributo :: ListaValori .

   Albero : e' la struttura che va trattata in modo particolare
   Attributo : e' l'attributo che deve essere dato all' arco
               che leghera' il nodo corrente con i valori in lista valori.
               se l'attributo e' 'nil' non viene creato
               un arco ma i valori saranno direttamente
               attaccati al nodo corrente.
   ListaValori : e' la lista di strutture che verranno attaccate 
                 tramite Attributo al nodo corrente.
                 Ogni elemento di questa lista sara' normalmente
                 una struttura.
                 Alternativamente un elemento della lista
                 puo essere della forma 
                       Attr::ListaVal 
                 cioe' l'attributo viene specificato direttamente
                 (esempio funzione/ruolo non puo' essere specificato
                  come funtore di una struttura),ListaVal conterra
                  le strutture da attaccare a Attr.
                 ListaValori puo' assumere il valore  'nil'
                 solo se Attributo=nil.
                 In tal caso l'intera struttura Albero viene
                 eliminata dal grafo.
*/



cp_comp(indice(Ind),main(X),participial(Y)) => 
       nil::[indice(Ind),main/prop::[X],adj/particip::[Y]].

cp_comp(indice(Ind),main(coord_ip(indice(Ind1),coord(X),coord(Y))),Z) => 
       main/prop::[indice(Ind1),coord(X),coord(Y),Z].

cp(sub(Sub),rel(Rel),coord_ip(indice(Ind),coord(X),coord(Y))) => adj::[sem_mark(Sub),sub/prop::[indice(Ind),coord(X),coord(Y)]].

coord_ip(indice(Ind),coord(X),coord(Y)) =>
       main/prop::[indice(Ind),coord(X),coord(Y)].

cp_comp(indice(Ind),main(X),Y) => 
       nil::[indice(Ind),main/prop::[X],Y].

cp_dir(indice(Ind),X,Y) => 
       nil::[indice(Ind),dir_speech/prop::[X],Y].


cp(sub(Sub),perf(Rel),Ass) => nil::[dir_speech/prop::[perf(Rel),Ass]].

cp(sub(Sub),rel(Rel),Ass) => adj::[sem_mark(Sub),sub/prop::[Ass]].

cp(Ass) => adj::[sub/prop::[Ass]].

ip(indice(Ind),Verbo,supporto(Supp),cat(C),args(Args),adjs(Adjs)) =>
       nil::[indice(Ind),Verbo,supporto(Supp),cat(C),args(Args),adjs(Adjs)].

ip(perf(Rel),indice(Ind),Verbo,supporto(Supp),cat(C),args(Args),adjs(Adjs)) =>
       nil::[perf(Rel),indice(Ind),Verbo,supporto(Supp),cat(C),args(Args),adjs(Adjs)].

participial(Asserzione) => adj/partic::[Asserzione].

gerundive(gerundive_coordinate(indice(IndGerCoord), G1, G2)) => 
   gerundive_coordinate::
      [indice(IndGerCoord),adj/gerund::[G1],adj/gerund::[G2]].

gerundive(Asserzione) => adj/gerund::[Asserzione].

ip_ell(indice(Ind), args(Args), adjs(Adjs)) => 
       nil::[indice(Ind), ip_ell/prop::[Args], adjs(Adjs)].

asserz_coord(indice(Ind),coord(X),coord(Y)) =>
       main/prop::[indice(Ind),coord(X),coord(Y)].

asserz_coord(indice(Ind),coord(X),coord(Y)) =>
       main/prop::[indice(Ind),coordina([X,Y])].


infinitive_coordinate(indice(Ind),X,Y) =>
nil::[indice(Ind),coord(X),coord(Y)].

infinitive_coordinate(indice(Ind),X,Y) =>
       nil::[indice(Ind),coordina([X,Y])].

gerundive_coordinate(indice(IndGerCoord), G1, G2) => 
   nil::[indice(IndGerCoord),coord(G1),coord(G2)].

gerundive_coordinate(indice(IndGerCoord), G1, G2) => 
   nil::[indice(IndGerCoord),coordina([G1,G2])].

asserz_con_avv(indice(Ind),main(X),Y) => 
       nil::[indice(Ind),adv_main/prop::[X],Y].

asserz_con_sub(indice(Ind),main(X),participial(Y)) => 
       nil::[indice(Ind),main/prop::[X],adj/particip::[Y]].

asserz_con_sub(indice(Ind),main(asserz_coord(indice(Ind1),coord(X),coord(Y))),Z) => 
       main/prop::[indice(Ind1),coord(X),coord(Y),Z].


asserz_con_sub(indice(Ind),main(X),Y) => 
       nil::[indice(Ind),main/prop::[X],Y].

asserz_dir(indice(Ind),main(X),Y) => 
       nil::[indice(Ind),dir_speech/prop::[X],Y].

asserz_avv(indice(Ind),main(X),Y) => 
       nil::[indice(Ind),adv_main/prop::[X],Y].
asserz_pres(indice(Ind),main(X),Y) => 
       nil::[indice(Ind),presentv/prop::[X],Y].
assert_adv(adv(Ind),presentative(P, X)) => 
       nil::[presentv/prop::[perf(P),X]].
assert_adv(adv(Ind),presentative(P, X)) => 
       nil::[presentv/prop::[X]].

ip_ell(indice(Ind), args(Args), adjs(Adjs)) => 
       nil::[indice(Ind), ip_ell::[Args], adjs(Adjs)].

subordinata(sub(Sub),perf(Rel),Ass) => nil::[dir_speech/prop::[perf(Rel),Ass]].

subordinata(sub(Sub),rel(Rel),asserz_coord(indice(Ind),coord(X),coord(Y))) => adj::[sem_mark(Sub),sub/prop::[indice(Ind),coord(X),coord(Y)]].

subordinata(sub(Sub),rel(Rel),Ass) => adj::[sem_mark(Sub),sub/prop::[Ass]].

subordinata(Ass) => adj::[sub/prop::[Ass]].

subord_impl(sub(Sub),Ass) => adj::[sem_mark(Sub),sub/prop::[Ass]].

subord_ell(sub(Sub),rel(Rel),Ass) => adj::[sem_mark(Sub),sub/prop::[Ass]].

relativa(topic(relativo,Sn),Asserzione) => 
      relativa::[topic::[tipo_topic(relativo),Sn],Asserzione].
avversativa(relativa(topic(relativo,Sn),Asserzione)) => 
      rel_avv::[topic::[tipo_topic(relativo),Sn],Asserzione].

inter_dir(focus(interrogativo,Sn),Asserzione) =>
      nil::[focus::[tipo_focus(interrogativo),Sn],perf(ask),Asserzione].

inter_ret(focus(interrogativo,Sn),Asserzione) =>
      nil::[Int_ret::[tipo_focus(Quest),Sn],Asserzione].


infinitiva(indice(Ind),Verbo,supporto(Supp),cat(C),args(Args),
       adjs(Adjs)) =>
       nil::[indice(Ind),Verbo,supporto(Supp),cat(C),args(Args),adjs(Adjs)].


gerundiva(Asserzione) => adj/gerund::[Asserzione].

asserzione(indice(Ind),Verbo,supporto(Supp),cat(C),args(Args),adjs(Adjs)) =>
       nil::[indice(Ind),Verbo,supporto(Supp),cat(C),args(Args),adjs(Adjs)].

asserzione(perf(Rel),indice(Ind),Verbo,supporto(Supp),cat(C),args(Args),adjs(Adjs)) =>
       nil::[perf(Rel),indice(Ind),Verbo,supporto(Supp),cat(C),args(Args),adjs(Adjs)].

subj_dom(indice(Ind),Verbo,supporto(Supp),cat(C),args(Args),adjs(Adjs)) =>
       report/prop::[indice(Ind),Verbo,supporto(Supp),cat(C),args(Args),adjs(Adjs)].

yes_no_quest(indice(Ind),Verbo,supporto(Supp),cat(C),args(Args),adjs(Adjs)) =>
       nil::[indice(Ind),perf(yes/no_question),Verbo,supporto(Supp),cat(C),args(Args),adjs(Adjs)].

asserz_pass(indice(Ind),Verbo,cat(C),L,Aux,args(Args),adjs(Adjs)) =>
       nil::[indice(Ind),Verbo,lex_form(L),Aux,cat(C),args(Args),adjs(Adjs)].

args(LArgs) => nil :: LArgs.

adjs([]) => nil::nil.
adjs(ListaAdjs) => adjs::ListaAdjs.
 
adj(sub(Sub),relazione(Rel),subordinato(Sn_sub)) =>
       adj::[sem_mark(Sub),sub/Rel::[Sn_sub]].

cord([]) => nil::nil.
cord(ListaCoord) => coordin::ListaCoord .

mods([mod(mod([]))]) => nil :: nil.

nome_mod([]) => nil::nil.

mods([]) => nil::nil.
mod(mod([])) => nil::nil.
mod(mod(mod([]))) => nil::nil.
mods([mod([])]) => nil::nil.
mods([mod(mod([]))]) => nil::nil.
mods([nome_mod([])]) => nil::nil.
mods(ListaMods) => mods::ListaMods .

apposizione(funzione(F),ruolo(R),Sn) =>
          F/R :: [Sn].
nome_mo(funzione(F),ruolo(R),Sn) =>
          F/R :: [Sn].

sn_subordinato(funzione(F),ruolo(R),Sn) =>
          F/R :: [Sn].

vocativo(funzione(F),ruolo(R),Sn) =>
          F/R :: [Sn].

apposizione(funzione(F),ruolo(R),Inter_ret) =>
          F/R :: [Inter_ret].

arg(funzione(F),ruolo(R),mod([]),Arg) => F/R::[mod(M),Arg].

arg(funzione(F),ruolo(R),mod(M),Arg) => F/R::[mod(M),Arg].

arg(funzione(F),ruolo(R),[],Arg) => F/R::[Arg].

arg(funzione(F),ruolo(R),inf_con_sub(indice(Ind),sub(Sub),rel(Rel),X,Y)) => adj::[sem_mark(Sub), sub/Rel::[indice(Ind),Y],F/R::[X]].

arg(funzione(F),ruolo(R),Arg) => F/R::[Arg].

controllore([]) => nil::nil.

spec([]) => nil::nil.

gen([]) => nil::nil.
     
num([]) => nil::nil.
   
pers([]) => nil::nil.
   
caso([]) => nil::nil.

def([]) => nil::nil.
     
quant([]) => nil::nil.
   
card([]) => nil::nil.
   
part([]) => nil::nil.
   
foc([]) => nil::nil.
   
mod([]) => nil::nil.

sn(indice(Ind),cat(C),Testa,S,Args,Mods,Adjs) =>
        nil::[indice(Ind),cat(C),Testa,S,Args,Mods,Adjs].
   
sn(indice(Ind),cat(C),Testa,S,Controllore) =>
        nil::[indice(Ind),cat(C),Testa,S,Controllore].

sn(indice(Ind),cat(C),Testa,Controllore) =>
        nil::[indice(Ind),cat(C),Testa,Controllore].

sn(indice(Ind),cat(C),Testa,S) =>
        nil::[indice(Ind),cat(C),Testa,S].

sn(indice(Ind),Testa,Controllore) =>
        nil::[indice(Ind),Testa,Controllore].

sn(indice(Ind),cat(C),Testa) =>
        nil::[indice(Ind),cat(C),Testa].

sn(indice(Ind),Testa) =>
        nil::[indice(Ind),Testa].


/* nei Pro controllati (topic relativo e infinitive) manca lo specificatore */


saa(indice(Ind),cat(C),Testa,Args,Adjs) =>
        nil :: [indice(Ind),cat(C),Testa,Args,Adjs]. 

saa(indice(Ind),cat(C),Testa,spec(S),Args,Adjs) =>
        nil :: [indice(Ind),cat(C),Testa,spec(S),Args,Adjs]. 

/* possessivo Proprio */
sn(indice(Ind),cat(C),Testa) =>
        nil::[indice(Ind),cat(C),Testa].
/* sn coordinati */
sn(indice(Ind),cat(C),coordina(ListaSnCoord)) =>
         nil::[indice(Ind),cat(C),coordina(ListaSnCoord)].

sn(indice(Ind),cat(C),args(Arg),coordina(ListaSnCoord)) =>
         nil::[indice(Ind),cat(C),args(Arg),coordina(ListaSnCoord)].


coordina(ListaCoord) => 
        coordina :: [testa(coordinante),gen(_Gen),num(plur)|ListaCoord].

coordina(ListaCoord) => 
        coordina :: [heads(coordin)|ListaCoord].

/*heads(coordin) => nil::coordin.*/

coordina(ListaCoord) => coordina::ListaCoord.


sn_int(indice(I),cat(C),Testa,spec(S),Args,Mods,Adjs) =>
       nil::[indice(I),cat(C),Testa,spec(S),Args,Mods,Adjs].

sp(prep(P),A,M) =>
       nil::[sem_mark(P),A,M].  

adj(Tipo,sp(prep(Prep),indice(Ind),cat(C),Testa,Spec,coordina(ListaSpCoord))) 
=>
   adj/Tipo :: [sem_mark(Prep),indice(Ind),cat(C),Testa,Spec,coordina(ListaSpCoord)].

adj(Tipo,sp(prep(Prep,C,mod(M)),Args)) =>
        adj/Tipo :: [sem_mark(Prep),mod(M),Args].

adj(Tipo,sp(prep(Prep,C,M),Sn)) =>
        adj/Tipo :: [sem_mark(Prep),mod(M),Sn]. /* era pred(Prep),ogg/nil::... */

adj(Tipo,sn(indice(Ind),cat(C),Testa,Spec,Args,Mods,Adjs)) =>
        adj/Tipo :: [indice(Ind),cat(C),Testa,Spec,Args,Mods,Adjs]. 

adj(Tipo,saa(indice(Ind),cat(C),Testa,Args,Adjs)) =>
        adj/Tipo :: [indice(Ind),cat(C),Testa,Args,Adjs]. 

adj(Tipo,saa(indice(Ind),cat(C),Testa,Spec,Args,Adjs)) =>
        adj/Tipo :: [indice(Ind),cat(C),Testa,Spec,Args,Adjs]. 

adj(Tipo,saa(indice(Ind),cat(C),coordina(ListaSaCoord))) =>
        adj/Tipo :: [indice(Ind),cat(C),coordina(ListaSaCoord)]. 

nome_mod(sn(indice(Ind),cat(C),Testa,Spec,Args,Mods,Adjs)) =>
        mod/tema :: [indice(Ind),cat(C),Testa,Args,Mods,Adjs].

sa(indice(Ind),cat(C),Testa,Args) => 
        nil::[indice(Ind),cat(C),Testa,Args].

controllore([]) => nil::nil.

/* sa coordinati */
saa(indice(Ind),cat(C),coordina(ListaSaCoord)) =>
         nil::[indice(Ind),cat(C),coordina(ListaSaCoord)].

coordina(ListaSaCoord) => 
        coordina :: [coord(X),coord(Y)].

n(Nome,Gen,Num) => nil::[pred(Nome),tipo_sn(n),gen(Gen),num(Num),pers(3)].
n(Nome,Gen,Num,Caso) => nil::[pred(Nome),tipo_sn(n),gen(Gen),num(Num),pers(3),caso(Caso)].
npro(Nome,Gen,Num) => nil::[pred(Nome),tipo_sn(npro),gen(Gen),num(Num),pers(3)].
a(Agg,Gen,Num) => nil::[pred(Agg),gen(Gen),num(Num)].
agg(Agg,Gen,Num) => nil::[pred(Agg),gen(Gen),num(Num)].
possessivo(Poss,Gen,Num) => nil::[pred(Poss),tipo_sn(possessivo),gen(Gen),
                                  num(Num)].
/* VBL - vedere se va uniformato anche il pronome indefinite */
pr(vbl,vbl,_Pers,Gen,Num,_Caso) =>
   nil :: [pred(vbl),tipo_sn(vbl)].
pr(pro_grande,pPro,_Pers,Gen,Num,_Caso) =>
   nil :: [pred(pPro),tipo_sn(pro_grande)].
pr(Tipo,Pronome,Pers,Gen,Num,Caso) => 
        nil::[pred(Pronome),tipo_sn(Tipo),pers(Pers),gen(Gen),num(Num),caso(Caso)].
pr(Tipo,Pronome,Pers,Gen,Num,Caso) => 
        nil::[pred(Pronome),tipo_sn(Tipo),pers(Pers),gen(Gen),num(Num)].
pr(clitico,Def,Pronome,Pers,Gen,Num,Caso) => 
        nil::[pred(Pronome),tipo_sn(clitico),pers(Pers),gen(Gen),
        num(Num),caso(Caso)].
pr(pr_int,Def,Pronome,Pers,Gen,Num,Caso) => 
        nil::[pred(Pronome),tipo_sn(pr_int),pers(Pers),gen(Gen),
        num(Num),caso(Caso)].
pr(pro_picc,Def,Pronome,Pers,Gen,Num,Caso) => 
        nil::[pred(pro),tipo_sn(pro_picc),pers(Pers),gen(Gen),
        num(Num),caso(Caso)].
pr(pro_expl,Def,Pronome,Pers,Gen,Num,Caso) => 
        nil::[pred(form),tipo_sn(pro_expl),pers(3),
        num(sing),caso(Caso)].
pr(vbl,Def,Pronome,Pers,Gen,Num,Caso) => 
        nil::[pred(vbl),tipo_sn(vbl),caso(Caso)].
pr(pr_quantif, exist,D,P,G,N,C) => 
        nil::[pred(exist),tipo_sn(pr_quantif)].
pr(Tipo,Def,Pronome,Pers,Gen,Num,Caso) => 
        nil::[pred(Pronome),tipo_sn(Tipo),pers(Pers),gen(Gen),
        num(Num),caso(Caso)].
 
cl(Tipo,Def,Pronome,Gen,Num,Pers,Caso) => 
        nil::[pred(Pronome),tipo_sn(Tipo),pers(Pers),gen(Gen),
        num(Num),caso(Caso)].
cl(Tipo,Pronome,Pers,Gen,Num,Caso) => 
        nil::[pred(Pronome),tipo_sn(Tipo),pers(Pers),gen(Gen),num(Num),caso(Caso)].
v(Verbo,L,Modo,Tempo,Pers,Num,Gen) => nil::[pred(Verbo),lex_form(L),modo(Modo),tempo(Tempo)].

v(Verbo,Voce,L,Modo,Tempo,Pers,Num,Gen) => nil::[pred(Verbo),lex_form(L),voice(Voce),modo(Modo),tempo(Tempo)].

voice([]) => nil::nil.


aux(Verbo,Modo,Tempo,Pers,Num) => voce::[passiva].
aux(Verbo,Modo,Tempo,Pers,Num,Gen) => voce::[passiva].

supporto([]) => nil::nil.

tempo(pres/semp) => tempo::[pres].
tempo(pres/_/be) => tempo::[pres].
tempo(inf/comp/semp) => tempo::[pass_pross].
tempo(pres/comp/_Aux) => tempo::[pass_pross].
tempo(pass/pross/_Aux) => tempo::[trap_pross].
tempo(pres/progr) => tempo::[pres_progr].
tempo(pass/progr) => tempo::[imp_progr].
tempo(progr/comp/semp) => tempo::[imp_progr].
tempo(imp/semp) => tempo::[imp].
tempo(imp/comp/_Aux) => tempo::[trap_pross].
tempo(pass/comp/_Aux) => tempo::[trap_pross].
tempo(imp/progr) => tempo::[imp_progr].
tempo(pass_rem/semp) => tempo::[pass_rem].
tempo(pass/semp) => tempo::[past].
tempo(past/semp) => tempo::[past].
tempo(pass_rem) => tempo::[pass_rem].
tempo(pass_rem/comp/_Aux) => tempo::[trap_rem].
tempo(futuro/semp) => tempo::[futuro].
tempo(fut/semp) => tempo::[futuro].
tempo(futuro/comp/_Aux) => tempo::[futuro_ant].
tempo(pass) => tempo::[past].
tempo(pres) => tempo::[pres].
tempo(_) => tempo::[nil].


avv(pred_avv(Avv),tipo(Tipo)) =>
         adj/Tipo :: [pred(Avv)].

avv(pred_avv(Avv),tipo(Tipo),spec(Spec)) =>
         adj/Tipo :: [pred(Avv),spec(Spec)].

avv(pred_avv(Avv),tipo(Tipo),duraz(D),config(C)) =>
         adj/Tipo :: [pred(Avv),duraz(D),config(C)].

avv(pred_n(Avv),tipo(Tipo),duraz(D),config(C)) =>
         adj/Tipo :: [pred(Avv),duraz(D),config(C)].


/* **************************************************************************  */
/* genera_tab[B_ref(Rete) : crea i nuovi archi con le tabelle di referenzialita` */


genera_tab_ref(Rete) :- repeat,
                        genera_tab_ref_x(Rete).

genera_tab_ref_x(Rete) :- retract(arco(N1,N2,tipo_sn,Rete)), !,
                          assert(arco(N1,N2,tab_ref,Rete)),
                          arco(N1,NN,pred,Rete),foglia(NN,Pred,Rete),
                          retract(foglia(N2,Tipo,Rete)),
                          tabella_ref(Tipo,Pred,ListaRef), 
                          assert(foglia(N2,ListaRef,Rete)),
                          ! , fail.
genera_tab_ref_x(_Rete).



/* Nella f-struttura elimina archi e foglie inerenti persona e numero  */
/* dei verbi di modo finito                                            */

clear_verbo(_,[]).
clear_verbo(Rete,[N1/Mo|Other]) :- 
              (((Mo = ind ; Mo = cong ; Mo = cond),
                 retract(arco(N1,N2,pers,Rete)),
                 retract(foglia(N2,_,Rete)),
                 retract(arco(N1,N3,num,Rete)),
                 retract(foglia(N3,_,Rete)),
                 clear_verbo(Rete,Other))
                ;
                 clear_verbo(Rete,Other)).
                
nodo_coord(Rete) :- 
gr(germanic), !.

/* assegna genere e numero ai nodi di coordinazione di sn */
nodo_coord(Rete) :- 
gr(romance),
findall(N2,(arco(_N1,N2,Coord,Rete),Coord=coordina),ListaCoord),
                    nodo_coord_x(ListaCoord,Rete).
nodo_coord_x([],_Rete):- !.
nodo_coord_x([N2|Resto],Rete):-
                     arco(N2,N3,testa,Rete),
                     foglia(N3,coordinante,Rete),
                     findall(Genx,(arco(N2,N5,coord,Rete),
                                arco(N5,N6,gen,Rete),
                                foglia(N6,Genx,Rete)),ListaGen),
                     (member(mas,ListaGen),Gen=mas;Gen=fem),
                     arco(N2,ToNodo,gen,Rete),
                     retract(foglia(ToNodo,_Gen,Rete)), 
                     assert(foglia(ToNodo,Gen,Rete)),
                     !, nodo_coord_x(Resto,Rete).
nodo_coord_x(Nodi,Rete):-!.

aggiusta_relative(Rete) :- findall(N1/N2,(arco(N1,N2,Mod,Rete), 
                                            (Mod=rel;Mod=rel_avv)),
                                            ListaRel),
                            aggiusta_relative_x(ListaRel,Rete).
aggiusta_relative_x([],_Rete):- !.
aggiusta_relative_x([N1/N2|Resto],Rete):-
                     arco(N0,N1,ModAgg,Rete),
                     retract(arco(N1,N2,TipoRel,Rete)),
                     tabella_relative(ModAgg,TipoRel,F/R),
                     assertz(arco(N1,N2,F/R,Rete)), 
                     aggiusta_relative_x(Resto,Rete). 
tabella_relative(mods,relativa,mod/predic).
tabella_relative(mods,rel_avv,mod/predic_avv).
tabella_relative(adjs,relativa,adj/predic).
tabella_relative(adjs,rel_avv,adj/predic_avv).




/* aspetto */

aspetto(R) :- bagof(N/R,X^arco(N,X,modo,R),Lista),
            sort(Lista,Lists),
            (Lists=[A], List=Lists; Lists\=[A], Lists=[A|_], List=[A]),
           apply(aspetto_x,List).
aspetto_x(N/R) :- nodo(N)::cat::Cat,
                converti_cat_aspetto(Cat,Aspetto1),
                modifica_aspetto(N,Aspetto1,Aspetto2),
                w_arco(N,N1,aspetto,R),
                w_foglia(N1,Aspetto2,R).


converti_cat_aspetto(mental_activ,attivita).
converti_cat_aspetto(ment_activ,attivita).
converti_cat_aspetto(ment_act,attivita).
converti_cat_aspetto(perloc,achiev_tr).
converti_cat_aspetto(attivita,attivita).
converti_cat_aspetto(process,attivita).
converti_cat_aspetto(risultato,achiev_tr).   /* trasformativo */
converti_cat_aspetto(cambiamento,accomp).
converti_cat_aspetto(accomp,accomp).
converti_cat_aspetto(soggettivo,stato).
converti_cat_aspetto(emotivo,stato).
converti_cat_aspetto(affettivo,stato).
converti_cat_aspetto(stato,stato).
converti_cat_aspetto(achiev,achiev_tr).
converti_cat_aspetto(achievement,achiev_tr).
converti_cat_aspetto(ist_soc,achiev_tr).
converti_cat_aspetto(valutativo,attivita).
converti_cat_aspetto(comunicativo,attivita).
converti_cat_aspetto(percettivo,attivita).
converti_cat_aspetto(riportivo,achiev_tr).
converti_cat_aspetto(riport_dir,achiev_tr).
converti_cat_aspetto(esistenza,stato).  
converti_cat_aspetto(presuppositivo,stato).  
converti_cat_aspetto(modale,nil).
converti_cat_aspetto(camb_attiv,accomp).
converti_cat_aspetto(stat_result,achiev).
converti_cat_aspetto(ment_perloc,stato).
converti_cat_aspetto(risult_proc,achiev).
converti_cat_aspetto(dir_speech,achiev_tr).
converti_cat_aspetto(A,A).
                
/*
modifica_aspetto(N,_,stato) :-
         (nodo(N)::tempo::imp_progr;
         nodo(N)::tempo::futuro;
         nodo(N)::tempo::pres_progr;
         nodo(N)::tempo::pass_progr),!.
*/
modifica_aspetto(N,Aspetto1,achiev_tr) :-
         member(Aspetto1,[attivita]),
         nodo(N)::supporto::cominciare.

modifica_aspetto(N,Aspetto1,stato) :-
         nodo(N)::supporto::stare.

modifica_aspetto(N,Aspetto1,Aspetto2) :-
         Aspetto1=stat_result,
         nodo(N)::Funz/Role::nodo(Nogg),
         (Funz=obl,
           Aspetto2=stato
         ;
           Aspetto2=achiev_tr
        ).
modifica_aspetto(N,Aspetto1,Aspetto2) :-
         Aspetto1=camb_attiv,
         nodo(N)::Funz/Role::nodo(Nogg),
         (Funz=obl,
          (
          (Role=locativo, Aspetto2=accomp
          ;
          Role=loc_direct, Aspetto2=attivita
          ;
          Role=form, Aspetto2=accomp
          )
         ;
         Aspetto2=attivita)
         ;
         Funz=ogg2,
         Role=paziente, Aspetto2=accomp
         ;
         Funz=ogg, Aspetto2=attivita
        ).

modifica_aspetto(N,Aspetto1,Aspetto2) :-
         Aspetto1=ment_perloc,
         (nodo(N)::vcomp/prop::nodo(Nogg),
          Aspetto2=achiev_tr
          ;
         Aspetto2=attivita).

modifica_aspetto(N,Aspetto1,Aspetto2) :-
         Aspetto1=risult_proc,
         (nodo(N)::vcomp/prop::nodo(Nogg),
          Aspetto2=achiev_tr
          ;
         Aspetto2=attivita).

modifica_aspetto(N,Aspetto1,Aspetto2) :-
         Aspetto1=stato,
         nodo(N)::acomp/prop::nodo(Nogg),
         nodo(Nogg)::cat::[telico],
         Aspetto2=achiev_tr.

modifica_aspetto(N,Aspetto1,attivita) :-
         member(Aspetto1,[accomp,achiev_tr]),
         nodo(N)::ogg/_::nodo(Nogg),
         (
         nodo(Nogg)::num::plur
         ;
         nodo(Nogg)::pred::Pred
         ),
         nodo(Nogg)::spec::def::'0',
         nodo(Nogg)::tab_ref::[+ ref, - pro, - ana, + class].
modifica_aspetto(_N,A,A).

/*  non_numerabile(Pred)  */


infinitive_mode(inf).

/*
infinitive_mode(ger) :-
   gr(english).
*/

/* INFINITIVA */
infinitiva(CStr,Ctr,F,X,H0,H1) 
   :-
   infinitiva_semplice(For,CsInf,Ctr,F,F1,H0,H1),
   resto_infinitiva(For, CsInf, Ctr, CStr,F1,X).

resto_infinitiva(_, CStr, Ctr, CStr,F,X):-
    (F=[],X=[], LSP=[];F=[P], punct(P),X=[P], LSP=[]),!.

resto_infinitiva(For,
    CsInf, Ctr, inf_con_sub(indice(Simb),Sub,Rel,CsInf,cp(SubAss)),F,X) 
    :-
    gen_sym(finf,Simb),
    subordin_inf(cp(Sub,Rel,SubAss),F,X).

resto_infinitiva(For,
    CsInf, Ctr, infinitive_coordinate(indice(Simb),CsInf,CsCoord),F,X)
    :-
    gen_sym(finf,Simb),
    (F=[','|F1] ; F=[e|F1] ),
    infinitiva_semplice(For,CsCoord,Ctr,F1,X,nil,nil). 

resto_infinitiva(_, CStr, Ctr, CStr,F,F):-!.

infinitiva_semplice(Modo,infinitiva(I,
                v(Verbo,LArgsV1,Modo,Tempo,_,_,_),
                Supporto,cat(CatV),Args,Adjs),C,F,X,H0,H1) 
   :-
   negaz(F,Neg/F1),
   verbo1(F1,F2,_,v(Verbo, Modo, Tempo, _, _, _), Pro1, Pro2,   
          non_fin, CatGr, Supporto,CatV, PredVs, _, _, _, _, _),
   choose_predv(PredVs, PredV, CatGr1, CatV1),
   infinitiva_sempl(infinitiva(I,
                v(Verbo,LArgsV1,Modo,Tempo,_,_,_),
                Supporto,PredV,cat(CatV1),
                Args,Adjs,Neg),[Pro1,Pro2],CatGr1,C,F2,X,H0,H1).


infinitiva_sempl(I,P,trans,C,F,X,H0,H1):-
    infinitiva_trans(I,P,C,F,X,H0,H1).

infinitiva_sempl(I,P,cop,C,F,X,H0,H1):-
    infinitiva_cop(I,P,C,F,X,H0,H1).


infinitiva_sempl(I,P,CatGr,C,F,X,H0,H1) :-
      (CatGr=rifl;
       CatGr=inac;
       CatGr=intr), 
      infinitiva_intr(I,P,CatGr,C,F,X,H0,H1).

infinitiva_sempl(I,P,trans,C,F,X,H0,H1):-
    infinitiva_ell(I,P,C,F,X,H0,H1).

/* infinitiva transitiva COMPRENDE ANCHE LA INFINITIVA TRANS 
CON INFINITIVA COME OGGETTO */

infinitiva_intr(infinitiva(indice(Simb),
                v(Verbo,LArgsV1,Modo,Tempo,Pers,Num,Gen),
                Supporto,SubCatIn,
                cat(CatV),args(Args_vp),
                adjs(Adjs_vp),Neg),[CliticoAcc,CliticoDat],rifl,Controllo,F,X,H0,nil) 
          :-
          sint_avv(F,Tempo,Avv1/F1,Tipo1),
          (CliticoAcc\=[],TOgg=riflessivo
            ;CliticoAcc\=[]),
            Modo = inf, gen_sym(finf,Simb),
          oggetto(Ogg,TOgg,SubCatIn,Controllo1,CliticoAcc,F1,F2,H0,nil),
          agnt_sa(post,SA,Gen,Num,F2,F3),
          sint_prep3(F3,F4,LSP,H0,nil),
          sint_prep(LSP1,F4,F5),
          (sint_prepos_nom(F5,F6,SN);
           nom_avv(SN,SubCatIn,_,_,_,F5,F7)
           ),
          check_cat_temp(SN),
          compar(Comp,Verbo,PrimoArg,Controllo,F7,X),
          SubCatIn=pred_v(Verbo,CatGr,CatV,PrimoArg),
           ListaSP the_list CliticoDat && LSP && LSP1 && SA && SN,
            interp_infinitiva_intr(Controllo,
                          Verbo,SubCatIn,LArgsV1,ListaSP,CatV,Args_vp,Aggiunti_x),
            Adjs_vp the_list Avv1 && Neg && Comp && Aggiunti_x.

/* infinitiva intransitiva */

infinitiva_intr(infinitiva(indice(Simb),
    v(Verbo,LArgsV1,Modo,Tempo,Pers,Num,Gen),
    Supporto,PredV,
    cat(CatV),args(Args_vp),
    adjs(Adjs_vp),Neg),[CliticoAcc,CliticoDat],Vintr,Controllo,F,X,H0,nil) 
    :-
    (Vintr=intr ; Vintr=inac),
    infinitive_mode(Modo), 
    gen_sym(finf,Simb),
    subcat_on(PrimoAr, PredV),
    PredV=pred_v(Verbo,CatGr,CatV,Subcats),
    compar(Comp,Verbo,PrimoAr,Controllo,F,F1),
    sint_avv(F1,Tempo,Avv1/F2,Tipo1),
    agnt_sa(post,SA,Gen,Num,F2,F3),
    oggetto_intrans(Oggetto, TOgg, PredV, Controllo, CliticAcc, PredV1,F3,F4),
    sint_prep3(F4,F5,LSP,H0,nil),
    sint_prep(LSP1,F5,F6),
     LSPe1 the_list LSP && LSP1,
     match_oblique(LSPe1, PredV1, PredV2),
    (PredV2=pred_v(Verbo,Vintr,CatV,PrimoArg)
      ;   
     PredV2=pred_v(Verbo,Vintr,CatV,[PrimoArg|LastArg])),   
          (sint_prepos_nom(F6,F7,SN);
           nom_avv(SN,PredV,_,_,_,F6,X),
           check_cat_temp(SN)),        
     ListaSP the_list CliticoDat && LSPe1 && SA && SN,
    (
     nonvar(Oggetto),Oggetto\=[],
     TOgg=vcomp,
     interp_inf_intr_inf(Controllo,Controllo1,Verbo,Oggetto/vcomp,ListaSP,
                         CatV,PredV2,LArgsV1,Args_vp,Aggiunti_x)
    ;
    var(Oggetto),CliticoAcc\=[],
    interp_infinitiva_intr(Controllo,Verbo,CliticoAcc/sogg,PredV2,LArgsV1,ListaSP,
                        CatV,Args_vp,Aggiunti_x), Controllo=fcomp
     ;
    (var(Oggetto);Oggetto=[]),
    interp_infinitiva_intr(Controllo,Verbo,PredV2,LArgsV1,ListaSP,CatV,
                        Args_vp,Aggiunti_x)
     ),
      Adjs_vp the_list Avv1 && Neg && Comp && Aggiunti_x.

transf_clit(sn,CliticoAcc,CliticoAcc):-!.

transf_clit(svinf,CliticoAcc,CliticoAcc):-!.

transf_clit(fcomp,CliticoAcc,CliticoAcc):-!.

transf_clit(rifl_corto,CliticoAcc,CliticAcc):-!.
transf_clit(riflessivo,CliticoAcc,CliticAcc):-!.
transf_clit(clitico,CliticoAcc,CliticAcc):-!.
transf_clit(enclitico,CliticoAcc,CliticAcc):-!.


infinitiva_trans(infinitiva(indice(Simb),
    v(Verbo,LArgsV1,Modo,Tempo,Pers,Num,Gen),
    Supporto,PredV,
    cat(CatV),args(Args_vp),
    adjs(Adjs_vp),Neg),[CliticoAcc,CliticoDat],Controllo,F,X,H0,H2) 
    :-
    infinitive_mode(Modo), 
     gen_sym(finf,Simb),
    adjs_preobj(F,F1,PredV, Tempo, CliticoAcc, Avv1, LSP1, LSP2, SA, Gen1,Num1),
     (var(H0);
       nonvar(H0), H0=nil;
       nonvar(H0), H0=TipoOgg/_/_/_),
     (nonvar(TipoOgg),
       TOgg=TipoOgg
        ;
        (TOgg = clitico; TOgg = sn ; TOgg = riflessivo;  TOgg =rifl_corto;TOgg=svinf ; TOgg=fcomp ; TOgg=vcomp),  
       select_subcat([sn/sogg/_/_, _/_/_/_|Rest], PredV,_)
        ),
      oggetto(Ogg,TOgg,PredV,Controllo1,CliticoAcc,F1,F2,H0,H2),
      oggetto2(Ogg2, TipoOgg2, PredV, Controllo1, F2,F3,H0,nil),
      transf_clit(TOgg,CliticoAcc,CliticAcc),
      sint_prepos(CliticAcc,LSP3) , 
      sint_prep(LSP4,F3,X),
     ListaSP the_list CliticoDat && LSP1 && LSP2 && LSP3 && LSP4 && SA,
         (member(TipoOgg2 - Fun, [sn - ogg, svinf - vcomp]),
           Cond = (Rest \= [pcomp/_/_]),
       select_subcatt([sn/sogg/_/_, sn/ogg/_/_ | Rest], Cond, PredV, PredV1),
       interp_infinitiva_tr_ogg(Controllo, Controllo1, Verbo, Ogg/Fu, Ogg2/Fun, 
              ListaSP, CatV, PredV1, LArgsV1, Args_vp, Aggiunti_x)
      ;
        (TOgg = sn ; TOgg = clitico ; TOgg = riflessivo;  TOgg =rifl_corto),  
        select_subcatt( sn/Fun/_/_, on(Fun, [ogg, ogg_avv]), PredV, PredV1),
      interp_infinitiva_trans(Controllo,
             Verbo,Ogg/ogg,ListaSP,CatV,PredV1,LArgsV1,Args_vp,Aggiunti_x)
            ;
           TOgg = svinf ,
        select_subcatt([sn/sogg/_/_, Fun/prop/_/_ | Rest], Fun = vcomp, PredV, PredV1),
       interp_infinitiva_trans_inf(Controllo,Controllo1,
             Verbo,Ogg/vcomp,ListaSP,CatV,PredV1,LArgsV1,Args_vp,Aggiunti_x)
              ;
           TOgg = fcomp,
         select_subcatt([sn/sogg/_/_, Fun/Prop/_ | Rest], Fun = f/fcomp, PredV, PredV1),
       interp_infin_trans_fcomp(Controllo,Verbo,ListaSP,Ogg/fcomp,CatV,PredV1,
            LArgsV1,Args_vp,Aggiunti_x)),
            Adjs_vp the_list Avv1 && Neg && Aggiunti_x.

infinitiva_cop(infinitiva(indice(Simb),
        v(Verbo,LArgsV1,Modo,Tempo,Pers,Num,Gen),
        Supporto,PredV,
        cat(CatV),args(Args_vp),
        adjs(Adjs_vp),Neg),[CliticoAcc,CliticoDat],Controllo,F,X,H0,nil) 
       :-
         infinitive_mode(Modo), 
          gen_sym(finf,Simb),
          sint_avv(F,Tempo,Avv1/F1,Tipo1),
          subcat_on([PrimoArg|LastArg], PredV),
          PredV1=pred_v(Verbo,CatGr,CatV,[PrimoArg|LastArg]),          
          xcomp(LastArg,Xcomp,Gen1,Num1,TipoXcomp,F1,F2),
          sint_prep(LSP1,F2,X),
             ListaSP the_list LSP1,
    interp_infinitiva_cop(Controllo,
  Verbo,Xcomp/TipoXcomp,PredV,LArgsV1,ListaSP,CatV,Args_vp,Aggiunti_x),
            Adjs_vp the_list Avv1 && Neg && Comp && Aggiunti_x.

infinitiva_ell(infinitiva(indice(Simb),
        v(Verbo,LArgsV,Modo,Tempo,Pers,Num,Gen),
        Supporto,PredV,
        cat(CatV),args(Args_vp),
        adjs(Adjs_vp),Neg),[CliticoAcc,CliticoDat],Controllo,F,X,H0,nil) 
        :-
        sint_avv(F,Tempo,Avv1/F1,Tipo1),
        infinitive_mode(Modo), 
            gen_sym(finf,Simb ),
        sint_prep3(F1,X,LSP,H0,nil),
        ListaSP the_list CliticoDat && LSP,
            interp_infinitiva_ell(Controllo,
                 Verbo,ListaSP,CatV,PredV,LArgsV,Args_vp,Aggiunti_x),
            Adjs_vp the_list Avv1 && Aggiunti_x.


/* PARTICIPIALI */

participiale(F,LCat,Cont, 
               participial(ip(indice(Simb),
                 v(Verbo,LArgsV1,Modo,Tempo,Pers,Num,Gen),
                 Supporto,
                 cat(CatV),args(Args_vp),
                 adjs(Adjs_vp))),X):- 
                 
           part_ip_bar(F,Modo,Tempo,Avv1,Avv2,Tipo1,Tipo2,Neg,T,SubCatIn,
                                  Verbo,Gen,Num,CatV,Supporto,PredV,F1),
          (T=part_intr,
          sint_prep(LSP,F1,X),
           on(sn/sogg/_/Cats, SubCatIn),
            (var(LCat); 
              nonvar(LCat),
              member(CC, LCat),
              member(CC, Cats)),
            gen_sym(fpart_pass,Simb), 
            ListaSP the_list LSP,
            interp_part_pass(Cont, Verbo,PredV,
                LArgsV1, ListaSP,CatV,Args_vp,Aggiunti_x,Cat), 
            Adjs_vp the_list Avv1 && Neg && Avv2 && Aggiunti_x
           ; 
           T=part_tr,
           part_cats(SubCatIn, Modo, LCat),
            gen_sym(fpart_pass,Simb), 
           oggetto_intrans(
           Oggetto, TOgg, PredV, Controllo, CliticoAcc, PredV1,F1,F2),
           (Oggetto\=[], 
            trova_t_g_n(Oggetto, Testa, Gen, Num),
            Testa\=that
            ;
           var(Oggetto), F2=F1),
          sint_prep(LSP1,F2,F3),
          sint_prep(LSP2,F3,X),
           ListaSP the_list CliticoDat && LSP1 && LSP2,
          (Oggetto\=[],
          interp_part_tr(Cont, Verbo,Oggetto/ogg,PredV,LArgsV1, ListaSP,
                         CatV,Args_vp,Aggiunti_x,Cat)
            ;
           Oggetto=[], 
          interp_part_pass(Cont, Verbo,PredV, LArgsV1, ListaSP,
                           CatV,Args_vp,Aggiunti_x,Cat)), 
          Adjs_vp the_list Avv1 && Neg && Avv2 && Aggiunti_x
          ).

part_ip_bar(F,Modo,Tempo,Avv1,Avv2,Tipo1,Tipo2,Neg,T,SubCatIn,
                                  Verbo,Gen,Num,CatV,Supporto,PredV,X):-
          F=[V|F3],
          (participio(V,Verbo,Gen,Num),
           Modo=part, Tempo=pass
           ;
           gr(english), 
           v(V,Verbo,ger,_,_,_),
            Modo=ger, Tempo=pres
           ),
          cat_gramm(Verbo, CatGr, CatV, SubCatIn),
          (T=part_intr, CatGr\=trans; T=part_tr),
           retraction(T, q),
          Supporto=supporto(P), 
           PredV=pred_v(Verbo, CatGr, CatV, SubCatIn),
          sint_avv(F3,Tempo,Avv2/X,Tipo2),
           !.
/*
participiale(F,LCat,C, participial(I),X):- particip_intr(F,LCat,C, I,X).
participiale(F,LCat,C, participial(I),X):- particip_tr(F,LCat,C, I,X).
*/

part_ip_bar(F,Modo,Tempo,Avv1,Avv2,Tipo1,Tipo2,Neg,T,SubCatIn,
                                  Verbo,Gen,Num,CatV,Supporto,PredV,X):-
          sint_avv(F,Tempo,Avv1/F1,Tipo1),
          negaz(F1,Neg/F2),
          F2=[V|F3],
          (participio(V,Verbo,Gen,Num),
           Modo=part, Tempo=pass
           ;
           gr(english), 
           v(V,Verbo,ger,_,_,_),
            Modo=ger, Tempo=pres
           ),
          cat_gramm(Verbo, CatGr, CatV, SubCatIn),
          (T=part_intr, CatGr\=trans; T=part_tr),
           retraction(T, q),
          Supporto=supporto(P), 
           PredV=pred_v(Verbo, CatGr, CatV, SubCatIn),
          sint_avv(F3,Tempo,Avv2/X,Tipo2),
           !.

part_double_bar(F,Modo,Tempo,LSP,Avv1,Avv2,Tipo1,Tipo2,Neg,T,LCat,
                                  Verbo,Gen,Num,CatV,Supporto,PredV,F5):-
          part_ip_bar(F,Modo,Tempo,Avv1,Avv2,Tipo1,Tipo2,Neg,T,SubCatIn,
                                  Verbo,Gen,Num,CatV,Supporto,PredV,X),
          sint_prep(LSP,F4,X),
           on(sn/sogg/_/Cats, SubCatIn),
           interp_cat(LCat,Cats),
          !.

particip_intr(F,LCat,Cont, ip(indice(Simb),
                 v(Verbo,LArgsV1,Modo,Tempo,Pers,Num,Gen),
                 Supporto,
                 cat(CatV),args(Args_vp),
                 adjs(Adjs_vp)),Gen,Num,Cat,X) 
        :-
        part_double_bar(F,Modo,Tempo,LSP,Avv1,Avv2,Tipo1,Tipo2,Neg,part_intr,
                               LCat,Verbo,Gen,Num,CatV,Supporto,PredV,X),
            gen_sym(fpart_pass,Simb), 
            ListaSP the_list LSP,
            interp_part_pass(Cont, Verbo,PredV,
                LArgsV1, ListaSP,CatV,Args_vp,Aggiunti_x,Cat), 
            Adjs_vp the_list Avv1 && Neg && Avv2 && Aggiunti_x.

particip_intr(F,LCat,Cont, ip(indice(Simb),
                 v(Verbo,LArgsV1,Modo,Tempo,Pers,Num,Gen),
                 Supporto,
                 cat(CatV),args(Args_vp),
                 adjs(Adjs_vp)),X) 
         :-
        part_double_bar(F,Modo,Tempo,LSP,Avv1,Avv2,Tipo1,Tipo2,Neg,part_intr,
                                  LCat,Verbo,Gen,Num,CatV,Supporto,PredV,F),
            gen_sym(fpart_pass,Simb), 
            ListaSP the_list LSP,
            interp_part_pass(Cont, Verbo,PredV,
                    LArgsV1, ListaSP,CatV,Args_vp,Aggiunti_x,Cat), 
            Adjs_vp the_list Avv1 && Neg && Avv2 && Aggiunti_x.

particip_tr(F,LCat,Cont, ip(indice(Simb),
                 v(Verbo,LArgsV1,Modo,Tempo,Pers,Num,Gen),
                 Supporto,
                 cat(CatV),args(Args_vp),
                 adjs(Adjs_vp)),X) 
          :-
           part_ip_bar(F,Modo,Tempo,Avv1,Avv2,Tipo1,Tipo2,Neg,part_tr,
                           SubCatIn,Verbo,Gen,Num,CatV,Supporto,PredV,F1),
           part_cats(SubCatIn, Modo, LCat),
            gen_sym(fpart_pass,Simb), 
          oggetto_intrans(
           Oggetto, TOgg, PredV, Controllo, CliticoAcc, PredV1,F1,X),
           (Oggetto\=[], 
            trova_t_g_n(Oggetto, Testa, Gen, Num),
            Testa\=that
            ;
           var(Oggetto)),
          sint_prep(LSP1,F2,F3),
          sint_prep(LSP2,F3,X),
           ListaSP the_list CliticoDat && LSP1 && LSP2,
          (Oggetto\=[],
          interp_part_tr(Cont, Verbo,Oggetto/ogg,PredV,LArgsV1, ListaSP,
                         CatV,Args_vp,Aggiunti_x,Cat)
            ;
           Oggetto=[], 
          interp_part_pass(Cont, Verbo,PredV, LArgsV1, ListaSP,
                           CatV,Args_vp,Aggiunti_x,Cat)), 
          Adjs_vp the_list Avv1 && Neg && Avv2 && Aggiunti_x.

part_cats(SubCatIn, Modo, LCat):-
           (on(sn/sogg/_/Cats, SubCatIn)
             ;
            SubCatIn=[Sub1|Subs],
             (on(sn/sogg/_/Cats, Sub1)
              ;
              Modo=part,
              on(sn/ogg/_/Cats, Subs) )
           ),
            (var(LCat); 
              nonvar(LCat),
              member(CC, LCat),
              member(CC, Cats)),
           !.

/*  GERUNDIVE */


gerundive(I,F,X) :-
             gen_sym(fgerund,Simb),
             gerundiva_sempl(I1,F,F1),
             (
             F1=[P|F2],
              ( P=',' ; P=e ),
              gerundiva_sempl(I2,F2,X),
              I=gerundive_coordinate(indice(Simb),I1,I2)
              ;
             I=I1, X=F1
             ).

gerundive(gerundive_coordinate(indice(Simb),I1,I2),F,X) :-
             gen_sym(fgerund,Simb),
             gerundiva_ell(I1,controllore(C),F,F1),
             F1=[P|F2],
              ( P=[','] ; P=[e] ),
             gerundiva_sempl(I2,F2,X),
      (
       I2=ip(_,_,_,_,args([_,arg(_,_,sn(indice(C),_,_,_,_,_,_))|_]),Adj)
       ;
       I2=ip(_,_,_,_,args([arg(_,_,_)|_]),Adj)
       ).

gerundiva_sempl(ip(indice(Ind),
                v(Verbo,LArgsV1,Modo,Tempo,_,_,_),
                Supporto,
                cat(CatV), Args,
                Adjsvps),F,X) 
           :- 
             negaz(F,Neg/F1), 
             sint_avv(F1,Tempo,Avv/F12,_),
             verbo1(F12,F2,_,
                   v(Verbo, Modo, Tempo, _, _, _), Pro1, Pro2,   
                   non_fin, CatGr, Supporto, 
                    CatV, PredVs,
                     _, _, _, _, _),
             Modo=ger,
             choose_predv(PredVs, PredV, CatGr1, CatV1),
             gerundiva_sempli(ip(indice(Ind),
                v(Verbo,LArgsV1,Modo,Tempo,_,_,_),
                Supporto,PredV, cat(CatV1), Args,
                Adjs,Neg),[Pro1,Pro2],CatGr1,F2,X),
                Adjs=adjs(Ajs),
                Adjsvp the_list Avv && Ajs, 
                Adjsvps=adjs(Adjsvp),
                !.

gerundiva_sempli(I,P,trans,F,X) 
           :- 
           gerundiva_trans(I,P,F,X),!.

gerundiva_sempli(I,P,intr,F,X) 
           :- 
           gerundiva_intr(I,P,F,X),!.

gerundiva_sempli(I,P,cop,F,X) 
           :-
           gerundiva_cop(I,P,F,X),!.

gerundiva_intr(ip(indice(Simb),
                 v(Verbo,LArgsV1,Modo,Tempo,Pers,Num,Gen),
                 Supporto,PredV,
                 cat(CatV),
                 args(Args_vp),
                 adjs(Adjs_vp),Neg),[CliticoAcc,CliticoDat],F,X) 
           :-
          gen_sym(fgerund,Simb), 
          sint_avv(F,Tempo,Avv1/F1,Tipo1),
          sint_prep(LSP,F1,X),
          ListaSP the_list CliticoDat && LSP,
            interp_gerundiva_intr(Verbo,
                     ListaSP,CatV,PredV,LArgsV1,Args_vp,Aggiunti_x), 
            Adjs_vp the_list Avv1 && Neg && Aggiunti_x,!.


gerundiva_trans(ip(indice(Simb),
                 v(Verbo,LArgsV1,Modo,Tempo,Pers,Num,Gen),
                 Supporto,PredV,
                 cat(CatV),
                 args(Args_vp),
                 adjs(Adjs_vp),Neg),[CliticoAcc,CliticoDat],F,X) 
               :-
          gen_sym(fgerund,Simb), 
          sint_avv(F,Tempo,Avv1/F1,Tipo1),
          oggetto_intrans( Oggetto, TOgg, PredV, Controllo, CliticoAcc, PredV1,F1,F2),
          oggetto2(Ogg2, TOgg2, PredV, Controllo, F2,F3,H1, nil),
          sint_prep(LSP,F3,X),
          ListaSP the_list LSP && CliticoDat,
           (nonvar(Oggetto),
            member(TOgg2 - Fun, [sn - ogg, svinf - vcomp]),
          interp_gerundiva_tr_ogg2(Controllo,Verbo, Oggetto/Fu, Ogg2/Fun, 
               ListaSP, CatV, PredV, LArgsV1, Args_vp,Aggiunti_x)
             ;
             (TOgg = sn,
          interp_gerundiva_tr(Verbo,Oggetto/ogg,ListaSP,CatV,
                            PredV,LArgsV1,Args_vp, Aggiunti_x)
              ;
            TOgg = f/fcomp,
          interp_gerundiva_tr(Verbo,Oggetto/fcomp,ListaSP,CatV,
                            PredV,LArgsV1,Args_vp, Aggiunti_x))
              ;            
            var(Oggetto),
          interp_gerundiva_tr(Verbo,_/ogg,ListaSP,CatV,
                            PredV,LArgsV1,Args_vp,Aggiunti_x)
           ), 
            Adjs_vp the_list Avv1 && Neg && Aggiunti_x,!.

gerundiva_ell(ip(indice(Simb),
                 v(Verbo,LArgsV1,Modo,Tempo,Pers,Num,Gen),
                 Supporto,
                 cat(CatV),
                 args(Args_vp),
                 adjs(Adjs_vp)),
                 controllore(C),F,X) 
      :-
          sint_avv(F,Tempo,Avv1/F1,Tipo1),
          verbo(F1,F2,v(Verbo,ger,Tempo,Pers,Num,Gen),CliticoAcc,CliticoDat,
                non_fin,trans,Supporto, CatV, PredV,_,_,_),
          sint_avv(F2,Tempo,Avv2/F3,Tipo2),
          gen_sym(fgerund_ell,Simb),
          sint_prep(LSP,F3,F4),
          ListaSP the_list CliticoDat && LSP,
          interp_gerundiva_ell(Verbo,ListaSP,CatV,PredV,LArgsV1,
                              Args_vp,Aggiunti_x,controllore(C)), 
            Adjs_vp the_list Avv1 && Avv2 && Aggiunti_x,!.

check_cat_temp(SN):-
              (SN=[];
              trova_cat_SN(SN,Cat),
              Cat\=[], Cat\=[_], 
              member(tempo,Cat)).

gerundiva_cop(ip(indice(Simb),
                 v(Verbo,LArgsV1,Modo,Tempo,Pers,Num,Gen),
                 Supporto,PredV,
                 cat(CatV),
                 args(Args_vp),
                 adjs(Adjs_vp),Neg),[C1,C2],F,X) 
              :-
      gen_sym(fgerund,Simb), 
      sint_avv(F,Tempo,Avv1/F1,Tipo1),
      oggetto_intrans(Oggetto, TOgg, PredV, Controllo, CliticoAcc, PredV1,F1,F2),
        PredV=pred_v(Verbo,CatGr,CatV,[PrimoArg|LastArg]),
      xcomp(LastArg,Xcomp,Gen1,Num1,TipoXcomp,F2,F3),
      interp_gerundiva_copul(Verbo,Oggetto,Xcomp/TipoXcomp,ListaSP,CatV,
                              PredV1,LArgsV1,Args_vp,Aggiunti_x), 
      Adjs_vp the_list Avv1 && Neg && Aggiunti_x,!.

