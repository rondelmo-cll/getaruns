:- style_check(-singleton).


/*check per verbi con due argomenti */
grammaticality_check(Prefix, 
               [Verbo,InputP,OutputP,Arg1,Arg2,ListaSP,CatV],Args,Adjs_x,Par,
               ListaAdjs, Adjs)
               :-
               Goal=..[Prefix,Verbo,InputP,OutputP,Arg1,Arg2,ListaSP,CatV,Args,Adjs_x],
               call(Goal),
               Adjs_par the_list Adjs_x && Par,
               joinadjuncts(ListaAdjs, Adjs_par, Adjs).

/*check per verbi con due argomenti e il modo oppure il controllo = fcomp e vcomp */
grammaticality_check(Prefix, 
               [Verbo,Modo,InputP,OutputP,Arg1,Arg2,ListaSP,CatV],Args,Adjs_x,Par,
               ListaAdjs, Adjs)
               :-
               Goal=..[Prefix,Verbo,Modo,InputP,OutputP,Arg1,Arg2,ListaSP,CatV,Args,Adjs_x],
               call(Goal),
               Adjs_par the_list Adjs_x && Par,
               joinadjuncts(ListaAdjs, Adjs_par, Adjs).

/*check per verbi con tre argomenti, trans_ogg2, trans_xcomp*/
grammaticality_check(Prefix, 
               [Verbo,Modo,InputP,OutputP,Arg1,Arg2,Arg3,ListaSP,CatV],Args,Adjs_x,Par,
               ListaAdjs, Adjs)
               :-
               Goal=..[Prefix,Verbo,Modo,InputP,OutputP,Arg1,Arg2,Arg3,ListaSP,CatV,Args,Adjs_x],
               call(Goal),
               Adjs_par the_list Adjs_x && Par,
               joinadjuncts(ListaAdjs, Adjs_par, Adjs).

/*check per verbi con un argomento */
grammaticality_check(Prefix, 
               [Verbo,InputP,OutputP,Arg1,ListaSP,CatV],Args,Adjs_x,Par,
               ListaAdjs, Adjs)
               :-
               Goal=..[Prefix,Verbo,InputP,OutputP,Arg1,ListaSP,CatV,Args,Adjs_x],
               call(Goal),
               Adjs_par the_list Adjs_x && Par,
               joinadjuncts(ListaAdjs, Adjs_par, Adjs).

/*check per verbi con un argomento e il modo oppure il controllo = fcomp e vcomp */
grammaticality_check(Prefix, 
               [Verbo,Modo,InputP,OutputP,Arg1,ListaSP,CatV],Args,Adjs_x,Par,
               ListaAdjs, Adjs)
               :-
               Goal=..[Prefix,Verbo,Modo,InputP,OutputP,Arg1,ListaSP,CatV,Args,Adjs_x],
               call(Goal),
               Adjs_par the_list Adjs_x && Par,
               joinadjuncts(ListaAdjs, Adjs_par, Adjs).

joinadjuncts([Neg, Avv1, Avv2], Adjs_par, Adjs):-
               Adjs the_list Neg && Avv1 && Avv2 && Adjs_par.

joinadjuncts([Neg, Voc, Avv1, Avv2], Adjs_par, Adjs):-
               Adjs the_list Neg && Voc && Avv1 && Avv2 && Adjs_par.

joinadjuncts([Neg, Voc, Avv1, Avv2, Avv3], Adjs_par, Adjs):-
               Adjs the_list Neg && Voc && Avv1 && Avv2 && Avv3 && Adjs_par.

joinadjuncts([Neg, Voc, Avv1, Avv2, Avv3, Sub_n], Adjs_par, Adjs):-
               Adjs the_list Neg && Voc && Avv1 && Avv2 && Avv3 && Sub_n && Adjs_par.

joinadjuncts([Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4], Adjs_par, Adjs):-
               Adjs the_list Neg && Voc && Avv1 && Avv2 && Sub_n && Avv3 && Avv4 && Adjs_par.

joinadjuncts([Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4, Avv5], Adjs_par, Adjs):-
               Adjs the_list Neg && Voc && Avv1 && Avv2 && Sub_n && Avv3 && Avv4 
               && Avv5 && Adjs_par.

joinadjuncts([Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4, Sub_n1, Ger], Adjs_par, Adjs):-
               Adjs the_list Neg && Voc && Avv1 && Avv2 && Sub_n && Avv3 && Avv4 
               && Sub_n1 &&  Ger && Adjs_par.

generalized_grammaticality_call(Verb,Controllo,Modo,
                       PredV,LArgsV1,CatGr,TOgg, TipoXcomp, Pro,
                       Oggetto,Ogg2, CliticoAcc, Xcomp,
                       SN,SN1,Oggetto,LSP,CliticoDat,
                       LSP,LSP0,LSP1,LSP3,LSP4,SA,Par,
                       [Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4, Avv5],
																										args(Args),
                          adjs(Adjs)):-

     (CatGr\=trans,CatGr\=cop,
      (Oggetto=[];Oggetto=[]/_), 
      ListaSP the_list LSP && CliticoDat  && LSP0 && LSP1 && LSP3 && LSP4 && SA,
        grammaticality_check(interp_attiva_intr, 
               [Verb,PredV,LArgsV1,SN/sogg,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4, Avv5], Adjs)
      ;
      (Ogg2=O/ogg2, O\=[]
        ;
       nonvar(Ogg2),Ogg2\=[]),
      ListaSP the_list LSP && CliticoDat && LSP3 && LSP0 && LSP1 && SA,
       grammaticality_check(interp_attiva_tr_ogg2, 
               [Verb,Controllo,PredV,LArgsV1,SN/sogg,Ogg2, Oggetto,ListaSP,CatV],Args,
               Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4, Avv5], Adjs)
      ;  
       CatGr\=cop,
      (Oggetto\=[];CliticoAcc\=[]), 
      ListaSP the_list LSP && CliticoDat && LSP3 && LSP0 && LSP1 && SA,
        (
        TOgg = vcomp,
        grammaticality_check(interp_trans_inf, 
               [Verb,Controllo,PredV,LArgsV1,SN/sogg,Oggetto/vcomp,ListaSP,CatV],Args,
               Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4, Avv5], Adjs)
        ;
        TOgg = fcomp,
        grammaticality_check(interp_trans_fcomp, 
               [Verb,Modo,PredV,LArgsV1,SN/sogg,Oggetto/fcomp,ListaSP,CatV],Args,
               Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4, Avv5], Adjs)
        ;
        Xcomp=[],
        grammaticality_check(interp_attiva_tr, 
               [Verb,PredV,LArgsV1,SN/sogg,Oggetto,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4, Avv5], Adjs)
        ;
        Xcomp\=[],
        grammaticality_check(interp_attiva_tr_xcomp, 
               [Verb,PredV,LArgsV1,SN/sogg,Oggetto,Xcomp/TXcomp,ListaSP,CatV],
               Args,Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4, Avv5], Adjs)
        )
      ;
      CatGr=cop,
        (nonvar(Pro),
        (Pro=ci, Verbc=esserci;       
         Pro=there, Verbc=there_be)
         ;
        Pro=[],Verbc=Verb),
      build_listaSP(TipoXcomp,Xcomp,SN,SN1,Oggetto,LSP,CliticoDat,LSP3,LSP0,LSP1,SA,
                    SN0,Xcom,ListaSP),
      grammaticality_check(interp_copul, 
           [Verbc,PredV,LArgsV1,SN0/sogg,Xcom/TipoXcomp,ListaSP,CatV],Args,Adjs_x,Par,
           [Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4, Avv5], Adjs)).


assign_cats([], Nom_mod1, LCats, LCats):-!.
assign_cats(Nom_mod, [], LCats, LCats):-!.
assign_cats([], [], LCats, LCat):-!.

assign_cats(Nom_mod, Nom_mod1, LCats, LCat):-
   Nom_mod\=[],
   Nom_mod1\=[],
   Nom_mod=nome_mod(sn(I, cat(Cat1), Testa, S, Arg, Mods, Adjs)),
   Nom_mod1=nome_mod(sn(I1, cat(Cat2), Test, S1, Arg1, Mods1, Adjs1)),
   (on(nquant, Cat1),
    LCat=Cat2
    ;
    LCat=LCats),!.


assign_gend(Gen, Gen0):-
     var(Gen), Gen=Gen0
     ; 
     nonvar(Gen).
  
assign_num(Num, Num0):-
    var(Num), Num=Num0
     ; 
    nonvar(Num).

assign_type(Tipo,TipoQ):-
    var(Tipo), 
    nonvar(TipoQ), Tipo=TipoQ.

assign_type(Tipo,TipoQ):-
    nonvar(Tipo), Tipo\=[].


composeaggettivi([], M, Adjs, Sam):-!.

composeaggettivi(SA, M, Adjs, Sam):-
    SA=sa(indice(Simb),cat(Cat),Testa,args(Args)),
    (Adjs=[],
    SA=sa(indice(Simb),cat(Cat),Testa,args(Args))
     ;
    Adjs\=[],
    SA=saa(indice(Simb),cat(Cat),Testa,args(Args), adjs(Adjs))
    ),
    Sam=..[M,SA],!.

composeaggettivi(SA, M, Int, Sam):-
    SA=saa(indice(Simb),cat(Cat),Testa,args(Args),adjs(Adjs)),
    (Int\=int([]),
     append_list(Int, Adjs, Adjss),
     SA=saa(indice(Simb),cat(Cat),Testa,args(Args),adjs(Adjss))
     ;
     Adjss=Int,
    SA=saa(indice(Simb),cat(Cat),Testa,args(Args),adjs(Adjss))
    ),
    Sam=..[M,SA],!.

/* modificatore */

modificatore(F,Cues,Det1,[],[],Gen,Num,ListaCat,X) 
   :- 
   (F=[],X=[];F=[P], punct(P),X=[P]),!.


modificatore(F,Cues,Det1,Sam,Nome_mod,Gen,Num,ListaCat,F1) 
   :- 
   premodifiers(F,Adjs/F1),
    Adjs\=[],
    Adjs=sa(indice(Simb),cat(Cat),Testa,args([])),
     nonvar(Testa), Cat\=[], M=mod_r,
     SA=Adjs, Sam=..[M,SA],!.

modificatore(F,Cues,Det1,Sam,Nome_mod,Gen,Num,ListaCat,F2) 
   :- 
%   premodifiers(F,Sam/F1),
   sa(F,Cues,SA,Gen,Num,M,F2),
    SA\=[],
    composeaggettivi(SA, M, Adjs, Sam),!.

modificatore(F,Cues,Det1,Sam,Nom_mod,Gen,Num,Cat,X) 
   :- 
    gr(germanic),
    mod_ant(F,Det1,Nom_mod,Gen1,Num1,F1),
    sa(F1,_,SA,Gen,Num,M,X),
    SA\=[], 
    (var(M); M\=mod_d), 
     Sam=..[M,SA],
    !.

modificatore(F,Cues,Det1,Sam,Nom_mod,Gen,Num,Cat,X) 
    :- 
    (gr(germanic), Cues=[];    
    gr(romance)),
    sa(F,_,SA,Gen,Num,M,F1),
    mod_ant(F1,Det1,Nom_mod,Gen1,Num1,X),    
    (SA\=[], 
     Sam=..[M,SA]
    ;
    Nom_mod\=[], 
    SA=[], Sam=[]
    ;
    Nom_mod\=[], 
    SA\=[], Sam=..[M,SA]
    ),
    !.


modificatore(F,Cues,Det1,
   mod_a(sa(indice(Simb),cat(CatTesta),a(Agg,Gen,Num),args([]))),
   nome_mod(Nom_mod),Gen,Num,Cat,X)
   :-
   F=[W|F1],
   mod_alterato(W,Nome,Agg,Gen,Num),
   gen_sym(sa,Simb), 
   agg_x(_,Agg,Gen,Num),
   Testa=agg(Agg,Gen,Num),
   interp_testa(Testa,CatTesta,LArgs),
   !,
   (
   np_bare(F1,Nome,nome_mod(Nom_mod,Gen,Num),X)
    ;
   Nom_mod=[], X=F1
   ),!.

modificatore(F,_,_,[],[],_,_,_,F):-!.


premodifiers([Verbo|F1],SA/F1) :-
   gr(germanic), onelook([Verbo|F1],premodifiers,q,nil),
   (
    pp_ger(Verbo,Vinf)
    ;
    v(Verbo,Vinf,ger,Tempo,Persona,Numero)
   ),
    cat_gramm(Vinf, C, Sc, [Farg|Args]),
     Testa=a(Verbo,Gen,Numero),
     gen_sym(sa,Simb), 
     on(F/R/Cat, Args),
     SA=sa(indice(Simb),cat(Cat),Testa,args([])),!.

premodifiers([I|F],Int/F):-
  multiplelook([I|F],premodifiers,[d,av,s]),
  onebacklook([I|F],Mc,Y,[d]),
  (
  inten(I), Int=int(I)
  ;
  avv(I,Avv), Avv=avv(pred_avv(Av),tipo(_),duraz(_),  
     config(_)), Int=Avv),
   retraction(inten,_),!.

premodifiers(F,[]/F):-!.

modificatore1(F,Tipo,Sam,Gen,Num,X):-
    (gr(romance);
    Tipo=pr_quantif;
    Tipo=quant),
    sa(F,_,SA,Gen,Num,M,X),
   (SA=[], Sam=[]; Sam=..[M,SA]).

modificatore1(F,Tipo,Sam,Gen,Num,X):-
    gr(romance),
    saa(F,post,SA,TipoAgg,Gen,Num,M,X),
    ((var(TipoAgg);TipoAgg\=pr_quantif),    
    SA=[], Sam=[]; Sam=..[M,SA]).

modificatore1(F,_,[],_,_,F):-!.

/*19 dicembre*/
sa(F,Cues,SA,Gen,Num,M,X):-
    F=[A|Rest],
    gr(english), 
    extract_head(a-A, A, I),
     ( A=that, 
      Cues\=[], on(that, Cues), 
      SA=[], X=F,!
     ;
     (A\=that;Cues=[]),
    (neitherlook(F,sa_sempl,a,[v,x])
     ;
     Rest=[P|_],
     punct(P)),
      sa_semplice(F,SA0,Gen,Num,M,F1),
      altri_sa(F1,SA0, SA,Gen,Num,M,X)
     ),!.

sa(F,Cues,SA,Gen,Num,M,X):-
    gr(romance),
    onelook(F,sa,a,v),
    sa_semplice(F,SA0,Gen,Num,M,F1),
    altri_sa(F1,SA0, SA,Gen,Num,M,X).

sa(F,Cues,[],Gen,Num,M,F):-!.


modificatore2(F,LCat,Cont,[],_,_,X) 
   :- 
   (F=[],X=[];F=[P], punct(P),X=[P]),!.
/* modificatore2  un aggettivo dopo i sintagmi preposizionali che seguono il nome o piuttosto una frase participiale */

modificatore2(F,_,_,MSA,Gen,Num,X) 
   :-
   gr(romance),
   saa(F,post,SA,Tipo,Gen,Num,M,X),
   (var(Tipo);Tipo\=pr_quantif),
   MSA=..[M,SA].


modificatore2(F,LCat,Cont,Mods,_,_,X) 
   :-
    gr(english),
     F=[of|F1], 
     participiale(F1,_,Cont,Mods,X).

modificatore2(F,LCat,Simb,Mods,_,_,X) 
    :-
    genre(legal), 
    participiale(F,LCat,Simb,I,F1),
    I\=[],
    other_modifiers(F1,LCat,Simb,I, Mods,X).

modificatore2(F,_,_,[],_,_,F):-!.

other_modifiers([Punc|F],LCat,Cont, SA0, SA,X) 
   :-
   allconjs(Punc),
   coord_modifier(F,LCat,Cont, SA0, SA,X).

other_modifiers(F,_,_, SA, SA,F):-!.

coord_modifier(F,Cat,_, SA0,adj(mod, saa(indice(Simb),cat(Cat),
              coordina([coord(SA0),coord(SP2)]))),X) 
   :-
   sp(PredV,SP2,F,X),
   gen_sym(saa,Simb).

coord_modifier(F,Cat,Cont, SA0, saa(indice(Simb),cat(Cat),
              coordina([coord(SA0),coord(I)])),X) 
   :-
   participiale(F,Cat,Cont, I,X),
   gen_sym(saa,Simb).

/* sintagma_aggettivale */

saa(F,Pos,SA,Tipo,Gen,Num,M,X) :-
   sa_sempl(F,Pos,SA0,Tipo,Gen,Num,M,F1),
   altri_sa(F1,SA0, SA,Gen,Num,M,X).

altri_sa([Punc|F],SA0, SA,Gen,Num,M,X) 
   :- 
   allconjs(Punc),
   sa_coordina(F,SA0, SA,Gen,Num,M,X).

altri_sa(F,SA, SA,Gen,Num,M,F):-!.

sa_coordina(F,SA0, saa(indice(Simb),cat(Cat),
              coordina([coord(SA0),coord(SA2)])),Gen,Num,_,X)
       :-
           sa_sempl(F,_,SA2,_,Gen,Num,_,X),
           trova_cat_SA(SA0,Cat1),
           trova_cat_SA(SA2,Cat2),
           intersezione(Cat1,Cat2,Catx), Cat = Catx,
           Catx \= [], gen_sym(saa,Simb).

saa_clit(F, [SP|SA], Gen, Num, M, X) :-
  sa_sempl_cl(F, SP, SA, _, Gen, Num, M, X) .

sa_semplice([Agg|F],sa(indice(Simb),cat(Cat),Testa,args([])),Gen,Num,M,F) 
   :-
    onelook([Agg|F],sa_semplice,a,v),
    agg(Agg,T,Gen,Num), 
    gen_sym(sa,Simb),
    Testa=agg(T,Gen,Num),
    interp_testa(Testa,Cat,LArgs),
    (
     LArgs=[]
    ;
     LArgs=[sn/sogg/CatT]
    ),
    (member(deittico,Cat)
    -> 
    M=mod_d
    ;
    M=mod_a).

try_all_args(F3,SP,Cat,LArgsA,ListaSP,Fcomp,Inf,Cinf,X):-
      (
       ( SP=[],
         (on(sp/obl/R/Prep/_,LArgsA)
           ;
          on(sp/ogg2/R/Prep/_,LArgsA)
          ),
         sint_prep(ListaSP,F3,F4)
        ;
        SP\=[],
        ListaSP=[SP]
        ; ListaSP=[], F4=F3),
       (nonvar(Cat),
        member(fattivo,Cat),
        fcomp(Fcomp,F4,F5,nil,nil) 
        ; 
        Fcomp = [], F5=F4),
       (nonvar(LArgsA),
        on(vcomp/R/Prep/[_|_],LArgsA),
        compl_inf_agg(Inf,Cinf,Prep,F5,X,nil,nil) 
        ;
        Inf = [] , Cinf = [], X=F5) 
       ),!.

sa_sempl(F,Pos,saa(indice(Simb),cat(Cat),Testa,args(Args),adjs(Adjs)),agg,Gen,Num,M,X)
    :-
     intens(F,Int1/F1),
     (Pos=post, 
      (gr(english),N=n 
       ;
       gr(romance),N=nil); N=v),
     neitherlook(F1,sa_sempl,a,[N]),
     F1=[A|F2],
     agg(Pos,A,Agg,Gen,Num),
     gen_sym(saa,Simb),
     sint_avv(F2,Tempo,Avv2/F3,Tipo2),
     pred_a(Agg,Cat,LArgsA),
     (member(soggettivo,Cat),M=mod_a; M=mod_r),
     (N=n; N=nil;N=v, \+ nogen_member(deittico,Cat)),
     try_all_args(F3,SP,Cat,LArgsA,ListaSP,Fcomp,Inf,Cinf,X),
     LSP the_list ListaSP,
     Testa=agg(Agg,Gen,Num),
     interp_sa1(Testa,LSP,Inf,Cinf,Cat,Args,Adjs_x),
        Adjs the_list Int1 && Avv2 && Adjs_x .

sa_sempl(F,post,saa(indice(Simb),cat(Cat),Testa,Det,args(Args),adjs(Adjs)),TipoPron,Gen,Num,M,X) :-
      eitherlook(F,sa_sempl,r,nil),
      intens(F,Int1/F1),
      F1=[P|F2],
     pro(P,pr(TipoPron,Part,Pro,Pers,Gen,Num,Caso)), 
     (
      gr(italiano), TipoPron=personale,
        Testa = pr(enfatico,Pro,Pers,Gen,Num,Caso), 
        M=mod_a ,
        spec_pron(Det1,TipoPron,Part,Det), 
        pred_p(pro,Pro,nil,Cat,[]), 
        gen_sym(saenf,Simb), retraction(sa_sempl, r),
       sint_avv(F2,Tempo,Avv2/F3,Tipo2),
      /* lista di SP come argomenti o aggiunti */
      sint_prep(ListaSP,F3,X),
      LSP the_list ListaSP,
      interp_sa2(M,Testa,LSP,Cat,Args,Adjs_x),
      Adjs the_list Int1 && Avv2 && Adjs_x
    ;
     TipoPron=pr_quantif,
     Testa = pr(pr_quantif,Pro,Pers,Ge,Nu,Caso), 
     M=mod_r ,
     spec_pron(Det1,TipoPron,Part,Det),
     Det=spec(def(D),part('-'),mod(Mo),foc(Foc),card(Card),quant(Pro)), 
         Cat=[quantif], 
     gen_sym(sq,Simb), retraction(sa_sempl, r),
     X=F2,
     interp_sa2(M,Testa,LSP,Cat,Args,Adjs_x),
        Adjs the_list Int1 && Avv2 && Adjs_x 
     ).


sa_sempl_cl(F,SP,saa(indice(Simb),cat(Cat),Testa,args(Args),adjs(Adjs)),_,Gen,Num,M,X) 
     :-
      eitherlook(F,sa_sempl,a,v),
      intens(F,Int1/F1),
      F1=[Agg|F2],
      agg(Agg,T,Gen,Num),
      gen_sym(saa,Simb),
      sint_avv(F2,Tempo,Avv2/F3,Tipo2),
      pred_a(T,Cat,LArgsA),
      (member(valutativo,Cat),M=mod_a; M=mod_r),
      \+ nogen_member(deittico,Cat),
      try_all_args(F3,SP,Cat,LArgsA,ListaSP,Fcomp,Inf,Cinf,X),
        Testa=agg(T,Gen,Num),
        interp_sa1(Testa,ListaSP,Inf,Cinf,Cat,Args,Adjs_x),
        Adjs the_list Int1 && Avv2 && Adjs_x.

restorexp([W|F],F,1) :-!.

restorexp([W|F],F1,2) :-
   restorexp(F,F1,1).

restorexp([W|F],F1,3) :-
   restorexp(F,F1,2).

restorexp([W|F],F1,4) :-
   restorexp(F,F1,3).

restorexp([W|F],F1,5) :-
   restorexp(F,F1,4).

restorexp([W|F],F1,6) :-
   restorexp(F,F1,5).


/* lista sintagmi prep. con possibile estraposizione di un pronome relativo */
sint_prep3(F,X,LSP,nil,nil) :-
    (F=[],X=[], LSP=[];F=[P], punct(P),X=[P], LSP=[]),!.

sint_prep3(F,X,LSP,H,nil) :-
          nonvar(H),
          H=sn/Si/Ca/prorel(Prorel,G,N,P,C),
          (gr(english), 
            nonvar(C), 
           (C=obl
           ;
           feature_on(obl, C))
           ;
           \+ gr(english)
            ),
          F=[Prep|F1],
          prepos(Prep),
          SP = sp(prep(Prep,cat(Ca),Mod),sn(indice(Simb),cat(Ca),pr(vbl,vbl,P,G,N,C),
             controllore(Si))),
            gen_sym(sn,Simb),
          sint_prep(ListaSP,F1,X),
          LSP=[SP, ListaSP],!.

sint_prep3(F,X,LSP,H,nil) :-
          nonvar(H),
          H=sp/Prep/Si/Ca/prorel(Prorel,G,N,P,C),
          nonvar(C), 
          feature_on(obl, C),
          SP = sp(prep(Prep,cat(Ca),Mod),sn(indice(Simb),cat(Ca),pr(vbl,vbl,P,G,N,C),
          controllore(Si))),
          gen_sym(sn,Simb),
          sint_prep(ListaSP,F,X),
          LSP=[SP, ListaSP],!.

sint_prep3(F,F,[],H,H) :-!.

/* lista sintagmi preposizionali per trasformare clitici in SP */

sint_prepos(CliticAcc,ListaSP) 
   :-
   nonvarlist(CliticAcc),
   CliticAcc=sn(indice(_), cat(_), cl(rifl_corto, _, _, _, _, _, C), _),
   (var(C), C=[dat];
        nonvar(C),member(acc,C)), 
    ListaSP = sp(prep(a,Ca,Mod),CliticAcc).

sint_prepos(CliticAcc,ListaSP) 
   :-
   nonvarlist(CliticAcc),
   CliticAcc=sn(indice(_), cat(Ca), pr(clitico, _, _, _, _, C), _,_,_,_),
   (var(C), C=[dat];
    nonvar(C),member(obl,C)), 
      ListaSP = sp(prep(to,Ca,Mod),CliticAcc).

sint_prepos(CliticAcc,ListaSP) 
   :-
   nonvarlist(CliticAcc),
   CliticAcc=sn(indice(_), cat(Ca), pr(Tipo, _, _, _, _, _, C), _,_,_,_),
   (var(C), C=[dat];
    nonvar(C),member(obl,C)), 
      ListaSP = sp(prep(to,Ca,Mod),CliticAcc).

sint_prepos(CliticAcc,CliticAcc) 
   :-
   nonvarlist(CliticAcc),
   CliticAcc=.. [sp|_],
   !.

sint_prepos(_,_):-!.

sint_prepos_avv(SP,F,F) :-!.


/* home */

sint_prepos_nom(F,X,LSP) :-
    !,
    (F=[];F=[P], punct(P)),fail,!.

sint_prepos_nom(F,X,SP) :-
  gr(english),
  sn_semplice(adj,Fl,[],[],SN,G,N,Per,C,F,X),
  SN = sn(indice(Symb),cat(Cat),n(PredAvv,_,_),S,
             args(Args),mods(Mods),adjs(Adjs)),
   (member(luogo,Cat), P=to;
    member(oggetto,Cat), P=through;
    member(misura,Cat), P=for),
   SP=sp(prep(P,cat(Cat),Mod),SN).
   
sint_prepos_nom(F,F, []):-!.

pp(Preps,Tipo,Nome,ListaCat,LSP,F,X) :-
    (F=[],X=[], LSP=[];F=[P], punct(P),X=[P], LSP=[]),!.

pp(Preps,Tipo,Nome,ListaCat,SP,F,X) 
   :-
   pp_n(Preps,Tipo,Nome,ListaCat,SP0,Args,Adjs,P,F,F1),
   altri_sp(F1,X,P, Cat, e, SP0, SP).

pp(Preps,Tipo,Nome,ListaCat,SP,F,X) 
   :-
   (F=[both|F1];F=[sia|F1]),
   pp_n(Preps,Tipo,Nome,ListaCat,SP0,Args,Adjs,P,F1,F2),
   altri_sp(F2,X,P, Cat, sia, SP0, SP).

pp(Preps,Tipo,Nome,ListaCat,SP,F,X) 
   :-
   (F=[not|F1];F=[non|F1]),
   pp_n(Preps,Tipo,Nome,ListaCat,SP0,Args,Adjs,P,F1,F2),
   altri_sp(F2,X,P, Cat, non, SP0, SP).

pp(_,_,_,_,[],F,F) :-!.

checkprep(Preps,X):-
    (Preps\=[],
     Preps\=a-mod,
     nonvar(X),
     \+ on(X, Preps) 
     ;
    Preps=[]
     ),
     !.
     
verpreps(Preps, Px, Loc):-
    extract_head(p-Px, X, Loc),
    nonvar(X),
   (nonvar(Preps),
    Preps=a-mod,
    gr(english),
    X\=as,!
    ;
    (onegr(pp_n,romance) ; onegr(pp_n,deutsch)),
    prepart(X, Px, _),
    checkprep(Preps, X),!
    ;
    checkprep(Preps, X)    
    ),
    !.

verpreps(Preps, Px, Loc):-
    (onegr(pp_n,romance) ; onegr(pp_n,deutsch)),
   (
    prepart(X, Px, _),
    findall_poss(S),
    nogen_member(Y-[p-X], S),
    nonvar(X),
    checkprep(Preps, X),!
    ;
    checkprep(Preps, X)    
    ),
    extract_head(p-X, X, Loc),
    !.

pp_n(Preps,Tipo,Nome,ListaCat,sp(prep(Pp,cat(Cat),mod(M)),SN), Args, Adjs, Pp,F,S) 
  :-
  (Tipo=nome; Tipo=nopro; Tipo=pr_quantif; Tipo=quant),
   !,
   F=[Px|Fx],
   verpreps(Preps, Px, Loc),
   prep(Px,Par),
   (list(Par), Par=[P,Art], append([Art],Fx,F1);
    atomic(Par), P=Par, F1=Fx),
   partv(F1,V/F2),
   (stratf(feat),
    interp_preposizione(P, ListaCat)
    ;
    \+ stratf(feat)),  
   sint_n(obl,Fl,[],SN,_,_,_,Caso,F2,S,nil,nil),
   !,
   (trova_t_g_n(SN,T, G, N)
    ;
    SN=sn(I,cat(CatSN),coordina(_))
    ),
    feature_on(obl, Caso),
    (X=P, Pp=P; var(P), Pp=X),
    interp_sp(S,Loc, Fl, Nome, sp(prep(Pp,cat(Cat),mod(M)),SN), ListaCat, Args, Adjs).

pp_ad(F,X,sp(prep(P,cat(Cat),mod(Mod)),SN)) 
   :- 
   F=[Px|Fx],
   (build_sp_spec(F,F2,P, Mod)
   ;
   prep(Px,Par),
   (list(Par), Par=[P,Art], append([Art],Fx,F1);
    atomic(Par), P=Par, F1=Fx),
   partv(F1,V/F2)),
   sn_semplice(adj_pr,Fl,[],[],SN,G,N,Pers,Caso,F2,X),
   !,
   trova_testa_SN(SN,Testa),
    trova_cat_SN(SN,Cat),    
    Testa\=clitico,
    feature_on(obl, Caso),
    extract_heads(F, p-P, J, Loc),
    assertpp(X,sp(prep(P,cat(Cat),mod(Mod)),SN),P,Loc,Fl).

pp_ad(F,F,[]):-!.

check_prep_agree(P, Pc, P, Pc) :- !.

check_prep_agree(P1, Pc1, P, Pc) :-
               nonvar(Pc1),
               nonvar(Pc),
               tipo_agg(T_agg,P1,Lc1),
               tipo_agg(T_ag,P,Lc),
               member(CC,Lc1),
               member(CC,Lc),
               member(CC, Pc1),
               member(CC, Pc).                            

check_prep_agree(P1, Pc1, P, Pc) :-
               (var(Pc1);
                 var(Pc)).                            

interp_preposizione(P, ListaCatN) :-
               tipo_agg(T_agg,P,ListaCatSP),
               poss_agg_sn(T_agg,CatsSP),
               member(CC,CatsSP),
               member(CC,ListaCatN).
check_prep(di).
check_prep(del).
check_prep(della).
check_prep(dello).
check_prep(dei).
check_prep(delle).
check_prep(degli).
                        
/*
sint_prep3(F,X,ListaSP,H,H) :-
        sint_prep(ListaSP,F,X).  
*/

sint_prep(LSP,F,X) :-
    (F=[],X=[], LSP=[];F=[P], punct(P),X=[P], LSP=[]),!.

/* sintagma preposizionale */
sint_prep(LSP,F,F) :-
          wfst(on),
          F=[X|F1],
          (prepos(X), P=X
           ;
           (onegr(sint_prep,romance)
            ;         
            onegr(sint_prep,deutsch)),
           prepart(P, X, _)),
          stackxp(P-Len-Loc-SP),
          find_pos(P, I, Y, AllP),
          I=Loc,
           LSP=[SP],
          Nlen is Len - 1,
          restorexp(F1,F2,Nlen).

sint_prep(SP,F,X) :-
   sp(_,SP0,F,F1),
   SP0=sp(prep(P,cat(Cat),mod(M)),SN),
   altri_sp(F1,X,P, Cat, e, SP0, SP).

sint_prep(SP,F,X) 
   :-
   (F=[both|F1];F=[sia|F1]),
   sp(_,SP0,F1,F2),
   SP0=sp(prep(P,cat(Cat),mod(M)),SN),
   altri_sp(F2,X,P, Cat, sia, SP0, SP).

sint_prep(SP,F,X) 
   :-
   (F=[not|F1];F=[non|F1]),
   sp(_,SP0,F1,F2),
   SP0=sp(prep(P,cat(Cat),mod(M)),SN),
   altri_sp(F2,X,P, Cat, non, SP0, SP).

sint_prep([],F,F) :-!.

altri_sp(F,X,P, Cat, e, SP0, [SP]) 
   :- 
   (F=[e|F1];F=[and|F1]),
   sp_coordinato(F1,X,P, Cat, SP0, SP).

altri_sp(F,X,P, Cat, sia, SP0, [SP]) 
   :- 
   (F=[sia|F1];F=[and|F1]),
   sp_coordinato(F1,X,P, Cat, SP0, SP).

altri_sp(F,X,P, Cat, non, SP0, [SP]) 
   :- 
   (F=[ma|F1];F=[but|F1]),
   sp_coordinato(F1,X,P, Cat, SP0, SP).

altri_sp(F,F,_, _, _, SP, SP) :- !.

sp_coordinato(F,X,P1, Pc1, SP,
   sp(indice(Simb),
      cat(Cat),
      coordina(
         [arg(funzione(Funz),ruolo(Role),SP),
          arg(funzione(Funz),ruolo(Role),SP2)]))) 
   :-
   sp(_,SP2,F,X),
   !,
   SP = sp(prep(P1,cat(Pc1),mod(M1)),SN1),
   SP2 = sp(prep(P,cat(Cat1),mod(M)),SN),
    (stratp(prep),
     check_prep_agree(P1, Pc1, P, Cat1)
     ;
     \+ stratp(prep)
    ),
    gen_sym(spc,Simb).

/*
mod_sp(F,F,mod([])):-
   gr(english),!.
*/

build_sp_spec(F,X,P, Md) :-
   \+ gr(english),
   F=[Px|F1],
   prepart(P,Px,Art),
   F1=[P1|Fx], 
   (P1=Art,X=F1
    ;
    P1\=Art,
    append_list([Art],Fx,X)
    ),
   partic(P1),!.

build_sp_spec(F,X,P, Modd) :-
   mod_spp(F,F1,Mod),
   Mod=..[mod,Mo],
   Mo\=[], 
   Modd=..[mod,Mod],
   F1=[Px|Fx],
   prep(Px,Par),
   (list(Par), Par=[P,Art], 
     append_list([Art],Fx,X)
     ;
     atomic(Par), P=Par, X=Fx).

build_sp_spec(F,X,P, Md) :-
   F=[Px|Fx],
   prep(Px,Par),
   (list(Par), Par=[P,Art],
     Fx=[Pre|_],
       (Pre=Art,F1=Fx
         ;
         Pre\=Art,
         append_list([Art],Fx,F1))
     ;
     atomic(Par), P=Par, F1=Fx),
    !,
   spec_pp(F1,X,Md).

spec_pp(F,X,Md):-
   mod_spp(F,F1,Mod),
   F1=[P1|X],
   prep(P1,P),
   !,
   Mod\=[],
   (Mod=[Mo];atomic(Mod),Mo=Mod), 
   concat(Mo, '_', M),
   concat(M, P1, Moo),
   Md=..[mod,Moo].

spec_pp(F,X,Mod):-
   mod_spp(F,X,Mod).

spec_pp(F,F,Mod):- !.

sp(PredV,sp(prep(P,cat(Cat),Mod),SN),F,S)
   :-
   F=[Px|Fx],
   (
    neitherlook(F,sp,p,[vc,v]),
    extract_heads(F, p-Px, X, Loc)
    ;
    (onegr(sp,romance);onegr(sp,deutsch)),
    verpreps(Preps, Px, Loc)
    ;
    gr(english)),
   build_sp_spec(F,F1,P, Mod),
   partv(F1,V/F2),
   sint_n(adj,Fl,PredV,SN,_,_,_,Caso,F2,S,nil,nil),
   (
   trova_testa_SN(SN,Testa),
   trova_cat_SN(SN,Cat),    
   (
    gr(germanic)
    ;
    Testa\=clitico), 
   feature_on(obl, Caso)
   ;
   SN=sn(I,cat(Cat),coordina(_))
   ),
   feature_on(obl, Caso),
   SP0=sp(prep(P,cat(Cat),Mod),SN),
   assertpp(S,SP0,P,Loc,Fl).


sp(PredV,sp(prep(P,cat(Cat),Mod),cord(SN)),F,S) :- 
   F=[Px|Fx],
   (
    neitherlook(F,sp,p,[vc,v]),
    extract_heads(F, p-Px, X, Loc)
    ;
    (onegr(sp,romance);onegr(sp,deutsch)),
    verpreps(Preps, Px, Loc)
    ;
    gr(english)),
   F=[Pi|F1],   
   prep(Pi,P),
   sint_n(adj,Fl,PredV,SN,_,_,_,Caso,F1,S,nil,nil),
   SN=sn(I,cat(Cat),coordina(_)), Caso=[obl].


sp(PredV,sp(prep(P,cat(Cat),Mod),SN),F,S) :-
   F=[Px|Fx],
   (
    neitherlook(F,sp,p,[vc,v]),
    extract_heads(F, p-Px, X, Loc)
    ;
    (onegr(sp,romance);onegr(sp,deutsch)),
    verpreps(Preps, Px, Loc)
    ;
    gr(english)),
   prep(Px,Par),
   (list(Par), Par=[P,Art], append([Art],Fx,F1);
    atomic(Par), P=Par, F1=Fx),
   sint_n(adj,Fl,PredV,SN,_,_,_,Caso,F1,F2,nil,nil),
   mod_spp(F2,S,Mod),
   trova_cat_SN(SN,Cat),Caso=[obl],
   SP0=sp(prep(P,cat(Cat),Mod),SN),
    assertpp(S,SP0,P,Loc,Fl).


sp(PredV,sp(prep(P,cat(Cat),Mod),SN),F,S) :-
    (onegr(sp,romance);onegr(sp,deutsch)),
   F=[Px|Fx],
   (
    neitherlook(F,sp,p,[vc,v]),
    extract_heads(F, p-Px, X, Loc)
    ;
    (onegr(sp,romance);onegr(sp,deutsch)),
    verpreps(Preps, Px, Loc)
    ),
   prep(Px,Par),
   (list(Par), Par=[P,Art], append([Art],Fx,F1);
    atomic(Par), P=Par, F1=Fx),
     F1=[PrepArt|_],
     prep_articolata(PrepArt,[P1,Art1]),
     complemento_part(P1,PredV,SP,F1,S),
     SP\=[],
     convert_part(PrepArt, SP, SN),
   (
   trova_testa_SN(SN,Testa),
   trova_cat_SN(SN,Cat),    
   (
    gr(germanic)
    ;
    Testa\=clitico), 
   feature_on(obl, Caso)
   ;
   SN=sn(I,cat(Cat),coordina(_))
   ),
   feature_on(obl, Caso),
   SP0=sp(prep(P,cat(Cat),Mod),SN),
   assertpp(S,SP0,P,Loc,Fl),
     !.

adjs_trenn([],[],[]):-!.

adjs_trenn(F,X,Part)
   :-
   gr(germanic),
   trenn(F,X,Part).

adjs_trenn(F,F,[]):-
   gr(romance).

advs_preobj(F,X,Avv3,Avv4)
   :-
   gr(romance),
   sint_avv(F,Tempo,Avv3/F1,Tipo3),
   sint_avv(F1,Tempo,Avv4/X,Tipo4).

advs_preobj(F,X,Avv3,[])
   :-
   gr(germanic),
   sint_avv(F,Tempo,Avv3/X,Tipo3).

adjs_preverb(F,X,Tempo,LSP,Avv,H,H)
   :-
    (F=[],X=[], LSP=[], Avv=[];F=[P], punct(P),X=[P], LSP=[], Avv=[]),!.

adjs_preverb(F,X,Tempo,LSP1,Avv1,H,H)
   :-
   pp_ad(F,F1,PP),
   (PP\=[], LSP1=PP, Avv1=[], X=F1
   ;
   sint_avv(F1,Tempo,Avv/X,Tipo1), 
   Avv1=Avv, LSP1=[]),
   (Avv1\=[],
    (gr(germanic),
     Tipo1\=locat
     ;
     gr(romance))
    ;
    Avv1=[]).


adjs_preverb(F,F,_,[],[],H,H):-!.

adjs_preobj(F,X,PredV, Tempo, CliticoAcc, Avv3, SP, ListaSP2, SA2, Gen1, Num1)
   :-
   gr(romance),
   sint_avv(F,Tempo,Avv3/F1,Tipo3),
   (
   CliticoAcc\=[],
   trova_tipo_SN(CliticoAcc,pr),
   agnt_sa(post,SA2,Gen1,Num1,F1,X)
   ;
   CliticoAcc \= [],
   SP = [], SA2 = [], 
   ListaSP2 = [], X=F1
   ;
   CliticoAcc=[],
   complemento_sp(PredV,SP,F1,F2),
   agnt_sa(post,SA2,Gen1,Num1,F2,F3),
   sint_prep3(F3,X,ListaSP2,nil,nil)
    ).

adjs_preobj(F,X,PredV, Tempo, [], Avv3, [], ListaSP2, [],_,_)
   :-
   gr(germanic),
   sint_avv(F,Tempo,Avv3/F1,Tipo),
   sint_prep3(F1,X,ListaSP2,nil,nil).

adjs_preobj(F,F,_, _, [], [], [], [], [], _, _):-!.

convert_part(Prepart, SP, Oggpart):-
   SP=sp(prep(P, cat(Cat), Mod), 
      sn(indice(I), cat(Cat), Testa, Spec, Args, Mods, Adjs)),
   P=di,
   quant(Prepart,Quant,Part,Gen,Num),
   build_quant_spec(Poss, '0', Quant, Part, M, F, Card, quant, Def1, Spec1),
   Oggpart = sn(indice(I),cat(Cat),Testa,Spec1,Args,Mods,Adjs),
   !.
chose_func_avv(avv).
chose_func_avv(adv).
chose_func_avv(adj).

append_sp([], [], [], [], [], []):-!.

append_sp([], LSP, [], [], LSP, []):-
   LSP\=[],!.

append_sp(LSP, [], [], [], LSP, []):-
   LSP\=[],!.

append_sp([], [], LSP, [], LSP, []):-
   LSP\=[],!.

append_sp([], [], [], Avv1, LSP, Avv):-
   Avv1\=[],
   Avv1 =.. [Funct|_],
   (chose_func_avv(Funct),
     Avv=Avv1, LSP=[]
   ;
    Funct=sn, Avv=adj(temporale,Avv1), LSP=[]
   ;
    Funct=sp, 
    LSP=Avv1,
    Avv=[]),
   !.

append_sp([], LSP1, [], Avv1, LSP, Avv):-
   LSP1\=[], 
   (Avv1\=[],
   Avv1 =.. [Funct|_],
   (chose_func_avv(Funct),
     Avv=Avv1, LSP=LSP1
   ;
    Funct=sp, 
    append([LSP1], [Avv1], LSP),
    Avv=[])
    ;
   Avv1=[], Avv=[], LSP=LSP1
   ),
   !.

append_sp([], [], LSP0, Avv1, LSP, Avv):-
    LSP0\=[], 
   (Avv1\=[],
    Avv1 =.. [Funct|_],
   (
    (Funct=avv;Funct=adv),
     Avv=Avv1, LSP=LSP0
    ;
    Funct=adj, 
    append([LSP0], [Avv1], LSP),
    Avv=[]
   ;
    Funct=sp, 
    append([LSP0], [Avv1], LSP),
    Avv=[])
    ;
   Avv1=[], Avv=[], LSP=LSP0
   ),
   !.

append_sp(LSP0, [], [], Avv1, LSP, Avv):-
    LSP0\=[], 
   (Avv1\=[],
    Avv1 =.. [Funct|_],
   (chose_func_avv(Funct),
     Avv=Avv1, LSP=LSP0
   ;
    Funct=sp, 
    append([LSP0], [Avv1], LSP),
    Avv=[])
    ;
   Avv1=[], Avv=[], LSP=LSP0
   ),
   !.

append_sp(LSP0, LSP1, [], Avv1, LSP, Avv):-
   LSP0\=[], LSP1\=[], 
   (Avv1\=[],
   Avv1 =.. [Funct|_],
   appendavv2(Funct, Avv1, LSP0, LSP1, Avv, LSP)
   ;
   Avv1=[], Avv=[],
   append([LSP0], [LSP1], LSP)
   ),
   !.

append_sp([], LSP0, LSP1, Avv1, LSP, Avv):-
   LSP0\=[], LSP1\=[], 
   (Avv1\=[],
   Avv1 =.. [Funct|_],
   appendavv2(Funct, Avv1, LSP0, LSP1, Avv, LSP)
   ;
   Avv1=[], Avv=[],
   append([LSP0], [LSP1], LSP)
   ),
   !.

append_sp(LSP0, [], LSP1, Avv1, LSP, Avv):-
   LSP0\=[], LSP1\=[], 
   (Avv1\=[],
    Avv1 =.. [Funct|_],
    appendavv2(Funct, Avv1, LSP0, LSP1, Avv, LSP)
   ;
   Avv1=[], Avv=[],
   append([LSP0], [LSP1], LSP)
   ),
   !.

append_sp(LSP0, LSP1, LSP2, Avv1, LSP, Avv):-
   LSP0\=[], LSP1\=[], LSP2\=[], 
   (Avv1\=[],
    Avv1 =.. [Funct|_],
    (chose_func_avv(Funct),
     Avv=Avv1,
    append([LSP0], [LSP1], LSP3),
    append(LSP3, [LSP2], LSP)
    ;
    Funct=sp, 
    append([LSP0], [LSP1], LSP3),
    append(LSP3, [LSP2], LSP4),
    append(LSP4, [Avv1], LSP),
    Avv=[])
   ;
   Avv1=[], Avv=[]),
   !.

appendavv2(Funct, Avv1, LSP0, LSP1, Avv, LSP):-
    chose_func_avv(Funct),
    Avv=Avv1,
    append([LSP0], [LSP1], LSP)
   ;
    Funct=sp, 
    append([LSP0], [LSP1], LSP3),
    append(LSP3, [Avv1], LSP),
    Avv=[],!.


punteggio_ruolo_funzione(tema_eff,sogg,0).
punteggio_ruolo_funzione(actor,obl,1000).
punteggio_ruolo_funzione(tema_emot,sogg,1000).
punteggio_ruolo_funzione(tema,sogg,1000).
punteggio_ruolo_funzione(tema_bound,sogg,30).
punteggio_ruolo_funzione(tema,ogg,1000).

/*
punteggio_ruolo_funzione(Ruolo,Funzione,Punt) :-
     punteggio_ruolo1(Ruolo,Pruolo),
     punteggio_funzione1(Funzione,Pfunzione),
     Punt is Pruolo + Pfunzione.
*/
/* PUNTEGGIO/2 - attribuisce il punteggio di referenzialita` ai possibili
   antecedenti tenendo conto del ruolo tematico, della funzione
   grammaticale e della referenzialita` della categoria
   sintattica dell'antecedente in questione */
punteggio(nessuno,nessuno).
punteggio(esterno(_,_)/_, nessuno).
punteggio(esterno(_,_), nessuno).

punteggio([Sn|Punt]/Livello,[Sn,Sn1]/Punteggio) :-
     scoring(Sn/Livello,Sn/Punt1),
     Punt=[Sn1],
     scoring(Sn1/Livello,Sn1/Punt2),
     Punteggio is Punt1 + Punt2.

punteggio(Ind/Nodo/Funz/Ruolo,Ind/Punteggio) :-
     punteggio_ruolo(Ruolo,Pruolo),
     punteggio_funzione(Funz,Pfunzione),
     nodo(Nodo)::tab_ref::Tab_ref,
     referenzialita(Tab_ref,Referenzialita),
     Punteggio is Pfunzione + Referenzialita * 10 + Pruolo, !.

punteggio(Sn/Livello,Sn/Punteggio) :-
     (f_strutture(Sn,Funz/Ruolo,Nodo) ; Funz=nil,Ruolo=nil),
     (punteggio_ruolo(Ruolo,Pruolo),
     punteggio_funzione(Funz,Pfunzione)),
     nodo(Nodo1)::indice::Sn,
     nodo(Nodo1)::tab_ref::Lista,
     referenzialita(Lista,Referenzialita),
     Punteggio is Pfunzione + Referenzialita * 10 + Pruolo, !.

scoring(Sn/Livello,Sn/Punteggio):-
   punteggio(Sn/Livello,Sn/Punteggio).

/* Le tabelle che seguono provengono da \paolo\pronomi\ppron9.pro */

/* punteggio funzione grammaticale */

punteggio_funzione(sogg,0).
punteggio_funzione(_,100).     


/* punteggio dei ruoli tematici */

punteggio_ruolo(agente,0).
punteggio_ruolo(causante,1).
punteggio_ruolo(esperiente,1).
punteggio_ruolo(paziente,2).
punteggio_ruolo(actor,3).
punteggio_ruolo(benef,2).
punteggio_ruolo(malef,2).
punteggio_ruolo(cibo,7).
punteggio_ruolo(tema_aff,7).
punteggio_ruolo(tema,9).
punteggio_ruolo(comitat,9).
punteggio_ruolo(comitativo,9).
punteggio_ruolo(subj_dis,1).
punteggio_ruolo(specif,1).
punteggio_ruolo(tema_nonaff,3).
punteggio_ruolo(tema_eff,20).
punteggio_ruolo(valutatore,1).
punteggio_ruolo(poss,1).
punteggio_ruolo(creatore,0).
punteggio_ruolo(nil,10).
punteggio_ruolo(arg1,1000).
punteggio_ruolo('?? ',1000).
punteggio_ruolo(Any,1000).

/* tabella di referenzialita degli antecedenti */

referenzialita(implicito,0).
referenzialita(nomequantif,1).
referenzialita(epiteto,2).
referenzialita(controllato,9).
referenzialita(arbitrario,1).
referenzialita(indef,1).


referenzialita([+ref,-pro,-ana,+class],1).         /* nome */
referenzialita([+ref,+pro,-ana,+class],1).         /* deittico */
referenzialita([+ref,-pro,-ana,-me],1).            /* vbl = nome ? */
referenzialita([+ref,-pro,-ana,-class],0).         /* nome proprio */
referenzialita([+ref,+pro,+ana,+me],3).            /* clitico */
referenzialita([+ref,+pro,-ana,+me],3).            /* personale */
referenzialita([+ref,+pro,-ana,-me], 6).           /* pro piccolo */
referenzialita([-ref,+pro,+ana,+me,+subj],9).      /* rifl lungo */
referenzialita([-ref,-pro,+ana,+me,-subj],9).            /* rifl corto */
referenzialita([+ref,+pro,+ana,-me],8).            /* pro grande */
referenzialita([+ref,-pro,-ana,+me],10).   /* ???      pro quantif */ 
referenzialita([+ref,-pro,-ana,+class],1).         /* coordinante = nome ? */
referenzialita([-ref,-pro,+ana,+me],8).            /* pro relativo */
referenzialita([-ref,+pro,+ana,+me,-subj],8).            /* proprio */
referenzialita([+ref,+pro,-ana,+me],7).            /* possessivo */  
referenzialita([+ref, -pro, +ana, +me, -subj],10).  /* riflessivo */

/* graduatoria funzioni grammaticali */
funzione(sogg,0) :-!.
funzione(_,10).


lookrelative(F1):-
   (
    (gr(romance);gr(deutsch)),
     onelook(F1,relative,[p,d,r,w,c],nil)
     ;
     gr(english),
     onelook(F1,relative,[p,w,r,c],nil)
    ),
   retraction(relative, r),
   !.

relative(Cues,_,_,[],nil,_,_,_,_,_,F,X) :-
    (F=[],X=[], LSP=[];F=[P], punct(P),X=[P], LSP=[]),!.

relative(Cues,Tipo,_,R,Restr,Controller,G,N,P,C,F,S) :- 
         wfst(on),
         F=[X|F1],
         stackxp(Q-Len-Loc-SN),
         Q=X,
        find_pos(Q, I, Y, AllP),
        I=Loc,
/*         Nlen is Len - 1, */
         restorexp(F1,S,Len),!.

relative(Cues,_,_,[],nil,_,_,_,_,_,F,F) :-
    F=[Comp|F1], 
    Cues\=[],
    (gr(english),
     Comp=that,
     on(that, Cues)
    ;
    gr(italiano),
    Comp=che,
    on(che, Cues)).

relative(Cues,Tipo,_,R,Restr,Controller,G,N,P,C,F,X) :- 
    F=[','|F1], 
    lookrelative(F1),
    on(Tipo, [nopro, nome]),    
    F1=[Fx|_], 
    extract_head(Y-Fx, Fx, Loc1),
    Loc is Loc1 - 1,
    test_gf,
    (relative1(Tipo,_,R,Restr,Controller,G,N,P,C,F1,X),
     extract_heads(X, _-_, H, L),
     R=[relativa(topic(relativo,sn(indice(I),cat(C),pr(Tip,Pro,P,G,N,Cas),controllore(Cont))),IP)],
     R1=[relativa(topic(relativo,sn(indice(I),cat(C),pr(Tip,Pro,P,G1,N1,Cas),controllore(Cont1))),IP),
        Restr,G1,N1,Cont1],
     assertrel(R,',',Loc,L)
    ;
     X=[','|F1]),
    de_test,
    !. 

relative(Cues,Tipo,Det,R1,Restr,Controller,G,N,P,C,F,X1) :-
    lookrelative(F),
    F=[Fx|_], 
   extract_head(Y-Fx, Fx, Loc1),
   Loc is Loc1 - 1,
    Tipo\=rifl_corto, 
    Tipo\=clitico, 
   (Tipo=nopro,    
    relative1(Tipo,_,R,Restr,Controller,G,N,P,C,F,X)
    ;
    relative2(Tipo,Det,R,Restr,Controller,G,N,P,C,F,X)
    ),
    assertrelative(X, Loc, R, Restr,G1,N1,Cont1),
    (check_agr_relativa(R, G), X1=X, R1=R,!
     ;
     X1=F, R1=[]),
    !.
relative(_,_,_,[],nil,_,_,_,_,_,F,F):-!.


/* RELATIVE - coordinazione */

test_gf:-
   curr_gf(GF),
   (GF=adj_pr,
    assert(minimal(on))
    ;
    GF\=adj_pr),!.

de_test:-
   minimal(on),
   abolish(minimal/1),
   assert(minimal(off)),
   abolish(curr_gf/1)
   ;
   true,!.
   
assertrel(MC,H,Loc,L):-
  (wfst(on), 
  find_pos(H, L, X, AllP),
   Len is L - Loc,
   (stackxp(PH-PLen-L-PMC),
    H=PH,
    Len=Plen, !
    ;
    asserta(stackxp(H-Len-L-MC)))
   ;
   true).

assertrelative(X, Loc, [], Restr,G1,N1,Cont1):-!.
assertrelative(F1, Loc, [Relativa|Relative], Restr,G1,N1,Cont1):-
    R1=[Relativa,Restr,G1,N1,Cont1],
   (F1=[], Z1=[];F1=[Punct], punct(Punct), Z1=[];F1=[Pz|_], Z1=Pz),
    assertrel(R1,Z1,Loc,L),
    assertrelative(Fx, Loc, Relative, Restr,G1,N1,Cont1),
    !. 

check_previous(F, Pos):-
  findall_poss(Si),
  nogen_member(Pos-[Cat-F|_], Si),
  Pos = 0,!.
check_previous(F, Pos):-
  findall_poss(Si),
  nogen_member(Pos-[Cat-F|_], Si),
  nonvar(Pos),
  Po1 is Pos - 1,
  nogen_member(Po1-[X-_|_], Si),
  X=x,!.

relative1(Tipo,_,R,appos,Controller,G,N,P,C,F,X) :- 
   relative_x(Tipo,_,R,appos,Controller,G,N,P,C,F,F1),
     (F1=[','|X]; F1=[Punct|X], check_previous(Punct, Pos), Pos\=0),
          retraction(altri_sn, x).

relative2(Tipo,Det,R,restr,Controller,G,N,P,C,F,X) :-
   relative_x(Tipo,Det,R,restr,Controller,G,N,P,C,F,F1), 
   (F1=[','|X], retraction(altri_sn, x);X=F1).

relative_x(Tipo,Det,[Rel|RestoRel],Restr,Contr,G,N,P,C,F,X):- 
     relativa(Restr,Tipo,Det,Rel,Contr,G,N,P,C,F,F1),
     resto_rel(Restr,Tipo,Det,RestoRel,Contr,G,N,P,C,F1,X).

resto_rel(Restr,Tipo,Det,RestoRel,Contr,G,N,P,C,F,X):-
    (F=[],X=[], RestoRel=[];F=[P], punct(P),X=[P], RestoRel=[]),
    !.

resto_rel(Restr,Tipo,Det,[Rel|RestoRel],Contr,G,N,P,C,[Con|F],X):-
        (Con=e;Con=and),
        relativa(Restr,Tipo,Det,Rel,Contr,G,N,P,C,F,F1),
        resto_rel(Restr,Tipo,Det,RestoRel,Contr,G,N,P,C,F1,X).

resto_rel(Restr,Tipo,Det,[avversativa(Rel)|RestoRel],Contr,G,N,P,C,[Con|F],X):-
       (Con=ma;Con=but),
       relativa(Restr,Tipo,_,Rel,Contr,G,N,P,C,F,F1),
       resto_rel(Restr,Tipo,Det,RestoRel,Contr,G,N,P,C,F1,X).

resto_rel(_,_,_,[],_,_,_,_,_,F,F):-!.

/* RELATIVA */

relativa(Restr,Tipo,Det,R,SimbContr,G,N,P,Cat,F,S) 
            :-
         wfst(on),
         F=[X|F1],
         stackxp(Q-Len-Loc-SN),
         Q=X,
        find_pos(P, I, Y, AllP),
        I=Loc,
         Nlen is Len - 1,
         restorexp(F1,S,Nlen),!.

relativa(Restr,Tipo,Det,relativa(topic(relativo,sn(indice(Simb),cat(Cat),
   pr(pro_grande,pPro,P,G,N,C),controllore(SimbContr))),Inf),
    SimbContr,G,N,P,Cat,F,X) 
       :-
        comp(F,Com/F1),
       (gr(romance),
        Com=com(da);
        gr(english),
        Com=com(to)),
        gen_sym(sn,Simb),
        assert_infinitive(Inf,Controllo,F1,X,sn/Simb/Cat/prorel(pro,G,N,P,C)).

relativa(Restr,Tipo,Det,relativa(topic(relativo,sn(indice(Simb),cat(Cat),
   pr(pro_grande,pPro,P,G,N,C),controllore(SimbContr))),R),
   SimbContr,G,N,P,Cat,F,X) 
      :-
      (gr(romance);gr(english)),
      comp(F,Com/F1),
      Com \= [], 
      gen_sym(sn,Simb),
      assert_cp1(CStrCp1, R, F1,X,sn/Simb/Cat/prorel(pro,G,N,P,C)).

relativa(Restr,Tipo,Det,relativa(topic(relativo,sn(indice(Simb),cat(Cat),
  pr(prorel,Prorel,_,G,N,C),controllore(SimbContr))),R),
   SimbContr,G,N,P,Cat,F,X) 
            :-
            pron_relativo(G,N, C, Prorel,F,F1),
            quant_art(F1,_,G,N,_,F2),
            F2=[F3|F4],
            prorel(F3,Prorel,G,N,C),
              gen_sym(sn,Simb),
            assert_cp1(CStrCp1, R, F4,X,sn/Simb/Cat/prorel(Prorel,G,N,_,C)).
/* art_det ma bisognera' escludere 'lo' e 'gli' */

relativa(Restr,Tipo,Det,relativa(topic(relativo,sn(indice(Simb),cat(CatN),
  pr(prorel,Prorel,_,G,N,[obl]),controllore(SimbContr))),R),
   SimbContr,G,N,P,CatN,F,X) 
             :-
               (gr(romance), triplelook(F,relativa,p,d,r)
                ;
                \+  gr(romance), doublelook(F,relativa,p,[w,r,d],nil)),
               F=[F1|F2],    
               prep(F1,Prep),
               (gr(romance),
                   (Prep=[A],
                     F22=F2;
                     Prep=[A|Art], Art\=[],
                     append(Art,F2, F22)),
                     quant_art(F22,_,G,N,_,F3)
                ;
                \+  gr(romance), F3=F2
               ),
               F3=[F4|F5],
               prorel(F4,Prorel,G,N,C),
                 gen_sym(sn,Simb),
          assert_cp1(CStrCp1, R,F5,X,sp/Prep/Simb/CatN/prorel(Prorel,G,N,_,[obl])).

relativa(Restr,Tipo,Det,relativa(topic(relativo,sn(indice(Simb),cat(Cat),
  pr(prorel,Prorel,P,G,N,C),controllore(SimbContr))),R),
   SimbContr,G,N,P,Cat,F,X) 
             :-
                   pron_relativo(G,N, C, Prorel,F,F1),
                   (
                   Prorel=which, CatN=[oggetto,astratto,stato], C=[acc,nom]
                   ;
                   Prorel=whom, CatN=[umano], feature_on(acc, C)
                   ;
                   Prorel=who, CatN=[umano], feature_on(nom, C)
                   ;
                   (Prorel=dove;Prorel=where), CatN=[luogo]
                   ;
                   (Prorel=quando;Prorel=when), CatN=[tempo]
                    ),
                   (C=obl, gen_sym(sp,Simb), St=sp, 
                   Extra=St/in/Simb/CatN/prorel(Prorel,G,N,P,C)
                   ;
                   C\=obl, gen_sym(sn,Simb), St=sn, 
                   Extra=St/Simb/CatN/prorel(Prorel,G,N,P,C)),
                   assert_cp1(CStrCp1, R,F1,X,Extra).

relativa(restr,Tipo,Det,relativa(topic(relativo,sn(indice(Simb),cat(Cat),
   pr(pro_grande,pPro,P,G,N,C),controllore(SimbContr))),R),
   SimbContr,G,N,P,Cat,F,X) 
       :-
     comp_less(on),
     gr(english), 
     \+ nogen_member(tempo,Cat),
     Tipo=nome,
     Det=spec(Def, Part, Mod, Foc, Card, Quant),
     Def=def('+'),
     gen_sym(sn,Simb),
     assert_cp1(CStrCp1, R,F,X,sn/Simb/Cat/prorel(pro,G,N,P,acc)).

pron_relativo(G, N, C, Prorel,F,Y) 
   :-
   gr(romance),
   (quant_art(F,_,G,N,_,[P|Y]),
    prorel(P,Prorel,_,_,N)
    ;
    F=[P|Y],
    prorel(P,Prorel,_,_,N),
    (
     (Prorel=dove;Prorel=where;Prorel=when), 
      C=obl
      ;
      C=acc)    
    ).

pron_relativo(G, _, C, Prorel,[F|X],X) 
   :-
   gr(english),
   prorel(F,Prorel,_,_,C).

pron_relativo(G, N, C, Prorel,[F|X],X) 
   :-
   gr(deutsch),
   prorel(F,Prorel,G,N,C).

check_agr_relativa(R, G):-
     gr(italiano), 
     R=.. [relativa,Top|Resto],
     trova_t_g_n(SN,T, G1, N),
     G=G1,!.

check_agr_relativa(R, G):-
     gr(italiano), 
     R=[Top|_],
     Top=.. [relativa,Top1|Resto],
     Resto=[IP],
     arg(2,IP, V),
     V=.. [v,Ve,T,Sub,M,Te,P,N,G1|_],
     G=G1,!.

check_agr_relativa(R, G):-
     \+ gr(italiano), !.


i_double_bar(ip(Soggetto, IOneBar), Subjective,
   [LSP0, SA1, Avv1, Voc, Sub_n],Voce, 
   Verbo,Aux,CatG,SubCatIn, SubCatOut, Supporto,
   cat(CatV), args([]), adjs(Adjs),F,X,H0) 
   :-
  (F=[],X=[];F=[P], punct(P),X=[P]),
  create_adjs(LSP0, Adj),
  Adjs the_list Avv1 && Sub_n && Voc && Adj && SA1,
  !.
   
/* quando ho preso il verbo non ho problemi: who saw john?
   quando ho preso un aux invece ho due possibilità:
   i. that has a donkey
   ii. what did john say
   iii. who did john see
   nel primo caso devo impedire che prenda a donkey nella posizione
   del soggetto; nel secondo caso devo fare il contrario, cioè devo
   impedire che prenda la variabile */

i_double_bar(ip(Soggetto, IOneBar), Subjective,
   [LSP0, SA1, Avv1, Voc, Sub_n],Voce, 
   Verbo,Aux,CatG,SubCatIn, SubCatOut, Supporto,
   cat(CatV), args(Args), adjs(Adjs),F,X,H0) 
   :-
   (var(Verbo),Aux=[],
    soggetto(SN, Gen, Num, Pers, F, F1,H0,H)
    ;
    Aux\=[],
    subject_lh(F, H0, Aux),
    soggetto(SN, Gen, Num, Pers, F, F1,H0,H),
    (F1\=[A];
     assert(minimal(on)),
     soggetto(SN, Gen, Num, Pers, F, F1,H0,H)),
     abolish(minimal/1),dynamic(minimal/1)
    ;
    (nonvar(Verbo)
     ;
     Aux\=[]),
    subject(SubCatIn, SN, Gen, Num, Pers, F, F1,H0,H),    
    F1\=[A]
   ),
   Verbo=v(V, Modo, Tempo, Pers, Num,  Gen),
   negaz(F1,Ne/F2),
   (Ne=[]; Ne\=[], Neg=Ne),
   adjs_preverb(F2,F3,Tempo,LSP1,Avv2,H,H1),
   parent(Par,F3,F4),
   (Par=[], Par1=[]
    ;
    Par\=[],
    Par=subj_dom(I, Vi, S, C, args([NewArgs]), adjs(Adj)),
    Par1=[],
    Subjective=Par
    ;
    Par\=[], Par1=Par),
   ip_one_bar([sn(SN, Gen, Num, Pers),Voce,
						LSP0, LSP1, SA1, Avv1, Avv2, 
      Voc, Neg, parent(Par1), Sub_n], 
      Verbo,Aux,CatG,SubCatIn, SubCatOut,Supporto, cat(CatV), 
      args(Args), adjs(Adjs), F4,X,H1).


/* strutture impersonali inverse: le montagne si vedono */
focal_cp2(ip(indice(Simb), v(Verbo, Voce, SubCatOut, Modo, Tempo, 
         Pers, Num, Gen), Supporto, cat(CatV), args(Args), 
         adjs(Adjs)),F,X,H0) 
   :-
   gr(romance),
   oggetto(SN1, sn, _, _, _, F,F1,nil, nil),
   sint_prep3(F1,F2,LSP0, nil, nil),
   agnt_sa(pre,SA1, Gen, Num,F2,F3),
   (SA1 = [],
   !
   ;
   SA1 = saa(I, cat(C), T, Ar, Ad),
   \+ on(C, [quantif, deittico])
   ),
   sint_prep3(F3,F4,LSP1, nil, nil),
   sint_avv(F4,Tempo,Avv1/F5,Tipo1),
   vocativo(Voc,F5,F6),
   sint_avv(F6,Tempo,Avv2/F7,Tipo2),
   parent(Par,F7,F8),
   negaz(F8,Neg/F9),
   gen_sym(f, Simb),
   F9=[G|Resto],   
   pro(G,cl(TipoPron, Part, Pro, Pers, Gen, Num, Caso)),
   Pro = si,
   SN = sn(indice(Ind), cat([umano]), cl(pro_imp, _, si, Pers, G, Num, [nom]), 
            spec(def(-),part(+)), args(_), mods(_), adjs(_)),
   gen_sym(sn, Ind),
   gen_sym(f, Simb),
   Voce = passiva,
   retraction(focal_cp2, v),
   verbal_phrase_imp(
      [sn(SN1, Gen, Num1, Pers), 
      sn(SN, G, Num, Pers), 
      LSP0, LSP1, SA1, Avv1, Avv2, Voc, Neg, 
      parent(Par)
      ], 
      v(Verbo, Modo, Tempo, Pers, Num,Gen), 
      SubCatOut, Supporto,cat(CatV), 
      args(Args),adjs(Adjs),Resto,X, H0).


assert_cp3(cp(CStrIp), ip(indice(Simb),v(Verbo, SubCatOut, Modo, Tempo, Pers, Num, Gen), 
      Supporto, cat(CatV), 
      args(Args),adjs(Adjs)), F,X,H0) 
   :-
   gr(romance), 
   complemento_inf(Svinf, Controllo, F,F4,nil, nil),
   vocativo(Voc,F4,F5),
   negaz(F5,Neg/F6),
   sint_avv(F6,Tempo,Avv2/F7,Tipo2),
   parent(Par,F7,F8),
   gen_sym(f, Simb),
   verbal_phrase_infinit(
      [svinf(Svinf, Controllo), 
      [],[],[],[],Avv2, Voc, Neg, parent(Par)
      ], 
      v(Verbo, Modo, Tempo, Pers, Num, Gen), 
      SubCatOut, Supporto,cat(CatV), 
      args(Args), adjs(Adjs),F8,X, H0).

assert_cp3(cp(CStrIp), ip(indice(Simb),v(Verbo, SubCatOut, Modo, Tempo, Pers, Num, Gen), 
      Supporto, cat(CatV), 
      args(Args),adjs(Adjs)), F,X,H0) 
   :-
   gr(english), 
   gerundiva_sempl(Svinf,F,F4),
   vocativo(Voc,F4,F5),
   negaz(F5,Neg/F6),
   sint_avv(F6,Tempo,Avv2/F7,Tipo2),
   parent(Par,F7,F8),
   gen_sym(f, Simb),
   verbal_phrase_infinit(
      [svinf(Svinf, Controllo), 
      Avv2, Voc, Neg, parent(Par)
      ], 
      v(Verbo, Modo, Tempo, Pers, Num, Gen), 
      SubCatOut, Supporto,cat(CatV), 
      args(Args), adjs(Adjs),F8,X, H0).

assert_pres([LSP0, LSP1, SA1, Avv1, Voc, _], 
   v(Verbo, Modo, Tempo, Pers, Num, Gen),
   SubCatOut,Supporto, cat(CatV), 
   args(Args), adjs(Adjs), F,X,H0) 
   :-
   negaz(F,Neg/F1),
   sint_avv(F1,Tempo,Avv2/F2,Tipo2),
   parent(Par,F2,F3),
   gen_sym(f, Simb),
   verbal_phrase_pres(
      [LSP0, LSP1, SA1, Avv1, Avv2, Voc, Neg, parent(Par)], 
      v(Verbo, Modo, Tempo, Pers, Num,  Gen), 
      SubCatOut, Supporto, cat(CatV), 
      args(Args), adjs(Adjs), F3,F4,H0).

verbal_phrase_pres([LSP0,LSP1,SA1,Avv1,Avv2,Voc,Neg,parent(Par)],
                          v(Verbo,Modo,Tempo,Pers,Num,Gen),
                          LArgsV1,
                          Supporto,
                          cat(CatV),
                          args(Args),
                          adjs(Adjs),F,X,H1) 

          :-
          (
           inter(F, interj(No)/X), 
          (SN2=sn(indice(Ind),cat(Li),n(No,fem,sing),spec(S),args(Ar),mods(Mo),adjs(A)), 
          pred_n(No,nil,Li,LArgsN),
          gen_sym(sn,Ind),
          member(exort,Li),No=attenzione,
          Verbo=fare,Modo=imper,Tempo=pres,Pers=2,Num=plur,
          cat_gramm(Verbo, trans, CatV, LArgsV), 
          subcat_on([PrimoArg|LArgs], LArgsV),
          PrimoArg=sn/sogg/_/Ca,
          Topic=obj,
          SN1=sn(indice(In),cat(_),pr(pro_picc,pro,_,2,_,plur,_),
                spec(def('-')),controllore(_)),      
          Subj=subj,gen_sym(sn,In)
         ;
          pred_n(No,nil,Li,LArgsN),
          member(salut,Li),
          Verbo=augurare,Modo=ind,Tempo=pres,Pers=3,   
          cat_gramm(Verbo,trans,CatV,LArgsV), 
          SN2=sn(indice(Ind),cat(ListaCat),n(No,G,sing),spec(def('+')),args(Ar),mods(Mo),adjs(A)),
          SN1=sn(indice(In),cat(_),pr(pro_picc,pro,_,_,_,_,_),spec(def('-')),controllore(_)),
          gen_sym(sn,Ind), Subj=subj,Topic=obj)
          ),
          gen_sym(f,Simb),
          sint_prep(ListaSP3,F,X),
          Supporto=supporto(S), 
          ListaSP the_list LSP0 && LSP1 && ListaSP3,
          grammaticality_check(interp_attiva_tr, 
               [Verbo,LArgsV,LArgsV1,SN1/Subj,SN2/Topic,ListaSP,CatV],
               Args,Adjs_x,Par,[Neg, Voc, Avv1, Avv2], Adjs).


/* SINTAGMA NOMINALE */

sint_n(GF,Loc,VSub,SN,G,N,P,C,F,S,H,H) :-
         wfst(on),
         F=[X|F1],
         stackxp(Q-Len-Loc-SN),
         Q=X,
        find_pos(P, I, Y, AllP),
        I=Loc,
         Nlen is Len - 1,
         restorexp(F1,S,Nlen),!.

sint_n(GF,Fl,VSub,SN,G,N,P,C,F,X,H,H) :-
       multiplelook(F,sn,[a,n,d,r]),
/*        (
     strata(arg), */
          extr_args(VSub, Cues),
/*,!
         ;
        true
        ), */
         sn_x(GF,Fl,Cues,SN,G,N,P,C,F,X),!.
 
/* estraposizione di pronome relativo */
sint_n(GF,_,[],sn(indice(Simb),cat(X),prorel(Prorel,G,N,P,C)),
   G,N,P,C,F,F,H,nil) :- 
   nonvar(H),
   H=sn/prorel(Prorel,G,N,P,C),
   gen_sym(sn,Simb),!.

sn_x(GF,Fl,Cues,Nom,G,N,P,C,F,X) :- 
    sn_semplice(GF,Fl,Cues,[],FirstNom,G,N,P,C,F,F1),
    resto_nom(RestoNom,G,_,P,C,H,H,FirstNom,F1,X),
   (RestoNom=[] 
        -> Nom=FirstNom
    ;   Nom = RestoNom).

extr_args([], Cues):- !.

extr_args(pred_v(_,_,_,ListArgs), Cues):-
    ( 
    (
     on(f/fcomp/prop/_, ListArgs),
       (gr(english),Cues=[that];
        gr(italiano),Cues=[che]),!
    ;
    select_subcat(f/fcomp/prop/_, pred_v(_,_,_,ListArgs), PredOut),
       (gr(english),Cues=[that];
        gr(italiano),Cues=[che]),!
    ;
     on(f/fcomp/propint/_, ListArgs),
       (gr(english),Cues=[that];
        gr(italiano),Cues=[che]),!
    ;
     on(acomp/prop/_, ListArgs),
       (gr(english),Cues=a-mod;
        gr(italiano),Cues=a-mod),!
    ;
     on(sp/ogg2/_/Preps/_, ListArgs),
     (\+ atomic(Preps), Cues=Preps;
       Cues=[Preps]),!
    ;
     on(sp/obl/_/Preps/_, ListArgs),
     (\+ atomic(Preps), Cues=Preps;
       Cues=[Preps]),!
    ;
     on(pcomp/locativo/_, ListArgs),
       (gr(english),Cues=[in,on,at,by,over,above,below];
        gr(italiano),Cues=[in,su,a,da,sopra,su,sotto]),!
    ),!
    ;
    select_subcat(pcomp/locativo/_, pred_v(_,_,_,ListArgs), PredOut),
       (gr(english),Cues=[in,on,at,by,over,above,below];
        gr(italiano),Cues=[in,su,a,da,sopra,su,sotto])
    ),!.

extr_args(PredV, []):- !.

resto_nom(RestoNom,G,N,P,C,H,H,Nom0,F,X) :-
         (  
         (F=[','|F1] ; F=[e|F1]; F=[and|F1]),
          sn_coordinati(coo,RestoNom,_,_,_,_,Nom0,F1,X)
           ; 
         (F=[or|F1]; F=[o|F1]; F=[oppure|F1]),
          sn_coordinati(dis,RestoNom,_,_,_,_,Nom0,F1,X)
         ).

resto_nom(_,G,N,P,C,H,H,_,F,F):-!. 

/* chiamata per sn coordinati di cui si vuole controllare subito la
campatibilita semantica */

coord_sn(coo,T,Scat,SN,G,N,P,C,F,X) 
    :-
    onelook(F,coord_sn,[n,d,a],nil),
    retraction(coord_sn, e),
    sn_semplice(coord,Fl,[],Scat,SN,G,N,P,C,F,X),
    trova_tipo_SN(SN,T1), T=T1,
    (lookpunct(X, _);onelook(X,coord_sn,v,nil);onelook(X,coord_sn,d,nil)).
%    onelook(X,coord_sn,x,nil). 

coord_sn(dis,T,Scat,SN,G,N,P,C,F,X) 
    :-
    onelook(F,coord_sn,[n,d,a],nil),
    retraction(coord_sn, e),
    sn_semplice(coord,Fl,[],[],SN,G,N,P,C,F,X),
    trova_tipo_SN(SN,T1), T=T1,
    (lookpunct(X, _);onelook(X,coord_sn,v,nil)).
%    onelook(X,coord_sn,x,nil). 

check_compat([],LCat):-!.   
check_compat(Ccats,[]):-!.   
check_compat(Ccats,LCat):-
   !, 
   member(CC, Ccats),
   member(CC, LCat).

sn_semplice(GF,Locc,Cues,CCats,SN,Gen,Num,Pers,Caso,F,X)
   :-
    (F=[],X=[], SN=[];F=[P], punct(P),X=[P], SN=[]),!.

/* NOMI COMUNI E PROPRI */
sn_semplice(GF,Locc,Cues,CCats,sn(indice(Ind),cat(LCat),Testa,Det,
   args(Args),mods(Mods),adjs(Adjs)),Gen,Num,Pers,Caso,F,F2)
   :-
   F=[Px|Fx],
   extract_heads(F, Y-Px,Head,Loc),
   np_double_bar(GF,Cues,CCats,Stem,Ind,Det,Poss,Mod0,Mod1,Nom_mod,Nom_mod1,
             Testa,Gen,Num,Pers,LCat,Caso,Tipo,Nome,LArgsN,F,F1),
   (F1=[], Z1=[];F1=[Punct], punct(Punct), Z1=[];F1=[Pz|_], Z1=F1),
   extract_heads(Z1, _-Pz, _, Loc1), 
   control_np(Testa,Mod0,Mod1,Nom_mod,LCat,Adjmod),
   SN=sn(indice(Ind),cat(LCat),Testa,Det,
   args([]),mods([]),adjs(Adjmod)),
   assertz(curr_gf(GF)),
   np_bar(Cues,Stem,Testa,Tipo,Det,Gen,Num,Pers,LArgsN,LCat,Nom_mo,
         Appos,Subord_comp,Mod2,ListaSP,R,TipoR,Ind,Inf,Cinf,Mod3,Loc2,F1,F2),
   interpret_np(Poss,ListaSP,LArgsN,Testa,Adjmod,Mod2,Mod3,Inf,Cinf,LCat,Nom_mod1,
    TipoR,R,Appos,Nom_mo,Subord_comp,SP1, Args, Mods, Adjs),
   SN1=sn(indice(Ind),cat(LCat),Testa,Det,
   args(Args),mods(Mods),adjs(Adjs)),
   assertnp(F2,SN,H,Loc,Loc1),   
   (Loc1=Loc2, Locc=Loc1; Locc=Loc2),
   (Args=[], Mods=[], Adjs=[]
     ;
    assertnp(F2,SN1,H,Loc,Locc)),!.

/* ho spostato assertnp/4 dopo np_bar per fargli prendere SN1 con i modificatori piuttosto che SN senza modificatori; ho anche introdotto wsft(on) nelle strategie sintattiche per poter avvisare il minimal attachment che se si trova in posizione soggetto non lo deve applicare */


interpret_np(Poss,ListaSP,LArgsN,Testa,Adjmod,Mod2,Mod3,Inf,Cinf,LCat,Nom_mod1,TipoR,R,Appos,Nom_mo,Subord_comp,SP1, Args, Mods, Adjs)
   :-
   LSP the_list Poss && ListaSP,
   interp_sn(LArgsN,Testa,Adjmod,Mod2,LSP,Inf,Cinf,LCat,Args,Adjs_x,R),
   Mods012 the_list Nom_mod1 && Mod2 && Mod3,
   ( 
   Mods012 = [],
   ( TipoR = restr, Adjs_Rx = Adjs_x , Modif = R ;
            TipoR = nil, Adjs_Rx = Adjs_x , Modif = [] ;
            TipoR = appos, Adjs_Rx the_list R && Adjs_x, Modif = [] )
    ;
   Mods012 \= [],
   ( TipoR = restr, Adjs_Rx the_list R && Adjs_x, Modif = [] ;
            TipoR = nil, Adjs_Rx = Adjs_x , Modif = [] ;
            TipoR = appos, Adjs_Rx the_list R && Adjs_x, Modif = [] )),
   Adjs1 the_list Appos && Nom_mo && Subord_comp,
   Mods the_list Modif && Mods012 && Adjs_Rx,
   Adjs=Adjs1.

np_bar(Cues,Stem,Nome,Tipo,Det,Gen,Num,Pers,LArgsN,LCat,Nom_mo,Appos,[],Mod1,LSP,[],TipoR,Simb,[],[],[],Loc,F,F5)
   :-
   minimal(on),
   mod_post(Tipo,Nom_mo,Gen,Num,LCat,F,F1),
%   apposizione(Cues, Appos, LCat,F1,F2),
   modificatore1(F1,Tipo,Mod1,Gen,Num,F4),
   (F4\=[], F4=[P|_],
    check_prep(P),
    pp(Cues,Tipo,Nome,LCat,LSP,F4,F5)
    ;
    F5=F4, LSP=[]),
   !.

np_bar(Cues,Stem,Nome,Tipo,Det,Gen,Num,Pers,LArgsN,LCat,[],[],[],[],[],[],TipoR,Simb,[],[],[],Loc,[],[])
   :-
   !.
np_bar(Cues,Stem,Nome,Tipo,Det,Gen,Num,Pers,LArgsN,LCat,[],[],[],[],[],[],TipoR,Simb,[],[],[],Loc,[A],[A])
   :-
   (A='.';A='!';A='?'),
   !.
/*Adjs_mod da dove arriva??*/
np_bar(Cues,Stem,Nome,Tipo,Det,Gen,Num,Pers,LArgsN,LCat,Nom_mo,Appos,Sub_comp,Mod1,LSP,R,TipoR,Simb,Inf,Cinf,Mod3,Loc,F,X)
   :-
   mod_post(Tipo,Nom_mo,Gen,Num,LCat,F,F1),
   apposizione(Tipo,Cues,Appos, LCat,F1,F2),
   sn_subordinato(Tipo,Sub_comp,F2,F3),
   modificatore1(F3,Tipo,Mod1,Gen,Num,F4),
   pp(Cues,Tipo,Nome,LCat,LSP0,F4,F5),
   (
    LSP0\=[],
    pp(Cues,Tipo,Nome,LCat,LSP1,F5,F6),
    LSP1\=[],
     append([LSP0], [LSP1], LSP)
    ;
    LSP=LSP0, F6=F5
    ),
   relative(Cues,Tipo,Det,R,TipoR,Simb,Gen,Num,Pers,LCat,F6,F7),
   ( 
   nonvar(LArgsN),
   on(vcomp/_/_/[_|_],LArgsN),
   complemento_inf(Inf,Cinf,F7,F8,nil,nil)
   ;
   Inf = [] , Cinf = [], F8=F7
   ),
   modificatore2(F8,LCat,Simb,Mod3,Gen,Num,X),
  (X=[], findall_pos(_, [Loc|_])
   ;
    X=[A],(A='.';A='!';A='?'),
    findall_pos(_, [Loc|_])
    ;
    X=[X1|X2],
    extract_heads(X2,_-X1, _, Loc)).

enclitico(SP,F) :-
     pro(F,cl(enclitico,Part,Pro,G,N,P,Caso)),
     SP = sp(prep(a,CatPro,Mod),SN),
        SN = sn(indice(Simb),cat(CatPro),
                 cl(TipoPron,Part,Pro,G,N,P,[dat]),
                     spec(def('+'))),
       gen_sym(sn,Simb),retraction(enclitico, _).


sn_int(F/X,sn_int(indice(Simb),cat(Cat),Testa,Det,
   args(Args),mods(Mods),adjs(Adjs)),
   Gen,Num,Pers,Caso,Cat,Simb) :-
      F=[F1|F2],
      spec_int(F1,Det,Gen,Num),
      possessivo(F2/F3,Poss,Gen,Num),
      modificatore(F3,[],[],Mod0,[],Gen,Num,Cat,F4),
      F4=[F5|F6],      
      testa(F5,Testa,Gen,Num,Pers,Caso,Tipo),
      gen_sym(sn,Simb),
      Testa=n(Nome,Gen,Num),
      pred_n(Nome,Stem,Cat,LArgsN),
   np_bar([],Stem,Testa,Tipo,Det,Gen,Num,Pers,LArgsN,Cat,Nom_mo,
            Appos,Subord_comp,Mod2,ListaSP,R,TipoR,Ind,Inf,Cinf,Mod3,Loc,F6,X),
   interpret_np(Poss,ListaSP,LArgsN,Testa,Mod0,Mod2,Mod3,Inf,Cinf,	
       	LCat,Nom_mod1,TipoR,R,Appos,Nom_mo,Subord_comp,SP1,Args, Mods, Adjs).

/* COORDINAZIONE DI SN */

sn_coordinati(Type,sn(indice(Simb),cat(Cat),
              coordina([arg(funzione(Funz),ruolo(Role),SN),
              arg(funzione(Funz),ruolo(Role),SN2)|AltriSN])),_,plur,_,[_],SN,F,X) 
           :-
           trova_cat_SN(SN,Cat1),
          trova_tipo_SN(SN,T),
          coord_sn(Type,T,Cat1,SN2,_,_,_,_,F,F1),
           !,
           trova_testa_SN(SN,T1), 
            trova_testa_SN(SN2,T2), 
            (
/*            genre(legal),  */
             T1=council, 
             T2\=state
             ;
             T1\=council),
             trova_cat_SN(SN2,Cat2),
             Cat1 \= [],Cat2 \= [],
             intersezione(Cat1,Cat2,Catx), 
             (Type=coo, Catx \= []
              ;
              Type=dis),
             \+ (on(coll, Cat1), on(ind, Cat2)), 
             \+ (on(role, Cat1), on(nat, Cat2)), 
             gen_sym(sn,Simb),
           append(Cat1, Cat2, Cat3), Cat=Cat3,
         altri_sn(Cat3,Funz/Role,AltriSN,Cat3,F1,X),
           !.

altri_sn(Scat,Funz/Role,[arg(funzione(Funz),ruolo(Role),SN)|AltriSN],Cat1,F,X) 
   :- 
   F=[Punc|F2],
   allconjs(Punc),
   (gr(english),
          trova_tipo_SN(SN,T),
    coord_sn(Type,T,Scat,SN,G,N,P,C,F2,F6)
    ;
    gr(romance),
    quant_double_bar(foc(F),Def,Q,Part,mod(M),Gen2,Num,Caso,F2,F3),
    F3=[Tes|F4],
    testa(Tes,Testa,Gen,Num,Pers,Caso,Tipo),
    modificatore(F4,[],[],Mod1,Nom_mod,Gen,Num,ListaCat,F5),
    pp_n(_,_,ListaCat,LSP, Args, Adjs,_,_,F5,F6),
   (
   Testa=n(Nome,Gen,Num),
   pred_n(Nome,Stem,LCat,LArgsN),
   Det=spec(def(Def),part(Part),mod(M),foc(F),card(Card),Q) 
   ;
   Testa=npro(Nome,Gen,Num),
   pred_np(Nome,Stem,LCat,LArgsN),
   Det=spec(def(Def),part(Part),mod(M),foc(F),card(Card),Q)
   ),
   gen_sym(sn,Ind), 
   Adjs_x the_list Mod1 && LSP && Nom_mod && Adjs
   ),
   SN=sn(indice(Ind),cat(LCat),Testa,Det,
             args(Args),mods(Mods),adjs(Adjs_x)), 
   (LCat \= [], 
   intersezione(Cat1,LCat,Cat), 
   (Type=coo, Cat \= []
    ;
    Type=dis)
    ;
    LCat = [], Cat=Cat1),
   altri_sn(Scat,Funz/Role,AltriSN,Cat,F6,X).

altri_sn(SCat,Funz/Role,[arg(funzione(Funz),ruolo(Role),SN)|AltriSN],Cat,F,X) 
    :-
   F=[F1|F2],
   congg(F1),
          trova_tipo_SN(SN,T),
   coord_sn(Type,T,SCat,SN,_,_,_,_,F2,F3),
   SN\=sn(_, _, Pron, _, _, _, _),
   Pron=..[P,Tipo, _, _, _, _, _],
   altri_sn(Cat,Funz/Role,AltriSN,Cat1,F3,X),
   (Cat1 \= [],
    trova_cat_SN(SN,Catx),
    intersezione(Cat1,Catx,Cat),
    Cat \= []
    ;
    Cat1 = [], Cat = Catx 
   ).

altri_sn(SCa,Funz/R,[],Cat,F,F):-!.
 

/* SUBORDINAZIONE DI SN */

sn_subordinato(Tipo,[],F,X) :-    
        (F=[],X=[], SN=[];F=[P], punct(P),X=[P], SN=[]),!.


sn_subordinato(Tipo,adj(sub(Sub),relazione(Rel),subordinato(SN)),F,X) 
     :-
     nonvar(Tipo),
     (Tipo=nome; Tipo=nopro),
        (gr(germanic),
         doublelook(F,sn_subordinato1,s,[a,n,d],nil)
     ;
     gr(romance),
     triplelook(F,sn_subordinato1,s,[p,a,n, d],[a,d,n])),
     subordinatore_sn(F,Sub,Rel/F1),
     sn_semplice(adj,Fl,[],[],SN,_,_,_,_,F1,X),
     check_verb_like(F,X).

sn_subordinato(_, [],F,F):-!.


check_verb_like([like|F],X):-
       strath(head),
       check_like_end(X),
       !.
check_verb_like([L|F],X):-
       L\=like,!.

check_verb_like([L|F],X):-
       \+ strath(head),
       !.

check_like_end(X):-
       (X\=[],X\=[P]),!.
       

sn_subordinato1(F,adj(sub(Sub),relazione(Rel),subordinato(SN))/X):-
    doublelook(F,sn_subordinato1,s,[a,n,d,q,r],nil),
    subordinatore_sn(F,Sub,Rel/F1),
    sn_semplice(adj,Fl,[],[],SN,_,_,_,_,F1,F2), F2=[Punc|X], Punc=',', 
    retraction(sn_subord1,s).

sn_subordinato1(Fx,adj(sub(Sub),relazione(Rel),subordinato(SN))/X):-
     (inter(Fx,interj(No)/F1),
      No\=[]
      ; 
      inter(Fx,interj(No)/F),
      No\=[], 
      F=[I|F1], I=','
      ; 
      Fx=[I|F1],
      I=','), 
     doublelook(F1,sn_subordinato1,s,[a,n],nil),
     subordinatore_sn(F1,Sub,Rel/F2),
     sn_semplice(adj,Fl,[],[],SN,_,_,_,_,F2,F3), F3=[Punc|X], Punc=',', 
     retraction(sn_subord1,s).

sn_subordinato1(F,apposizione(funzione(nadj),ruolo(tema),SN)/X) 
     :-
     gr(italiano), 
     sn_bare(F,SN,_,_,_,_,F1),
     !,
     F1=[Punc|X], Punc=',',
     retraction(sn_subord1,s),!.

sn_subordinato1(Fx,adj(sub(Sub),relazione(manner),subordinato(SN))/X):-
     (inter(Fx,interj(No)/F1),
      No\=[]
      ; 
      inter(Fx,interj(No)/F),
      No\=[], 
      F=[I|F1], I=','
      ; 
      Fx=[I|F1],
      I=','), 
     doublelook(F1,sp_subordinato1,s,p,nil),
     subordinatore_sn(F1,Sub,Rel/F2),
     sp([],SP,F2,F3), 
     SP=sp(prep(P,cat(Cat),Mod),SN), F3=[Punc|X], Punc=',', 
     retraction(sn_subord1,s),!.

sn_subordinato1(F,[]/F):-!.


/* APPOSIZIONE */

vocativo(vocativo(funzione(ncomp),ruolo(tema),SN),F,X) :-
            F=[','|F1],retraction(vocat,x),
            sint_n(adj,Fl,PredV,SN,G,N,P,C,F1,F2,nil,nil),
            F2=[','|X],retraction(vocat,x).

vocativo([],F,F):-!.

appos_np(sn(indice(I),cat(Cat),Testa,S,Args,Mods,Adjs),F,X) :-
            sn_semplice(adj,Fl,[],[],sn(indice(I),cat(Cat),Testa,S,Args,Mods,Adjs),G,N,P,C,F,X),
            !.

appos_np(sn(indice(I),cat(Cat),Testa,S,Args,Mods,Adjs),F,S) :-
          F=[X|F1],
          stackxp(P-Len-SN),
          P=X,
          SN=sn(indice(I),cat(Cat),Testa,S,Args,Mods,Adjs),
          Nlen is Len - 1,
          restorexp(F1,S,Nlen).

appos_np(SN,F,F):-!.

lookpunct([], []):-!.


lookpunct(F, X):-
      conjunct(F,Co/X),!.


lookpunct(F, F):-
      F=[W|_],
      punct(W),!.

lookpunct(F, F):-
      F=[W|_],
      W=',',!.
     
lookpunct(F, F):-
      F=[W|_],
      find_pos(W, I, _, Si),
      Y is I - 1,
      one(termin(Y-Z)),
      on(x-_, Z),
      !.
consumepunct(F1,F, X):-
      F=[W|X],
      punct(W),!.
consumepunct(F1,F, X):-
      F=[W|X],
      W=',',!.
consumepunct(F1,F, F):-
      reverse(F1,F11),
      F11=[W|X],
      W=',',!.
consumepunct(F1,F, F).

check_punctuation_appos(X):-
           (\+ onelook(X,apposizione, [e,v], nil),
             \+ verify_verb_rest(X)
            ;
             X=[F1|_],
             check_previous(F1, Pos)),
            !.

apposizione_access(Type,F,F1):-
    (Type=nome;Type=nopro;Type=deittico),
     F=[Punt|F1], 
     par_puna(Punt),
     doublelook(F1,apposizione,[n,a,d],[n,a,av,x,p,d,e],c),
     retraction(appos,x),
     !.
apposizione_access(Type,F,F1):-
    (Type=nome;Type=nopro;Type=deittico),
     F=[Punt,E|F1], 
     par_puna(Punt),
     punct(E),
     doublelook(F1,apposizione,[d,a,n],[n,a,d,e],c),
     retraction(appos,x),
     !.
apposizione_access(Type,F,F1):-
    (Type=nome;Type=nopro;Type=deittico),
     F=[Punt|F1], 
     par_puna(Punt),
     doublelook(F1,apposizione,[n,a,d],[r],c),
     F1=[Q|_],
     quant(Q,_,_,_,_),
     retraction(appos,x),
     !.

apposizione(Type,Cues,apposizione(funzione(nadj),ruolo(tema),SN),ListaCat,F,X) 
    :-
     apposizione_access(Type,F,F1),
     appos_np(sn(indice(I),cat(Cat),Testa,S,Args,Mods,Adjs),F1,F2),
     consumepunct(F1,F2, X),
     Testa\=pr(personale,_,_,_,_,_),
      Testa\=pr(pr_int,_,_,_,_,_,_),
      Testa\=pr(clitico,_,_,_,_,_),
      Cat\=[],
      interp_cat(Cat,ListaCat),
      SN=sn(indice(I),cat(Cat),Testa,S,Args,Mods,Adjs),
     (F2=X, 
      check_punctuation_appos(F2)
      ;
      F2\=X),
      !.

apposizione(Type,Cues,apposizione(funzione(nadj),ruolo(tema),Nom),ListaCat,F,X) 
    :-
     F=[','|F1], 
     doublelook(F1,apposizione,[n],[e],c),
     retraction(appos,x),
     sn_x(GF,Fl,Cues,Nom,G,N,P,C,F1,F2),
     Nom=.. [sn, Ind, Cat, Coordina],
     Coordina=.. [coordina, Args],
     Args=[Arg1, Arg2|Res],
     (Arg1=.. [arg, funzione(Funz),ruolo(Role),SN],
      Arg2=.. [arg, funzione(Funz),ruolo(Role),SN2],
      Funz=nadj, Role=tema
      ;
      true),
     consumepunct(F1,F2, X),
     (F2=X, 
      \+ onelook(F2,apposizione, [e,v], nil)
      ;
      F2\=X),
      !.

apposizione(Type,Cues,apposizione(funzione(nadj),ruolo(tema),Fcomp),_,F,X) 
      :- 
      F=[':'|F1],
      qcomp(Fcomp,F1,X).

apposizione(Type,Cues,comparazione(funzione(nadj),ruolo(tema),SA),_,F,X) 
      :- 
      (Cues=[]; 
       Cues\=[], Cues\=a-mod),
      intens(F,Int/F1),
      Int\=[],
      saa(F1,post,SA,Tipo,Gen,Num,M,X),
       !.
apposizione(Type,Cues,apposizione(funzione(nadj),ruolo(tema),SA),_,F,X) 
       :-
       F=[',',Adj1,Cong,Adj2,','|F1],
       conjunction(Cong,_),
       saa([Adj1,Cong,Adj2,','|F1],post,SA,Tipo,Gen,Num,M,X),
       !.

apposizione(Type,Cues,apposizione(funzione(nadj),ruolo(tema),SN),_,F,X) 
       :-
      (Type=nome;Type=nopro),
      onelook(F,apposizione, d, nil),
      (Cues=[];Cues\=[],on(Cue,Cues),Cue\=to),
       sn_mod(SN,G,N,P,C,Cat,F,F2),
       F2=[Punt|X],
       par_pun(Punt),
       consumepunct(F2, X),
       !.

apposizione(Type,Cues,[],_,F,F) :-!.


conjunct([W|X],Co/X) :-
   W=',', retraction(conjunct,x). 
conjunct([W|X],Co/X) :-
   W=['.'], retraction(conjunct,x),!. 
conjunct([W|X],Co/X):-
   (W=and;W=e), retraction(conjunct,c),
   !.
conjunct([W|X],Co/X):-
   (W=or;W=o), retraction(conjunct,c),
   !.

comparazione(Int,SA,comparazione(funzione(fadj),ruolo(tema),Fcomp),F,X) 
     :-
      intens(F,Int/F1),
      Int\=[],
      sa_semplice(F1,SA,Gen,Num,_,F2),       
      fcomp(Fcomp,F2,X,nil,nil).

comparazione(_,_,[],F,F):-!.

punct('.').
punct(!).
punct(?).
punct(':').
punct(';').

mod_aav(I,Mod) :-
     avv(I,Avv), 
     Avv=avv(pred_avv(Av),tipo(_),duraz(_),  
                          config(_)), 
     Mod=Avv, retraction(mod_post, av).

mod_post(Tipo,Mod,Gen,Num,Cat,F,X) 
   :- 
   Tipo\=deittico,  
  (onelook(F,mod_post, av,nil), 
    Cat=[tempo],
    F=[I|X],
    mod_aav(I,Mod)
   ;
   onelook(F,mod_post,[d,n],p), 
   sn_mod(SN,G,N,P,C,Cat,F,X),
   N=Num,
   Mod=nome_mo(funzione(ncomp),ruolo(tema),SN)
   ).

mod_post(_,[],_,_,_,F,F) :-!.

mod_ant(F,Det,nome_mod(SN),Gen,Num,F1) 
     :- 
/*     genre(legal),  */
     sn_mod1(F,Det,SN,Gen,Num,P,C,F1).

mod_ant(F,Det,nome_poss(SN),Gen,Num,F1) 
     :- 
/*     genre(legal),  */
     sn_poss(F,Det,SN,Gen,Num,P,C,F1).

mod_ant(F,_,[],_,_,F):-!.

testa(X,n(Nome,Gen,Num),Gen,Num,3,C,nome) :-
   gr(deutsch),
   nome_d(X,Nome,Gen,Num,C).

testa(X,n(Nome,Gen,Num),Gen,Num,3,C,nome) :- 
   (gr(romance);gr(english)),
   nome(X,Nome,Gen,Num).

testa(X,npro(Nopro,Gen,Num),Gen,Num,3,C,nopro) :-
   nopro(X,Nopro,Gen,Num).

testa(X,a(Agg,Gen,Num),Gen,Num,agg) :- 
     agg(X,Agg,Gen,Num).

sn_poss(F,Det1,sn(indice(Simb),cat(Cat1),Testa,Det,
   args(Args),mods(Mods),adjs(Adjs)),
   Gen,Num,Pers,Caso,X) 
   :-
    F=[F1|F2],
    testa(F1,Testa,Gen1,Num,Pers,Caso,Tipo),
    F2=[s|X], 
    check_determiner(Det1),
    gen_sym(sn,Simb), 
    Det=spec(def('0'),_,_,_,_,_),
    interp_testa(Testa,_,Cat1,A),
    (gr(english)
     ;
      check_catssnm1(Cat1)
     ;
    (F1=specie; F1=tipo)),
    retraction(p,_), 
    retraction(sn_mod1,_).

sn_mod1(F,Det1,sn(indice(Simb),cat(Cat),Testa,Det,
   args(Args),mods(Mods),adjs(Adjs)),
   Gen,Num,Pers,Caso,X) 
    :-
    gr(germanic), 
    F=[F1|X],
    Det=spec(def('0'),part(Part),mod(_),foc(_),card(_),quant(_)),
    check_determiner(Det1),
    doublelook([F1|X],sn_mod1,n,n,a),
    testa(F1,Testa,Gen,Num,Pers,Caso,Tipo),
    gen_sym(sn,Simb),
    interp_testa(Testa,_,Cat,A), 
    check_catssnm3(Cat),
     retraction(sn_mod1,n).

sn_mod1(F,Det1,sn(indice(Simb),cat(Cat),Testa,Det,
   args(Args),mods(Mods),adjs(Adjs)),
   Gen,Num,Pers,Caso,X) 
   :-
   F=[F1|X],
    doublelook([F1|X],sn_mod1,n,n,[a,v]),
    testa(F1,Testa,Gen,Num,Pers,Caso,Tipo),
    check_determiner(Det1),
     (
      Tipo=nome, Det=spec(def('0')),
      Det1=spec(def('0'),part('+'),_,_,_,quant(Q)), 
      (var(Q);Q=[])
      ;
      Tipo\=nome, Det=Det1
      ;
      Tipo=nome,  Det1\=spec(def('0')), Det=Det1
      ),
      interp_testa(Testa,_,Cat,A), 
    check_catssnm4(Cat),
    gen_sym(sn,Simb),
    retraction(sn_mod1,n).

sn_mod(sn(indice(Simb),cat(Cat1),Testa,Det,
   args(Args),mods(Mods),adjs(Adjs)),
   Gen,Num,Pers,Caso,Cat,F,X) 
   :-
   F=[F1|X],
   Det=spec(def('0'),part(Part),mod(_),foc(_),card(_),quant(_)),
   testa(F1,Testa,Gen,Num,Pers,Caso,Tipo),
    gen_sym(sn,Simb),
   interp_testa(Testa,_,Cat1,A), 
   check_catssnm5(Cat,Cat1),
   retraction(sn_mod,n).

sn_mod(sn(indice(Simb),cat(Cat1),Testa,Det,
   args(Args),mods(Mods),adjs(Adjs)),
   Gen,Num,Pers,Caso,Cat,F,X) 
   :-
   F=[F1|F2],
   art(F1,Art,Def,Gen,Num),
   F2=[F3|X],
   Det=spec(def('+'),part(Part),mod(_),foc(_),card(_),quant(_)),
   onelook(F2,sn_mod, n,nil),
   testa(F3,Testa,Gen,Num,Pers,Caso,Tipo),
   gen_sym(sn,Simb),
   nonvar(Testa),
   interp_testa(Testa,_,Cat1,A), 
   check_catssnm6(Cat,Cat1),
   retraction(sn_mod,n).

sn_mod(sn(indice(Simb),cat(Cat1),Testa,Det,
   args(Args),mods(Mods),adjs(Adjs)),
   Gen,Num,Pers,Caso,Cat,F,X) 
   :-
   F=[F1|X],
   onelook(F,sn_mod, n,nil),
   Det=spec(def('0'),part(Part),mod(_),foc(_),card(_),quant(_)),
   testa(F1,Testa,Gen,Num,Pers,Caso,Tipo),
   gen_sym(sn,Simb),
   nonvar(Testa),
   interp_testa(Testa,_,Cat1,A), 
   check_catssnm6(Cat,Cat1),
   retraction(sn_mod,n).

sn_bare(F,sn(indice(Simb),cat(Cat1),Testa,Det,
   args(Args),mods(Mods),adjs(Adjs)),
   Gen,Num,Pers,Caso,X) 
   :-
   onelook(F,sn_bare, n,nil),
   F=[N|F1],
   nome(N,Nome,Gen,Num),
   retraction(sn_bare,n),
   modificatore(F1,[],[],Mod1,Nom_mod,Gen,Num,ListaCat,F2),
   pp_ad(F2,X,LSP),
   Testa=n(Nome,Gen,Num),
   interp_testa(Testa,_,Cat1,A), 
     (member(relazionale,Cat1);
       member(relat,Cat1);
       member(sociale,Cat1)), 
   Testa=n(Nome,Gen,Num),
   pred_n(Nome,Stem,LCat,LArgsN),
   (Num=sing, Part=nil; Num=plur, Part='+'),
   interp_sn(A,Testa,Mod1,[],[LSP],[],[],Cat1,Args,Adjs,[]),
   gen_sym(sn,Simb),
   Det=spec(def('0'),part(Part),mod(_),foc(_),card(_),quant(_)).

np_bare(F,N,nome_mod( 
        sn(indice(Simb),cat(Cat1),Testa,Det,
            args([]),mods([]),adjs([])),Gen,Num),F) 
   :-
   \+ gr(deutsch),
   nome_x(N,Nome,Gen,Num),
   retraction(sn_bare,n),
   Testa=n(Nome,Gen,Num),
   interp_testa(Testa,_,Cat1,A), 
   gen_sym(sn,Simb),
   !.

np_bare(_,[],_,_).


/* sintagma verbale  */

ip_one_bar(
   [sn(SN, G, Num, Pers),ellipsis, 
   LSP0, LSP1, SA1, Avv1, Avv2, 
   Voc, Neg, parent(Par), Sub_n
   ],v(Verbo, Modo, Tempo, Pers, 
         Num, Gen), 
   Aux,CatGr,SubIn, 
   SubCatOut, Supporto, 
   cat(CatV), 
   args(Arg), 
   adjs(Adjs), 
   F,X,H0) 
  :- 
  (F=[],X=[];F=[P], punct(P),X=[P]),
  (H0=[];H0=nil),
  Arg=arg(funzione(sogg),ruolo(topic),SN),
  LSPS the_list LSP0 && LSP1,
  create_adjs(LSPS, Adj),
  Adjs the_list Avv1 && Avv2 && Neg && Voc && Par && LSPS && SA1,
  !.

/* sintagma verbale  */

ip_one_bar(
   [sn(SN, G, Num, Pers),passive, 
   LSP0, LSP1, SA1, Avv1, Avv2, 
   Voc, Neg, parent(Par), Sub_n
   ],v(Verbo, Modo, Tempo, Pers, 
         Num, Gen), 
   Aux,CatGr,SubIn, 
   SubCatOut, Supporto, 
   cat(CatV), 
   args(Args), 
   adjs(Adjs), 
   F,X,H0) 
  :- 
verb_phrase_pass_can(
          [sn(SN, G, Num, Pers), 
   LSP0, LSP1, SA1, Avv1, Avv2, 
   Voc, Neg, parent(Par), Sub_n
   ],P,v(Verbo, Modo, Tempo, Pers, 
         Num, Gen),Aux,   
    SubCatOut, Supporto, 
   cat(CatV), 
   args(Args), 
   adjs(Adjs), 
   F,X,[]).


/* chiamata di IP a livello di I dove si trovano i clitici e il verbo
che si è aggiunto alla flessione verbale 
*/

ip_one_bar(
   [sn(SN, GenSn, NumSn, PersSn),active, 
   LSP0, LSP1, SA1, Avv1, Avv2, 
   Voc, Neg, parent(Par), Sub_n],
   V2,Aux,
   CatGr,SubCatIn, 
   SubCatOut, Supporto, 
   cat(CatV), 
   args(Args), 
   adjs(Adjs), 
   F,X,H0) 
   :-
   sint_clitici(F,Pro1-Pro2/Rest),
   (
   germ_auxto(SN, Rest, Aux, Aux1, Neg, R)
   ;
   all_lang(Rest, R, Aux, V2, SubCatIn, Pro3, Pro4, PersSn, V, CatGr, Supporto, 
      CatV, PredVs, Gen, Num, Pers, Neg, Avv),
   V=v(Ver, Modo, Tempo, Pers,Num, Gen), 
    V1=v(Verb, Modo, Tempo, Pers, Num, Gen),
/*    choose_predv(PredVs, PredV, CatGr1, CatV1), */
   merge_clits(Pro1, Pro2, Pro3, Pro4, Clitics),
   verbal_phrases(
      [sn(SN, GenSn, NumSn, PersSn), 
      LSP0, LSP1, SA1, Avv1, Avv2, 
      Voc, Neg, parent(Par), Sub_n],
      Clitics, V1, CatGr, PredVs, SubCatOut, Supporto, 
      cat(CatV1), 
      args(Args), 
      adjs(Adjs), 
      R,X,H0),
    V2=V1
    ;
/* questa parte della regola di i_bar e riservata al tedesco - e serve per il caso 
 in cui il verbo si trova in fine frase nelle dass sentences */ 
    gr(deutsch),
     var(Aux), var(Verb)
    )
    ,
   (
/* dentro questa seconda parte della regola si entra sia con sia senza Aux ma con Aux1*/
    gr(germanic),
   lookfor_verb(Aux, Aux1, Verb, V, V1, R, R1),
   sint_clitici(R1,Pro1-Pro2/R2),
   adjs_post_aux(R2, R3, Par, Sub_n, LSP0, Pa, Sub, SP0),
   verbal_phrase_const(
      [sn(SN, GenSn, NumSn, PersSn), 
      LSP1, SP0, SA1, Avv1, Avv2, 
      Voc, Neg, parent(Pa), Sub],
      [Pro1, Pro2], Aux1, 
      V1, CatGr, SubCatIn, SubCatOut, Supporto, 
      cat(CatV), 
      args(Args), 
      adjs(Adjs), 
      R3,X,H0),
     V2=V1
    ;
    V2=V1
    ).

/* chiamata per il tedesco: l'ausiliare flesso non è seguito dal participio passato che viene preso dentro VP_d - si controlla che Aux sia var 
la parte in or serve per il caso in cui ci sia già Aux pieno */

checktheresent(SN) :- 
         SN\=sn(indice(_), cat(_), cl(clitico, _, there, _, _, _, Case), 
                     spec(def(+)), args(_), mods(_), adjs(_)).

germ_auxto(SN, Rest, Aux, Aux1, Neg, R):-
    gr(germanic),
    checktheresent(SN),
      ( 
       (var(Aux);Aux=[]),
       Rest=[A|Resto],
       (ausiliare(A,aux(Ainf,Mod,Temp,Per,Numero)),
        Aux1=aux(Ainf,Mod,Temp,Per,Numero),        
          retraction(ausil, v)
       ;
        ausiliare(A,modal(Ainf,Mod,Temp,Per,Numero)),
        Aux1=modal(Ainf,Mod,Temp,Per,Numero),
        retraction(modal, v)
       )
       ;
     nonvar(Aux),Aux\=[],Aux1=Aux, Resto=Rest
     ),
        negaz(Resto,Neg/R),
     !.
/* qui si prendono i verbi flessi di lingue diverse diverse dal tedesco, ma anche la forma flessa di verbi lessicali privi di ausiliare del tedesco */

all_lang(Rest, R, Aux, V2, PredV, Pro1, Pro2, PersSn, V, CatGr, Supporto, 
      CatV, SubCatIn, Gen, Num, Pers, Neg, Avv) :-
   ((var(Aux);Aux=[]), 
     V2=v(Verb, Modo, Tempo, Pers, Num, Gen), var(Verb),
   verbo1(Rest,R,PersSn,
      V, Pro1, Pro2, finito, CatGr, Supporto, 
      CatV, SubCatIn, Gen, Nu, Pers, Neg, Avv),
     (var(NumSn),NumSn=Num; nonvar(NumSn)),
     (var(PersSn),PersSn=Pers; nonvar(PersSn))
   ;
/* qui si controlla che si abbia gia preso il verbo per lingue germaniche in aux_to_comp e lo si trasferisce in V e quindi in V1 poi si chiama VP canonico e alla fine si trasferisce il contenuto del verbo in V2 */
   gr(germanic),
       V2=v(Verb, Modo, Tempo, Pers,Num, Gen), 
    nonvar(Verb),
    V=V2, SubCatIn=PredV,
    R=Rest
   ),
    !.

/* chiamata di IP a livello di I dove si trovano i clitici e il verbo
che si è aggiunto alla flessione verbale 
*/

merge_clits([], [], [], [], [[],[]]):-!.


merge_clits(Pro1, [], [], [], [Pro1,[]]):- Pro1\=[],!.

merge_clits([], Pro2, [], [], [[],Pro2]):- Pro2\=[],!.            

merge_clits([], [], Pro3, [], [Pro3,[]]):- Pro3\=[],!.

merge_clits([], [], [], Pro4, [[],Pro4]):- Pro4\=[],!.

merge_clits(Pro1, Pro2, [], [], [Pro1,Pro2]):- Pro1\=[],Pro2\=[],!.            

lookfor_verb(Aux, Aux1, Verb, V, V1, R, Resto):-
   (var(Aux1);Aux1=[]), 
    var(V),
    R=[A|Resto],
    verbo1(A,_,
      V, _, _, finito, CatGr, Supporto, 
      CatV, SubCatIn, Gen, Num, Pers, Neg, Avv),
     V=v(Ver, Modo, Tempo, Pers,Num, Gen), 
      V1=v(Verb, Modo, Tempo, Pers, Num, Gen),
      !.
      
lookfor_verb(Aux, Aux1, Verb, V, V1, R, R):-
   (var(Aux);Aux=[]), 
    V=v(Verb,_,_,_,_,_), var(Verb),!.

lookfor_verb(Aux, Aux1, Verb, V, V1, R, R):-
    nonvar(Aux), 
    V=v(Verb,_,_,_,_,_), var(Verb),
    !.

adjs_post_aux(In, Out,_, _, LSP, Pa, Sub, SP0) 
   :-
/*    genre(legal),  */
    parent(Pa, In, Out1),
    sn_subordinato1(Out1,Sub/Out2),
    Out2=[Punc|In1],
    Punc=',',
    sint_prep3(In1, Out3, SP0,nil,nil),
    (SP0=[],
      sint_prep(LSP3,Out3,Out4)
      ;
      true, Out4=Out3),
    (Out4=[Punt|Out],
     Punt=','
     ;
     Out=Out4).

adjs_post_aux(In, In,_, _, LSP, [], [], LSP) 
   :-
   LSP\=[], !.

adjs_post_aux(In, In, _, _, [], [], [], []):-!. 



vp_one_bar(F2,F3,[],Verbo,CliticoAcc,CliticoDat,Forma, CatGr, Supporto, 
              CatV, SubCatIn, GenSn, NumSn, PersSn, Neg,
             Oggetto, Ogg2, TOgg, Controllo,H0,nil)
    :-
     Verbo\=[],
     oggetto_any(CatGr, SubCatIn, Oggetto, Ogg2, TOgg, Controllo, CliticoAcc, F2, F3, H0, nil),!.

vp_one_bar(F2,F3,Aux,V1,Verbo,CliticoAcc,CliticoDat,Forma, CatGr, Supporto, 
              CatV, SubCatIn, GenSn, NumSn, PersSn, Neg,
              Oggetto, Ogg2, TOgg, Controllo,H0,H0)
      :-
     Aux\=[], var(Verbo),
     verbo2(F2, F3, Aux,V1, CliticoAcc,CliticoDat, Forma, CatGr, Supporto, 
              CatV, SubCatIn, GenSn, NumSn, PersSn, Neg),
     V1=v(Verbo,Modo,Tempo,_,_,_),!.


vp_one_bar(F,F,Aux,V1,Verbo,CliticoAcc,CliticoDat,Forma, CatGr, Supporto, 
              CatV, SubCatIn, GenSn, NumSn, PersSn, Neg,
              Oggetto, Ogg2, TOgg, Controllo,H0,H0)
     :-
     Aux\=[], var(Verbo),
     verbo4(Aux,V1, CliticoAcc,CliticoDat, Forma, cop, Supporto, 
              CatV, SubCatIn, GenSn, NumSn, PersSn, Neg), Verbo=V1,
     CatGr=cop,!.

vp_one_bar(F2,F3,Aux,V1,Verbo,CliticoAcc,CliticoDat,Forma, CatGr, Supporto, 
              CatV, SubCatIn, GenSn, NumSn, PersSn, Neg,
              Oggetto, Ogg2, TOgg, Controllo,H0,nil)
     :-
    var(Verbo),
    oggetto_any(CatGr, SubCatIn, Oggetto, Ogg2, TOgg,Controllo, CliticoAcc, F2, F3, H0, nil),!.

vp_bar(F3,X,CliticoAcc,CliticoDat,CatGr, SubCatIn, SA, SN, LSP, Oggetto, Ogg2, TOgg, Pro, Int, 
              SN1, SN2, Gen, Num, Pers, Xcomp, LSP3, Controllo,H0,nil)
     :-
     oggetto_any(CatGr, SubCatIn, Oggetto, Oggetto2, TOgg,Controllo, CliticoAcc, F3,F4,H0, nil),
     (Oggetto\=[], 
      (Oggetto2\=[],
       (
        CatGr=trans, Ogg2=Oggetto2
        ;
        CatGr\=trans, Oggetto2=SP/_,
        LSP3=[SP]
       )
        ;
        Oggetto2=[],Ogg2=[])
       ;Oggetto=[],Ogg=[]),
    arg_predic(F4, X, Pro, SN1, SN2, SubCatIn, CatGr, Gen, Num, Pers, CliticDat, SA, Ogg, Ogg2, LSP, 
                  Xcomp, LSP3, Sogg),!. 

vp_bar(F,X,CliticoAcc,CliticoDat,CatGr, SubCatIn, [], SN, LSP, Ogg, Ogg2, TOgg, Pro, Int, 
              SN1, SN2, Gen, Num, Pers, Xcomp, LSP3, Controllo,H0,H0)
     :-
    intens(F,Int/F1), 
    cong(F1,Con/F2),
    (check_there_sent(SN, CliticoDat, CliticDat, Pro);
      true), 
    arg_predic(F2, X, Pro, SN1, SN2, SubCatIn, CatGr, Gen, Num, Pers, CliticDat, SA, Ogg, Ogg2, LSP, 
                  Xcomp, LSP3, Sogg),!. 

vp_bar(F,F,CAcc,CDat,CatGr, SubIn, SA, SN, LSP, Ogg, Ogg2, TOgg, Pro, Int, [], [], Gen, Num, Pers, [], LSP3, Contr,H0,H0) :-
     !.

v_doublebar(F,X,CatGr,SubCatIn,Oggetto,Ogg2,TOgg,Gen,Num,Pers,[], Xcomp, TipoXcomp, LSP3, Controllo,H0,nil)
     :-
     var(Oggetto),
     oggetto_any(CatGr, SubCatIn, Oggetto, Oggetto2, TOgg, Controllo, CliticoAcc, F,F1,H0, nil),
     (Oggetto\=[]; 
       Oggetto2\=[],
       (
       CatGr=trans, Ogg2=Oggetto2
       ;
       CatGr\=trans, Oggetto2=SP/_,
       LSP3=[SP]
       )),
     SubCatIn=[PrimoArg|LastArg],
     xcomp(LastArg,Xcomp,Gen,Num,TipoXcomp,F1,X),
     !.

v_doublebar(F,F,CatGr,SubCatIn,Oggetto,Ogg2,TOgg,Gen,Num,Pers,Xcomp/TipoXcomp, Xcomp, TipoXcomp, LSP3, Controllo,H0,H0)
     :-!.
v_doublebar(F,F,CatGr,SubCatIn,Oggetto,Ogg2,TOgg,Gen,Num,Pers,Xcomp, Xcomp, TipoXcomp, LSP3, Controllo,H0,H0)
     :-!.

arg_predic(F, X, Pro, SN1, SN2, PredV, CatGr, Gen, Num, Pers, CliticDat, SA, Oggetto, Ogg2, LSP, 
                  Xcomp/TipoXcomp, LSP3, Sogg)
      :- 
     (nonvar(Pro),                          
      sn_avv(F, F1, Pro, Tipo, SN1, SN2, SP0, Gen, Num, Pers),
      (Tipo=nome,
       Sogg=sogg_foc
       ; 
       Tipo\=nome, Sogg=sogg),
      xcomp_ci(SP0, CliticDat,Xcomp,Gen,Num,pcomp),
       X=F1
     ;
     var(Pro),
     PredV=pred_v(Verb,CatGr,CatV,SubCatIn),     
     SubCatIn=[PrimoArg|LastArg],
     xcomp(LastArg,Xcomp,Gen,Num,TipoXcomp,F,X)
     ),
    (TipoXcomp=pcomp, 
     (CatGr=cop
       ;
       CatGr\=cop, LSP3=Xcomp)
       ;
       TipoXcomp\=pcomp),!.


arg_predic(X, X, Pro, SN1, [], SubCatIn, CatGr, Gen, Num, Pers, CliticDat, SA, Oggetto, Ogg2, LSP, 
                  Xcomp, LSP3, Sogg)
      :- 
      !,
     (SA\=[], TipoXcomp=acomp, Xcomp=SA
      ;
      (SA\=[]; Oggetto\=[]; Ogg2\=[]; LSP=[])
      ;
     CatGr=intr
     ),!.

vp_verb_last(F, X, Aux, V1, V1, CliticoAcc,CliticoDat, Forma, CatGr, Supporto, 
              CatV, PredV, GenSn, NumSn, PersSn, Neg)
              :-
        (F=[],X=[];F=[P], punct(P),X=[P]),!.

vp_verb_last([], [], Aux, Verbo, V1, CliticoAcc,CliticoDat, Forma, CatGr, Supporto, 
              CatV, PredV, GenSn, NumSn, PersSn, Neg)
     :-!.

vp_verb_last(F7, F7, [], Verbo, V1, CliticoAcc,CliticoDat, Forma, CatGr, Supporto, 
              CatV, PredV, GenSn, NumSn, PersSn, Neg)
     :-
      !,
      (Verbo\=[]; V1\=[]),!.

vp_verb_last(F7, F8, Aux, Verbo, V1, CliticoAcc,CliticoDat, Forma, CatGr, Supporto, 
              CatV, PredV, GenSn, NumSn, PersSn, Neg)
     :-
     Aux\=[], var(Verbo), var(V1),
      verbo2(F7,F8,Aux,V1, CliticoAcc,CliticoDat, Forma, CatGr, Supporto, 
              CatV, PredV, GenSn, NumSn, PersSn, Neg),!.


vp_verb_last(F7, F8, Aux, Verbo, V1, CliticoAcc,CliticoDat, Forma, CatGr, Supporto, 
              CatV, PredV, GenSn, NumSn, PersSn, Neg)
     :-
     var(Aux), var(Verbo), var(V1),
      verbo3(F7,F8,V1, 
             CliticoAcc,CliticoDat, Forma, CatGr, Supporto, 
             CatV, pred_v(Verbo, CatGr, CatV, SubCatIn), 
             Gen1, Num1, Pers1, Neg, Avv),!.

vp_verb_last(F7, F8, Aux, Verbo, V1, CliticoAcc,CliticoDat, Forma, CatGr, Supporto, 
              CatV, PredV, GenSn, NumSn, PersSn, Neg)
     :-
     Aux\=[], V1\=[], var(Verbo),
     Aux=modal(Mod,M,T,_507,_508),
     V1=v(A,M,T/Comp,_507,_508,_7329),
     Aux1=aux(A,M,T,_507,_508),
      verbo2(F7,F8,Aux1,Verbo, CliticoAcc,CliticoDat, Forma, CatGr, Supporto, 
              CatV, PredV, GenSn, NumSn, PersSn, Neg),!.

vp_verb_last(F7, F7, Aux, Verbo, V1, CliticoAcc,CliticoDat, Forma, CatGr, Supporto, 
              CatV, PredV, GenSn, NumSn, PersSn, Neg):-
      !.

verbal_phrase_const(
           [sn(SN,Gen,Num,Pers),LSP0,LSP1,SA1,Avv1,Avv2,
               Voc,Neg,parent(Par),Sub_n],[CliticoAcc,CliticoDat],Aux,
                          v(Verbo,Modo,Tempo,Pers,Num,Gen),CatGr,
                          SubCatIn,LArgsV1,
                          Supporto,
                          cat(CatV),
                          args(Args),
                          adjs(Adjs),F,X,H0) 
     :-
     gr(germanic),
     sint_avv(F,Tempo,Avv3/F1,_),
     sint_prep3(F1,F2,LSP,H0,H1),
     agnt_sa(post,SA,Gen1,Num1,F2,F3),
     vp_one_bar(F3,F4,Aux,V1,Verbo1,CliticoAcc,CliticoDat,Forma, CatGr0, Supporto, 
              CatV0, PredV0, GenSn, NumSn, PersSn, Neg,
              Oggetto, Ogg2, TOgg, Controllo,H1,H2),
     vp_bar(F4,F5,CliticoAcc,CliticoDat, CatGr0, PredV0, SA, SN, LSP, Oggetto, Ogg2, TOgg, 
              Pro, Int, SN1, SN2, Gen, Num, Pers, Xcomp1, LSP3, Controllo,H2,H3),    
     selectverb(V1, Tempo1),
     sint_avv(F5,Tempo1,Avv4/F6,Tipo3),
     sintpreps(F6,F77,LSP3,H3), 
     negaz1(F77, Neg/F8),
     vp_verb_last(F8, F9, Aux, Verbo2, V1, CliticoAcc,CliticoDat, Forma, CatGr1, Supporto, 
              CatV1, PredV1, GenSn, NumSn, PersSn, Neg),
     selectpred(Verbo2, V1, PredV0, PredV1, PredV, Verbo, Modo, Tempo),
     selectsupp(Aux, Supporto),
     PredV=pred_v(Verb,CatGr,CatV,SubCat),     
     v_doublebar(F9,F10,CatGr,SubCat,Oggetto,Ogg2,TOgg,Gen,Num,Pers, Xcomp1, Xcomp, 
             TipoXcomp, LSP4,Controllo,H3,H4),    
     sint_avv(F10,Tempo,Avv5/X,Tipo4),
     generalized_grammaticality_call(Verb,Controllo,Modo,
                       PredV,LArgsV1,CatGr,TOgg, TipoXcomp, Pro,
                       Oggetto,Ogg2, CliticoAcc, Xcomp,
                       SN,SN1,Oggetto,LSP,CliticoDat,
                       LSP,LSP0,LSP1,LSP3,LSP4,SA,Par,
                       [Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4, Avv5],
																										args(Args),
                          adjs(Adjs)).

selectverb(V1, Tempo):-
    var(V1),!.
selectverb(V1, Tempo):-
    nonvar(V1),
    V1=v(Verbo,Modo,Tempo,_,_,_),
    !.
    
sintpreps(F6,F77,LSP3,H0):-
     (
      var(LSP3),
      sint_prep3(F6,F7,LSP33, H0, nil),
       (LSP33=[],
        sint_prep(LSP3,F7,F77)
       ;
       LSP33\=[], LSP3=LSP33, F77=F7)
       ;
       nonvar(LSP3), F77=F6
     ),
     !.
     
selectsupp(Aux, Supporto):-
     (
      (var(Aux); Aux=[]; Aux=aux(_,_,_,_,_)),
       Supporto=supporto([])
       ;
       nonvar(Aux), Aux=modal(Mod,_,_,_,_), 
       Supporto=supporto(Mod)
      ),
      !.
      
selectpred(Verbo2, V1, PredV0, PredV1, PredV, Verb, Modo, Tempo):-
    (var(Verbo2),
     V1=v(Verb,Modo,Tempo,_,_,_),
     PredV0=pred_v(Verb,CatGr0,CatV0,SubCatIn0),
     nonvar(SubCatIn0),
     PredV=pred_v(Verb,CatGr0,CatV0,SubCatIn0)
     ;
     nonvar(Verbo2),
     Verbo2=v(Verb,Modo,Tempo,_,_,_),
     PredV1=pred_v(Verb,CatGr1,CatV1,SubCatIn1),
     nonvar(SubCatIn1),
     PredV=pred_v(Verb,CatGr1,CatV1,SubCatIn1)
     ;
     nonvar(Verbo2),
     Verbo2=v(Verb,Modo,Tempo,_,_,_),
     PredV0=pred_v(Verb,CatGr0,CatV0,SubCatIn0),
     nonvar(SubCatIn0),
     PredV=pred_v(Verb,CatGr0,CatV0,SubCatIn0)
     ),
     (var(Modo), Modo=ind; nonvar(Modo)),
     !.

build_listaSP(TipoXcomp,Xcomp,SN,SN1,Oggetto,LSP,CliticoDat,LSP3,LSP0,LSP1,SA,SN1,Xcomp,ListaSP):-
              Xcomp\=[], SN1\=[], 
              ListaSP the_list LSP && CliticoDat && LSP3 && LSP0 && LSP1,!.

build_listaSP(TipoXcomp,Xcomp,SN,[],Oggetto,LSP,CliticoDat,LSP3,LSP0,LSP1,SA,SN,Xcomp,ListaSP):-
              Xcomp\=[],
              ListaSP the_list LSP && CliticoDat && LSP3 && LSP0 && LSP1,!.

build_listaSP(ncomp,Xcomp,SN,[],Oggetto,LSP,CliticoDat,[],LSP0,LSP1,SA,SN,Oggetto,ListaSP):-
              Oggetto\=[],
              ListaSP the_list LSP && CliticoDat && LSP0 && LSP1 && SA,!.

build_listaSP(acomp,Xcomp,SN,[],Oggetto,LSP,CliticoDat,LSP3,LSP0,LSP1,SA,SN,Xcom,ListaSP):-
        Xcomp\=[],
        ListaSP the_list LSP && CliticoDat && LSP0 && LSP1,!.

build_listaSP(pcomp,Xcomp,SN,[],Oggetto,LSP,CliticoDat,LSP3,LSP0,LSP1,SA,SN,LSP3,ListaSP):-
        LSP3\=[],
        ListaSP the_list LSP && CliticoDat && LSP0 && LSP1 && SA,!.

build_listaSP(pcomp,Xcomp,SN,[],Oggetto,LSP,CliticoDat,LSP3,LSP0,LSP1,SA,SN,SP,ListaSP):-
        LSP\=[],
        on(SP, LSP),
        ListaSP the_list LSP0 && CliticoDat && LSP1 && LSP3 && SA,!.

build_listaSP(TipoXcomp,Xcomp,SN,SN2,Oggetto,LSP,CliticoDat,LSP3,LSP0,LSP1,SA,SN,SA,ListaSP):-
              SN\=[], SA\=[],
              ListaSP the_list LSP && CliticoDat && LSP3 && LSP0 && LSP1,!.

build_listaSP(acomp,Xcomp,SN,[],Oggetto,LSP,CliticoDat,LSP3,LSP0,LSP1,SA,SN,SA,ListaSP):-
        SA\=[],
        ListaSP the_list LSP && CliticoDat && LSP0 && LSP1,!.

build_listaSP(acomp,Xcomp,SN,[],[],LSP,CliticoDat,LSP3,LSP0,LSP1,SA,SN,SA,ListaSP):-
        ListaSP the_list LSP && CliticoDat && LSP3 && LSP0 && LSP1,!.


verifyfocal(Win, SN):-
   gr(Gr),
   postposed_subject(Win,romance,Gr),
   (trova_tipo_clitico(SN,Type),
       Type\=rifl_corto, Type\=rifl_lungo,!
        ;
       (Type\=rifl_corto; Type\=rifl_lungo),
         preposed_reflexive_object(Win)),
   !.

verifycomplements(Win, NewVarSN):-
   NewVarSN=[sn(SN, Gen, Num, Pers),_,_,_,_,_,_,_,_,_, comps(Comps)],
   try_remove(Comps, SN/Tipo, ListaSP2),
   transitivetypes(Tipo),
   active_output_win(Win),
   nl(Win),nl(Win),
   writenl(Win, 'Sorry, but your sentence is structurally ambiguous and cannot be parsed without special strategies: try to activate them!!'),
   nl(Win),nl(Win),
   writeseqnl(Win, Comps),
   !.

verifycomplements(Win, NewVarSN):-
   NewVarSN=[sn(SN, Gen, Num, Pers),_,_,_,_,_,_,_,_,_, comps(Comps)],
   try_remove(Comps, SN/Tipo, ListaSP2),
   active_output_win(Win),
   nl(Win),nl(Win),
   writenl(Win, 'The governing predicate is transitive and requires an object complement: '),
   nl(Win),nl(Win),
   writenl(Win, ScIn),
   nl(Win),nl(Win),
   writenl(Win, 'This is the incorrect output parse:  '),
   nl(Win),nl(Win),
   writenl(Win, NewVarSN),
   !.

postposed_subject(Win,InputGr,Gr):-
   (InputGr=Gr
    ;
    InputGr\=Gr,
    gr(InputGr)
    ;
    InputGr\=Gr,
    \+  gr(InputGr),   
    nl(Win),nl(Win),
    writenl(Win, 'The current structures belong to a different grammar: '),
    write(Win, 'The current grammar is '),
    writenl(Win, Gr),
    write(Win, ' and the rules belong to '),
    writenl(Win, InputGr),
    writenl(Win, 'The subject is postposed and the object preposed '),
    nl(Win),nl(Win)),!.

preposed_reflexive_object(Win):-
   nl(Win),nl(Win),
   writenl(Win, 'The object is preposed and is a reflexive pronoun '),
   writenl(Win, 'There are no human languages allowing this rule '),
   writenl(Win, ' Try to correct it!!!!  '),
   nl(Win),nl(Win),
   !.
transitivetypes(Tipo):-
   on(Tipo,[sn, clitico, riflessivo, rifl_corto, svinf,fcomp]),!.

try_object(0,[CliticoAcc,CliticoDat], ScIn, PredV, CatGr, F3, F4, H0,H2, TOgg, Controllo, [Oggetto/TOgg]):-
     (var(H0);
      nonvar(H0),
      (
      H0 = nil;
      nonvar(H0), H0 \= sn/_/_/CatSP/_)),
     F3\=[],F3\=[P],
    (
     CliticoDat\=[],
     PredV=.. [pred_v, make|Rest],
     oggetto(Oggetto, TOgg, PredV, Controllo, CliticoDat, F3,F4,H0, H2)
     ;      
     CliticoAcc\=[],
     PredV=.. [pred_v, make|Rest],
     oggetto(Oggetto, TOgg, PredV, Controllo, [CliticoAcc], F3,F4,H0, H2)
     ;      
     (CliticoAcc\=[],
      trova_tipo_clitico(CliticoAcc,riflessivo),
      CliticAcc = CliticoAcc,
      on(TOgg, [rifl_corto,riflessivo,sn])
     ;
      trova_tipo_clitico(CliticoAcc,TOgg)
     ;
      CliticoAcc=[]
     ),
     oggetto(Oggetto, TOgg, PredV, Controllo, CliticoAcc, F3,F4,H0, H2)
     ).

try_object(0,[CliticoAcc,CliticoDat], ScIn, PredV, CatGr, F3, F4, H1,nil, fcomp, Controllo, [Oggetto/fcomp]):-
     (nonvar(H1);
      H1 \= nil),
     F3\=[],F3\=[P],
     F3=[che|P],
     select_subcatt(Fun/prop/_, Fun = f/fcomp, PredV, PredV2),
     oggetto(Oggetto, fcomp, PredV, Controllo, CliticoAcc, F3,F4,H1, nil),
     !.

try_object(0,[CliticoAcc,CliticoDat], ScIn, PredV, CatGr, F3, F4, H1,nil, sn, Controllo, [Oggetto/sn]):-
     (nonvar(H1);
      H1 \= nil,
      H1 = sn/_/_/CatSP/_),
     oggetto(Oggetto, sn, PredV, Controllo, CliticoAcc, F3,F4,H1, nil),
     !.

try_object(1,[CliticoAcc,CliticoDat], ScIn, PredV, CatGr, F3, F4, H0,H2, TOgg, Controllo, [Oggetto/TOgg]):-
     F3=[F|_],
     \+ sub_w(F),
     (F\=di, F\=a,TOgg=fcomp;
      (F=di;F=a;F=ad),TOgg=svinf),
     oggetto(Oggetto, TOgg, PredV, Controllo, CliticoAcc, F3,F4,H0, nil),
     !.
try_object(1,[CliticoAcc,CliticoDat], ScIn, PredV, CatGr, F3, X, H0,H2, sn, Controllo, Obj2):-
     oggetto2(Obj2,sn,PredV,_,F3,X,_,nil),
     !.

/*  inizio sintagmi verbali transitivi  */

verb_phrase_disl([sn(SN,G,Num,Per),LSP0,LSP1,SA1,Avv1,Avv2,Voc,Neg,parent(Par),Sub_n,comps(Comps)],[CliticoAcc,CliticoDat],
            v(Verbo,Modo,Tempo,Pers1,Nu,G),
             PredV, LArgsV1,
             Supporto,
             cat(CatV),
             args(Args),
             adjs(Adjs),H0) 
          :-
          try_remove(Comps, SN/Tipo, ListaSP2),
           PredV=pred_v(Verbo,CatGr,CatV,PrimoArg),
          ListaSP the_list LSP0 && LSP1 && ListaSP2,
          restrict_inv_subj(SN1, Part, Caso, Tipo, Gen1, Num1),
          select_subcatt(Fun/_/_, Fun = sn/ogg, PredV, PredV1),
          grammaticality_check(interp_attiva_tr, 
               [Verbo,PredV,LArgsV1,SN1/foc,SN/topic,ListaSP,CatV],
               Args,Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n], Adjs).

verb_phrase_trans_inv([sn(SN1,G,Num,Pers),LSP0,LSP1,SA1,Avv1,Avv2,Voc,Neg,parent(Par),Sub_n,comps(Comps)],[CliticoAcc,CliticoDat],
                          v(Verbo,Modo,Tempo,Pers1,Num1,Gen1),
                          PredV, LArgsV1,
                          Supporto,
                          cat(CatV),
                          args(Args),
                          adjs(Adjs),H0) 
          :-
          try_remove(Comps, SN/Tipo, ListaSP2),
          SN\=CliticoAcc,
           PredV=pred_v(Verbo,CatGr,CatV,PrimoArg),
          ListaSP the_list LSP0 && LSP1 && ListaSP2,
          (SN1=[], 
          grammaticality_check(interp_attiva_tr, 
               [Verbo,PredV,LArgsV1,SN/sogg,ListaSP,CatV],
               Args,Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n], Adjs)
                    ;
                (CliticoAcc=[], Ogg=SN1, Foc=foc;
                  CliticoAcc\=[], Ogg=CliticoAcc, Foc=ogg),
          grammaticality_check(interp_attiva_tr, 
               [Verbo,PredV,LArgsV1,SN/sogg,Ogg/Foc,ListaSP,CatV],
               Args,Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n], Adjs)).


verb_phrase_ergativ([sn(SN1,G,Num,Pers),LSP0,LSP1,SA1,Avv1,Avv2,Voc,Neg,parent(Par),Sub_n,comps(Comps)],[CliticoAcc,CliticoDat],
           v(Verbo,Modo,Tempo,Pers1,Num1,Gen1),
             PredV, LArgsV1,
             Supporto,
             cat(CatV),
             args(Args),
             adjs(Adjs),H0) 
          :-
           PredV=pred_v(Verbo,CatGr,CatV,PrimoArg),
          Cond = ( Rest=[] -> true
              ;
                   Rest \= [pcomp/_/_]),
          select_subcatt([sn/sogg/_/_, sn/ogg/_/_ | Rest], Cond, PredV, PredV1),
          ListaSP the_list LSP0 && LSP1,
          grammaticality_check(interp_attiva_tr, 
               [Verbo,PredV1,LArgsV1,SN1/sogg_top,ListaSP,CatV],
               Args,Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n], Adjs).


verb_phrase_incoat_inv([sn(SN1,Gen,Num,Pers),LSP0,LSP1,SA1,Avv1,Avv2,Voc,Neg,parent(Par), Sub_n, comps(Comps)],[CliticoAcc,CliticoDat],
               v(Verbo,Modo,Tempo,Pers,Num,Gen),
               PredV, LArgsV1,
                 Supporto,
                 cat(CatV),
                 args(Args),
                adjs(Adjs),H0) 
          :-
          nonvar(CliticoAcc),
          CliticoAcc=sn(indice(_), cat(_), cl(rifl_corto, _, _, _, _, _, _),S),                          
          try_remove(Comps, SN/Tipo, ListaSP2),
          SN\=CliticoAcc,
           PredV=pred_v(Verbo,CatGr,CatV,PrimoArg),
          ListaSP the_list LSP0 && LSP1 && ListaSP2,
          restrict_inv_subj(SN, Part, Caso, Tipo, Gen, Num),
          Pers=3,
          (Tipo=pr_quantif,
           SN\=sn(In,Ca,pr(pr_quantif, Pro, 3, G, N, C),
                         spec(def('-'),part('+'),_,_,_,_),Ar,Mo,Ad)
          ;
          Tipo\=pr_quantif),
          grammaticality_check(interp_attiva_incoat, 
               [Verbo,PredV,LArgsV1,SN/sogg_top,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3, Sub_n], Adjs).

verbal_phrase_imper([sn(SN1,Gen,Num,Pers),LSP0,LSP1,SA1,Avv1,Avv2,Voc,Neg,parent(Par), 
Sub_n, comps(Comps) ],[CliticoAcc,CliticoDat],
                          v(Verbo,Modo,Tempo,Pers,Num,Gen),
                          CatGr,
                          PredV, LArgsV1,
                          Supporto,
                          cat(CatV),
                          args(Args),
                          adjs(Adjs),H0) 
           :-
          try_remove(Comps, SN2/Tipo, ListaSP2),
           PredV=pred_v(Verbo,CatGr,CatV,PrimoArg),
          ListaSP the_list LSP0 && LSP1 && ListaSP2,
           (CatGr=trans,
            Cond = ( Rest=[] -> true
            ;
             Rest \= [pcomp/_/_]),
            select_subcatt([sn/sogg/_/_, sn/ogg/_/_ | Rest], Cond, PredV, PredV1)
           ;
           CatGr\=trans),
           (SN2\=[],
            SN2=inf(Inf),
            grammaticality_check(interp_attiva_imper, 
               [Verbo,Controllo,PredV1,LArgsV1,SN1/sogg,SN2/vcomp,ListaSP,CatV],
               Args,Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n], Adjs)
           ;
           SN2\=[],
           grammaticality_check(interp_attiva_imper, 
               [Verbo,PredV1,LArgsV1,SN1/sogg,SN2/ogg,ListaSP,CatV],
               Args,Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n], Adjs)
           ;
           SN2=[],
           grammaticality_check(interp_attiva_imper, 
               [Verbo,PredV1,LArgsV1,SN1/sogg,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3, Sub_n], Adjs)
           ).

verbal_phrase_trans_avv([sn(SN1,Gen,Num,Pers),LSP0,LSP1,SA1,Avv1,Avv2,Voc,Neg,parent(Par),Sub_n, comps(Comps)],[CliticoAcc,CliticoDat],
              v(Verbo,Modo,Tempo,Pers1,Num1,Gen1),
                   PredV, LArgsV1,
                   Supporto,
                   cat(CatV),
                   args(Args),
                   adjs(Adjs),H1) 
           :-
           PredV=pred_v(Verbo,CatGr,CatV,PrimoArg),
           (CliticoAcc=[], TOgg=sn
             ;
            CliticoAcc\=[]),
          try_remove(Comps, SN2/TOgg, RestoComps),
           (
            remove(gerundive(Gers), RestoComps, ListaSP2),
          ListaSP the_list LSP0 && LSP1 && ListaSP2,
          grammaticality_check(interp_attiva_tr_avv, 
               [Verbo,PredV,LArgsV1,SN1/sogg,SN2/ogg_avv,Ger,ListaSP,CatV],
               Args,Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n], Adjs)
           ;
          ListaSP the_list LSP0 && LSP1 && RestoComps,
          grammaticality_check(interp_attiva_tr_avv, 
               [Verbo,PredV,LArgsV1,SN1/sogg,SN2/ogg_avv,ListaSP,CatV],
               Args,Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n], Adjs)).


verbal_phrase_trans_avv([sn(SN1,Gen,Num,Pers),LSP0,LSP1,SA1,Avv1,Avv2,Voc,Neg,parent(Par),Sub_n, comps(Comps)],[CliticoAcc,CliticoDat],
              v(Verbo,Modo,Tempo,Pers1,Num1,Gen1),
                   PredV, LArgsV1,
                      Supporto,
                      cat(CatV),
                      args(Args),
                      adjs(Adjs),H1) 
          :-
           PredV=pred_v(Verbo,CatGr,CatV,PrimoArg),
          (CliticoAcc=[], TOgg=sn
             ;
           CliticoAcc\=[]),
          try_remove(Comps, SN2/TOgg, RestoComps),
          remove(inf(Inf)/vcomp, RestoComps, ListaSP2),
          ListaSP the_list LSP0 && LSP1 && ListaSP2,
          grammaticality_check(interp_attiva_tr_avv, 
               [Verbo,PredV,SubCatOut,SN1/sogg,SN2/ogg_avv,Svinf/vcomp,ListaSP,CatV],
               Args,Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n], Adjs).

verbal_phrase_trans_avv([sn(SN1,Gen,Num,Pers),LSP0,LSP1,SA1,Avv1,Avv2,Voc,Neg,parent(Par),Sub_n, comps(Comps)],[CliticoAcc,CliticoDat],
              v(Verbo,Modo,Tempo,Pers1,Num1,Gen1),
                   PredV, LArgsV1,
                      Supporto,
                      cat(CatV),
                      args(Args),
                      adjs(Adjs),H1) 
          :-
           PredV=pred_v(Verbo,CatGr,CatV,PrimoArg),
           CliticoDat\=[],
          remove(SP, Comps, RestoComps),
          SP=..[sp|_],
          remove(avv(Avv,T), RestoComps, ListaSP2),
          ListaSP the_list CliticoDat && LSP0 && LSP1 && ListaSP2,
          grammaticality_check(interp_attiva_intr, 
               [Verbo,PredV,LArgsV1,SN1/sogg,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, avv(Avv,T), Sub_n], Adjs).

verbal_phrase_trans_xcomp(
   [sn(SN1, Gen, Num, Pers),
   LSP0, LSP1, SA1, Avv1, Avv2,
   Voc, Neg, parent(Par), Sub_n,
   comps(Comps)],
   [CliticoAcc, CliticoDat],
   v(Verbo,Modo,Tempo,Pers,Num,Gen),
   PredV, SubCatOut, Supporto,
   cat(CatV),
   args(Args),
   adjs(Adjs),
   H1)
  :-
    (TOgg=sn;
    TOgg=riflessivo;
    TOgg=clitico),
    try_remove(Comps, SN/Tipo, RestoComps),
   (remove(Xcom/TXcom, RestoComps, ListaSP2),
    (Tipo=pcomp, SN2=Xcom, Xcomp=SN, TXcomp=pcomp; 
      Tipo=acomp, SN2=Xcom, Xcomp=SN, TXcomp=acomp; 
        (Tipo=ogg;Tipo=sn;Tipo=clitico), SN2=SN, Xcomp=Xcom, TXcomp=TXcom)
    ;
    remove(Xcomp, RestoComps, ListaSP2),
    (Tipo=pcomp, SN2=Xcom, Xcomp=SN, TXcomp=pcomp; 
      Tipo=acomp, SN2=Xcom, Xcomp=SN, TXcomp=acomp; 
     (Tipo=ogg;Tipo=sn;Tipo=clitico), SN2=SN, Xcomp=Xcom, TXcomp=TXcom)
    ),
   PredV=pred_v(Verbo,CatGr,CatV,PrimoArg),
    ListaSP the_list LSP0 && LSP1 && ListaSP2,
   ( Xcomp=[],
   member(TOgg, [sn, clitico, riflessivo]),
    Cond = ( Rest=[] -> true
      ;
       Rest \= [pcomp/_/_]),
   select_subcatt([sn/sogg/_/_, sn/ogg/_/_ | Rest], Cond, PredV, PredV2),
   grammaticality_check(interp_attiva_tr, 
               [Verbo,PredV,SubCatOut,SN1/sogg,SN2/ogg,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3, Sub_n], Adjs)
    ;
    Xcomp\=[],
   grammaticality_check(interp_attiva_tr_xcomp, 
               [Verbo,PredV,SubCatOut,SN1/sogg, SN2/ogg,Xcomp/TXcomp,ListaSP,CatV],
               Args,Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n], Adjs)
     ),
   Adjs_par the_list Adjs_x && Par,
   Adjs the_list Avv1 && Avv2 && Sub_n && Avv3 && Neg && Voc && Adjs_par.

assert_ell(Cstr, Frase, X, H) :-  
      genre(instr),
      assert_cp0(Cstr,Frase,X,H).

assert_ell(Asserz, F, X, H) :-  
           inter(F, interj(No)/F1), 
          No\=[],
           inter(F1, interj(No1)/X), 
          No1\=[],
           participiale(F,_,_, Part,_),
           gen_sym(f,Simb),
           Part=.. [participial, ip(indice(Ind1),Verbo1,supporto(Supp),
           cat(C),args(Args),adjs(Adjs))],
           Asserz=assert_adv(adv(Simb),presentative([interj(No), interj(No1)], ip(indice(Ind1),Verbo1,supporto(Supp),cat(C),args(Args),adjs(Adjs)))),
           !.

assert_ell(Asserz, F, X, H) :-  
          negaz(F,Neg/F1),
          Neg\=[],
          sint_prep(LSP0,F1,F2),
           gen_sym(f,Ind1),
      i_double_bar(CStrIp, 
      [], [LSP0, [], [], [], []],Voce,  
      Verbo, Aux, CatGr, SubCatIn, L, Supporto, 
      cat(CatV), args(Args), adjs(Adjss), F2,X,H0),
      Adjs the_list Neg && Adjss,
      Asserz=ip(ip_ell(indice(Ind1),args(Args),adjs(Adjs))),
           !.

assert_cp0(ip(indice(Simb),v(Verbo, L, Modo, Tempo, Pers,Num, Gen), 
      Supporto, cat(CatV), 
      args(Args), adjs(Adjs)), F, X, H0) 
   :-
   gen_sym(f, Simb), 
   /* nonvar(Verbo2),*/
     Verbo2 = v(Verbo, Modo, Tempo, Pers, Num, Gen),
   assert_ip0(
      [LSP0, LSP1, SA1, Avv1, Voc, Sub_n], 
      Verbo2,Aux,CatGr,
      SubCatIn,L, Supporto, cat(CatV), 
      args(Args), adjs(Adjs), F, X, H0).

assert_ip0(Var, V, A, CatG, SubIn, SubOut, S, C,Args, Adjs,F,X, H)
  :-
  assert_pres(Var, V, SubOut, S, C, Args, Adjs,F,X, H).

/* chiamati da asserzione esortativa

verbal_phrase_pres(Var, V, L, S, C, Args, Adjs, H)
  --> verb_phrase_exor(Var,V, L, S, C, Args, Adjs, H).
*/


/*  riflessiva con pcomp */
verbal_phrase_rifl([sn(SN1,Gen,Num,Pers),LSP0,LSP1,SA1,Avv1,Avv2,Voc,Neg,parent(Par),Sub_n],
                  [CliticoAcc,CliticoDat],
                          v(Verbo,Modo,Tempo,Pers1,Num1,Gen1),
                          PredV, ListaArgsV1,
                          Supporto,
                          cat(CatV),
                          args(Args),
                          adjs(Adjs),F,X,H0) 
      :-
      select_subcat(pcomp/_/_, PredV, PredV1),
      sint_avv(F,Tempo,Avv3/F1,Tipo3),
      (Rifl=riflessivo;Rifl=rifl_corto),
      oggetto(SN2,Rifl,PredV1,_,CliticoAcc,F1,F2,H0,nil),
      pcomp(Xcomp,_Gen,_Num,F2,F3),
      sint_prep(ListaSP2,F3,F4),
      sint_prep(ListaSP3,F4,F5),
      PredV=pred_v(Verbo,CatGr,CatV,PrimoArg),
      ListaSP the_list  ListaSP2 && ListaSP3 && LSP0 && LSP1 && SA1,   
      grammaticality_check(interp_rifl_int, 
               [Verbo,PredV1, ListaArgsV1,SN1/sogg,Xcomp/pcomp,ListaSP,CatV],
               Args,Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n], Adjs).


/* attiva riflessiva (con infinitiva come complemento) */

verbal_phrase_rifl([sn(SN1,Gen,Num,Pers),LSP0,LSP1,SA1,Avv1,Avv2,Voc,Neg,parent(Par),Sub_n],
                 [CliticoAcc,CliticoDat],
                          v(Verbo,Modo,Tempo,Pers1,Num1,Gen1),
                          PredV, ListaArgsV1,
                          Supporto,
                          cat(CatV),
                          args(Args),
                          adjs(Adjs),F,X,H0) 
         :-
         sint_avv(F,Tempo,Avv3/F1,Tipo3), 
         (oggetto(SN2,riflessivo,PredV,Controllo,CliticoAcc,F1,F2,H0,nil)
           ;
%          CliticoDat\=[], 
          F2=F1),
         sint_prep(ListaSP2,F2,F3),
         (
           select_subcatt(Fun/prop/_/_, Fun = vcomp, PredV, PredV1),
           complemento_inf(Svinf,Controllo,F3,F4,H0,nil)
          ;
           select_subcatt(Fun/prop/_, Fun = f/fcomp, PredV, PredV1),
           fcomp(Fcomp,F3,F4,H0,nil)
          ;
          CliticoDat\=[],
          select_subcatt(Fun/Ro/_/_, Fun\= vcomp, PredV, PredV1),
          F4=F3
          ;
          CliticoAcc\=[],
          select_subcatt(Fun/Ro/_/_, Fun\= vcomp, PredV, PredV1),
          F4=F3
          ),
          compar(Comp,Verbo,PrimoArg,Controllo,F4,F5),
          sint_prep(ListaSP3,F5,X),
          PredV1=pred_v(Verbo,CatGr,CatV,PrimoArg),
          ListaSP the_list  ListaSP2 && ListaSP3 && ListaSP0 && ListaSP1 && SA1,
          (
           nonvar(Svinf),
        grammaticality_check(interp_rifl_inf, 
               [Verbo,Controllo,PredV1,ListaArgsV1,SN1/sogg,Svinf/vcomp,ListaSP,CatV],Args,
               Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4, Avv5], Adjs)
         ;
           nonvar(Fcomp),
          grammaticality_check(interp_rifl_fcomp, 
               [Verbo,Modo,PredV,ListaArgsV1,SN1/sogg,Fcomp/fcomp,ListaSP,CatV],Args,
               Adjs_x,Par,[Neg, Voc, Comp, Avv1, Avv2, Avv3, Sub_n], Adjs)
         ;
          var(Svinf),var(Fcomp),
          grammaticality_check(interp_rifl_int, 
               [Verbo,PredV1, ListaArgsV1,SN1/sogg,ListaSP,CatV],
               Args,Adjs_x,Par,[Neg, Voc, Comp, Avv1, Avv2, Avv3, Sub_n], Adjs)).

/* solo gli inaccusativi costruiscono una struttura inversa con un 
quantificatore indefinito;  gli inaccusativi con sn non quantificatori hanno un soggetto inverso che viene analizzato come sogg_foc; 
gli impersonali e gli atmosferici possono avere entrambe le strutture, quella canonica e quella inversa ma il valore resta top; si usa
la regola di default per gli intransitivi e gli inaccusativi in strutture inverse 
no anche gli  intransitivi normali, come vivere se iniziano con un aggiunto temporale */

verb_phrase_intr_inv([sn(SN1,Gen,Num,Pers),LSP0,LSP1,SA1,Avv1,Avv2,Voc,Neg,parent(Par), Sub_n,comps(Comps)],[CliticoAcc,CliticoDat],
                          v(Verbo,Modo,Tempo,Pers,Num,Gen),
                          CatGr,
                          PredV, ListaArgsV1,
                          Supporto,
                          cat(CatV),
                          args(Args),
                          adjs(Adjs),H0) 
            :-
          try_remove(Comps, SN/Tipo, RestoComps),
          restrict_inv_subj(SN, Part, Caso, Tipo, Gen, Num),
          try_remove(inf(Inf)/vcomp, RestoComps, ListaSPs),
          PredV=pred_v(Verbo,CatGr,CatV,PrimoArg),
          try_remove(controllo(Controllo), ListaSPs, ListaSP2),
          ListaSP the_list LSP0 && LSP1 && ListaSP2,
          (CatGr=inac,
                   (Part='+',
                    Sogg=sogg_top
                    ;
                    Sogg=sogg_foc)
           ;
            ( CatGr=vatm ; CatGr=vimp; CatGr = intr),
                    Sogg=sogg_top),
          (Inf=[],   
          grammaticality_check(interp_attiva_intr, 
               [Verbo,PredV,ListaArgsV1,SN/Sogg,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3, Sub_n], Adjs)
          ;
           SN1=[],          
          grammaticality_check(interp_attiva_incoat, 
               [Verbo,PredV,ListaArgsV1,SN/Sogg,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3, Sub_n], Adjs)
          ;
           Inf\=[],
          grammaticality_check(interp_intr_inf, 
               [Verbo,Controllo,PredV1,ListaArgsV1,SN1/sogg,Inf/vcomp,ListaSP,CatV],Args,
               Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n], Adjs)
          ).

intr_inv(SN, SN1, Inf, CatGr, Sogg):-
          check_little_pro([SN]),
          restrict_inv_subj(SN1, Part, Caso, Tipo, Gen, Num),
          (nonvar(Part),
             (Part='+',
                    Sogg=sogg_top
                    ;
              Part='-',
                    Sogg=sogg_foc)
           ;
                    Sogg=sogg_top),
          !.

/* strutture impersonali inverse */

verbal_phrase_imp_inv([sn(SN1,Gen1,Num1,Pers1),sn(SN,G,Num,Pers),LSP0,LSP1,SA1,Avv1,Avv2,Voc,Neg,
                 parent(Par)],[CliticoAcc,CliticoDat],
                          v(Verbo,Modo,Tempo,Pers,Num1,Gen1),
                          PredV, ListaArgsV1,
                          Supporto,
                          cat(CatV),
                          args(Args),
                          adjs(Adjs),F,X,H0) 
          :-
           CatV\=risultato,
           sint_avv(F,Tempo,Avv3/F1,Tipo3),
           sint_prep(LSP2,F1,X),
           PredV=pred_v(Verbo,CatGr,CatV,PrimoArg),
           ListaSP the_list  LSP0 && LSP1 && LSP2 && CliticoDat &&SA1,
           grammaticality_check(interp_attiva_tr, 
               [Verbo,PredV, ListaArgsV1,SN/sogg,SN1/topic,ListaSP,CatV],
               Args,Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3], Adjs).

verb_phrase_imp([sn(SN2,G,Num,Pers),LSP0,LSP1,SA1,Avv1,Avv2,Voc,Neg,parent(Par),Sub_n,comps(Comps)],
             CatGr,v(Verbo,Modo,Tempo,Pers,Num1,Gen1),
                          PredV, ListaArgsV1,
                          Supporto,
                          cat(CatV),
                          args(Args),
                          adjs(Adjs),H0) 
            :-
            select_subcat([sn/sogg/_/_, sn/ogg/_/_], PredV, PredV1),
/*             Funz\=acomp, */
            SN2 = sn(indice(Ind),cat(Cat),
                         pr(pro_picc,pro,_,PersSn,GenSn,NumSn,Ca),
                         spec(def('+')),controllore(SimbContr)),
            SN = sn(indice(Ind), cat([umano]), 
                     cl(pro_imp, _, si, Pers, mas, Num1, [nom]), 
                     spec(def(-), part(+)), args(_), mods(_), adjs(_)),
          try_remove(Comps, SN1/Tipo, Compp),
          try_remove(Compp, Rifl/rifl_corto, ListaSP2),
          PredV=pred_v(Verbo,CatGr,CatV,PrimoArg),
          ListaSP the_list LSP0 && LSP1 && ListaSP2,
            (SN1\=[],
             (
              SN1=sn(indice(I),cat(C),n(T,Gen1,Num1),S,A,M,Ad)
              ; 
              SN1=sn(In,Ca,pr(pr_quantif, Pro, 3, G, N, C),
                       spec(def('-'),part('+'),_,_,_,_),Ar,Mo,Ad))
            ;
            SN1\=[], CatV\=risultato),
           (CatGr\=trans,
            grammaticality_check(interp_attiva_intr, 
               [Verbo,PredV,ListaArgsV1,SN/sogg,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3, Sub_n], Adjs)
           ;
            select_subcat([sn/sogg/_/_, sn/ogg/_/_], PredV, PredV1),
            (SN1=[],          
            grammaticality_check(interp_attiva_incoat, 
               [Verbo,PredV,ListaArgsV1,SN/sogg,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3, Sub_n], Adjs)
            ;
            SN1\=[],
           grammaticality_check(interp_attiva_tr, 
               [Verbo,PredV1, ListaArgsV1,SN/sogg,SN1/foc,ListaSP,CatV],
               Args,Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n], Adjs))
            ).


/* sv intransitivo con infinitiva soggetto: lavorare piace a giovanni */

verbal_phrase_int([svinf(Svinf,Controllo),LSP0,LSP1,SA1,Avv1,Avv2,Voc,Neg,parent(Par)],[CliticoAcc,CliticoDat],
                          v(Verbo,Modo,Tempo,Pers,Num,Gen),
                          PredV, ListaArgsV1,
                          Supporto,
                          cat(CatV),
                          args(Args),
                          adjs(Adjs),F,X,H0) 
           :-
            sint_avv(F,Tempo,Avv3/F1,Tipo3),
            gen_sym(f,Simb),
            agnt_sa(post,SA2,Gen1,Num1,F1,F2),
            sint_prep(LSP2,F2,F3),
            nom_avv(SN2,PredV,_,_,_,F3,F4),
            check_cat_temp(SN),
            sint_prep(LSP3,F4,F5),
            agnt_sa(post,SA3,Gen1,Num1,F5,F6),
            select_subcatt(Fun/propint/_/_, Fun = vcomp, PredV, PredV1),
            PredV1=pred_v(Verbo,CatGr,CatV,PrimoArg),
            ListaSP the_list 
                   CliticoDat && LSP0 && LSP1 && LSP2 && LSP3 && 
                   SA1 && SA2 && SA3 && SN2,
            grammaticality_check(interp_intr_inf_sogg, 
               [Verbo,Controllo,PredV1,ListaArgsV1,Svinf/sogg,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3], Adjs).

/* intransitive canoniche */
verbal_phrase_intrans(
   [sn(SN, Gen, Num, Pers), 
   LSP0, LSP1, SA1, Avv1, Avv2, 
   Voc, Neg, parent(Par), Sub_n], 
   [CliticoAcc, CliticoDat], 
   v(Verbo, Modo, Tempo, Pers, Num, Gen), 
   Vintr, 
   PredV, ListaArgsV1,
   Supporto, 
   cat(CatV), 
   args(Args), 
   adjs(Adjs), 
   F,X,H0) 
   :-
   on(Vintr, [vimp,vatm, intr, inac]),
   sint_avv_loc(SP,F,Ff),
   sint_avv(Ff,Tempo,Avv3/F1,Type),
   (Type=modal;Type=negation;Type=temp;Type=deictic),
   agnt_sa(post,SA2, Gen1, Num1,F1,F2),
   sint_prep(ListaSP2,F2,F3),
   (sint_prepos_nom(F3,F4,SNavv);
    nom_avv(SNavv, PredV, _, _, _,F3,F4)),
   (SNavv = [], SN1 = []
   ;
    gr(deutsch), nonvar(Tipo), Tipo=clitico,
    sint_prepos(SNavv, LSP3), SN1 = []
   ;
   check_cat_temp(SNavv),
   SN2=SNavv, SN1 = []
    ;
    SN1=SNavv
   ),
   sint_prep(ListaSP3,F4,F5),
   ListaSP2e3 the_list ListaSP2 && LSP3 && ListaSP3,
   match_oblique(ListaSP2e3, PredV, PredV1),   
   (
    \+ gr(english),
    oggetto_intrans(Oggetto, TOgg, PredV1, Controllo, CliticoAcc, PredV2,F5,F6)
    ;
    gr(english),
    oggetto_intrans( Oggetto, TOgg, PredV1, Controllo, H0, PredV2,F5,F6)
    ),
   agnt_sa(post,SA3, Gen1, Num1,F6,F7),
   sn_subordinato(_,Sub_n1,F7,F8),
   sint_prep(ListaSP4,F8,Q),
   sint_avv(Q,Tempo,Avv4/Q1,Type1),
   sint_agg(Ger,Q1,Q11),
   sint_prep3(Q11,X,LSP2, H0, nil),
   (Type1=locat;Type1=modal),
   PredV1=pred_v(Verbo,CatGr,CatV,PrimoArg),
   ListaSP the_list CliticoDat && LSP0 && LSP1 && LSP2 && SP && ListaSP2e3 && ListaSP4 &&
      SA1 && SA2 && SN2 && SA3,
   (
    (var(PredV2), PredV2=PredV1;
     nonvar(PredV2)),
    (Oggetto\=[],
     TOgg=vcomp,
     grammaticality_check(interp_intr_inf, 
               [Verbo,Controllo,PredV1,ListaArgsV1,SN/sogg, Oggetto/vcomp,ListaSP,CatV],
               Args,Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4, Sub_n1, Ger], Adjs)
     ;
     Oggetto\=[],
     TOgg=f/fcomp,
     grammaticality_check(interp_intr_fcomp, 
               [Verbo,Modo,PredV1,ListaArgsV1,SN/sogg, Oggetto/fcomp,ListaSP,CatV],
               Args,Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4, Sub_n1, Ger], Adjs)
     )
    ;
     SN1\=[],
     intr_inv(SN, SN1, Inf, Vintr, Sogg),
          (Oggetto=[],   
          grammaticality_check(interp_attiva_incoat, 
               [Verbo,PredV1,ListaArgsV1,SN1/Sogg,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4, Sub_n1, Ger], Adjs)
          ;
          Oggetto=[],   
          grammaticality_check(interp_attiva_intr, 
               [Verbo,PredV1,ListaArgsV1,SN1/Sogg,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4, Sub_n1, Ger], Adjs)
          ;
           Oggetto\=[], TOgg=vcomp,
          grammaticality_check(interp_intr_inf, 
        [Verbo,Controllo,PredV1,ListaArgsV1,SN1/sogg,Oggetto/vcomp,ListaSP,CatV],Args,
         Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4, Sub_n1, Ger], Adjs)
      )
     ;
     SN1=[],
    Oggetto=[],
    grammaticality_check(interp_attiva_intr, 
               [Verbo,PredV1,ListaArgsV1,SN/sogg,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4, Sub_n1, Ger], Adjs)
   ).

verbal_phrase_intrans(
   [sn(SN, Gen, Num, Pers), 
   LSP0, LSP1, SA1, Avv1, Avv2, 
   Voc, Neg, parent(Par), Sub_n
   ], 
   [CliticoAcc, CliticoDat], 
   v(Verbo, Modo, Tempo, Pers, Num, 
      Gen), 
   Vintr, 
   PredV, ListaArgsV1,
   Supporto, 
   cat(CatV), 
   args(Args), 
   adjs(Adjs), F, X, 
   H0) 
   :-
   on(Vintr, [intr, inac, vimp, vatm]),
   gen_sym(f, Simb),
   sint_avv(F,Tempo,Avv3/F1,Tipo3),
   agnt_sa(post,SA2, Gen1, Num1,F1,F2),
   sint_prep(LSP2,F2,F3),
   nom_avv(SN2, PredV, _, _, _,F3,F4),
   (SN2 = [], F44=F4
   ;
   SN2 = sn(indice(_), 
         cat(Cat), _, _, _, _, _),
   Cat\=[], Cat\=[_],
   member(tempo, Cat), F44=F4
   ;
   SN2 = sn(indice(_), 
         cat(Cat), _, _, _, _, _),
   F44=F3   
   ),
   sint_prep(LSP3,F44,F5),
   agnt_sa(post,SA3, Gen1, Num1,F5,F6),
   sn_subordinato(_,Sub_n1,F6,X),
   ListaSP the_list CliticoDat && LSP0 && LSP1 && LSP2 && LSP3 && SA1 && SA2 && SA3 && SN2,
   grammaticality_check(interp_attiva_intr, 
               [Verbo,PredV,ListaArgsV1,SN/sogg,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Sub_n1], Adjs).




oggetto_intrans(Oggetto, TOgg, PredV, Controllo, CliticoAcc, PredV,F,X)
    :- (F=[],X=[], Oggetto=[];F=[P], punct(P),X=[P], Oggetto=[]),!.

oggetto_intrans(Oggetto, TOgg, PredV, Controllo, CliticoAcc, PredV1,F,X)
    :-
    nonvar(PredV),
   (select_subcatt(Fun/prop/_/_, Fun = TOgg, PredV, PredV1)
   ;
   select_subcatt(Fun/propq/_, Fun = TOgg, PredV, PredV1)
   ;
   select_subcatt(Fun/prop/_, Fun = TOgg, PredV, PredV1)
   ),
   oggetto_intrans1(Oggetto, TOgg, PredV, Controllo, CliticoAcc, PredV1,F,X).


oggetto_intrans(Oggetto, TOgg, PredV, Controllo, CliticoAcc, PredV1,F,X)
   :-
    (nonvar(CliticoAcc);CliticoAcc\=[]),
     select_subcatt(Fun/ogg/_/_, Fun = sn, PredV, PredV1),
     trova_tipo_clitico(CliticoAcc,Tipo),
     oggetto(Oggetto, Tipo, PredV, Controllo, CliticoAcc, F,X,H, H).

oggetto_intrans(Oggetto, TOgg, PredV, Controllo, CliticoAcc, PredV1,F,X)
    :-
    nonvar(PredV),
    select_subcatt(Fun/ogg/_/_, Fun = TOgg, PredV, PredV1),
    TOgg=sn,
    oggetto(Oggetto, TOgg, PredV, Controllo, CliticoAcc, F,X,H, H).

oggetto_intrans(_, _, PredV, _, [], PredV,F,F):-!.
oggetto_intrans(_, _, PredV, _, _, PredV,F,F):-!.

oggetto_intrans1(Oggetto, vcomp, PredV, Controllo, H0, PredV1,F,X)
    :-
    gr(english),
    oggetto(Oggetto, svinf, PredV, Controllo, CliticoAcc, F,X,H0, nil).

oggetto_intrans1(Oggetto, vcomp, PredV, Controllo, CliticoAcc, PredV1,F,X)
    :-
    oggetto(Oggetto, svinf, PredV, Controllo, CliticoAcc, F,X, nil, nil).

oggetto_intrans1(Oggetto, f/fcomp, PredV, Controllo, CliticoAcc, PredV1,F,X)
    :-
    oggetto(Oggetto, fcomp, PredV, Controllo, CliticoAcc,F,X,nil, nil),!.

oggetto_intrans1(Oggetto, f/fcomp, PredV, Controllo, CliticoAcc, PredV1,F,X)
    :-
    oggetto(Oggetto, qcomp, PredV, Controllo, CliticoAcc,F,X,nil, nil),!.

oggetto_intrans1([], sp/obl, PredV, _, [], PredV,F,F):- !.

/*  FRASE SUBORDINATA COMPARATIVA  ELLITTICA  */

assertion_ell(Controllo,ip(indice(Simb),
                          v(V_ell,PrimoArg,Modo,Tempo,Pers,Num,Gen),
                          supporto(Verbo),
                          cat(CatV),
                          args(Args),
                          adjs(Adjs)),V_ell,PrimoArg,F,X) 
                         :-
                          sint_prep(LSP0,F,F1),
                          sint_avv(F1,Tempo,Avv1/F2,Tipo1),
                          soggetto(SN1,Gen,Num,Pers,F2,F3,H0,nil),
                          negaz(F3,Neg/F4),
                          gen_sym(f,Simb),
                          sintagma_mod(Controllo,
                             [sn(SN1,Gen,Num,Pers),Avv1,Neg],
                               v(Verbo,Modo,Tempo,Pers,Num,Gen),
                           supporto(Supp),
                          cat(CatV),
                          args(Args),
                          adjs(Adjs),PrimoArg,F4,X).

sintagma_mod(Controllore,[sn(SN1,Gen,Num,Pers),Avv1,Neg],
                          v(Verbo,Modo,Tempo,Pers,Num,Gen),
                          supporto(Supp),
                          cat(modal),
                          args(Args),
                          adjs(Adjs),PrimoArg,F,X)
          :-
          verbo_x(F,X,v(Supporto,Modo,Tempo/SempComp,Pers,Num,Gen),
                 SN,SP,Forma,supporto, _, _, _, _ ),
          gen_sym(f,Simb), Verbo=Supporto,
          SN1=sn(indice(Ind),cat(Cat),
                 pr(pro_picc, pro, _, Pers, _, Num, Case),S,controllore(Controllore)),
          (list(PrimoArg), on(sn/Funz/Ruolo/_, PrimoArg)
             ;
          PrimoArg=sn/Funz/Ruolo/_),
          Args=([Y]), Y = arg(funzione(Funz),ruolo(Ruolo),SN1).


/*  FRASI  ECCEZIONALI  */

assertion_infinitive(S,F,X):- infinitiva(S,C,F,X,nil,nil).

assert_infinitive(S,C,F,X,H):- infinitiva(S,C,F,X,H,nil).

/* attiva intransitiva avversativa */
attiva_intrans_avver( presentative( [ecco_che], 
                ip(indice(Simb),
                          v(Verbo,Voce,ListaArgsV,Modo,Tempo,Pers,Num,Gen),
                          Supporto, cat(CatV), args(Args),
                          adjs(Adjs))),Frase,X,H0)
   :-
   gr(italiano),
   Frase=[W,Z|S],
   W=ecco, retraction(a_intrans_avver,_),
   Z=che, retraction(a_intrans_avver,_), 
   sint_avv(S,Tempo,Avv1/S1,Tipo1),
   sn_avv(S1,S2,Pro, Tipo, SN1, SN2, SP0, Gen, Num, Pers),
   negaz(S2,Neg/S3),
   verbo1(S3,S4,PersSn, v(Verbo, Modo, Tempo, Pers, Num, Gen), Pro1, Pro2,   
              finito, CatGr, Supporto, 
              CatV, PredVs, _, _, _, _, _),
   choose_predv(PredVs, PredV, CatGr1, CatV1),
   (CatGr1=intr;
    CatGr1=inac;
    CatGr1=cop),
   sint_avv(S4,Tempo,Avv3/S5,Tipo3),
   gen_sym(f,Simb),
   sint_prep(LSP,S5,X),
   PredV=pred_v(Verbo, CatGr1, CatV1, SubCatIn),
           ListaSP the_list LSP && SN2,
   grammaticality_check(interp_attiva_intr, 
               [Verbo,PredV,ListaArgsV,SN1/foc,ListaSP,CatV],Args,Adjs_x,[],
               [Neg, Avv1, Avv3], Adjs).

verbal_phrase_psych([sn(SN1,Gen,Num,Pers),LSP0,LSP1,SA1,Avv1,Avv2,Voc,Neg,
             parent(Par),Sub_n, comps(Comps)],
             [CliticoAcc,CliticoDat],
                          v(Verbo,Modo,Tempo,Pers,Num,Gen),
                          PredV, ListaArgsV1,
                          Supporto,
                          cat(CatV),
                          args(Args),
                          adjs(Adjs),H0) 
     :-
     try_remove(Comps, Oggetto/TOgg, ListaSP2),
       PredV=pred_v(Verbo,CatGr,CatV,PrimoArg),
     ListaSP the_list LSP0 && LSP1 && ListaSP2,
   (
     (TOgg = sn ; TOgg = clitico ; TOgg = riflessivo) ,
          select_subcatt(Fun/_/_, Fun = sn/sogg, PredV, PredV1),
   grammaticality_check(interp_psych, 
               [Verbo,PredV1,ListaArgsV1,Oggetto/sogg_foc,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3, Sub_n], Adjs)
    ;
      TOgg = svinf,
      select_subcatt(Fun/propint/_/_, Fun = vcomp, PredV, PredV1),
        remove(controllo(Controllo), ListaSP, ListaSP3),
   grammaticality_check(interp_intr_inf_sogg, 
               [Verbo,Controllo,PredV1,ListaArgsV1,Oggetto/sogg,ListaSP3,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3, Sub_n], Adjs)
    ;
      TOgg = fcomp,
      select_subcatt(Fun/propint/_, Fun = f/fcomp, PredV, PredV1),
        remove(controllo(Controllo), ListaSP, ListaSP3),
   grammaticality_check(interp_psyc_fcomp, 
               [Verbo,Modo,PredV1,ListaArgsV1,Oggetto/sogg,ListaSP3,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3, Sub_n], Adjs)).


verbal_phrase_psych([sn(SN1,Gen,Num,Pers),LSP0,LSP1,SA1,Avv1,Avv2,Voc,Neg,parent(Par),Sub_n, comps(Comps)],[CliticoAcc,CliticoDat],
                          v(Verbo,Modo,Tempo,Pers,Num,Gen),
                          PredV, ListaArgsV1,
                          Supporto,
                          cat(CatV),
                          args(Args),
                          adjs(Adjs),H0) 
      :-
       PredV=pred_v(Verbo,CatGr,CatV,PrimoArg),
       grammaticality_check(interp_psych, 
               [Verbo,PredV,ListaArgsV1,SN1/sogg,Comps,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3, Sub_n], Adjs).

verb_phrase_psych_infin([svinf(Svinf,Controllo),Avv1,Voc,Neg,parent(Par)],[_,_],
                          v(Verbo,Modo,Tempo,Pers,Num,Gen),
                          PredV, ListaArgsV1,
                          Supporto,
                          cat(CatV),
                          args(Args),
                          adjs(Adjs),F,X,H0) 
      :-
      oggetto(Oggetto,TOgg,PredV,Controllo,CliticoAcc,F,F1,H0,nil),
      agnt_sa(post,SA2,Gen1,Num1,F1,F2),
      (TOgg=sn;
        TOgg=clitico),
      sint_prep(ListaSP2,F2,S4), 
      sint_avv(S4,Tempo,Avv2/X,Tipo3),
       PredV=pred_v(Verbo,CatGr,CatV,PrimoArg),
      ListaSP the_list ListaSP2 && SA2,
   grammaticality_check(interp_psyc_inf_sogg, 
               [Verbo,Controllo,PredV,ListaArgsV1,Svinf/sogg,Oggetto/ogg,ListaSP,CatV],
                Args,Adjs_x,Par,[Neg, Avv1, Avv2], Adjs).

sint_avv([],Tempo,[]/[],Tipo) :-!.

sint_avv(F,Tempo,Adv/X,Tipo) :-
  (
   onelook(F,sint_avv,[av,d,n],nil),
   sint_avv1(F,Tempo,Adv/F1,Tipo),
   Adv\=[],
    (genre(legal),
     F1=[W|X],
     (W=and;W=e;W=ed;W=','),
     retraction(conj,_)     
    ;
    X=F1
   )
   ;
   Adv=[], X=F
   ).   

sint_avv(F,_,[]/F,_):-!.

matchtempo((td=tr), Tempo):-!.
matchtempo(C, Tempo):-var(Tempo),!.
matchtempo(C, Tempo):-
   Tempo\=fut, 
   Tempo\=past, 
   Tempo\=fut/semp, 
   Tempo\=past/semp,!.
matchtempo(C, Tempo):-
   gr(english),
   (Tempo=past;Tempo=past/semp), 
   C=(td<tr); 
   (Tempo=fut;Tempo=fut/semp;Tempo=pres;Tempo=pres/semp), 
   C=(tr<td),!.
matchtempo(C, Tempo):-
   \+ gr(english),!.

sint_avv1(F,Tempo,Adv/X,Tipo) :- 
   sint_mod_avv(F,Tempo,Adv/X,Tipo). 

sint_avv1(F,Tempo,Adv/X,Tipo):- 
   sint_avv_sempl(F,Tempo,Adv/X,Tipo). 

sint_avv1(F,_,[]/F,_):-!.

sint_mod_avv(F,Tempo,adv(intens(I),Avv)/X,Tipo) 
   :- 
   intens(F,I/F1),
   I\=[], 
   sint_avv_sempl(F1,Tempo,Avv/X,Tipo).

sint_avv_sempl([Avverbio|X],Tempo,
   adj(locativo,
       sp(prep(in,cat([luogo]),[]),args([Ogg])))/X,locat) 
   :-
    avv(Avverbio,avv(pred_avv(PredAvv),tipo(locat),S)),
        SN = sn(indice(Symb),cat([luogo]),n(PredAvv,_,_),S,
             args(Args),mods(Mods),adjs(Adjs)),
        Ogg= arg(funzione(ogg),ruolo(locativo),SN),
   gen_sym(sn, Symb),
   !.
sint_avv_sempl([Avverbio|X],Tempo,Avv/X,Tipo):-
       avv(Avverbio,Avv), 
       (Avv=avv(pred_avv(Avverbio),tipo(Tipo))
             ;
       Avv=avv(pred_avv(Avverbio),tipo(Tipo),duraz(_),config([C])),
       matchtempo(C, Tempo)
             ;
       Avv=avv(pred_avv(Avverbio),tipo(Tipo),duraz(_),config([]))
             ;
       Avv=avv(pred_avv(Avverbio),tipo(Tipo),spec(_))
             ;
       Avv=avv(pred_avv(Avverb),tipo(Tipo),spec(_))
       ),
       retraction(sint_avv_sempl,av),!.

sint_avv_sempl([C, D|X],Tempo,avv(pred_n(N/volta),tipo(frequenza),duraz(iterato),config([]))/X,frequenza)
    :-
      cardinale(C,N,fem,plur),
      (D=times;D=volte;D='Mal'),
      retraction(sint_avv_sempl,_),!.

sint_avv_sempl([Q|F],Tempo,
     avv(pred_n(each/Nome),tipo(frequenza),duraz(intervallato),config([]))/X,frequenza) 
    :- 
        (Q=ogni;Q=each),
        retraction(sint_avv_sempl,_),
        F=[N|X], 
        nome(N,Nome,_Gen,sing),
        pred_n(Nome,nil,[tempo,durata],[]),!.

sint_avv_sempl([Q|F],Tempo,avv(pred_n(every/N/Nome),tipo(frequenza),duraz(intervallato),config([]))/X,frequenza)
     :- 
        (Q=every;Q=ogni), 
        retraction(sint_avv_sempl,_), 
        F=[C|F1], 
        cardinale(C,N,Gen,plur),
        F1=[No|X], 
        nome(No,Nome,Gen,plur),
        pred_n(Nome,nil,[tempo,durata],[]),!.

sint_avv_sempl([Q|F],Tempo,avv(pred_n(N/year),tipo(temp),duraz(punt),config(C))/X,deittico)
     :-
        cardinale(Q,N,fem,plur),
        F=[C|F1], 
        (C=years;C=anni), 
        F1=[Avverbio|X], 
        avv(Avverbio,avv(pred_avv(PredAvv),tipo(temp),D,config(C))),!.

sint_avv_sempl([N,P,N1|X],Tempo,avv(pred_n(Nome/P/Nome),tipo(modal))/X,modale)
     :-
          nome(N,Nome,Gen,sing),
          (gr(english), P=by
          ;
          gr(italiano), P=a),
          nome(N1,Nome,Gen,sing),!.

sint_avv_sempl([without,fault|X],Tempo,avv(pred_n(only),tipo(exclusive))/X,exclusive)
     :- 
          gr(english), genre(legal),!.

sint_agg([],[],[]):-!.

sint_agg(gerundive(Asserz),F,X) :- gerundive(Asserz,F,X).
sint_agg([],F,F):-!.

/*
Se nella lista di sottocategorizzazione c'è un obliquo allora nella lista degli SP ci deve essere un sp con la preposizione e la categoria adeguata
*/
match_oblique([], PredV, PredV).

match_oblique(ListaSP, PredV, PredV1) :-
   PredV=pred_v(V, CatG, CatS, SubOld),
   subcat_on([Sub|Categ], PredV),
   (
    (subcat_on(sp/ogg2/_/Prep/Cat1, [Sub|Categ]);
     subcat_on(sp/obl/_/Prep/Cat1, [Sub|Categ]);
    subcat_on(sp/obl1/_/Prep/Cat1, [Sub|Categ]);
    subcat_on(sp/obl2/_/Prep/Cat1, [Sub|Categ])
    ),
     atomic(Prep),
    on(sp(prep(Prep, cat(Cat), _),_), ListaSP);
    (subcat_on(sp/ogg2/_/Prep/Cat1, [Sub|Categ]);
     subcat_on(sp/obl/_/Prep/Cat1, [Sub|Categ]);
     subcat_on(sp/obl1/_/Prep/Cat1, [Sub|Categ]);
     subcat_on(sp/obl2/_/Prep/Cat1, [Sub|Categ])
    ),
   on(P,Prep),
   on(sp(prep(P, cat(Cat), _),_), ListaSP)),
   interp_cat(Cat,Cat1),
PredV1=pred_v(V, CatG, CatS, [Sub|Categ]).

match_oblique(_, PredV, PredV).

sint_avv_loc(LSP,F,X) :-
    (F=[],X=[], LSP=[];F=[P], punct(P),X=[P], LSP=[]),!.

sint_avv_loc(sp(prep(in,cat([luogo]),[]),SN),F,X) 
   :-
   F=[Avverbio|X],
   avv(Avverbio,avv(pred_avv(PredAvv),tipo(locat),S)),
        SN = sn(indice(Symb),cat([luogo]),n(PredAvv,_,_),S,
             args(Args),mods(Mods),adjs(Adjs)),
   gen_sym(sn, Symb),
   !.

sint_avv_loc(SP,F,F):-!.


subject_lh(F, H1, Aux):-
   gr(english), 
   Aux=.. [aux, Au|_],
   auxtocomp(Au),
   nonvar(H1),
   onelook(F,subject,[a,n,d,r],[vc,aux,v]),
   !.

subject_lh(F, H1, Aux):-
   gr(english), 
   Aux=.. [aux, Au|_],
   nonvar(H1),
   H1=sn/Ind/Cats/Pro,
   (Cats\=[],
    on(C, Cats),
    Pro=..[Pref,pro,_,_,P,Caso],
    (var(Caso); nonvar(Caso),
    (on(acc, Caso);on(obl,Caso))),
    onelook(F,subject,[a,n,d,r],[vc,aux,v])
    ;
   onelook(F,subject,[p,vc,aux,v,g],nil)),
   !.

subject_lh(F, H1, Aux):-
   gr(deutsch), 
   Aux=.. [aux, sein|_],
   nonvar(H1),
   (H1=sn/Ind/Cats/Pro
   ;   H1=sp/Prep/Ind/Cats/Pro),
   Pro=..[Pref,pro,_,_,P,Caso],
    (var(Caso); nonvar(Caso),
    (on(acc, Caso);on(obl,Caso))),
   onelook(F,subject,[a,n,d,r],[vc,aux,v]),
   !.


examine(H):-
   (H=sn/Ind/Cats/Pro
   ;   
    H=sp/Prep/Ind/Cats/Pro
   ;   
    H=sa/Ind/Cats/Pro),
   Pro=..[Pref,pro,_,_,P,Caso],
   Pref=pr_int,!.

match_tratti(Aux,Gen, Num, Pers):-
   Aux=..[A,Ainf,Modo1,Tempo,Pers,Num],
   !.

matchtratti(F,G,N,P,G,N,P):-
   gr(germanic),
   onelook(F,sn,[vc,aux,v],[a,n,d,r]),
   !.
/* se c'è una variabile di estraposizione riempita e vale il loookahead 
   forzo l'accordo a patto che dopo ci sia il verbo */

matchtratti(F,G,N,P,G1,N1,P1):-
   gr(romance),
   onelook(F,sn,[vc,aux,v],[a,n,d,r]),
   !.
/* se c'è una variabile di estraposizione riempita e vale il loookahead 
   non posso forzare l'accordo se dopo c'è il verbo; se c'è il nome deve averlo
   processato prima */

relative_head_clause(Prorel, G,N,P,C, Simb, Y, F, X):-
        nonvar(Prorel),
        (
          Prorel=which, St=sn, CatN=[any], Cat=CatN, C=[acc,nom], Head=thing
            ;
          Prorel=one_that, St=sn, CatN=[oggetto,astratto,stato], Cat=CatN, C=[acc,nom], Head=thing
            ;
          Prorel=what, St=sn, CatN=[oggetto,astratto,stato], Cat=CatN, C=[acc,nom], Head=thing
            ;
          Prorel=whom, St=sn, CatN=[umano], Cat=CatN, C=[acc,obl], Head=person
            ;
          Prorel=who, St=sn, CatN=[umano], Cat=CatN, C=[acc,nom], Head=person
            ;
          Prorel=how_much, St=sa, CatN=[manner], Cat=CatN, Head=way
            ;
          Prorel=whereby, St=sp, CatN=[instrument], Cat=CatN, Head=thing
            ;
          Prorel=how_many, St=sa, CatN=[manner], Cat=CatN, Head=way
            ;
          Prorel=how, St=sa, CatN=[manner], Cat=CatN, Head=way
            ;
          Prorel=why, St=sp, CatN=[reason], Cat=CatN, Head=reason
            ;
          Prorel=where, St=sp, CatN=[luogo], Head=place
            ;
          Prorel=when,  St=sp, CatN=[tempo], Head=time
           ),
        (St=sn, Extra=sn/Simb/Cat/prorel(pro,G,N1,P,C)
       ;
        St=sa, Extra=sa/Simb/Cat/prorel(pro,G,N,P,C)
       ;
        Extra=sp/in/Simb/CatN/prorel(Prorel,G,N,P,C)),
       (
        F=[to|_],
        complemento_inf(Time,R,Controllo,F,X,Extra,H1)
        ;
       assert_cp1(Time,CStrCp1, R,F,X,Extra)),
       Y=sn(indice(Ind),cat(Cat),Testa,spec(def(+)),args([]),mods(Mods),adjs([])),
       gen_sym(sn,Ind),
       Mods=[relativa(topic(relativo,sn(indice(Simb),cat(Cat),
                          pr(prorel,Prorel,P,G,N,C),controllore(Ind))),R)],
       (St\=sn, Testa=n(Head,3,sing)
         ; St=sn, Testa=pr(prorel, _,Prorel,3,G,N,C)),
       !.

   
/* SOGGETTO e COMPLEMENTI */

soggetto_inverso(Tipo,Part,SN,Gen,Num,Pers,F,X) 
   :-
   sint_n(obj,Fl,[],SN,Gen,Num,Pers,Caso,F,X,nil,nil),!,
   SN\=sn(indice(_), cat(_), 
          cl(rifl_corto, si, 3, _, _, C), 
          spec(def(+)), args(_), mods(_), adjs(_)),
    Caso=[nom],
   (SN=sn(indice(_), cat(_), 
        pr(Tipo, P, Pe, Ge, Nu, Ca),
    spec(def(D), part(Part), mod(_), foc(_), card(_), quant(Q)), args(A), mods(M), adjs(Ad))
    ;
   Tipo=nome).

/* SOGGETTO - puo' essere implicito */

soggetto(SN,Gen,Num,Pers,F,X,H1,H1) 
   :-
   (var(H1)
   ;
   H1=nil),
       pron_relativo(G,N, C, Prorel,F,F1),
   \+ onelook(F1,sn,n, nil),
       gen_sym(sn,Simb),retraction(relative, r),
   relative_head_clause(Prorel, G,N,3,C, Simb, SN, F1, X).

soggetto(SN,Gen,Num,Pers,F,X,H1,H1) 
   :-
   ((var(H1);H1=nil)
   ;
   nonvar(H1), H1\=nil,
   (H1=sn/SimbContr/Cat/Pron,
        Pron=..[Pro,Prorel,G,N,P,C],
     (
      Prorel\=who,
      onelook(F,sn,[a,n,d,r], c)
      ;
      Prorel\=who)
      ;
       H1\=sn/SimbContr/Cat/prorel(Prorel,G,N,P,C)
   )),
   sint_n(subj,Fl,[],SN,Gen,Num,Pers,Caso,F,X,nil,nil),
   SN\=sn(indice(_), cat(_), 
          cl(_, _, _, _, _, [nom]), 
          spec(def(+)), args(_), mods(_), adjs(_)),
   feature_on(nom, Caso).

/* se non si istanziano i tratti funzionali non si fallisce nel caso in cui
l'estraposizione è di un oggetto e i tratti del verbo sono diversi;
 se si istanziano i tratti si forza l'accordo del verbo ma per recuperare 
 l'estraposizione nel caso in cui serva per l'oggetto, serve comunque avere
 il soggetto pro_piccolo con i tratti presi dal verbo e non dal controllore */

soggetto(SN,G1,N1,P1,F,F,H,nil) 
   :- 
   nonvar(H),
   H=sn/SimbContr/Cat/Pron,
        Pron=..[Pro,Prorel,G,N,P,C],
   matchtratti(F,G,N,P,G1,N1,P1),
   feature_on(nom, C), Ca=nom,
   SN = sn(indice(Simb),cat(Cat),
           pr(pro_picc,pro,_,P1,G1,N1,Ca),
           spec(def('+')),controllore(SimbContr)),
   gen_sym(sn,Simb).

soggetto(sn(indice(Simb),cat(C),pr(pro_picc,pro,_,Pers,Gen,Num,Caso),
          spec(def('+')),controllore(X)),Gen,Num,Pers,F,F,H1,H1)   
   :-
   gr(romance),
   Caso = [nom],
   gen_sym(sn,Simb).

soggetto(SN,Gen,Num,Pers,F,X,H1,H1) 
   :-
   gr(english),
   F=[there|X],
   SN=sn(indice(Simb), cat([locativo]), 
          cl(clitico, _, there, 3, _, sing, obl), 
          spec(def(+)), args([]), mods([]), adjs([])),
      gen_sym(sn,Simb),
   !.


subject(SubCat,SN,Gen,Num,Pers,F,X,H1,H1) 
   :-
   (var(H1)
   ;
   H1=nil),
   sint_n(subj,Fl,SubCat,SN,Gen,Num,Pers,Caso,F,X,nil,nil),
   SN\=sn(indice(_), cat(_), 
          cl(_, _, _, _, _, [nom]), 
          spec(def(+)), args(_), mods(_), adjs(_)),
   feature_on(nom, Caso).

subject(SubCat,SN,G,N,P,F,F,sn/SimbContr/Cat/prorel(Prorel,G,N,P,C),nil) 
   :- 
   feature_on(nom, C), Ca=nom,
   SN = sn(indice(Simb),cat(Cat),
           pr(pro_picc,pro,_,P,G,N,Ca),
           spec(def('+')),controllore(SimbContr)),
   gen_sym(sn,Simb).

subject(SubCat,SN,Gen,Num,Pers,F,X,H1,H1) 
   :-
   gr(english),
   F=[there|X],
   SN=sn(indice(Simb), cat([locativo]), 
          cl(clitico, _, there, 3, _, sing, obl), 
          spec(def(+)), args([]), mods([]), adjs([])),
      gen_sym(sn,Simb),
   !.

subject(SubCat,SN,Gen,Num,Pers,F,F,H1,H1) 
   :-
   gr(deutsch),
   (nonvar(H1)
   ;
   H1\=nil),!.

/* OGGETTO - deve essere espresso nelle frasi con verbi transitivi 
   se l'oggetto  e' una completiva (Ruolo=prop, cioe' ≠ verbi Fattivi) e'possibile l'    
   estraposizione  altrimenti NO     */

oggetto_any(CatGr,ArgsV,Oggetto1, [], sn, Controllo, CliticoAcc,F,F,H4,H5)  
         :-
        nonvar(H4),
        H4 = sn/SimbContr/Cat/Pron,
        Pron=..[Pro,Prorel,G,N,P,C],
        Oggetto = sn(indice(Simb),cat(Cat),pr(vbl,vbl,_,P,G,N,C),
                    controllore(SimbContr)),
              feature_on(acc, C),  
              gen_sym(sn,Simb),Oggetto1=Oggetto/ogg.

oggetto_any(CatGr,ArgsV,Oggetto1, Oggetto2, TOgg, Controllo, CliticoAcc,F,X,H4,H5)
   :-
    CatGr\=cop,
   (CliticoAcc\=[],
    Oggetto1 = CliticoAcc,
%    nonvar(TOgg),
    TOgg=clitico,
    CliticoAcc=sn(_, _, cl(clitico, _, _, _, _, _, Caso), S),
    (on(acc, Caso); Caso=acc),
    second_object(TOgg,Oggetto2,Controllo,F,X,H4,H5)
    ;
    compl_inf(Svinf,Controllo,F,X,H4,H5),
    nonvar(Svinf),Oggetto1=Svinf, TOgg=vcomp
    ;
    oggetto(Oggetto1,fcomp,ArgsV,_,[],F,X,nil,nil),
    Oggetto1\=[],
    TOgg=fcomp
    ;
    build_ogg2(F,X,ArgsV,TOgg,Caso,Oggetto1,Oggetto2,H4,H5)
    ),
    !. 

oggetto_any(_,_,[],[], _, _, _,F,F,_,_):-!.

build_ogg2(F,X,ArgsV,TOgg,Caso,Oggetto1,Oggetto2,H4,H5):-
    np(SN,ArgsV,_,_,Caso,F,F1,nil,nil),
     (nonvar(SN),
      trova_tipo_clitico(SN,TOgg)
       ;
      nonvar(SN),
      TOgg=sn),
    second_object(TOgg,ArgsV,Oggetto2,Controllo,F1,X,H4,H5),
    prendisubcats(ArgsV, Valenz),   
    second_check(Valenz,TOgg,SN,Oggetto1,Oggetto2,Caso),!.

prendisubcats(ArgsV, Valenz):-
    ArgsV=.. [pred_v,Verb|_],
    prendisubcat(Verb, Valenz).

prendisubcat(Verb, Valenz):-
    pred_vs(Verb, Trans, A, C1-V1, R1, S1, C2-V2, P1, R2, S2, C3-V3, P2, R3, S3),
    (V3=nn, Valenz=[V2]
    ;
    V3\=nn, Valenz=[V2,V3]).

prendisubcat(Verb, Valenz):-
    pred_vs(Verb, Trans, A, C1-V1, R1, S1, C2-V2, P1, R2, S2, V3, P2, R3, S3),
    (V3=nn, Valenz=[V2]
    ;
    V3\=nn, Valenz=[V2,V3]).

prendisubcat(Verb, Valenz):-
    pred_vs(Verb, Trans, A, C1-V1, R1, S1, V2, P1, R2, S2, C3-V3, P2, R3, S3),
    (V3=nn, Valenz=[V2]
    ;
    V3\=nn, Valenz=[V2,V3]).

prendisubcat(Verb, Valenz):-
    pred_vs(Verb, Trans, A, C1-V1, R1, S1, V2, P1, R2, S2, V3, P2, R3, S3),
    (V3=nn, Valenz=[V2]
    ;
    V3\=nn, Valenz=[V2,V3]).


prendisubcat(Verb, Valenz):-
    subcats(Verb, Valenzen),
    selectr(Valenzen, Valenz1),
    sort(Valenz1, Valenz).

selectr([], []):-!.
selectr([Erste|Rest], [Val|Valenz]):-
   select_complr(Erste, Val),
   selectr(Rest, Valenz),
   !.

select_complr([Erste], nil):-!.
select_complr([C/sogg/R/F|Erste], Val):-
   s_c_subr(Erste, Val),!.

select_complr(Erste, nil).

s_c_subr([Erste|Rest], Role):-
   check_subcats(Erste, Role-Val).
   
subcats(Verb, Valenzen):-
   pred_vc(Verb, Synt, Aspekt, Valenzen),
   !.

select([], []):-!.
select([Erste|Rest], [Val|Valenz]):-
   select_compl(Erste, Val),
   select(Rest, Valenz),
   !.

select_compl([Erste], nil):-!.
select_compl([C/sogg/R/F|Erste], Val):-
   s_c_sub(Erste, Val),!.

select_compl(Erste, nil).

s_c_sub([Erste], Val):-
   check_subcats(Erste, Val-Role).

check_subcats(ncomp/Role/Contr, ncomp-prop).
check_subcats(acomp/Role/Contr, acomp-prop).
check_subcats(xcomp/Role/Contr, xcomp-prop).
check_subcats(vcomp/Role/P/Contr, vcomp-prop).
check_subcats(f/fcomp/Role/Contr, fcomp-prop).
check_subcats(sp/Val/Role/P/Fea, Val-Role).
check_subcats(sn/Val/Role/Fea, Val-Role).

second_check(Valenz,TOgg,Oggetto,Oggetto1,Oggetto2,Caso):-
       gr(germanic),
       on(ogg, Valenz),
       \+ on(obl, Valenz),       
       (Valenz\=[A],
       on(ogg2,Valenz),
       case_check(dat, Caso),
       nonvar(Oggetto),
       Oggetto2=Oggetto/ogg2
       ; 
        case_check(acc, Caso),
        Oggetto1=Oggetto/ogg
       ),!.

second_check(Valenz,TOgg,Oggetto,Oggetto1,Oggetto2,Caso):-
       nonvar(TOgg),
       TOgg\=sn, 
       Oggetto\=[],
       (case_check(dat, Caso), 
        sint_prepos(Oggetto,ListaSP),
        nonvar(ListaSP),
        Oggetto2=ListaSP/ogg2
       ; 
       case_check(acc, Caso), 
       \+ case_check(obl, Caso), 
       Oggetto1=Oggetto/ogg,
       nonvar(Oggetto)
       ; 
       case_check(obl, Caso), 
        sint_prepos(Oggetto,ListaSP),
        nonvar(ListaSP),
        Oggetto2=ListaSP/ogg2
       ),!.

second_check(Valenz,TOgg,Oggetto,Oggetto1,Oggetto2,Caso):-
      on(ogg, Valenz),
      Oggetto\=[],
      nonvar(Oggetto),
      case_check(acc, Caso), 
      Oggetto1=Oggetto/ogg,
      !.

second_object(TOgg,ArgsV,Oggetto2,Controllo,F,X,H4,H5) 
   :-
   nonvar(TOgg),
   TOgg=clitico,
    (compl_inf(Svinf,Controllo,F,X,H4,H5),
     nonvar(Svinf),Oggetto2=Svinf/vcomp,!
    ;
    oggetto(Obj2,fcomp,ArgsV,_,[],F,X,nil,nil),
    Obj2\=[],
    Oggetto2=Obj2/fcomp),!.

second_object(TOgg,ArgsV,Oggetto2,Controllo,F,X,H4,H5) 
   :-
   nonvar(TOgg),
   gr(germanic),
   TOgg=sn,
    (compl_inf(Svinf,Controllo,F,X,H4,H5),
     nonvar(Svinf),Oggetto2=Svinf/vcomp,!
    ;
    oggetto(Obj2,fcomp,ArgsV,_,[],F,X,nil,nil),
    Obj2\=[],
    Oggetto2=Obj2/fcomp),!.

second_object(_,_,_,Controllo,F,F,H4,H4):-!.

compl_inf(Svinf,Controllo,F,X,H4,H5):-
    complemento_inf(Svinf,Controllo,F,X,H4,H5).
compl_inf(_,_,F,F,_,_):- !.


np(Oggetto,_,_,_,Caso,F,X,nil,nil):-
    (F=[],X=[], Oggetto=[];F=[P], punct(P),X=[P], Oggetto=[]),!.

np(Oggetto,SubV,_,_,Caso,F,X,nil,nil):-
    sint_n(obj,Fl,SubV,Oggetto,_,_,_,Caso,F,X,nil,nil),
    !.

np(_,_,_,_,_,F,F,_,_):- !.

case_check(C, C1):-
     nonvar(C1),
     C=C1,!.
case_check(C, [C1]):-
     nonvar(C1),
     C=C1,!.
case_check(C, List):-
     List\=[],
     on(C, List),!.
case_check(C, [C]):-!.
     
oggetto(SN,Cli,_,_,SN,F,F,H0,H0) 
   :-
   nonvar(Cli),
   Cli=clitico,
   SN =.. [sn,_,_,cl(clitico,_,_,_,_,_,C)|_],
   feature_on(acc, C),
   !.

oggetto(SN,Rifl,_,_,SN,F,F,H0,H0) 
   :-
   nonvar(Rifl),
   (Rifl=riflessivo;Rifl=rifl_corto),
   SN =.. [sn,I,Cat,cl(Rifl1,_,si,_,_,P,C)|_],
   !.

oggetto(SN,Rifl,_,_,SN,F,F,H0,H0) 
   :-
   nonvar(Rifl),
   Rifl=rifl_corto,
   SN =.. [sn,I,Cat,cl(Rifl1,_,si,_,_,P,C)|_],
   !.

oggetto(SN,Encl,_,_,SN,F,X,H0,H0) 
   :-
   nonvar(Encl),
   Encl=enclitico,
   sint_n(obj,Fl,[],SN,_,_,_,Caso,F,X,nil,nil),
   SN=.. [sn,_,_,cl(enclitico,Part,Pro,G,N,P,Caso)|_],
   member(dat,Caso),!.

oggetto(Fcomp,TOg,ArgsV,R,[],F,X,nil,nil):- 
    (F=[],X=[], Fcomp=[];F=[P], punct(P),X=[P], Fcomp=[]),!.

oggetto(Svinf,svinf,ArgsV,Controllo,[],F,X,H4,H5) 
   :-
   complemento_inf(Svinf,Controllo,F,X,H4,H5),!. 

/*
per il verbo fare con il clitico in salita
*/
oggetto(Svinf,svinf,ArgsV,Controllo,Clit,F,X,H4,H5) 
   :-
   Clit\=[],
   ArgsV=.. [pred_v, fare|Rest],
   Clit=[SP],
   (
   SP=..[sp, prep(_,_,_), SN],
   SN =.. [sn,indice(Ind),_,cl(Tipo, _, _, _, _, _, _)|_]
   ;
   SP =.. [sn,indice(Ind),_,cl(Tipo, _, _, _, _, _, _)|_]
   ),
   infinitiva(Svinf,Controllo,F,X,H0,H1),
   Controllo=Ind.
/*
se l'oggetto e' una interrogativa indiretta introdotta dal se
 (Ruolo=propq, catgrammaticale = f) non e'  possibile l'estraposizione
*/
oggetto(Fcomp,fcomp,ArgsV,prop,[],F,X,nil,nil) 
   :-
   gr(deutsch),
   fcomp(Fcomp,F,X,nil,nil),!.

oggetto(Fcomp,fcomp,ArgsV,R,[],F,X,H4,H5) 
   :-
   (
   nonvar(ArgsV),ArgsV\=[],
   select_subcat(f/fcomp/prop/_, ArgsV, _), R=prop,
   fcomp(Fcomp,F,X,H4,H5),!  /* se il ruolo e' PROP */
   ;
   nonvar(ArgsV),ArgsV\=[],
   select_subcat(f/fcomp/propint/_,ArgsV, _), R=propint,
   fcomp(Fcomp,F,X,nil,nil) /* VERBI FATTIVI */
   ),!. 

oggetto(Fcomp,fcomp,ArgsV,propq,[],F,X,H4,H5) 
   :-
   nonvar(ArgsV),ArgsV\=[],
   select_subcat(f/fcomp/propq/_, ArgsV, _),
   qcomp(Fcomp,F,X),!.

oggetto(Fcomp,qcomp,ArgsV,propq,[],F,X,H4,H5) 
   :-
   nonvar(ArgsV),ArgsV\=[],
   select_subcat(f/fcomp/propq/_, ArgsV, _),
   qcomp(Fcomp,F,X),!.

oggetto(SN,sn,PredV,_,_,F,X,H1,H1) 
   :-
   sint_n(obj,Fl,PredV,SN,_,_,_,Caso,F,X,nil,nil),
   feature_on(acc, C),
   !.

/* mario non sapeva se gino era in casa = non scrive il ruolo tematico giusto "propq" 
    mario non sapeva chi era in casa = fallisce la ricerca del controllore
    mario non sapeva a chi parlava = struttura sbagliata: a viene messo in u n
    aggiunto chiuso come locativo */

oggetto(SN,sn,_,_,[],F,F,H,nil):-
              nonvar(H),
              H = sn/SimbContr/Cat/Pron,
              Pron=..[Pro,Prorel,G,N,P,C],
              SN = sn(indice(Simb),cat(Cat),pr(vbl,vbl,_,P,G,N,C),
                    controllore(SimbContr)),
              \+ nogen_member(tempo,Cat),
              feature_on(acc, C),  
              gen_sym(sn,Simb).

oggetto2([],sn,PredV,_,F,X,_,nil):-
    (F=[],X=[], LSP=[];F=[P], punct(P),X=[P], LSP=[]),!.

/* john gave him a book */
oggetto2(SN,sn,PredV,_,F,X,_,nil) 
   :-
   gr(english),
   select_subcat(sp/ogg2/_/_/_, PredV, PredV1),
   sint_n(obj2,Fl,[],SN,_,_,_,_,F,X,nil,nil).

/* 
john wants mary to read a book
gino ha costretto mario a fermarsi
*/
oggetto2(Svinf,svinf,PredV,Controllo,F,X,H4,H5) 
   :-
   select_subcat(vcomp/prop/Prep/_, PredV, _),
   complemento_inf(Svinf,Controllo,F,X,H4,H5). 

/*  john promised mary that she would come */
oggetto2(Fcomp,f,PredV,[],F,X,H4,H5) 
   :-
   select_subcat(f/fcomp/prop/_, PredV, _),
   fcomp(Fcomp,F,X,H4,nil). 

oggetto2([],_,_,_,F,F,_,nil):-!.

/* SINTAGMA PREPOSIZIONALE come COMPLEMENTO */

complemento_sp(_, SP,[F|X],X):- enclitico(SP,F).
complemento_sp(PredV, SP,F,X):- sp(PredV,SP,F,X).
complemento_sp(_, [],F,F):-!.

/* SINTAGMA PREPOSIZIONALE come COMPLEMENTO Partitivo*/

complemento_part(di, PredV, SP,F,X):-
   select_subcat(sn/ogg/Role/_, PredV, _),     
   sp(PredV,SP,F,X),!.
complemento_part(P, PredV, [],F,X):-
   P\=di,!.


/* FRASE INFINITIVA COME COMPLEMENTO */
compl_inf_agg(inf(P,Inf),Controllo,P,[Pp|F],X,H0,H1) :-
                          prep(P,P),infinitiva(Inf,Controllo,F,X,H0,H1).
complemento_inf(inf(P,Inf),Controllo,[Pp|F],X,H0,H1) :-
                          prep(Pp,P),infinitiva(Inf,Controllo,F,X,H0,H1).
complemento_inf(inf([],Inf),Controllo,F,X,H0,H1) :-
                          infinitiva(Inf,Controllo,F,X,H0,H1).

/* FCOMP */
fcomp(Fcomp,[Pun|F],X,nil,nil) 
   :-
   gr(deutsch), Pun=',',
   comp(F,Co/F1), 
   assert_cp1(CStrCp1, Fcomp,F1,X,nil).

fcomp(Fcomp,F,X,nil,nil) 
   :-
   comp(F,Co/F1), 
   (
    Co\=[],gr(romance),
    complex_assertion(Fcomp,F1,X,nil)
    ;
    gr(english),
    (
     \+ genre(legal),  comp_less(on), Co=[],
      assert_cp1(CSt,Fcomp,F1,X,nil)
    ;
     Co\=[],
     complex_assertion(Fcomp,F1,X,nil)
    )
   ).

fcomp(Fcomp,[D|F],X,nil,nil) 
   :-
  subordin_dir(D,Dir_speech), 
  simple_assert(CP, Fcomp,F,F1,nil),
  F1=[D1|F2],  
  subordin_dir(D1,Dir_speech),
  F2=[','|X].

qcomp(Fcomp,[S|F],X) :-
        subordinatore(S,Su), 
        simple_assert(CP, Fcomp,F,X,nil).
qcomp(Fcomp,[S|F],[]):-
        subordin_dir(S,Dir_speech),
        (onelook(F, assert_dir, s, nil),
         F=[S1|F1],
         subordin_dir(S1,Dir_speech)  
         ;
         true, F1=F),
        inter_dir(Fcomp,F1,X,Sc,nil,C),
        (X=['?'];X=['?'|_]).

qcomp(Fcomp,[S|F],[]):-
        subordin_dir(S,Dir_speech),
        (onelook(F, assert_dir, s, nil),
         F=[S1|F1],
         subordin_dir(S1,Dir_speech)  
         ;
         true, F1=F),
        yes_no_question(Fcomp,F1,X,nil),
        (X=['?'];X=['?'|_]).

qcomp(Fcomp,F,X):-
        inter_dir(Fcomp,F,X,Sc,nil,Cat).


sint_ogg_xcomp(Args,Clit, Clit, TOgg, Xcomp, TXcomp, _, F,X,_, nil)
   :-
   gr(romance),
   Clit \= [],
   TOgg = clitico,
   xcomp(Args,Xcomp, _, _, TXcomp,F,X).

sint_ogg_xcomp(Args,Cli, [], To, [], TXcomp, _, F,X,_, nil):-
    (F=[],X=[], LSP=[];F=[P], punct(P),X=[P], LSP=[]),!.

sint_ogg_xcomp(Args,_, SN2, _, Xcomp, TXcomp, LArgsV, F,X,H1, nil)
   :-
   oggetto(SN2, TOgg, LArgsV, _, [], F,F1,H1, nil),
   (select_subcat([sn/sogg/_/_, sn/ogg/_/_, Funz/locativo/_], LArgsV, PredV2),
         sint_ogg_xcomp1([],SN2,TOgg,Xcomp,locativo,pcomp,LArgsV,F1,X,H1,nil)
    ;
    Cond = (
             Rest=[] -> true
             ;
             Rest \= [Funz/prop/_]),
   select_subcatt([sn/sogg/_/_, sn/ogg/_/_ | Rest], Cond, LArgsV, PredV2)).


sint_ogg_xcomp(Args,_, SN2, TOgg, Xcomp, TXcomp, LArgsV, F,X,H1, nil)
   :-
   gr(romance),
   xcomp(Args,Xcomp, _, _, TXcomp,F,F1),
   oggetto(SN2, TOgg, LArgsV, _, [], F1,X,H1, nil).

/* 18 dicembre */
sint_ogg_xcomp1([],SN2,TOgg,Xcomp,Role,TXcomp,LArgsV,F,X,H1,nil)
   :-
   xcomp(Args,Xcomp, _, _, TXcomp,F,X),   
   Xcomp=sp(prep(P,cat(Cat),Mod),SN),
   (gr(english), Preps=[in,on,at,by,over,above,below]
    ;     
    gr(italiano), Preps=[in,su,a,da,sopra,su,sotto]),
   !,
   (Role=locativo,on(P, Preps)
   ;
   Role\=locativo, on(Pp, Preps), Pp\=P
   ).

sint_ogg_xcomp1([], SN2, TOgg, [], TXcomp, LArgsV, F,F,H1, nil):-!.


/**************
• select_subcat(+arg, +condition, +inSubcat, -outSubcat).
• Trova tutte le liste di sottocategorizzazione in inSubcat che contengono arg e rispettano condition. •
**************/

select_subcat(Arg, [], []) :-!.
select_subcat(Arg, PredIn, PredOut) :-
   select_subcatt(Arg, true, PredIn, PredOut).

select_subcatt(Ar/G, Condition, Pred, Pred) :-
   nonvar(Condition),
   Pred = pred_v(V, Gr, S, [Sub/Cat | Rest]),
   !,
   on(Ar/G, [Sub/Cat | Rest]),
   Condition.

select_subcatt(SubCat, Condition, Pred, Pred) :-
   nonvar(Condition),
   Pred = pred_v(V, G, S, SubCat),
   !,
   Condition.

select_subcatt(Arg, Condition, PredIn, PredOut) :-
   \+ list(Arg),
   PredIn\=[],
   PredIn = pred_v(V, G, S, SubCatIn),
   search_subcatt(PredIn, Arg, Condition, SubCatOut), 
   PredOut = pred_v(V, G, S, SubCatOut),!.

select_subcatt([Arg | Args], Condition, PredIn, PredOut) :-
   PredIn\=[],
   PredIn = pred_v(V, G, S, SubCatIn),
   findall(
      [Arg | Args], 
      (
      on([Arg | Args], SubCatIn),
      Condition
      ),
      SubCatList),  
   SubCatList \= [],
   sort(SubCatList, SubCatOut),
   PredOut = pred_v(V, G, S, SubCatOut).


search_subcatt(PredIn, Arg, Condition, SubCatOut):-
   PredIn = pred_v(_, _, _,[SubCatIn|SubCatList]),
  (findall(
      SubCat, 
      (
      on(SubCat, SubCatIn),
      on(Arg, SubCat),
      Condition
      ),
      SubCatList),  
   SubCatList \= [],
   sort(SubCatList, SubCatOuts),
   SubCatOuts=[SubCatOut],
   !
   ;
   PredIn1 = pred_v(_, _, _,SubCatList),
   search_subcatt(PredIn1, Arg, Condition, SubCatOut)
   ),!.

search_subcatt(PredIn, Arg, Condition, SubCatOut):-
   PredIn = pred_v(V, G, S, SubCatIn),
   findall(
      SubCat, 
      (
      on(SubCat, SubCatIn),
      on(Arg, SubCat),
      Condition
      ),
      SubCatList),  
   SubCatList \= [],
   sort(SubCatList, SubCatOuts),
   (SubCatOuts=[SubCatOut];
     on(SubCatOut,SubCatOuts)).


/* lista in  pred_v + lista semplice */
subcat_on([Cost/Rest | RestSc], pred_v(_, _, _,[Cost/Rest | RestSc])):-
   !.

/* lista in lista semplice */
subcat_on([Cost/Rest | RestSc], [Cost/Rest | RestSc]):-
   !.

/* arg in pred_v +lista semplice */
subcat_on(SubCat, pred_v(_, _, _,[SubCatList|SubCatList1])):-
   on(SubCat, SubCatList).

/* arg in pred_v +lista semplice */
subcat_on(SubCat, pred_v(_, _, _,SubCatList)):-
   !,
   on(SubCat, SubCatList).

/* arg in  lista semplice */
subcat_on(SubCat, [SubCatList|SubCatList1]):-
   on(SubCat, SubCatList).

subcat_on(SubCat, SubCatList):-
   on(SubCat, SubCatList).


create_adjs([], []):- !.
create_adjs([sp(prep(Prep,cat(CatSP),Mod),SN)|AltriSP], [X|Adj]):-  
      create_adj(SN, Prep, Mod, CatSP, CatV, X),  
      create_adjs(AltriSP, Adj),
      !.
create_adjs(sp(prep(Prep,cat(CatSP),Mod),SN), [X]):-  
      create_adj(SN, Prep, Mod, CatSP, CatV, X),  
      create_adjs([], []),
      !.
      
/* chiamati da asserzione canonica */
/*** 
i sintagmi verbali sono stati scomposti nella parte alta IP in cui il verbo si è aggiunto a I con la salita del verbo e la parte bassa del VP che ora non contiene più il verbo ma solo i complementi 
***/

check_little_pro(VarSN):-
       (VarSN=[sn(SN, GenSn, NumSn, PersSn)|Var];
        VarSN=[SN]),
           SN\=[],
             SN = sn(indice(Ind),cat(Cat),
                         pr(pro_picc,pro,_,PersSn,GenSn,NumSn,Ca),
                         spec(def('+')),controllore(SimbContr)),
                              var(SimbContr).

verbal_phrase(VarSN,P,V,trans,ScIn, ScOut, S, cat(CatV),Args, Adjs,H)
  :- 
   gr(romance),
   check_little_pro(VarSN),
   CatV=risultato,
   verb_phrase_incoat_inv(VarSN,P,V,ScIn, ScOut, S,cat(CatV),Args,Adjs,H).

verbal_phrase(VarSN,P,V,psych,ScIn, ScOut, S, C,Args, Adjs,H)
  :- 
   verbal_phrase_psych(VarSN,P,V,ScIn, ScOut, S,C,Args,Adjs,H).

verbal_phrase(VarSN,P,v(Verbo, Modo, Tempo, _, _, _),CatGr,ScIn, ScOut, S, C,Args, Adjs,H)
   :- 
   Modo=imperat,
    Ver=v(Verbo, Modo, Tempo, _, _, _),
       check_little_pro(VarSN),
   on(CatGr, [trans,intr, vimp, inac]),
   verbal_phrase_imper(VarSN,P,Ver,CatGr,ScIn, ScOut, S,C,Args,Adjs,H).

verbal_phrase(VarSN,P,V,CatGr,ScIn, ScOut, S, C,Args, Adjs,H)
   :- 
   on(CatGr, [vimp,vatm, intr, inac]),
   check_little_pro(VarSN),
   verb_phrase_intr_inv(VarSN,P,V,CatGr,ScIn, ScOut, S,C,Args,Adjs,H).

verbal_phrase(VarSN,[CliticoAcc,CliticoDat],V,CatGr,ScIn, ScOut, S, C,Args, Adjs,H)
  :- 
   gr(romance),
   check_little_pro(VarSN),
   CliticoAcc\=[],
   CliticoAcc = sn(indice(_),cat(_),cl(_,_,Pron,_,_,_,_),_), 
                  (Pron=si;Pron=se),
    (CliticoDat\=[],
     CliticoDat = sp(prep(di, _, _), sn(indice(sn3), cat(_), 
           cl(ana_clit, +, ne, _, _, _, [obl]), spec(def(-))))
    ;
    CliticoDat=[]),
    verb_phrase_imp(VarSN,CatGr,V,ScIn, ScOut, S,C,Args,Adjs,H).


verbal_phrase(VarSN,[CliticoAcc,CliticoDat],V,trans,ScIn, ScOut, S, C,Args, Adjs,H)
   :- 
   gr(romance),
   check_little_pro(VarSN),
   exclude_include(ScIn, true),
   CliticoAcc \= [],
   trova_tipo_clitico(CliticoAcc,clitico),
   verb_phrase_disl(VarSN,[CliticoAcc,CliticoDat],V,ScIn, ScOut, S,C,Args,Adjs,H).

verbal_phrase( VarSN,P,V,trans, ScIn, ScOut, S, C,Args, Adjs,H)
   :- 
    select_subcat(Fun/ogg_avv/_/_, ScIn, PredV1),
    verbal_phrase_trans_avv(VarSN,P,V,PredV1, ScOut, S,C,Args,Adjs,H).

verbal_phrase(VarSN,P,V,trans, ScIn, ScOut, S, C,Args, Adjs,H)
   :- 
   exclude_include(ScIn, false),
   verbal_phrase_trans_xcomp(VarSN,P,V,ScIn, ScOut, S,C,Args,Adjs,H).


verbal_phrase(VarSN,[CliticoAcc,CliticoDat],V,trans, Pv, Sc, S, C,Args, Adjs,H)
     :-
     VarSN=[sn(SN, GenSn, NumSn, PersSn)|Var],
     SN \=  sn(indice(_),  cat(_), 
         cl(rifl_corto, _, _, _, _, _, _), 
         _, _, _, _), 
     vp_trans(VarSN,[CliticoAcc,CliticoDat],V, Pv, Sc, S,C,Args,Adjs,H).

verbal_phrase(NewVarSN,[CliticoAcc,CliticoDat],V,Trans, ScIn, ScOut, S, C,Args, Adjs,H)
    :-
/*    gr(romance),    */
    (verb_phrase_trans_inv(NewVarSN,[CliticoAcc,CliticoDat],V,ScIn, ScOut, S,cat(CatV),Args,Adjs,H)
     ;
     verb_phrase_ergativ(NewVarSN,[CliticoAcc,CliticoDat],V,ScIn, ScOut, S,cat(CatV),Args,Adjs,H)
    ),!.

verbal_phrase(NewVarSN,[CliticoAcc,CliticoDat],V,trans, ScIn, Out, S, C,Args,Adjs,H):-
   Win='Feedback',
   verifycomplements(Win, NewVarSN),
   !.

exclude_include(ScIn, false):-
   (
   select_subcatt(Fun/prop/_, Fun \= f/fcomp, ScIn, PredV1),
   select_subcatt(Fun/prop/_, Fun \= vcomp, ScIn, PredV1)
   ;
   select_subcat(pcomp/Prop/_, ScIn, PredV1)
   ),
   !.

exclude_include(ScIn, true):-
   (
   select_subcatt(Fun/prop/_, Fun \= f/fcomp, ScIn, PredV1),
   select_subcatt(Fun/prop/_, Fun \= vcomp, ScIn, PredV1)
   ;
   select_subcat(pcomp/Prop/_, ScIn, PredV1)
   ),
   !.


/* chiamati da asserzione con soggetto posposto  */

verbal_phrase_imp(VarSN,V,LArgsV, Supporto, C,Args, Adjs,[Ver|F],X,H)
  :- 
verbo1(Ver,PersSn,
   v(Verbo, Modo, Tempo, _, _, _), 
   Pro1, Pro2, Forma, CatGr, Supporto, 
   CatV, PredVs, Gen, Num, Pers, Neg, Avv),
   choose_predv(PredVs, PredV, CatGr1, CatV1),
   verbal_phrase_imp_inv(VarSN,[Pro1,Pro2],v(Verbo,Modo,Tempo,Per,Nu,Ge),PredV,
           LArgsV,Supporto,CatV1,Args,Adjs,F,X,H).

verbal_phrase_infinit(VarSvinf,v(Verbo,Modo,Tempo,Per,Nu,Ge),LArgsV, Supporto, cat(CatV),Args, Adjs,F,X,H)
  :- 
   verbo1(F, F1,PersSn,
   v(Verbo, Modo, Tempo, _, _, _), 
   Pro1, Pro2, Forma, CatGr, Supporto, 
   CatV, PredVs, Gen, Num, Pers, Neg, Avv),
   verbalphrase_infinit(VarSvinf,[Pro1,Pro2],PredVs, v(Verbo,Modo,Tempo,Per,Nu,Ge),LArgsV, Supporto, cat(CatV),Args, Adjs,F1,X,H),
   !.

verbalphrase_infinit(VarSvinf,[Pro1,Pro2],PredVs, v(Verbo,Modo,Tempo,Per,Nu,Ge),LArgsV, Supporto, cat(CatV),Args, Adjs,F,X,H):-
   gr(romance),
   choose_predv(PredVs, PredV, CatGr1, CatV1),
   CatGr1=psych,
   verbal_phrase_int(VarSvinf,[Pro1,Pro2],v(Verbo,Modo,Tempo,Per,Nu,Ge),PredV,LArgsV,Supporto,cat(CatV1),Args,Adjs,F,X,H).

verbalphrase_infinit(VarSvinf,[Pro1,Pro2],PredVs, v(Verbo,Modo,Tempo,Per,Nu,Ge),LArgsV, Supporto, cat(CatV),Args, Adjs,F,X,H):-
   gr(english),
   choose_predv(PredVs, PredV, CatGr1, CatV1),
   CatGr1=psych,
   verb_phrase_psych_infin(VarSvinf,[Pro1,Pro2],v(Verbo,Modo,Tempo,Per,Nu,Ge),PredV,LArgsV,Supporto,cat(CatV1),Args,Adjs,F,X,H).

verbalphrase_infinit(VarSvinf,[Pro1,Pro2],PredVs, v(Verbo,Modo,Tempo,Per,Nu,Ge),LArgsV, Supporto, cat(CatV),Args, Adjs,F,X,H):-
   choose_predv(PredVs, PredV, CatGr1, CatV1),
   CatGr1=cop,
    verbal_phrase_cop(VarSvinf,[Pro1,Pro2],v(Verbo,Modo,Tempo,Per,Nu,Ge),
                        PredV,LArgsV,Supporto,cat(CatV1),Args,Adjs,F1,X,H).

chiama_aux([First|F],Rest,Aux1,A,Modal,Modo,Tempo,Pers,Num,Gen,Neg,SP0):-
       ( 
       (ausiliare(First,aux(A,Mod,Temp,Pers,Num)),
       (A=be;A=werden;A=essere),
       (nonvar(Aux1), 
       Tempo=pass/pross/A, Modo=ind
       ;
       var(Aux1), Tempo=Temp, Modo=Mod),
       negaz(F,Neg/Rest)            
       ;
       F=[Second|Rest],
       ausil_comp([First,Second],aux(A,Modo,Tempo,Pers,Num,Gen))         
       ;
       ausil_comp_supp(First,aux(A,Modo,Tempo,Pers,Num,Gen),Suppor),
       negaz(F,Neg/Rest)
       ;
       nonvar(Aux1), 
       Aux1 = aux(A,Modo,Temp,Pers,Num), Rest=[First|F]),
       (A\=avere, A\=haben)
       ;
       ausiliare(First,modal(Modal,Modo,Tempo,Pers,Num)),
       negaz(F,Neg/Resto),            
       adjs_post_aux(Resto, Resto1, [], [], [], [], [], SP0),
       Resto1=[Second|Rest],
       ausiliare(Second,aux(A,inf,Temp,Pers,Num)),
       (A\=avere, A\=haben, A\=have)
       ).

chiama_part([First|Resto],Rest,A,Tempo,Verbo1,Verbo2,Gen,Num,CatV,Verbo,LArgsV,PredV):-
        (A=be;A=sein;A=essere;Tempo=pass/pross/A),
          (
           participio(First,Verbo1,Gen,Num),
           Resto=[Second,Third|Rest],
           chiama_conj(Second,Cong),
           participio(Third,Verbo2,Gen,Num),
           cat_gramm(Verbo1,trans,Catv,LArgsV),
           (Catv=camb-att, CatV=accomp; CatV=Catv),
           PredV2=pred_v(Verbo1,trans,CatV,LArgsV),
           concat(Verbo1, '_', Ver),
           concat(Ver,Verbo2, Verbo),
           PredV=pred_v(Verbo,trans,CatV,LArgsV)
           ;
           participio(First,Verbo,Gen,Num),
           Rest=Resto,
           cat_gramm(Verbo,trans,Catv,LArgsV),
           (Catv=camb-att, CatV=accomp; CatV=Catv),
           PredV=pred_v(Verbo,trans,CatV,LArgsV)
          ).

verb_phrase_pass_can([sn(SN,Gen,Num,Pers),LSP0,LSP1,SA1,Avv1,Avv2,Voc,Neg,parent(Par),Sub_n],[CliticoAcc,CliticoDat],
          v(Verbo,Modo,Tempo,Pers,Num,Gen),Aux1,
          LArgsV1,Supporto,cat(CatV),args(Args),
          adjs(Adjs),F,X,H0) 
      :-
      onelook(F,verb_phrase_pass_can, v,nil),
      chiama_aux(F,Rest,Aux1,A,Modal,Modo,Tempo,Pers,Num,Gen,Neg,SP0),
      sint_avv(Rest,Tempo,Avv3/Res,Tipo),
      chiama_part(Res,S,A,Tempo,Verbo1,Verbo2,Gen,Num,CatV,Verbo,LArgsV,PredV),
      gen_sym(f,Simb), retraction(verb_phrase_pass_can,v),
      sint_prep3(S,S1,LSP,H0,H),
      agnt_sa(post,SA,Gen1,Num1,S1,S2),
      sint_prep(LSP3,S2,S3),
      (nonvar(H0), H0=sn/_/_/_, 
       oggetto(Oggetto, Tipo, PredV, Controllo, CliticoAcc, S3,S4,H2, [])
       ;
       (var(H0); H0=nil; H0=[]),
       oggetto_intrans(
          Oggetto, TOgg, PredV, Controllo, CliticoAcc, PredV1,S3,X)
          ),
      (Tempo=pres/Suppor/be, Supporto=supporto(Suppor);
            Supporto=supporto(Suppor)),
      ListaSP the_list LSP && CliticoDat && LSP3 && LSP0 && SP0 && LSP1 && SA,
      (Oggetto=[], SA\=[],
        remove(SA, ListaSP, ListSP), 
        on(acomp/prop/_, LArgsV),
       grammaticality_check(interp_ass_passiva, 
               [Verbo,PredV,LArgsV1,SN/subj_top,SA/acomp,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3], Adjs)
           ;
        Oggetto=[],
       grammaticality_check(interp_ass_passiva, 
               [Verbo,PredV,LArgsV1,SN/subj_top,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3], Adjs)
           ;
        Oggetto\=[], TOgg=vcomp, gr(english),
       grammaticality_check(interp_ass_passiva, 
               [Verbo-Controllo,PredV,LArgsV1,SN/sogg,Oggetto/vcomp,ListaSP,CatV],
                 Args,Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3], Adjs)
           ;
        Oggetto\=[], gr(english),
        SN \= sn(indice(Ind),cat(Cat),
                  pr(pro_picc,pro,_,P,G,N,C),
                   spec(def('+')),controllore(SimbContr)),
       grammaticality_check(interp_ass_passiva, 
               [Verbo,PredV,LArgsV1,SN/sogg,Oggetto/ogg,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3], Adjs)
           ;
        Oggetto\=[], gr(italiano),
        SN = sn(indice(Ind),cat(Cat),
                  pr(pro_picc,pro,_,P,G,N,C),
                   spec(def('+')),controllore(SimbContr)),
       grammaticality_check(interp_ass_passiva, 
               [Verbo,PredV,LArgsV1,SN/sogg,Oggetto/ogg,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3], Adjs)
           ;
        Oggetto\=[],
       grammaticality_check(interp_ass_passiva, 
               [Verbo,PredV,LArgsV1,Oggetto/subj_foc,ListaSP,CatV],Args,Adjs_x,Par,
               [Neg, Voc, Avv1, Avv2, Avv3], Adjs)
       ).

clitic(Pro,SN,SP,CasoIn) :-
   cl(Tipo,Part,Pro,P,G,N,Caso),
   Clitico= cl(Tipo,Part,Pro,G,N,P,Caso),
    gen_sym(sn,Simb),
   (nonvar(Caso), 
    (
     (atomic(Caso),Caso=acc; var(Caso),Caso=[acc];nonvar(Caso),on(acc,Caso)),
     SN = sn(indice(Simb),cat(CatPro1),Clitico,spec(def('+'))),
     SP=[]
    ; 
     (atomic(Caso),Caso\=acc;list(Caso),on(Ca,Caso),Ca\=acc),
     SN1 = sn(indice(Simb),cat(CatPro1),Clitico,spec(def('+'))),
     SP = sp(prep([],Cat,Mod),SN1)
    )
    ;
    var(Caso),
     Clit= cl(Tipo,Part,Pro,G,N,P,CasoIn),
     SN = sn(indice(Simb),cat(CatPro1),Clit,spec(def('+'))),
     SP=[]
     ),!.



sint_clitici([One,Two|Out], SN-SP/Out):-
   clitici(One-SN, Two-SP).

sint_clitici([One|Out], SN-SP/Out):-
   clitici1(One, SN, SP).

sint_clitici(Out, []-[]/Out):-!.

/* clitici del tedesco */
clitici(Clit1-SN,Clit2-SP):-
           gr(deutsch),
           var(SN),var(SP),
           clit(Clit1,Clitico1),
           clit(Clit2,Clitico2),
           Clitico1 = cl(clitico,Part,Pro,G,N,P,Caso),
           Clitico2 = cl(clitico,Part2,Pro2,G2,N2,P2,Caso2),
           gen_sym(sn,Simb2),
           SN = sn(indice(Simb2),cat(CatPro1),Clitico1,spec(def('+'))),
           ( nonvar(Caso), Caso=acc
                         ; Caso=[acc]),
           ( nonvar(Caso2),Caso2=dat
                        ; Caso2=[dat]),
           SP = sp(prep([],Cat,Mod),SN1),
           gen_sym(sn,Simb),
           SN1 = sn(indice(Simb),cat(CatPro),
                    Clitico2,spec(def('+'))),
           !.

/* se la */
clitici(Clit1-SN,Clit2-SP):-
           var(SN),var(SP),
           clit(Clit1,Clitico1),
          (
            \+ gr(deutsch),  
            resto_clitici(Clit2,Clitico1,SN,SP)
            ;
            gr(deutsch),
            pronoun_ble(Clitico1,SN,SP)
          ).

/* gli si */

clitici(Clit1-SN,Clit2-SP):-
            var(SN),var(SP),
            clit(Clit1,Clitico1),clit(Clit2,Clitico2),
            Clitico1 = cl(clitico,Part1,Pro1,_,_,_,Caso1),
            Clitico2 = cl(rifl_corto,Part2,Pro2,_,_,_,[nom]),
            ( nonvar(Caso), feature_on(dat,Caso)
                         ; Caso=[dat]),
            SP = sp(prep(a,Cat,Mod),SN1),
            gen_sym(sn,Simb1),
            SN1 = sn(indice(Simb1),cat(CatPro),Clitico1,spec(def('+'))),
            gen_sym(sn,Simb2),
            SN = sn(indice(Simb2),cat(CatPro1),Clitico2,spec(def('+'))),
            !.

pronoun_ble(Clitico1,SN,_):-
           Clitico1=pr(personale,Part,Pro,P,G,N,Caso),
           gen_sym(sn,Simb),
           SN = sn(indice(Simb),cat(CatPro),
                pr(personale,Part,Pro,P,G,N,Caso),
                    spec(def('+'))),
           !.

resto_clitici(Clit2,Clitico1,SN,SP):-
   clit(Clit2,Clitico2),
   Clitico1 =  cl(rifl_corto, Part1, se, _, _, _, Caso1),
   Clitico2 =  cl(clitico, Part2, Pro2, _, _, _, Caso2),
   SP = sp(prep(a, cat(CatPro), []),SN1),
   gen_sym(sn, Simb1),
   SN1 = sn(indice(Simb1),cat(CatPro), Clitico1, spec(def(+))),
   (
   var(Caso2)
   ->
   Caso2 = [acc]
   ;
   feature_on(acc, Caso2)
   ),
   gen_sym(sn, Simb2),
   SN = sn(indice(Simb2), cat(CatPro1),Clitico2, spec(def(+))),
   !.

/* vi si */
resto_clitici(Clit2,Clitico1,SN,SP):-
   clit(Clit2,Clitico2),
   Clitico1 = cl(clitico, Part1, Pro1, _, _, _, Caso1),
   Clitico2 = cl(rifl_corto, Part2, Pro2, _, _, _, _),
   on(Pro1, [vi, ci]),
   Caso1 = [obl],
   SP = sp(prep(in, Cat, Mod), SN1),
   gen_sym(sn, Simb1),
   SN1 = sn(indice(Simb1), cat(CatPro), Clitico1, spec(def(+))),
   gen_sym(sn, Simb2),
   SN = sn(indice(Simb2), cat(CatPro1), Clitico2, spec(def(+))),
   !.

resto_clitici(Clit2,Clitico1,SN,SP):-
   clit(Clit2,Clitico2),
   Clitico1 =  cl(clitico, Part1, Pro1, _, _, _, Caso1),
   Clitico2 =  cl(TipoPro2, Part2, Pro2, _, _, _, Caso2),
   on(TipoPro2, [clitico, rifl_corto]),
   (
   (
   feature_on(obl, Caso1)
   ;
   on(Pro1, [vi, ci])
   )
   ->
   SP = sp(prep(in, cat(CatPro), Mod),SN1)
   ;
   feature_on(dat, Caso1),
   SP = sp(prep(a, cat(CatPro), Mod),SN1)
   ),
   SN1 = sn(indice(Simb1), cat(CatPro), Clitico1, spec(def(+))),
   gen_sym(sn, Simb1),
   (
   nonvar(Caso2),
   feature_on(acc, Caso2)
   ;
   Caso2 = [acc]
   ),
   SN = sn(indice(Simb2), cat(CatPro1),Clitico2, spec(def(+))),
   gen_sym(sn, Simb2).

resto_clitici(Clit2,Clitico1,SN,SP):-
      clit(Clit2,Clitico2),
      Clitico1 = cl(rifl_corto,Part1,se,_,_,_,Caso1),
      Clitico2 = cl(clitico,Part2,Pro2,_,_,_,Caso2),
      SP = sp(prep(a,cat(CatPro),[]),SN1),
      SN1 = sn(indice(Simb1),cat(CatPro),Clitico1,spec(def('+'))),
      gen_sym(sn,Simb1),
      (nonvar(Caso2), feature_on(acc,Caso2);
      Caso2=[acc]),                     
      SN = sn(indice(Simb2),cat(CatPro1),Clitico2,spec(def('+'))),
      gen_sym(sn,Simb2).

resto_clitici(Clit2,Clitico1,SN,SP):-
      clit(Clit2,Clitico2),
      Clitico1 = cl(rifl_corto,Part1,se,_,_,_,Caso1),
      Clitico2 = cl(ana_clit,Part2,Pro2,_,_,_,Caso2),
      ( (nonvar(Caso2),feature_on(obl,Caso2)
             ; Caso2=[obl]),
        SP = sp(prep(di,Cat,Mod),SN1),
        SN1 = sn(indice(Simb1),cat(CatPro),
        cl(ana_clit,Part2,Pro2,P,G,N,[obl]),
                     spec(def('-'))), 
      gen_sym(sn,Simb1)
                      ),
      (nonvar(Caso1), feature_on(dat,Caso1);
                       Caso1=[dat]),                     
      SN = sn(indice(Simb2),cat(CatPro1),Clitico1,spec(def('+'))),
      gen_sym(sn,Simb2).

clitici1(Clit1, [], SP):-
          var(SP),
      clit(Clit1,Clitico1),
      Clitico1=cl(TipoPron,Part,Pro,P,G,N,Caso),
                    TipoPron = clitico,
            ((nonvar(Caso),feature_on(obl,Caso)
                          ; Caso=[obl]),
           SP = sp(prep(in,Cat,Mod),SN),
              SN = sn(indice(Simb),cat(CatPro),
                   cl(TipoPron,Part,Pro,G,N,P,[obl]),
                   spec(def('+'))) 
                         ;
             ( (nonvar(Caso),feature_on(dat,Caso)
                        ; Caso=[dat]),                         
           SP = sp(prep(a,cat(CatPro),Mod),SN),
              SN = sn(indice(Simb),cat(CatPro),
                   cl(TipoPron,Part,Pro,G,N,P,[dat]),
                   spec(def('+'))) )
                      ),
        gen_sym(sn,Simb).

/* 6 */
clitici1(Clit1, [], SP):-
          var(SP),
      clit(Clit1,Clitico1),
      Clitico1=cl(TipoPron,Part,Pro,P,G,N,Caso),
                  TipoPron = ana_clit,
           ( (nonvar(Caso),feature_on(obl,Caso)
                        ; Caso=[obl]),
          SP = sp(prep(di,Cat,Mod),SN),
              SN = sn(indice(Simb),cat(CatPro),
                    cl(TipoPron,Part,Pro,G,N,P,[obl]),
                    spec(def('-'))) 
                      ),
      gen_sym(sn,Simb).

/* 7 */
clitici1(Clit1, [], SP):-
          var(SP),
      clit(Clit1,Clitico1),
      Clitico1=cl(TipoPron,Part,Pro,P,G,N,Caso),
                   TipoPron = clitico,
          (nonvar(Caso), feature_on(obl,Caso)
                       ; Caso=[obl]),
             SP = sp(prep(in,Cat,Mod),SN),
                 SN = sn(indice(Simb),cat(CatPro),
                         cl(TipoPron,Part,Pro,G,N,P,C),
                         spec(def('+'))), 
      gen_sym(sn,Simb).

clitici1(Clit1, [], SP):-
          var(SN),
      clit(Clit1,Clitico1),
      Clitico1=cl(TipoPron,Part,Pro,P,G,N,Caso),
                    TipoPron = clitico,
         ( nonvar(Caso), feature_on(dat,Caso)
                         ; Caso=[dat];Caso=dat),
          SP = sp(prep(a,Cat,Mod),SN),
               SN = sn(indice(Simb),cat(CatPro),
                    cl(TipoPron,Part,Pro,G,N,P,[dat]),
                    spec(def('+'))),
      gen_sym(sn,Simb).

clitici1(Clit1, SN, []):-
          var(SN),
      clit(Clit1,Clitico1),
      Clitico1=cl(TipoPron,Part,Pro,P,G,N,Caso),
           (TipoPron = clitico
                     ;
            TipoPron = rifl_corto),
       SN = sn(indice(Simb),cat(CatPro),
            cl(TipoPron,Part,Pro,G,N,P,Caso),
             spec(def('+'))),
       gen_sym(sn,Simb).

/* si */
clitici1(Clit1,SN,[]):-
          var(SN),
          clit(Clit1,cl(TipoPron,Part,Pro,P,G,N,Caso)),
                ((TipoPron = clitico, Caso\=[dat])
                     ;
                  TipoPron = rifl_corto),
               SN = sn(indice(Simb),cat(CatPro),
                    cl(TipoPron,Part,Pro,G,N,P,C),
                    spec(def('+'))),
                     gen_sym(sn,Simb).

clitici1(Clit1,[],SP):-
          var(SP),
          clit(Clit1,cl(TipoPron,Part,Pro,P,G,N,Caso)),
              TipoPron = clitico,
               ( nonvar(Caso), feature_on(dat,Caso)
                         ; Caso=[dat]),
            SP = sp(prep(a,Cat,Mod),SN),
                 SN = sn(indice(Simb),cat(CatPro),
                       cl(TipoPron,Part,Pro,G,N,P,Caso),
                        spec(def('+'))),
           gen_sym(sn,Simb).

check_fcomp_compless(PredV,[],F):-!.
check_fcomp_compless(PredV,Cues,F):-
   Cues\=[],
   (on(that,Cues),
    F=[A,B|_],
    findall_poss(Frase),
    on(N-[Cat-B|_],Frase),
    Cat\=v
    ;
    \+ nogen_member(that,Cues)).

check_fcomp_compless(Pred,Cues,F):-
   Cues\=[],
   on(that,Cues),
    F=[A,B|_],
    findall_poss(Frase),
    on(N-[Cat-B|_],Frase),
    Cat\=v,
   (Pred=pred_v(_,_,_,ListArg); Pred=ListArg),
    appiattisci(ListArg,ListArgs),
    on(sn/ogg/_/_, ListArgs),
    !.

extractpred_compless(Cues,F,[]):-!.
extractpred_compless([],F,PredV):-
        F=[W|_],
        PredV=pred_v(Verbo,CatGr,CatV,[PrimoArg|LastArg]),
        (W\=that,
        complessverbs(CatV),
        verify_verb_rest(F),
        findall_roles_args([PrimoArg|LastArg], Roles),
        on(Role,Roles),Role=prop
         ;
         W=that),
        !.
extractpred_compless(Cues,F,PredV):-
   Cues\=[],
     F=[W|_],
      (W\=that,
        (on(that,Cues),
        PredV=pred_v(Verbo,CatGr,CatV,[PrimoArg|LastArg]),
        complessverbs(CatV),
        verify_verb_rest(F),
        findall_roles_args([PrimoArg|LastArg], Roles),
        on(Rol,Roles), Rol=prop
       ;
       \+ nogen_member(that,Cues))
         ;
         W=that
        ),
        !.

retrievefirst_verbs(F):-
      retrievefirst_verb(F,All),
      (remove(I-v,All,Rest)
      ;remove(I-q,All,Rest)),
      (Rest\=All
        ;
       remove(Ip-p,All,Rests),
       find_pos(A, Ip, Ya, AllP),
       A=to),
      !.

retrievefirst_verb(F,L):-
        set_length_la(F,N),
        extract_looka(N,F,L),
        !.

set_length_la(F,N):-
       length(F,N1),
       (6<N1, N=6
        ;
        N1=6, N=5
        ;
        N1=5, N=4
        ;
        N1=4, N=3
        ;
        N1=3, N=2),
        !.

extract_looka(2,F,[Ia-Ca,Ib-Cb]):-
        F=[A,B,_|Rest],
        find_pos(A, Ia, Ya, AllP),
        on(Ca-_,Ya),
        find_pos(B, Ib, Yb, AllP),
        on(Cb-_,Yb),
        !.

extract_looka(3,F,[Ia-Ca,Ib-Cb,Ic-Cc]):-
        F=[A,B,C,_|Rest],
        find_pos(A, Ia, Ya, AllP),
        on(Ca-_,Ya),
        find_pos(B, Ib, Yb, AllP),
        on(Cb-_,Yb),
        find_pos(C, Ic, Yc, AllP),
        on(Cc-_,Yc),
        !.

extract_looka(4,F,[Ia-Ca,Ib-Cb,Ic-Cc,Id-Cd]):-
        F=[_,A,B,C,D|Rest],
        find_pos(A, Ia, Ya, AllP),
        on(Ca-_,Ya),
        find_pos(B, Ib, Yb, AllP),
        on(Cb-_,Yb),
        find_pos(C, Ic, Yc, AllP),
        on(Cc-_,Yc),
        find_pos(D, Id, Yd, AllP),
        on(Cd-_,Yd),
        !.

extract_looka(5,F,[Ia-Ca,Ib-Cb,Ic-Cc,Id-Cd,Ie-Ce]):-
        F=[_,A,B,C,D,E|Rest],
        find_pos(A, Ia, Ya, AllP),
        on(Ca-_,Ya),
        find_pos(B, Ib, Yb, AllP),
        on(Cb-_,Yb),
        find_pos(C, Ic, Yc, AllP),
        on(Cc-_,Yc),
        find_pos(D, Id, Yd, AllP),
        on(Cd-_,Yd),
        find_pos(E, Ie, Ye, AllP),
        on(Ce-_,Ye),
        !.

extract_looka(6,F,[Ia-Ca,Ib-Cb,Ic-Cc,Id-Cd,Ie-Ce,Ij-Cj]):-
        F=[_,A,B,C,D,E,J|Rest],
        find_pos(A, Ia, Ya, AllP),
        on(Ca-_,Ya),
        find_pos(B, Ib, Yb, AllP),
        on(Cb-_,Yb),
        find_pos(C, Ic, Yc, AllP),
        on(Cc-_,Yc),
        find_pos(D, Id, Yd, AllP),
        on(Cd-_,Yd),
        find_pos(E, Ie, Ye, AllP),
        on(Ce-_,Ye),
        find_pos(J, Ij, Yj, AllP),
        on(Cj-_,Yj),
        !.

/* salva il pretty print di una rete su file */

write_banner:-
writenl('<?xml version="1.0" encoding="ISO-8859-1"?>').

salva_xml_rete(Rete, File) :-
   crea_path(xml,File,EFileName),
   open(EFileName,write),
   tell(EFileName),
   write_banner,
   fp(Rete,Frase),
   write('<text words="'),
   writeseq(Frase),
   write('">'),nl,
   write('<sent init="'),
   write(Rete),
   write('">'),nl,
   gensym(sw_,MW),
   xml_arc(n1,0,Rete),
   write('</sent>'),nl,
   write('</text>'),nl,
   told,
   close(EFileName),
   write('Pretty printing saved in : '),
   write(EFileName),nl.

/* pp_arc/1 */

xml_arc(Radice) :-
  rete(Radice),
  nl,write('Rete '),write(Radice),nl,
  xml_arc(n1,0,Radice).


/* pp_arc/2 */

xml_arc(Radice,Rete) :-
  nl,write('Nodo '),write(Radice),nl,
  xml_arc(Radice,0,Rete).


/* pp_arc/3 */

xml_arc(Nodo,Col,Rete) :-
  foglia(Nodo,Val,Rete),
   write('<leaf  val="'),
  transl_vals(Val,Attr),
  writeq(Attr),
  write('"> </leaf>'),!.

xml_arc(Nodo,Col,Rete) :-
   nodo(Nodo)::focus::tipo_focus::interrogativo,
  bagof(ToNodo,pp_arco(Nodo,ToNodo,Rete),[Primo|Altri]),
  arco(Nodo,Primo,Attr,Rete),
  write('<arc type= "'),
  writeq(focus/quest),
  write('" >'),
  term_length(W,focus/quest), 
  NewCol is Col + W + 1,
  xml_arc(Primo,NewCol,Rete),
  write('</arc>'),nl,
  xml_arc(Nodo,Altri,Col,Rete),
  !.

xml_arc(Nodo,Col,Rete) :-
  bagof(ToNodo,pp_arco(Nodo,ToNodo,Rete),[Primo|Altri]),
  arco(Nodo,Primo,Attr,Rete),
  Attr\=focus,
  write('<node type= "'),
  transl_index(Attr,Att),
  writeq(Att),
  write('" >'),
  term_length(W,Att), 
  NewCol is Col + W + 1,
  xml_arc(Primo,NewCol,Rete),
  write('</node>'),nl,
  xml_arc(Nodo,Altri,Col,Rete),
  !.

xml_arc(Nodo,ToNodo,Rete) :- arco(Nodo,ToNodo,_,Rete).

xml_arc(Nodo,ToNodo,Rete) :-!.

transl_vals(attivita,activity).
transl_vals(stato,state).
transl_vals(futuro,future).
transl_vals(risultato,achievement).
transl_vals(soggettivo,subjective).
transl_vals(definita,definite).
transl_vals(esterno,external).
transl_vals(coordinante,coordinate).
transl_vals(Attr,Attr).

transl_index(indice,index).
transl_index(Attr,Attr).

translate_attrs(Funz/Role,Attr/Ruolo):-
   translate_attr(Funz,Attr),
   translate_role(Role,Ruolo),   
   !.

translate_attr(ogg,obj).
translate_attr(sogg,subj).
translate_attr(ogg2,obj2).
translate_attr(fcomp,comp).
translate_attr(Attr,Attr).
translate_role(tema,theme).
translate_role(tema_aff,aff_theme).
translate_role(tema_nonaff,nonaff_theme).
translate_role(esperiente,experiencer).
translate_role(agente,agent).
translate_role(paziente,patient).
translate_role(tema_eff,eff_theme).
translate_role(tema_emot,emot_theme).
translate_role(tema_bound,bound_theme).
translate_role(locativo,locative).
translate_role(comitativo,comitative).
translate_role(materia,matter).
translate_role(modale,modal).
translate_role(strumentale,instrument).
translate_role(temporale,temporal).
translate_role(Attr,Attr).


/* pp_arc/4 */

xml_arc(_,[],_,_) :- !.

xml_arc(Nodo,[Primo|Altri],Col,Rete) :-
  arco(Nodo,Primo,Attr,Rete),
  super_f_struttura(Attr, Nodo),
%  f_struttura(Indice, Attr, Nodo),
  write('<arc type= "'),
  translate_attrs(Attr,Att),
  writeq(Att),
  write('" >'),
  term_length(W,Att), 
  NewCol is Col + W + 1,
  xml_arc(Primo,NewCol,Rete),
  write('</arc>'),nl,
  xml_arc(Nodo,Altri,Col,Rete),
  !.

xml_arc(Nodo,[Primo|Altri],Col,Rete) :-
  arco(Nodo,Primo,Attr,Rete),
  (Attr=mods;Attr=adjs),
  (proproot(Nodo-Attrs),
   arco(Primo,Pri,Att,Rete),
   arco(Pri,Prim,At,Rete)
    ;
    arco(Primo,Prim,Attrs,Rete)),
  write('<arc type= "'),
  writeq(Attrs),
  write('" >'),
  term_length(W,Attrs), 
  NewCol is Col + W + 1,
  xml_arc(Prim,NewCol,Rete),
  write('</arc>'),nl,
  xml_arc(Nodo,Altri,Col,Rete),
  !.

xml_arc(Nodo,[Primo|Altri],Col,Rete) :-
  arco(Nodo,Primo,Attr,Rete),
  Attr=aspetto,
  write('<arc type= "'),
  writeq('tense/aspect'),
  write('" >'),
  term_length(W,'tense/aspect'), 
  NewCol is Col + W + 1,
  xml_arc(Primo,NewCol,Rete),
  xml_arc(Nodo,Altri,NewCol,Rete),
  write('</arc>'),nl,
  !.

xml_arc(Nodo,[Primo|Altri],Col,Rete) :-
  arco(Nodo,Primo,Attr,Rete),
  Attr=pred,
  tab(Col),
  write('<sw id="'),
   gensym(sw_,MW),
   write(MW),
  write('" type="'),
  writeq(Attr),
  write('" >'),
  term_length(W,Attr),
  NewCol is Col + W + 1,
  xml_arc(Primo,NewCol,Rete),
  write('</sw>'),nl,
  xml_arc(Nodo,Altri,Col,Rete),!.

xml_arc(Nodo,[Primo|Altri],Col,Rete) :-
  arco(Nodo,Primo,Attr,Rete),
  Attr=config,
  tab(Col),
   write('<node type= "'),
  writeq(config),
  write('" >'),
  term_length(W,Attr),
  NewCol is Col + W + 1,
  foglia(Primo,Val,Rete),
  (Val\=[A<B],
   xml_arc(Primo,NewCol,Rete)
   ;
   Val=[A<B],
   write('<leaf  val="'),
%   writeq([A aftr B]),
   writeq([A aftr B]),
   write('"> </leaf>')),
   write('</node>'),nl,
   xml_arc(Nodo,Altri,Col,Rete),!.

xml_arc(Nodo,[Primo|Altri],Col,Rete) :-
  arco(Nodo,Primo,Attr,Rete),
  transl_feats(Attr,Att),
  tab(Col),
   write('<node type= "'),
  writeq(Att),
  write('" >'),
  term_length(W,Att),
  NewCol is Col + W + 1,
  xml_arc(Primo,NewCol,Rete),
  write('</node>'),nl,
  xml_arc(Nodo,Altri,Col,Rete),!.

transl_feats(antecedente,antecedent).
transl_feats(definitezza,definiteness).
transl_feats(aspetto,aspect).
transl_feats(controllore,controller).
transl_feats(interpretazione,interpretation).
transl_feats(modo,mood).
transl_feats(supporto,modal).
transl_feats(tempo,tense).
transl_feats(testa,head).
transl_feats(Attr,Attr).

super_f_struttura(Attr, Nodo):-
  f_struttura(Indice, Attr, Nodo),!.

super_f_struttura(pcomp/locativo, pcomp/locative).

/* ****************************************************************** */

aux_to_comp([X|Resto],Aux/Resto, V, _, _, _, _) 
   :-
   gr(germanic),
   ausiliare(X,Aux).

aux_to_comp(X,Aux/Resto, V, supporto([]), CatV, CatGr, SubCatIn) 
   :-
   gr(english), onelook(X,aux_to_comp,v,nil),
   verbo1(X,Resto,_, Aux, _, _, finito, CatGr, 
      supporto([]), CatV, SubCatIn, _, _, 
      _, _, _),
   arg(1, Aux, be).

aux_to_comp(X,Aux/Resto, V, supporto([]), CatV, CatGr, SubCatIn) 
   :-
   gr(deutsch), onelook(X,aux_to_comp,v,nil),
   verbo1(X,Resto,_,
      Aux, _, _, finito, CatGr, 
      supporto([]), CatV, SubCatIn, _, _, 
      _, _, _).

aux_to_comp(A, []/A, _, _, _, _,_):-!.

aux_to_comp1(F,Aux/Resto,Verbo,Supporto,CatV,CatGr,SubCatIn)
   :-
   gr(germanic), onelook(F,aux_to_comp1,v,nil),
   (F=[X|Resto],
    ( ausiliare(X,aux(Ainf,Mod,Temp,Per,Numero))
     ;
      ausiliare(X,modal(Ainf,Mod,Temp,Per,Numero))
     ),
    Aux=aux(Ainf,Mod,Temp,Per,Numero)
    ;
    verbo1(F,Resto,_,
      Verbo, Pro1, Pro2, finito, CatGr, Supporto, 
      CatV, SubCatIn, GenSn, NumSn, PersSn, Neg, Avv)
    ).

aux_to_comp1(A,[]/A,_,_,_,_,_):-!.

build_all_PredV(Verbo, [], []):-!.
build_all_PredV(Verbo, [CatGr-CatV-LArgsV|Lfs], [First|SPredV]):-
     First=pred_v(Verbo, CatGr, CatV, LArgsV),
     build_all_PredV(Verbo, Lfs, SPredV).

choose_predv([PredV], PredV, CatGr, CatV):-
     PredV=pred_v(Verbo, CatGr, CatV, LArgsV),
     !.
choose_predv(PredVs, PredV, CatGr, CatV):-
     on(PredV, PredVs),
     PredV=pred_v(Verbo, CatGr, CatV, LArgsV).

choose_predv(PredVs, PredV, CatGr, CatV):-
     PredVs=pred_v(Verbo, CatGr, CatV, LArgsV),
     select_subcat(Args, PredVs, Pred),
     (Args=[Arg];
     on(Arg, Args)
     ),
     PredV=pred_v(Verbo, CatGr, CatV, Arg).

choose_predv(PredV, PredV, CatGr, CatV):-
     PredV=pred_v(Verbo, CatGr, CatV, LArgsV),
     !.
choose_predv(PredVs, PredV, CatGr, CatV):-
     nonvar(PredV),!.

verbo1(F,X,PersSn,
   v(Verbo, Modo, Tempo, _, _, _), 
   Pro1, Pro2, Forma, CatGr, Supporto, 
   CatV, SPredV, Gen, Num, Pers, Neg, _)
   :-
   (multiplelook(F,verbo1, [vc,v])
    ;
    gr(italiano),
    F=[A|_],
    vcl(A,Vcl,_),
    multiplelook([Vcl|_],verbo1, [vc,v])
    ),
   verbs(F,X,PersSn,
   v(Verbo, Modo, Tempo, Pers, Num, Gen), 
   Pro1, Pro2, Forma, CatGr, Supporto, CatV, SPredV, Gen1, Num1, Pers1, Neg, Avv),
   (Modo=imperat,
    Num=Num1,Pers=Pers1
    ;
    Modo\=imperat).
   
   
verbs(F,X,PersSn,
   v(Verbo, Modo, Tempo, Pers, Num, Gen), 
   Pro1, Pro2, Forma, CatGr, Supporto, CatV, SPredV, Gen1, Num1, Pers1, Neg, Avv)
   :-
   (verbo_imp(F,X,v(Verbo, Modo, Tempo, Pers2, Num2, Gen2), 
      Pro1, Pro2, Forma, CatGr, Supporto, 
      CatV, SubCatIn, Neg),
      Pers1=Pers2, Num1=Num2, Gen1=Gen2,
    findall(XCatGr-XCatV-XLArgsV, cat_gramm(Verbo, XCatGr, XCatV, XLArgsV), AlLFs),
    (AlLFs=[Single], SPredV=[pred_v(Verbo, CatGr, CatV, SubCatIn)]
     ; 
     build_all_PredV(Verbo, AlLFs, SPredV),
     on(pred_v(Verbo, CatGr, CatV, SubCatIn), SPredV))
      ;
    verbo(F,X,v(Verbo, Modo, Tempo, Pers, Num, Gen), 
      Pro1, Pro2, Forma, CatGr, Supporto, CatV, SubCatIn, Avv, Neg, Cli),
    findall(XCatGr-XCatV-XLArgsV, cat_gramm(Verbo, XCatGr, XCatV, XLArgsV), AlLFs),
    (AlLFs=[Single], SPredV=[pred_v(Verbo, CatGr, CatV, SubCatIn)]
     ; 
     build_all_PredV(Verbo, AlLFs, SPredV),
     on(pred_v(Verbo, CatGr, CatV, SubCatIn), SPredV)),
    assign_features(Tempo,PersSn,Pro1,Pers,Num,Gen,Gen1,Num1,Pers1),
        (Cli=cli, retraction(verbo1, clit)
 %        F1=[Cl|Rest],
 %        clitic(Cl,SN,SP,Caso),
 %        X=Rest
        ; 
        Cli=nil, retraction(verbo1, v))
   ).

assign_features(Tempo,PersSn,Pro1,Pers,Num,Gen,Gen1,Num1,Pers1):-
   (gr(english),
    (nonvar(Pers),    
     Gen=Gen1, Num=Num1, Pers=Pers1
     ; 
     var(Pers), PersSn=3, Tempo\=pres/semp, Pers1=PersSn
     ; 
     var(Pers), var(PersSn)
     ; 
     var(Pers), PersSn\=3) 
   ; 
   gr(romance),
    (Pro1=[], 
     Gen=Gen1, Num=Num1, Pers=Pers1  
       ;
     Pro1=sn(indice(_), cat(_), 
        cl(clitico, _, _, 3, _, _, [acc]), spec(def(+))), 
     Num=Num1, 
     Pers=Pers1
       ;
     Pro1\=[], 
     Gen=Gen1,Num=Num1,Pers=Pers1)  
   ;
   gr(deutsch)).

/* per il tedesco con l'ausiliare già preso */
verbo2(F,X, Ainf,
   v(Verbo, Modo, Tempo, Pers, Num, Gen), 
   Pro1, Pro2, Forma, CatGr,Supporto, CatV, pred_v(Verbo, CatGr, CatV, SubCatIn), Gen1, Num1, Pers1, Neg)
   :-
   multiplelook(F,verbo2, [vc,v,q,e]),
   verbo_a(F,X,Ainf,
      v(Verbo, Modo, Tempo, Pers, Num, Gen), Pro1, Pro2, Forma, CatGr,Supporto, CatV, SubCatIn, Neg).
   
/* per il tedesco participio passato seguito da ausiliare e per il verbo finale */
verbo3(F,X,
   v(Verbo, Modo, Tempo, Pers, Num, Gen), 
   Pro1, Pro2, Forma, CatGr, Supporto, CatV, pred_v(Verbo, CatGr, CatV, SubCatIn), Gen1, Num1, Pers1, Neg, Avv)
   :-
   multiplelook(F,verbo3, [vc,v]),
   verbo_d(F,X,
      v(Verbo, Modo, Tempo, Pers, Num, Gen), Pro1, Pro2, Forma, CatGr, Supporto, CatV, SubCatIn, Avv, Neg).

/* per i casi in cui si è già preso un verbo copulativo e non si vuole backtrackare in  verb_phrase_const */
verbo4(Ainf,v(Verbo, Modo, Tempo, Pers, Num, Gen), [], [], Forma, cop, Supporto, CatV,   
             pred_v(Verbo, cop, CatV, LArgsV), Gen1, Num1, Pers1, Neg)
   :-
   Ainf=aux(Verbo, Modo, Tempo, Pers, Num),
   cat_gramm(Verbo, cop, CatV, LArgsV).

/* verbi lingue germaniche con ausiliare preso in aux_to_comp */
verbo_a(F,X, Ainf,
v(Vinf,Modo,Tempo/SempComp,Pers,Num,Gen),SN,SP,Forma,CatGr,supporto(Supp),CatV, LArgsV, Neg)
   :-
   verbo_z(F,X,Ainf,
         v(Vinf,Modo,Tempo1/Semp,Pers,Num,Gen),SN,SP,Forma, CatGr, CatV, LArgsV, Neg),
   (var(SN), SN=[]; nonvar(SN)),
    (var(SP), SP=[]; nonvar(SP)),
   (nonvar(Supp),Tempo1=Tempo/Supp, SempComp=Semp
    ; 
    var(Supp),Tempo1=Tempo/comp, Supp=Semp
    ; 
    Tempo1=Tempo, SempComp=Semp),
    retraction(mainverb, v).

verbo_a(F,X, Ainf,
   v(Vinf,Modo,Tempo,Pers,Num,Gen),SN,SP,Forma,CatGr,supporto(Supp),CatV, LArgsV, Neg) 
  :-
  verbo_z(F,X,Ainf,
      v(Vinf,Modo,Tempo1,Pers,Num,Gen),SN,SP,Forma, CatGr, CatV, LArgsV, Neg),
   (var(SN), SN=[]; nonvar(SN)),
    (var(SP), SP=[]; nonvar(SP)),
   (nonvar(Supp),Tempo1=Tempo/Supp; Tempo1=Tempo),
    retraction(mainverb, v).

/* verbo con o senza verbo di supporto */
verbo_imp(F,X,
   v(Vinf,Modo,Tempo/semp,Pers,Num,Gen),SN,SP,Forma,CatGr,supporto([]),CatV, LArgsV, Neg) 
  :-
  nonvar(Modo),
  verbo_y(F,X,
    v(Vinf,Modo,Tempo/semp,Pers,Num,Gen),SN,SP,Forma,CatGr, CatV, LArgsV, Neg, Cli),!,
   Modo=imperat, Tempo=pres,CatGr \= supporto,
   (var(SN), SN=[]; nonvar(SN)),
    (var(SP), SP=[]; nonvar(SP)),
   (Cli=cli, retraction(v, v); Cli=nil).

/* chiamate con il do */
verbo(F,X,
    v(Vinf,Modo,Tempo/SempComp,Pers,Num,Gen),SN,SP,Forma,CatGr,supporto(Supp),CatV,LArgsV,Avv,Neg,nil)
   :- 
    gr(germanic),
   verbo_x(F,F1,
     v(Supp,Modo,Tempo/SempComp,Pers,Num,Gen),SN,SP,Forma,CatGr1, _, _, _,_),
   negaz(F1,Neg/F2),
   sint_avv(F2,Tempo,Avv/F3,_),
   verbo_x(F3,X,v(Vinf,_Modo,_Tempo/semp,_,_,_),SN,SP,non_fin,CatGr,CatV,LArgsV, _,_),
    CatGr1=supporto, 
    (var(SN), SN=[]; nonvar(SN)),
    (var(SP), SP=[]; nonvar(SP)).

verbo(F,X,
     v(Vinf,Modo,Tempo/SempComp,Pers,Num,Gen),SN,SP,Forma,CatGr,supporto(Supp),CatV,LArgsV,Avv,_,nil)
  :-
   gr(germanic),
   verbo_x(F,F1,v(Supp,Modo,Tempo/SempComp,Pers,Num,Gen),
                 SN,SP,Forma,CatGr, _, _, _,_), 
   partv(F1,P/F2),
   sint_avv(F2,Tempo,Avv/F3,_),
   verbo_x(F3,X,v(Vinf,_Modo,_,_,_,_Gen),SN,SP,non_fin,CatGr,CatV,LArgsV, _,_),
   (var(SN), SN=[]; nonvar(SN)),
    (var(SP), SP=[]; nonvar(SP)).


verbo(F,X,v(Vinf,Modo,Tempo/SempComp,Pers,Num,Gen),SN,SP,Forma,CatGr,supporto(Supp),CatV,LArgsV,Avv,_,Cli)
   :-
  verbo_x(F,F1,v(Supp,Modo,Tempo/SempComp,Pers,Num,Gen),
                 SN,SP,Forma,supporto, _, _, _,_), 
            partv(F1,P/F2),
            sint_avv(F2,Tempo,Avv/F3,_),
  verbo_x(F3,X,v(Vinf,_Modo,_,_,_,_Gen),SN,SP,non_fin,CatGr, CatV, LArgsV, _,Cli),
    (var(SN), SN=[]; nonvar(SN)),
    (var(SP), SP=[]; nonvar(SP)).

verbo(F,X,
     v(Vinf,Modo,Tempo/Semp,Pers,Num,Gen),SN,SP,Forma,CatGr,supporto([]),CatV,LArgsV,Avv,_,Cli) 
   :-
  verbo_x(F,X,v(Vinf,Modo,Tempo/Semp,Pers,Num,Gen),SN,SP,Forma, CatGr, CatV, LArgsV, Avv,Cli),
   CatGr \= supporto,
     (var(SN), SN=[]; nonvar(SN)),
     (var(SP), SP=[]; nonvar(SP)).

check_auxiliary(Ge,Ge1,Ain,CatGr):- 
        gr(romance),
        (Ainf=essere,Ge=Ge1;
         Ainf=essere,CatGr=rifl;
         Ain=avere),
       (  (CatGr=trans,Ain=avere ;
          CatGr=trans,Ain=essere)
         ;
         ( CatGr=vatm,Ain=avere ;
             CatGr=vatm,Ain=essere )
          ;
         ( CatGr=intr,Ain=avere ;
             CatGr=intr,Ain=essere )
          ;
          CatGr=inac,Ain=essere
          ;
          CatGr=vimp,Ain=essere
          ;
          CatGr=rifl,Ain=essere
          ;
          CatGr=cop,Ain=essere).

check_auxiliary(_,_,Ain,CatGr):-
        gr(germanic), 
       (CatGr=trans, (Ainf=have; Ainf=haben)
       ;
       CatGr=intr, (Ainf=be; Ainf=have; Ainf=sein)
       ;
       CatGr=cop, (Ainf=have; Ainf=sein)
        ).
/* forme progressive : stare + gerundio */
verbo_x(F,X,v(Vinf,Modo,Tempo/progr,Persona,Numero,Gen),SN,SP,finito,CatGr, CatV, LArgsV, Avv,nil) 
    :-
    Ainf=stare,
    F=[Aux|F1],
    ausiliare(Aux,aux(Ainf,Modo,Tempo,Persona,Numero)),
      (Modo=ind ; Modo=cong),
    F1=[Verbo|X],
    verb_lex(Verbo,[ger],Vinf,_,_,_,_,CatGr,CatV, LArgsV).

verbo_x(F,X,
     v(Vinf,Modo,Tempo/progr,Persona,Numero,Gen),SN,SP,non_fin,CatGr, CatV, LArgsV, _,cli) 
   :-
    F=[Aux|F1],
       ausiliare(Aux,aux(AX,inf,Tempo,Persona,Numero)),
    AX=stare,
    F1=[Verbo|F2],
    verb_lex(Verbo,[ger],Vinf,_,_,_,_,CatGr,CatV, LArgsV),
       clitici(F2,SN-SP/X).

verbo_x(F,X,
     v(Vinf,Modo,Tempo/comp/Vinf,Persona,Numero,Gen),SN,SP,finito,supporto, CatV, LArgsV, _,nil) 
   :-
    F=[Verbo|X],
    verb_lex(Verbo,[ind,cong,cond],Vinf,Modo,Tempo,Pers,Num,supporto,CatV, LArgsV).

/*10*/
verbo_x(F,X,
      v(Vinf,Modo,Tempo/comp/Ainf,Pers,Num,Gen),SN,SP,finito,CatGr1,CatV, LArgsV, Avv,nil) 
   :-
    verb_lex_nf(F,X,Ainf,[ind,cong,cond],Vinf,Modo,Tempo,Pers,Num,Gen,CatGr1,CatV,LArgsV, Avv).

/*3*/
verbo_x([Verbo|X],X,v(Vinf,Modo,Tempo/semp,Pers,Num,Gen),SN,SP,finito,CatGr,CatV,LArgsV, _,nil)
     :-
   verb_lex(Verbo,[ind, cong, cond],
             Vinf,Modo,Tempo,Pers,Num,CatGr,CatV,LArgsV), CatGr\=supporto.
/*4*/
verbo_x(F,X,v(Vinf,Modo,Tempo/comp/Vau,Pers,Num,Gen),SN,SP,non_fin,CatGr1,CatV, LArgsV, Avv,nil) 
   :-
  verb_lex_nf(F,X,Ainf,[inf, ger],Vinf,Modo,Tempo,Pers,Num,Gen,CatGr1,CatV,LArgsV,Avv).
      

verbo_x([Verbo|X],X,v(Vinf,Modo,Tempo/semp,Pers,Num,Gen),_,_,non_fin,CatGr, CatV, LArgsV, _,nil)
   :- 
   verb_lex(Verbo,[inf, ger],Vinf,Modo,Tempo,Pers,Num,CatGr,CatV, LArgsV).

verbo_x([Verbo|X],X,v(Vinf,Modo,Tempo/comp/Vau,Pers,Num,Gen),_,_,non_fin,CatGr, CatV, LArgsV, _,nil)
    :- 
    verb_lex(Verbo,[inf, ger],Vinf,Modo,Tempo,Pers,Num,CatGr,CatV, LArgsV).

/*5*/
verbo_x(F,X,Verbos,SN,SP,Modo,CatGr, CatV, LArgsV, _,cli) 
  :- 
   doublelook(F,verbo_x,v,q,nil),
   F=[A|F1],
   verbo_cl(A,Aux,Tempo,non_fin,Cl),
   clitic(Cl,SN,SP,Caso),
   F1=[Par|X],
   participio(Par,Vinf,Gen,Num),
   cat_gramm(Vinf, CatGr, CatV, LArgsV),retraction(pp_y, q),
   Verbos=..[v,Vinf,M,Tempo/comp/Vau,P,N,Gen].

verbo_x([F|X],X,Verbos,SN,SP,Modo,CatGr, CatV, LArgsV, _,cli) 
  :-
   verbo_cl_m(F,Verbos,Modo,CatGr, CatV, LArgsV,Cl),
   Verbos=..[Verbo,V,M,T,P,N,Gen],
          (CatGr=intr, 
             on(sp/ogg2/_/_/[_|_],LArgsV),
           clitic(Cl,[],SP, dat)
           ;
           CatGr=trans, 
             on(sn/ogg/_/[_|_],LArgsV),
             clitic(Cl,SN,[], [acc])
         ;
           CatGr=trans, 
             on(sp/obl/_/da/[_|_],LArgsV),
             clitic(Cl,SN,[], obl)
          ;
           CatGr=rifl, 
           clitic(Cl,SN,SP,[acc])
								   ;
           clitic(Cl,SN,SP,Caso)).

/* 8 si dovrebbe concordare il genere del participio al soggetto */
verbo_x(F,X,v(Vinf,Modo,Tempo/comp/Vau,Pers,Num,Gen),SN,SP,finito,CatGr1,CatV,LArgsV,
Avv,nil) 
    :-
    SN\=[],
    SN = sn(indice(S),cat(C),cl(rifl_corto,_,_,_,_,_,_),Spec),
  verb_lex_nf(F,X,essere,[ind,cong,cond],Vinf,Modo,Tempo,Pers,Num,Gen,CatGr1,CatV,LArgsV,Avv).

/*9*/
verbo_x(F,X,v(Vinf,Modo,Tempo/comp/Vau,Pers,Num,Gen),SN,SP,finito,trans,risultato, LArgsV, Avv,nil)
   :-
  verb_lex_nf(F,X,essere,[ind,cong,cond],Vinf,Modo,Tempo,Pers,Num,Gen,risultato,trans,LArgsV,Avv),
   \+ nogen_member(sn/ogg/_/[umano,animato],LArgsV).

/*11*/
verbo_x(F,X,v(Vinf,Modo,Tempo/comp/Vau,Pers,Num,Gen),SN,SP,non_fin,CatGr, CatV, LArgsV, Avv,nil) 
    :-
   gr(germanic),
  verb_lex_nf(F,X,have,[inf,ger],Vinf,Modo,Tempo,Pers,Num,Gen,CatGr1,CatV,LArgsV,Avv).

verbo_x(F,X,v(Vinf,Modo,Tempo/comp/Vau,P,N,Gen),SN,SP,non_fin,CatGr1, CatV, LArgsV, Avv,cli) 
   :-
  verb_lex_nf(F,F1,Ainf,[inf,ger],Vinf,Modo,Tempo,Pers,Num,Gen,CatGr1,CatV,LArgsV,Avv),
      clitici(F1,SN-SP/X).

verbo_x(F,F1,v(Vinf,Modo,Tempo/progr,Pers,Num,Gen),SN,SP,finito,CatGr, CatV, LArgsV, _,nil) 
   :-
   F=[X|F1],
   ausiliare(X,aux(be,Modo,Tempo,Pers,Num)),
  (Modo=ind ; Modo=cong).


/* verbi semplici con clitico */
verbo_y(F,X,
      v(Vinf,Modo,Tempo/semp,Pers,Num,Gen),SN,SP,finito, CatGr, CatV, LArgsV, Neg, nil)
      :-      F=[Verbo|X],
           verb_lex(Verbo,[imperat],
             Vinf,Modo,Tempo,Pers,Num,CatGr,CatV, LArgsV).

verbo_y([Ver|X],X,Verbos,SN,SP,Modo,CatGr, CatV, LArgsV, Neg, cli) 
  :-
   verbo_cl_m(Ver,Verbos,Modo,CatGr, CatV, LArgsV,Cl),
   Verbos=..[Verbo,V,M,T,P,N,Gen],
   cat_gramm(V,trans,CatV,LArgsV), 
      on(sp/ogg2/_/_/[_|_],LArgsV),
    clitic(Cl,SN,SP,dat).

verbo_cl(F,Vinf,Modo,non_fin,Cl) 
  :-
  vrb_cl(F,Verbo,Cl),
   v(Verbo,Vinf,Modo,Tempo,Pers,Num),
   (Modo=inf ; Modo=ger).

verbo_cl_m(F,v(Vinf,Modo,Tempo/semp,Pers,Num,Gen),non_fin,CatGr, CatV, LArgsV,Cl) 
  :-
  vrb_cl(F,Verbo,Cl),
  verb_lex(Verbo,[inf, ger],
             Vinf,Modo,Tempo,Pers,Num,CatGr,CatV, LArgsV).

verbo_cl_m(F,v(Vinf,Modo,Tempo/semp,Pers,Num,Gen),finito,CatGr, CatV, LArgsV,Cl)
  :-
  vrb_cl(F,Verbo,Cl),
  verb_lex(Verbo,[ind,cong,imperat,cond],
      Vinf,Modo,Tempo,Pers,Num,CatGr,CatV, LArgsV).

/* verbi tedeschi in fine frase */

verbo_d([Par|F],X,v(Vinf,Modo,Tempo/comp/Vau,Pers,Num,Gen),SN,SP,Forma,CatGr1,Supporto, CatV, LArgsV,Avv, Neg) 
   :-
   participio(Par,Vinf,Gen,Num1),
   F=[A|X],
   ausiliare(A,aux(Ainf,Modo,Tempo,Pers,Num)),
    Ainf=haben;Ainf=sein;Ainf=werden,
   cat_gramm(Vinf, CatGr, CatV, LArgsV),retraction(pp_y, _).

verbo_d([Verbo|F],X,v(Vinf,Modo,Tempo/semp,Pers,Num,Gen),_,_,Forma,CatGr, Supporto,CatV, LArgsV,Avv, Neg)
   :-
   verb_lex(Verbo,[ind,cong,cond],
      Vinf,Modo,Tempo,Pers,Num,CatGr,CatV, LArgsV).

/* verbi inglesi con ausiliare in aux_to_comp */

verbo_z(F,X,Aux,v(Vinf,Modo,Tempo/comp/Ain,Pers,Num,Gen),SN,SP,Forma,CatGr1, CatV, LArgsV, Neg) 
    :-
        Aux=..[A,Ain,Modo,Tempo,Pers,Num], (A=aux;A=modal),
       F=[Aux1|F1],
       ausiliare(Aux1,aux(Ain,Mod,Temp,Pers,Num)),
       eitherdlook([Aux|F1],verb_lex_nf,v,av,q),
       retraction(ausiliare, v),
       sint_avv(F1,Tempo,Avv/F2,_),
       F2=[Par|X],
       participio(Par,Vinf,Gen1,Num1),
       cat_gramm(Vinf, CatGr1, CatV, LArgsV),
%       (Ainf=essere,Gen=Gen1;Ainf\=essere; CatGr1=rifl),
       check_auxiliary(Gen,Gen1,Ainf,CatGr1). 

verbo_z(F,X,Aux,v(Vinf,Modo,Tempo/comp/Vau,Pers,Num,Gen),SN,SP,Forma,CatGr, CatV, LArgsV, Neg) 
    :-
     Aux=..[A,Ainf,Modo,Tempo,Pers,Num], (A=aux;A=modal),
    negaz(F,Neg/F1),
     F1=[Par|X],
    participio(Par,Vinf,Gen,Num1),
    cat_gramm(Vinf, CatGr, CatV, LArgsV), 
    (CatGr=trans, (Ainf=have; Ainf=haben)
    ;
    CatGr=inac, (Ainf=be; Ainf=have; Ainf=sein)
    ;
    CatGr=intr, (Ainf=be; Ainf=have; Ainf=sein)
    ;
    CatGr=cop, (Ainf=have; Ainf=sein)
    ),retraction(pp_y, q).


verbo_z(F,X,Aux,v(Vinf,Modo1,Tempo1/semp,Pers,Num,Gen),_,_,Forma,CatGr, CatV, LArgsV, Neg)
    :- 
       Aux=..[A,Ainf,Modo1,Tempo,Pers,Num], (A=aux;A=modal),
    (
     (Ainf=be;Ainf=do;Ainf=sein;Ainf=will), Tempo1=Tempo
     ;
     (Ainf=may;Ainf=shall;Ainf=can), Tempo1=pres/Ainf),
    negaz(F,Neg/F1),
     F1=[Verbo|X],
   verb_lex(Verbo,[inf, ger],
             Vinf,Modo,Tempo2,Pers,Num1,CatGr,CatV, LArgsV).

verb_lex(Verbo,ListMood,Vinf,Modo,Tempo,Pers,Num,CatGr,CatV, LArgsV)
   :-
    v(Verbo,Vinf,Modo,Tempo,Pers,Num),
    on(Modo,ListMood),
    cat_gramm(Vinf, CatGr, CatV, LArgsV).

verb_lex_nf(F,X,Ainf,ListMood,Vinf,Modo,Tempo,Pers,Num,Gen,CatGr1,CatV,LArgsV,Avv)
    :-
       on(Modo,ListMood),
       F=[Aux|F1],
        Modo\=inf,
       ausiliare(Aux,aux(Ainf,Modo,Tempo,Pers,Num)),
       eitherdlook([Aux|F1],verb_lex_nf,v,av,q),
       retraction(ausiliare, v),
       sint_avv(F1,Tempo,Avv/F2,_),
       F2=[Par|X],
       participio(Par,Vinf,Gen1,Num1),
       cat_gramm(Vinf, CatGr1, CatV, LArgsV),
%       (Ainf=essere,Gen=Gen1;Ainf\=essere; CatGr1=rifl),
       check_auxiliary(Gen,Gen1,Ainf,CatGr1). 

restrict_inv_subj(SN, Part, Caso, Tipo, Gen, Num):-
           SN\=sn(indice(_), cat(_), 
                   cl(rifl_corto, si, 3, _, _, Caso), 
                    spec(def(+)), args(_), mods(_), adjs(_)),
           Caso=[nom],
          (SN=sn(indice(_), cat(_), 
            pr(Tipo, P, Pe, Ge, Nu, Ca),
            spec(def(D), part(Part), mod(_), foc(_), card(_), 
             quant(Q)), args(A), mods(M), adjs(Ad))
            ;
            Tipo=nome,
           SN=sn(indice(I),cat(C),Testa,Det,Args,Mods,Adjs),
          extractpart(Det, Part)
          ),
          !.

%restrict_inv_subj(SN, Part, Caso, Tipo, Gen, Num):-!.

extractpart(Det, Part):-
           Det=..[spec,def(Def), part(Part)|_],
           nonvar(Part),!.
extractpart(Det, Part):-
           Det=..[spec,def(Part)|_],
           nonvar(Part),!.


verbal_phrases(VarSN,P,V,CatGr, ScIn, ScOut, S, C,Args, Adjs,F,X,H)
  :- 
   on(CatGr, [vimp,vatm, inac, intr]),
   choose_predv(ScIn, PredV, CatGr, CatV),
   verbal_phrase_intrans(VarSN,P,V,CatGr,PredV, ScOut, S,C,Args,Adjs,F,X,H),!.

verbal_phrases(VarSN,P,V,rifl,ScIn, ScOut, S, C,Args, Adjs,F,X,H)
   :- 
   gr(romance),
    P=[Pro1, Pro2],Pro1\=[],
   choose_predv(ScIn, PredV, CatGr, CatV),
   verbal_phrase_rifl(VarSN,P,V,PredV, ScOut, S,C,Args,Adjs,F,X,H).

verbal_phrases(VarSN,P,V,cop,ScIn, ScOut, S, C,Args, Adjs,F,X,H)
   :- 
   choose_predv(ScIn, PredV, cop, CatV),
   verbal_phrase_copul(VarSN,P,V,PredV, ScOut, S,C,Args,Adjs,F,X,H).

verbal_phrases(VarSN,[CliticoAcc,CliticoDat],V,CatGr,ScIn, ScOut, S, C,Args, Adjs,F,X,H)
     :-
     try_all(T,0,[CliticoAcc,CliticoDat], ScIn, PV, CatGr1, F, X, H,H1,All),
     (remove([], All, Al); Al=All),
     append(VarSN, [comps(Al)], NewVarSN),
     (var(CatGr1),
      choose_predv(ScIn, PrV, CatGr2, Cv),
      (CatGr2\=supporto, CatGr=CatGr2, PredV=PrV
             ;
      CatGr2=supporto,
      choose_predv(ScIn, PredV, CatGr, CatV), CatGr\=supporto)

      ;
      CatGr1=supporto,
      choose_predv(ScIn, PredV, CatGr, CatV), CatGr\=supporto
      ;
      nonvar(CatGr1), CatGr=CatGr1, 
      (nonvar(PV),PV\=[],PredV=PV;
       (var(PV);PV=[]),choose_predv(ScIn, PredV, CatGr2, Cv))
     ),
     verbal_phrase(NewVarSN,[CliticoAcc,CliticoDat],V,CatGr,PredV, 
                               ScOut, S, cat(CatV),Args, Adjs,H),
     !.


erase_bindee([], VarSN, Comps, NewComps, []):-!.
erase_bindee(nil, VarSN, Comps, NewComps, nil):-!.

erase_bindee(H, VarSN, Comps, NewComps, nil):-
    H\=nil,H\=[],
    H=sn/I/C/Pros,
    Pros=..[Pro,pro, _, _, P, Cas],
    check_little_pro(VarSN),
    appiattisci(Comps, NComps),
    tryremove(Comps, SN/sn, Comps1),
    tryremove(Comps1, SN1/sn, ListaSP),
    verifysns(SN, SN1, Comps, Comps1, NewComps),    
    !.
    
erase_bindee(H, VarSN, Comps, Comps, H).

verifysns([], SN1, Comps, Comps1, Comps):-!.
verifysns(SN1, [], Comps, Comps1, Comps):-!.
verifysns(SN, SN1, Comps, Comps1, NewComps):-
     SN\=[], SN1\=[],
     SN=sn(In, Cat, pr(vbl, vbl, _, 3, _, _, [nom, acc]), Controllore)/sn,
     !.

try_remove([], SN/Tipo, []):-!.

try_remove(A, SN/Tipo, ListaSP):-
    appiattisci(A, Comps),
    tryremove(Comps, SN/Tipo, ListaSP),!.

tryremove([], SN/Tipo, []):-!.

tryremove([Comps], SN/Tipo, ListaSP):-
     remove(SN/Tipo, Comps, ListaSP),!.

tryremove(Comps, SN/Tipo, ListaSP):-
     remove(SN/Tipo, Comps, ListaSP),!.

tryremove([Comp|Comps], SN/Tipo, ListaSP):-
     remove(SN/Tipo, Comp,  Lista),
     append(Comps, Lista, ListaSP),!.

tryremove([Comp|Comps], SN/Tipo, ListaSP):-
     remove(SN/Tipo, Comps, Lista),
     append([Comp], Lista, ListaSP),!.

tryremove([Comp|[Comps]], SN/Tipo, ListaSP):-
     remove(SN/Tipo, Comps,  Lista),
     append([Comp], Lista, ListaSP),!.

tryremove([Comp|Comps], SN/Tipo, ListaSP):-
     remove([SN/Tipo], Comps, Lista),
     append_list([Comp], Lista, ListaSP),!.

tryremove([Comp|Comps], SN/Tipo, ListaSP):-
     remove([SN/Tipo, C], Comps, Lista),
     append_list([Comp], Lista, ListaSP),!.

tryremove(Comps, SN/Tipo, ListaSP):-
     remove(SN, Comps, ListaSP),
     (SN=..[sn|Rest], Tipo=ogg
      ;
      SN=..[sp, prep(a,Cat,Mod)|Rest], Tipo=ogg2), !.

tryremove([Comps], SN/Tipo, ListaSP):-
     remove(SN, Comps, ListaSP),
     (SN=..[sn|Rest], Tipo=ogg
      ;
      SN=..[sp, prep(a,Cat,Mod)|Rest], Tipo=ogg2), !.

tryremove([Comps|Comps], SN/Tipo, ListaSP):-
     remove(SN, Comps, ListaSP),
     (SN=..[sn|Rest], Tipo=ogg
      ;
      SN=..[sp, prep(to,Cat,Mod)|Rest], Tipo=ogg2), 
     append_list([Comp], Lista, ListaSP),!.

tryremove(Comps, SN/Tipo, ListaSP):-
     remove(Comp, Comps, ListaSP),
      Comp=..[saa|Rest], Tipo=sn,
      SN=.. [sn|Rest],!.

selogg2(PredV, Ogg2, TOgg, Fun, TOgg2, PredV2):-
     nonvar(Ogg2), Ogg2\=[],
      (
      TOgg=ogg2,TOgg2=TOgg
     ;
      member(TOgg - Fun, [sn - ogg, svinf - vcomp, f - fcomp]),TOgg2=TOgg
     ;
      member(TOgg - TOgg2, [ogg - sn, vcomp - svinf, fcomp - f]),Fun=TOgg
     ),
     (TOgg2=sn,
     select_subcat(sp/ogg2/_/_/_, PredV, PredV2)
     ;
     TOgg2\=sn,
     select_subcat(TOgg2/Fun/_/_, PredV, PredV1),
     select_subcat(sp/ogg2/_/_/_, PredV1, PredV2)
     ;
     gr(english),
     TOgg2\=sn,
     select_subcat(TOgg2/Fun/_/_, PredV, PredV1),
     select_subcat(sn/ogg/_/_/_, PredV1, PredV2)
     ;
     TOgg2\=sn,
     select_subcat(Fun/_/_/_, PredV, PredV1),
     select_subcat(sp/ogg2/_/_/_, PredV1, PredV2)
     ;
     TOgg2=ogg2,
     select_subcat(sp/ogg2/_/_/_, PredV, PredV2)
     ;
     TOgg2=svinf,
     select_subcat(sn/ogg/_/_, PredV, PredV2)
     ;
     TOgg2=f,
     select_subcat(sn/ogg2/_/_, PredV, PredV2)
     ),
     !.

vp_trans(
    [sn(SN1, Gen, Num, Pers),
    LSP0, LSP1, SA1, Avv1, Avv2,
    Voc, Neg, parent(Par), Sub_n, comps(Comps)], 
    [CliticoAcc, CliticoDat], 
    v(Verbo, Modo, Tempo, Pers1, Num1, 
      Gen1), 
    PredV, LArgsV1, Supporto, 
    cat(CatV), 
    args(Args), 
    adjs(Adjs), 
    H0) 
    :-
     PredV=pred_v(Verb,CatGr,CatV,PrimoArg),
    try_remove(Comps, SN/Tipo, ListaComps),
    (remove(part(Part), ListaComps, ListaSP2),
     ListaSP the_list LSP0 && LSP1 && ListaSP2,
     grammaticality_check(interp_attiva_tr_trenn, 
           [Verb,Verbo1, PredV, LArgsV1,SN1/sogg, SN/Fu, Part/form,ListaSP,CatV],
               Args,Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4, Comp], Adjs),
    (Verbo1=[], Verbo=Verb
     ; 
     Verbo1\=[], Verbo=Verbo1)
   ;
    Verbo=Verb,
    try_remove(ListaComps, Ogg2/TOgg, ListaSPs),
      Ogg2\=[],
    selogg2(PredV, Ogg2, TOgg, Fun, TOgg2, PredV2),
     (
       (Fun=vcomp;Fun=fcomp),
        remove(controllo(Controllo), ListaSPs, ListaSP3)
      ;
      ListaSP3=ListaSPs),
      ListaSP the_list LSP0 && LSP1 && ListaSP3,
      grammaticality_check(interp_attiva_tr_ogg2, 
           [Verbo,Controllo, PredV2, LArgsV1,SN1/sogg, SN/Fu, Ogg2/Fun,ListaSP,CatV],
               Args,Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4, Comp], Adjs)
     ;
     (nonvar(Tipo),
      member(Tipo, [sn, ncomp, ogg, clitico, riflessivo, rifl_corto,pr_quantif,quant])
      ;var(Tipo)),
      Cond =  (  Rest=[] -> true
      ;
       Rest \= [pcomp/_/_], Rest \= [sp/ogg2/_]
      ),
      select_subcatt([sn/sogg/_/_, Cost/ogg/_/_ | Rest], Cond, PredV, PredV1),
      ListaSP the_list LSP0 && LSP1 && ListaComps,
      grammaticality_check(interp_attiva_tr, 
           [Verbo,PredV1, LArgsV1,SN1/sogg,SN/ogg,ListaSP,CatV],
               Args,Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4, Comp], Adjs),
      (Verbo=[],Verbo=Verb;
      Verbo\=[])
    ;
      Verbo=Verb,
      Tipo = svinf,
      (remove(controllo(Controllo), ListaComps, ListaSP2)
        ;
       remove([Infs,controllo(Controllo)], Comps, Lista), 
       ListaSP2=ListaComps),
      (select_subcatt(Fun/prop/_/_, Fun = vcomp, PredV, PredV1);
       select_subcatt(Fun/propint/_/_, Fun = vcomp, PredV, PredV1)),
      ListaSP the_list LSP0 && LSP1 && ListaSP2,
      grammaticality_check(interp_trans_inf, 
               [Verbo,Controllo,PredV1,LArgsV1,SN1/sogg, SN/vcomp,ListaSP,CatV],
                Args,Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4, Comp], Adjs)
     ;
      Verbo=Verb,
      Tipo = fcomp, 
      remove(controllo(CR), ListaComps, ListaSP2),
      select_subcatt(Fun/CR/_, Fun = f/fcomp, PredV, PredV1),
      ListaSP the_list LSP0 && LSP1 && ListaSP2,
      grammaticality_check(interp_trans_fcomp, 
               [Verbo,Modo,PredV1,LArgsV1,SN1/sogg, SN/fcomp,ListaSP,CatV],
                Args,Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4, Comp], Adjs)
     ;
      Verbo=Verb,
      Tipo = sn, 
      select_subcatt(Fun/CR/_, Fun = f/fcomp, PredV, PredVv),
      PredVv=pred_v(Verbo,Cv,Av,Scg),
      remove(f/fcomp/_/_, Scg, Sgn),
      append(Sgn, [sn/ogg/tema/[]], Pn),
      PredV1=pred_v(Verbo,Cv,Av,Pn),
      ListaSP the_list LSP0 && LSP1 && ListaComps,
      grammaticality_check(interp_attiva_tr, 
           [Verbo,PredV1, LArgsV1,SN1/sogg,SN/ogg,ListaSP,CatV],
               Args,Adjs_x,Par,[Neg, Voc, Avv1, Avv2, Avv3, Sub_n, Avv4, Comp], Adjs)
   ),!.


nonvarlist([]):-!.
nonvarlist(CliticoDat):-
      nonvar(CliticoDat), 
      CliticoDat\=[],
      !.
checktypeclits(TOgg, [], []):-!.
checktypeclits(TOgg, CliticAcc, CliticoDat):-
      nonvar(TOgg),
      (TOgg=sn
       ; 
       TOgg=svinf
       ;                            
       TOgg=fcomp),
       nonvarlist(CliticoDat),
       CliticAcc=CliticoDat
      ;
      TOgg=riflessivo;
      TOgg=clitico;
      TOgg=enclitico,
      !.

computeobject(CliticoAcc, [Oggetto/TOgg]):-
     CliticoAcc\=[],
     trova_tipo_clitico(CliticoAcc,TOgg),
     oggetto(Oggetto, TOgg, PredV, Controllo, CliticoAcc, F3,F4,H0, nil),
     Oggetto\=[],
     !.

pp_vs_vcomp(a,F,PredV):-
     select_subcatt(Fun/prop/_/_, Fun = vcomp, PredV, PredV2),
     F=[a,A|Rest],
     onelook([A|Rest],pp,v,nil),
     findall_poss(Stack),
     length(Stack,L),
     length(F1,L1),
     N is L - L1 + 1,
     !,
     on(N-Verb,Stack),
     \+ on(v-Word, Verb),
     !.
pp_vs_vcomp(a,F,PredV):-
     select_subcatt(Fun/Role/to/_, Fun = sp/ogg2, PredV, PredV2),
     F=[a,A|Rest],
     onelook([A|Rest],pp,[a,d,n,r,w],nil),
     !.
pp_vs_vcomp(W,F1,PredV):-W\=to,!.

try_all(Time,N,[CliticoAcc,CliticoDat], ScIn, PredV, CatGr, F, X, H1,H2,Comp):-
     (var(H1);
      H1 = nil),
     (F=[],X=[];F=[P], punct(P),X=[P]),
     (      
      nonvarlist(CliticoAcc),
      computeobject(CliticoAcc, Comp)
      ;
      nonvarlist(CliticoDat), 
      Comp=[CliticoDat]
      ;
      Comp=[]),!.

try_all(Time,N,Clitics, ScIn, PredV, CatGr, F, X, H1,H2,[Avv|All]):-
     sint_avv(F,Tempo,Avv/F1,_),
     Avv\=[],
     try_all(Time,N,Clitics, ScIn, PredV, CatGr, F1, X, H1,H2,All),!.

try_all(Time,N,Clitics, ScIn, PredV, CatGr, F, X, H1,H2,[Comp|All]):-
     compar(Comp,Verbo,PrimoArg,Controllo,F,F1),
     Avv\=[],
     try_all(Time,N,Clitics, ScIn, PredV, CatGr, F1, X,H1,H2, All),!.

try_all(Time,N,[CliticoAcc,CliticoDat], ScIn, PredV, CatGr, F3, X, H1,H2,[PLista|All]):-
     choose_predv(ScIn, PredV, CatGr, CatV),
     CatGr=psych,    
     oggetto(Oggetto,TOgg,PredV,Controllo,CliticoAcc,F3,F4,H1,nil),
     checktypeclits(TOgg, CliticAcc, CliticoDat),
     sint_prepos(CliticAcc,ListaSP3),
     (nonvarlist(ListaSP3), 
       PrimaLista=[ListaSP3]
       ;
      var(ListaSP3),
      CliticDat=CliticoDat,
     append_list(CliticDat, ListaSP3, PrimaLista)
     ),
     append_list(PrimaLista, [Oggetto/TOgg], PrimLista),
     ((TOgg=svinf;TOgg=fcomp),
      append_list(PrimLista, [controllo(Controllo)], PLista)
      ;
      PLista=PrimLista),
     try_all(Time,N,[[],[]], ScIn, PredV, CatGr, F4, X,nil, nil,All),!.

try_all(Time,N,[CliticoAcc,CliticoDat], ScIn, PredV, CatGr, F3, X, H1,H2,[CliticoDat|All]):-
     choose_predv(ScIn, PredV, CatGr, CatV),
     CatGr=psych, 
     CliticoDat\=[], 
     try_all(Time,N,[[],[]], ScIn, PredV, CatGr, F3, X, H1,H2, All),!.

try_all(Time,N,[CliticoAcc,CliticoDat], ScIn, PredV, CatGr, F3, X, H1,H2,[PLista|All]):-
     choose_predv(ScIn, PredV, CatGr, CatV),
     on(CatGr, [vimp,vatm, intr, inac]),
     oggetto_intrans(SN2, Tipo, PredV, Controllo, CliticoAcc, PredV1,F3,F4),
     SN2\=[],
     append(CliticoDat, [SN2/Tipo], PLista),
     try_all(Time,N,[[],[]], ScIn, PredV, CatGr, F4, X,H1,H2, All),!.

try_all(Time,N,[CliticoAcc,CliticoDat], ScIn, PredV, CatGr, F1, X, H1,H2,[PLista|All]):-
     (onegr(try_all,romance) ; onegr(try_all,deutsch)),      
     choose_predv(ScIn, PredV, trans, CatV),
     CliticoAcc=[],
     F1=[PrepArt|_],
     prep_articolata(PrepArt,[P,Art]),
     complemento_part(P,PredV,SP,F1,F2),
     SP\=[],
     convert_part(PrepArt, SP, Oggpart),
     append(CliticoDat, [Oggpart/sn], PLista),
     try_all(Time,N,[CliticoAcc,[]], ScIn, PredV, CatGr, F2, X, H1,H2, All),!.

try_all(Time,N,Clitics, ScIn, PredV, CatGr, F, X, H1,H2,[Part|All]):-
     adjs_trenn(F,F1,Part),
     Part=part(P),
     Part\=[],
     onelook(F1,try_all,[s,x],nil),
%     recover_prep_trenn(P, ScIn,Verbo1),
     try_all(Time,N,Clitics, ScIn, PredV, CatGr, F1, X, H1,H2,All),!.

try_all(Time,1,Clitics, ScIn, PredV, CatGr, F, X,H1,H2, [Y/TipoXcomp|All]):-
     ScIn=[PredV1],
      (
     select_subcatt(Fun/prop/_, Fun \= f/fcomp, PredV1, PredV2),
     select_subcatt(Fun/prop/_, Fun \= vcomp, PredV1, PredV2)
     ;
     select_subcat(pcomp/Prop/_, PredV1, PredV2)
     ;
     select_subcat(xcomp/Prop/_, PredV1, PredV2)
     ;
     select_subcat(ncomp/Prop/_, PredV1, PredV2)
     ;
     select_subcat(acomp/Prop/_, PredV1, PredV2)
     ),
     PredV2=pred_v(Verbo,CatGr,CatV,[PrimoArg|LastArg]),
     restrict_predication(F),
     xcomp(LastArg,Y,Gen,Num,TipoXcomp,F,F1),
     Y\=[],
     try_all(Time,1,Clitics, ScIn, PredV2, CatGr, F1, X, H1,H2,All),!.

try_all(Time,N,Clitics, ScIn, PredV, CatGr, F1, X, H1,H2,[LSP|All]):-
     (var(PredV), on(PredV, ScIn); nonvar(PredV)),
     F1=[W|F3],
     pp_vs_vcomp(W,F1,PredV),
     \+ onelook(F3,try_all,w,nil),
     sp(PredV,LSP,F1,F2),
     LSP\=[],
     try_all(Time,N,Clitics, ScIn, PredV, CatGr, F2, X, H1,H2,All),!.

try_all(Time,N,Clitics, ScIn, PredV, CatGr, F2, X, H1,H2,[SA|All]):-
     \+ onelook(F2,try_all,r,nil),
     length(F2,L),
     (L < 2, Post=post; Post=pre),
     agnt_sa(Post,SA,Gen1,Num1,F2,F3),
     (N=0, \+ onelook(F3,try_all,n,nil); N\=0),
     SA\=[],
     try_all(Time,N,Clitics, ScIn, PredV, CatGr, F3, X, H1,H2,All),!.

try_all(Time,N,Clitics, ScIn, PredV, CatGr, F, X, H1,H2,[SnAv|All]):-
     (var(H1);
      H1 = nil;
      nonvar(H1), H1 \= sn/_/_/CatSP/_
      ), N=0,
     choose_predv(ScIn, PredV, CatGr, CatV),
     nom_avv(SNavv, PredV, _, _, Tipo,F,F1),
     SNavv \= [],
     (
      gr(deutsch), nonvar(Tipo), Tipo=clitico,
      sint_prepos(SNavv, SnAv)
     ;
      check_cat_temp(SNavv), SnAv=SNavv
     ;
      SnAv=SNavv/Tipo),
     N1 is N + 1,
     try_all(Time,N1,Clitics, ScIn, PredV, CatGr, F1, X,H1,H2, All),!.

try_all(Time,N,[CliticoAcc,CliticoDat], ScIn, PredV, CatGr, F3, X, H0,H2,[PrimLista|All]):-
     (F3=[], 
      (CliticoAcc\=[];
       CliticoDat\=[];
       nonvar(H0);
       H0 \= nil
        )
      ;
     F3\=[]),
     choose_predv(ScIn, PredV, CatGr, CatV),
     try_object(N,[CliticoAcc,CliticoDat], ScIn, PredV, CatGr, F3, F5, H0,H2,TOgg,Controllo, Ogg2),
    (Ogg2=[Lis/_], Lis\=[];Ogg2=[]),
    (islist(CliticoDat),
     append(CliticoDat, Ogg2, PrimaLista)
     ;
     \+ islist(CliticoDat),
     append([CliticoDat], Ogg2, PrimaLista)
     ),
     (
      (TOgg=svinf;TOgg=fcomp),
      append(PrimaLista, [controllo(Controllo)], PrimLista)
      ;
      var(Controllo), 
       N1 is N + 1,
       PrimLista=PrimaLista),
     try_all(Time,N1,[[],[]], ScIn, PredV, CatGr, F5, X, nil,H2, All),!.

try_all(Time,N,Clitics, ScIn, PredV, CatGr, F1, X, H1,H2,[LSP|All]):-
     nonvar(H1),
     H1 \= nil,
     H1 = sp/_/_/CatSP/_,
     nonvar(CatSP),
     sint_prep3(F1,F2,LSP,H1,H2),
     try_all(Time,N,Clitics, ScIn, PredV, CatGr, F2, X, H2,H3, All),!.

try_all(Time,N,Clitics, ScIn, PredV, CatGr, F2, X, H1,H2,[Ger|All]):-
     sint_agg(Ger,F2,F3),
     Ger\=[],
     try_all(Time,N,Clitics, ScIn, PredV, CatGr, F3, X, H1,H2,All),!.

try_all(Time,N,[CliticoAcc,CliticoDat], ScIn, PredV, CatGr, F3, X, H1,H2,[PLista|All]):-
     choose_predv(ScIn, PredV, CatGr, CatV),
     PredV=pred_v(Verbo,CatGr,CatV,[PrimoArg|LastArg]),
     (
      CliticoDat=[],CliticoAcc\=[],
      CliticoAcc=sn(indice(_), cat(_), cl(rifl_corto, _, _, _, _, _, _),S),  
      CliticAcc = CliticoAcc,
      on(TOgg, [riflessivo]),
      sint_prepos(CliticAcc, ListaSP3)
     ;
      CliticoDat=[],CliticoAcc\=[],
      on(TOgg, [clitico])
       ),
     sint_ogg_xcomp(LastArg,CliticoAcc, SN2, TOgg, Xcomp, TXcomp, PredV, F3, F4, H1, nil),
     SN2\=[], Xcomp\=[],
     append(ListaSP3, [Xcomp/TXcomp], PrimaLista),
     append(PrimaLista, [SN2/TOgg], PLista),
     try_all(Time,N,[[],[]], ScIn, PredV, CatGr, F4, X, nil,H2,All),!.

try_all(Time,N,Clitics, ScIn, PredV, CatGr, F1, X, H1,H2,[SubordCp]):-
     F1=[Co|F2],
     conjunction(Co,Conj),
     verbo1(F2,R,PersSn,
      Verbo, Pro1, Pro2, finito, CatGr, Supporto, 
      CatV, PredVs, GenSn, NumSn, PersSn, Neg, Avv),
     SN = sn(indice(Indsn),cat(Cat),
           pr(pro_picc,pro,_,PersSn,GenSn,NumSn,Ca),
           spec(def('+')),controllore(SNContrx)),
     gen_sym(sn,Indsn),
     (Pro1=[], Clit1=[]; Pro1\=[], Clit1=[Pro1]),
     (Pro2=[], Clit2=[]; Pro2\=[], Clit2=[Pro2]),
     verbal_phrases([sn(SN, Gen, Num, Pers),[],[],[],[],[],[],
       [],parent([]),[]],[Clit1,Clit2],Verbo,CatGr,
       PredVs, NPredV, Supporto, cat(CatV), Args1, Adjs1, R,X,H), 
     gen_sym(f,Ind),
     Verbo=v(Verb, Modo, Tempo, Pers, Num, Gen),
     VerboOut=  v(
        Verb, NPredV, Modo, Tempo, Pers, 
        Num, Gen), 
     Fra = ip(indice(Ind),VerboOut,Supporto,
           cat(CatV),Args1,Adjs1),
     (Conj = conj([and]), Subordina=coordina, Fra1=..[Subordina,Fra]; 
      Conj = conj([but]), Subordina=subordina, Fra1=..[Subordina,cp(sub(but), rel(advers),Fra)]),
      SubordCp=..[Subordina,Fra],!.

try_all(Time,N,Clitics, ScIn, PredV, CatGr, F1, X, H1,H2,[LSP|All]):-
     sp(PredV,LSP,F1,F2),
     LSP\=[],
     try_all(Time,N,Clitics, ScIn, PredV, CatGr, F2, X, H1,H2,All),!.

try_all(Time,N,Clitics, ScIn, PredV, CatGr, F, F, H1,H2,[]):-!.

restrict_predication(F):-
     F=[Deit,N|_],
     (Deit=questo;Deit=questi;Deit=queste;Deit=questa
     ;Deit=quello;Deit=quella;Deit=quelli;Deit=quelle),
     findall_poss(Si),
     on(X-[Cat-Deit|_],Si),
     Y is X+1,
     on(Y-Cats,Si),
     (
      on(n-Noun,Cats);
      on(a-Noun,Cats)),
     !.
restrict_predication(F):-
     F=[Deit,N|_],
     Deit\=questo,Deit\=questi,Deit\=queste,Deit\=questa,
     Deit\=quello,Deit\=quella,Deit\=quelli,Deit\=quelle,
     !.
