:- style_check(-singleton). 

lemmacall(Input,Logs):-
   mcon(Input,'_tokens',Out1),
   tell(Out1),
   newtaggger(Input,_),
   told,
   findall(W-C, (idx(N, W, T, C, P), P\=44,P\=5,W\='"',P\=6,P\=8),
           Inds),
   lemmatizeall(Inds,Logs),
   mcon(Input,'_out',Text),
   getbfilename(Text,Out),
   tell(Out),
   writeoutlemm(Logs),
   nl,nl,
   computetextstats(Inds,Logs),
   told,
   !.

counttoccall(Input,Logs):-
   consult(Input),
%   findall(A-P,(tks(A,P,C);tks(A-_,P,C)),Inds),
%   findall(A-P,tk(A,P),Inds),
%   findall(A-P,(tkk(A,1),\+ tk(A,P)),Inds),
%   findall(A-P/B,eag(A,B,P),Inds),
   findall(A-P/B-F,(fi(A,B,P-F);
                    fi(A,B,A),P=A,F=B),Inds),
   recountalltsall(Inds,Logs),
%   countalltsall(Inds,Logs),
%   counttsall(Inds,Logs),
%   counttsallhap(Inds,Logs),
   mcon(Input,'_out',Out),
   tell(Out),
   writtoks(Logs),
   told,
   !.

writtoks([]):-!.
writtoks([T-P-B-F-L|Logs]):-
   writeq(tk(T,B,P,F,L)),nl,
   writtoks(Logs),
   !.

counttsallhap([],[]):-!.
counttsallhap([T-L|Inds],[T-L|Logs]):-
   tkk(T,L),
   counttsallhap(Inds,Logs),
   !.
counttsallhap([T-L|Inds],[T-L|Logs]):-
   counttsallhap(Inds,Logs),
   !.

counttsall([],[]):-!.
counttsall([T-P|Inds],[T-L|Logs]):-
   countnt(T,Inds,Outs,Rest),
   sommatoria(Outs,L1),
   (is_list(L1),L1=[N]
   ; 
   atomic(L1),N=L1),
   integer(N),
   L is P + N,
   counttsall(Rest,Logs),
   !.
countnt(T,[],[],[]):-!.
countnt(T,[T-P|Inds],[P|Outs],Rest):-
   countnt(T,Inds,Outs,Rest),
   !.
countnt(T,[T1-P|Inds],[P],[T1-P|Inds]):-
   !.
   
   
recountalltsall([],[]):-!.
recountalltsall([T-P/B-F|Inds],[T-P1-B-F1-L|Logs]):-
   recountident(T-P/B-F,Inds,Outs,Rest),
   (i(T,B,P-F),P1=P,F1=F;i(T,B,P1-F1);P1=P,F1=F),
   length(Outs,L),
   recountalltsall(Rest,Logs),
   !.
recountident(T-P/B-F,[],[T-P/B-F],[]):-!.
recountident(T-P/B-F,[T-P/B-F|Inds],[T-P/B-F|Outs],Rest):-
   recountident(T-P/B-F,Inds,Outs,Rest),
   !.
recountident(T-P/B-F,[T1-P1/B1-F1|Inds],[T-P/B-F],[T1-P1/B1-F1|Inds]):-
   !.

countalltsall([],[]):-!.
countalltsall([T-P|Inds],[T-P-L|Logs]):-
   countident(T,Inds,Outs,Rest),
   length(Outs,L),
   countalltsall(Rest,Logs),
   !.

countident(T,[],[T],[]):-!.
countident(T,[T-P|Inds],[T|Outs],Rest):-
   countident(T,Inds,Outs,Rest),
   !.
countident(T,[T1-P|Inds],[T],[T1-P|Inds]):-
   !.

evallemmacall(Input,Logs):-
   consult(Input),
   findall(A-B,ds(A,B),Inds),
   evlemmatizeall(Inds,Logs),
   mcon(Input,'_out',Out),
   tell(Out),
   writlemm(Logs),
   told,
   !.

myevallemmacall(Input,Logs):-
   consult(Input),
   findall(A-B,ds(A,B),Inds),
   myevlemmatizeall(Inds,Logs),
   mcon(Input,'_out',Out),
   tell(Out),
   writlemm(Logs),
   told,
   !.

getsgml(0,é,'&eacute;').
getsgml(0,ì,'&igrave;').
getsgml(0,è,'&egrave;').
getsgml(1,'È','&Egrave;').
getsgml(0,ò,'&ograve;').
getsgml(0,à,'&agrave;').
getsgml(0,ù,'&ugrave;').

getsgml(1,é,'&Eacute;').
getsgml(1,ì,'&Igrave;').
getsgml(1,è,'&Egrave;').
getsgml(1,ò,'&Ograve;').
getsgml(1,à,'&Agrave;').
getsgml(1,ù,'&Ugrave;').

writlemm([]):-!.
writlemm([Log|Logs]):-
   Log=W-Cat-L-Lem,
   stringof(List,W),
   reverse(List,Revs),
  (
   Cat='P_APO',
   write(''''),writef('\t',[]), % tab(5),
   write(Cat),writef('\t',[]), % tab(5),
   write('''')
   ;
   Cat='P_OTH',
   write(W),writef('\t',[]), % tab(5),
   write(Cat),writef('\t',[]), % tab(5),
   write(Lem)
   ;
   mapmws(W,Sgml),
   name(Wwl,Sgml),
   List=[First|_],
   spy_lower(First,Lo,Pol),
   (Pol=1,
    toupper(Wwl,Ww); Pol=0,Ww=Wwl),
   write(Ww),writef('\t',[]), % tab(5),
   write(Cat),writef('\t',[]), % tab(5),
   tolower(Lem,Low),
   checkwrite(Cat,Low)
   ;
   List=['-'|Rest],
   reverse(Rest,Rev),
   Rev=['_'|Res],
   reverse(Res,Re),
   stringof(Re,Ww),
   write(''''),write(Ww),writef('\t',[]), % tab(5),
   write(Cat),writef('\t',[]), % tab(5),
   tolower(Lem,Low),
   checkwrite(Cat,Low)
   ;
   Revs=['_'|Rest],
   reverse(Rest,Res),
   stringof(Res,Ww),
   write(Ww),write(''''),writef('\t',[]), % tab(5),
   write(Cat),writef('\t',[]), % tab(5),
   tolower(Lem,Low),
   checkwrite(Cat,Low)
   ;
   List=['_'|Rest],
   stringof(Rest,Ww),
   write(''''),write(Ww),writef('\t',[]), % tab(5),
   write(Cat),writef('\t',[]), % tab(5),
   tolower(Lem,Low),
   checkwrite(Cat,Low)
   ;
   Revs=[Char],
   (Char=è;Char='È'),
   getsgml(Pol,Char,Sgml),
   write(Sgml),writef('\t',[]), % tab(5),
   write(Cat),writef('\t',[]), % tab(5),
   tolower(Lem,Low),
   checkwrite(Cat,Low)
   ;
   Revs=[Char|Rest],
   (Char=é;Char=ì;Char=è;Char=ò;Char=à;Char=ù),
   length(Rest,Le),
   (1<Le,
    stringof(Rest,Wwh),
    spy_lower(Wwh,Ll,Pol)
    ;
    Le=1,Pol=0),
   getsgml(Pol,Char,Sgml),
   reverse(Rest,Res),
   stringof(Res,Ww),
   concat(Ww,Sgml,Wws),
   write(Wws),writef('\t',[]), % tab(5),
   write(Cat),writef('\t',[]), % tab(5),
   tolower(Lem,Low),
   checkwrite(Cat,Low)
   ;
   stringof(Lcat,Cat),
   Lcat=['V'|_],
   stringof(MList,Lem),
   reverse(MList,MLis),
   (MLis=[i,s,r,o|Roo],
    List1=[e,r,r,o|Roo]
    ;
    MLis=[i,s,r|Roo],
    List1=[e,r|Roo]),
   reverse(List1,Rev),
   write(W),writef('\t',[]), % tab(5),
   write(Cat),writef('\t',[]), % tab(5),
   stringof(Rev,Revv),
   tolower(Revv,Low),
   write(Low)
   ;
   write(W),writef('\t',[]), % tab(5),
   write(Cat),writef('\t',[]), % tab(5),
   tolower(Lem,Low),
   write(Low)),
   nl,
   writlemm(Logs),
   !.

checkwrite(Cat,Lem):-
   stringof(List,Lem),
   reverse(List,Revs),
  (   
   mapmws(Lem,Sgml),
   name(Ww,Sgml),
   write(Ww)
   ;
   List=['-'|Rest],
   reverse(Rest,Rev),
   Rev=['_'|Res],
   reverse(Res,Re),
   stringof(Re,Ww),
   write(''''),write(Ww)
   ;
   Revs=['_'|Rest],
   reverse(Rest,Res),
   stringof(Res,Ww),
   write(Ww),write('''')
   ;
   List=['_'|Rest],
   stringof(Rest,Ww),
   write(''''),write(Ww)
   ;
   Revs=[Char],
   (Char=è;Char='È'),
   getsgml(Pol,Char,Sgml),
   write(Sgml)
   ;
   Revs=[Char|Rest],
   (Char=é;Char=ì;Char=è;Char=ò;Char=à;Char=ù),
   length(Rest,L),
   (1<L,
    stringof(Rest,Wwh),
    spy_lower(Wwh,Ll,Pol)
    ;
    L=1,Pol=0),
   getsgml(Pol,Char,Sgml),
   reverse(Rest,Res),
   stringof(Res,Ww),
   concat(Ww,Sgml,Wws),
   write(Wws)
   ;
   stringof(Lcat,Cat),
   Lcat=['V'|_],
   (Revs=[i,s,r,o|Roo],
    List1=[e,r,r,o|Roo]
    ;
    Revs=[i,s,r|Roo],
    List1=[e,r|Roo]),
   reverse(List1,Rev),
   stringof(Rev,Revv),
   tolower(Revv,Low),
   write(Low)
   ;
   write(Lem)),
   !.


computetextstats(Logs,Lems):-
   counttokensall(Inds,L,L1),
   length(Logs,L2),
   writetots(L,L1,L2),nl,
   writestats(L,L1,L2,Stat),nl,
   ambiguitylemms(Lems,L,L2),
   !.

ambiguitylemms(Lems,L,L2):-
   findall(Num, member(W-Lem-Num,Lems),Nums),
   sommatoria(Nums,L3,K),
   write('Total Number of Lemmas  '),
   write(L3),nl,
   Amb is L2 / L3,
   write('Ratio of Lemma/Word Ambiguity  '),
   write(Amb),nl,
   Amb1 is L / L3,
   write('Ratio of Lemma/Token Ambiguity  '),
   write(Amb1),nl,
   !.
   
writetots(L,L1,L2):-
   write('Total Number of Tokens  '),
   write(L),nl,
   write('Total Number of Punctuations  '),
   write(L1),nl,
   write('Total Number of Word Forms  '),
   write(L2),nl,
   !.

writestats(L,L1,L2,Stat):-
   L3 is L1 / L,
   write('Ratio of Punctuation vs Tokens  '),
   write(L3),nl,
   L4 is L2 / L,
   write('Ratio of Wordforms vs Tokens  '),
   write(L4),nl,
   !.
   
counttokensall(Inds,L,L1):-
   findall(W-P, idx(N, W, T, C, P),
           Inds),
   length(Inds,L),
   findall(Punc, member(Punc-5,Inds), Puncs),
   length(Puncs,L1),
   !.

get_time(X) :- statistics(walltime, [Start,_]), X is Start/1000.

newonlytoken(Tokens,Output):-
   init,
    tokenizer(Tokens,Output),
    recovertokens(Outs),
   makesent(Outs, Tokens,  Parse),
   !.

makesent(NFile, InFile,  Parse):-
   readfr(NFile, InFile),
   !.

readfr([], OutFile):-!.
readfr(File, OutFile):-
   read_nfr(File, Frase, Fra, Rest),
   (Frase\=[],
    (Frase\=[A];Frase=[A], A\=_-_-5),
     newreorgs(Frase, NFrase),
     assertsents(OutFile,NFrase),
     (Rest=[end_of_file],!
     ;
     readfr(Rest, OutFile)
    )
    ;
    Frase=[],Rest=[]
    ;
    Rest=[],Frase=[A]
    ;
    Rest\=[],
    readfr(Rest, OutFile)
    ),
   !.

ntfrase([], []):-!.
ntfrase([W-P-C,W-P-C|Frase], [W|OutF]):-
   (P=par;P=punt;P=parag;P=dirs),
   ntfrase(Frase, OutF),
   !.
ntfrase([Up-Low-1-C|Frase], [Up|OutF]):-
   ntfrase(Frase, OutF),
   !.
ntfrase([W-P-C|Frase], [W|OutF]):-
   ntfrase(Frase, OutF),
   !.

newreorgs(Frase, NFrase):-
   ntfrase(Frase, NFrase),
   !.

nonlytagging([],[],File,[]):-!.
nonlytagging([Ind|Inds],[Outs|Outalls],File, [Ind-Outs|Logs]):-
   initchunks,
   fp(Ind,Frase),
   Frase=[W|_],
   assert(firstword(W)),
   ttagtext(1,Frase,Outs),
   ndisambs(Outs,Fras),
%   statsall(Outs,Fras),
%   disambs(Outs,Frase1),
%   cleantags1(Outs,Frase1,Fras),
   write(Fras),
   nl,
    abolish(firstword/1),
   nonlytagging(Inds,Outalls,File,Logs),
   !.
nonlytagging([Ind|Inds],[Outs|Outalls],File, Logs):-
   nonlytagging(Inds,Outalls,File,Logs),
   !.

taggingcall(Input,Logs):-
   get_time(T1),
   write(' Start time: '), writeq(T1), nl,
   newonlytoken(Input,_),
   findall(N, fp(N,_), Inds),
   mcon(Input,'_out',Text),
   getbfilename(Text,Out),
   tell(Out),
   nonlytagging(Inds,Outs,File,Logs),
   told,
   get_time(T2), T is T2 - T1,
   nl, write(' Elapsed time: '), writeq(T), nl,
   !.

computeandcount(Input,NoFrs,LenToks,Files,RefList,Data,NVerbs,NewDats):-
   sommatoria(NVerbs,Nvs),
   sort(RefList,RefList1),
   appiattisci(RefList1,RefList2),
   countcontentwords(Input,RefList1,Files,RefLists),
   write('</semantic_propositional>'),nl,nl,
   write('<text_statistics>'),nl,
   write('<opinion_sentiment_indicators>'),nl,
   newcountfeatssems(Input,RefLists,Feats),
   write('</opinion_sentiment_indicators>'),nl,nl,
   getmostfrequent(RefLists,RevsAll,Plus,Len),
%   RevsAll=[A,B,C,D,E,F,G,H,I,L,M|RevS],
   writemostfrequentsbann(Input,RevsAll),
   write('</text_statistics>'),nl,
   write('</text_semantics>'),
   nl,nl,
   told,
%   Best=[A,B,C,D,E,F,G,H,I,L,M],
   getbestfreq(RevsAll,Best),
   append(Best,Plus,Bests),
   append([sempros(Data)],[refsall(RefLists)],Data1),
   append(Data1,Feats,AllDat),
   append(AllDat,[bests(Bests)],AllData),
   getreffilename(Input,Reffile),
   mcon(Reffile,'1',Fil),
   tell(Fil),
   writeallrefs(RefList2),nl,
   told,
   countsemsprags(AllData,Counts),
   extractentities(Bests,Ent1,Ent2),
   append([counts(Counts)],[bests(Bests),entity1(Ent1),entity2(Ent2)],AllDat1),
   append(AllDat1,Feats,AllDatas),
   tell(Reffile),
   writeallrefs(AllDatas),nl,
   told,
   Freqs=..[freqs,NoFrs,Nvs,Len,LenToks],
   NewDats=[Freqs|AllDatas],
   !.

writetelllogs(Input,Logs,File,Files):-
   told,
   mcon(Input,'_',Ou),
   mcon(Ou,out,Out),
   tell(Out),
   writeouttagged(Logs),
   told,
   getffilename(Input,Sent),
   tell(Sent),
   appiattisci(File,Files),
   write_banneropxml,nl,
   !.

inittagnew:-
   retractall(current_num(_,_)),
   abolish(mmsem/3),
   dynamic(mmsem/3),
   !.
   
opinioncall(Input,NewDats,Pass):-
   inittagnew,
   abolish(speaker/2),
   asserta(speaker(nil,nil)),
   newtager(Input,_),
   findall(N, fp(N,_), Inds),
   length(Inds,NoFrs),
   lengthtexttoks(LenToks),
   opintaggingall(Inds,Outs,File,Logs,Funcs),
   writetelllogs(Input,Logs,File,Files),
   createrefexss(Outs,Logs,Files,Funcs,RefList,Data,NVerbs,EntsPass),
   computeandcount(Input,NoFrs,LenToks,Files,RefList,Data,NVerbs,NewDats),
   elaboratentspass(EntsPass,Pass),
   mcon(Input,'_',Ou),
   mcon(Ou,pasentscors,Out),
   tell(Out),
   writeallcorerefs(Pass),nl,
   told,
   !.

dialogcall(Input,NewDats,Pass):-
   inittagnew,
   abolish(speaker/2),
   asserta(speaker(nil,nil)),
   abolish(genre/1),
   assert(genre(dialogue)),
   newtager(Input,_),
   findall(N, fp(N,_), Inds),
   length(Inds,NoFrs),
   lengthtexttoks(LenToks),
   dialtaggingall(Inds,Outs,File,Logs,Funcs),
   writetelllogs(Input,Logs,File,Files),
   diacreaterefexss(Outs,Logs,Files,Funcs,RefList,Data,NVerbs,EntsPass,Deps),
   computeandcount(Input,NoFrs,LenToks,Files,RefList,Data,NVerbs,NewDats),
   tell(ellipsed),
   diaelaboratentspass(Data,EntsPass,Pass,NewPass,EllipsOuts),
   told,
   mcon(Input,'_',Ou),
   mcon(Ou,pasentscors,Out),
   tell(Out),
   writeallfs(NewPass),nl,
%   writeallcorerefs(Pass),nl,
   told,
   diarteitalian(RefList,NewPass,Data,Files,OutTrue),
   !.

dialtaggingall([],[],[],[],[]):-!.
dialtaggingall([Ind|Inds],[Ind-ToLog|Outalls],[Ind-Tagged|File],[Ind-Fras|Logs],[Ind-Funcs|Funs]):-
   initchunks,
   fp(Ind,Frase),
   dialttagtext(Ind,1,Frase,Outs),
   newdisambs(Outs,Fras),
%   statsall(Outs,Fras),
%   disambs(Outs,Frase1),
%   cleantags1(Outs,Frase1,Fras),
   write(Ind),nl,
   convlemm1(1,Fras,Tagged),
   assertfrasecorr2(Frase,Ind),
   shallowparsing(Fras,Out,ToLog),
   collectfuncsems(Funcs),
   dialtaggingall(Inds,Outalls,File,Logs,Funs),
   !.
dialtaggingall([Ind|Inds],Outalls,File, Logs,Funs):-
   dialtaggingall(Inds,Outalls,File,Logs,Funs),
   !.


/* NewDats contiene la classificazione in positives/negatives, frequency e bests,
poi il termine COUNTS contiene il numero di nonfactives, negations, subjectivity, diathesis e point_of_view
Pass = tutte le strutture predicato argomentali sulla base delle dipendenze trovate
RefList = la lista delle espressioni referenziali con l'indice di dipendenza
Data = contiene le strutture verbali
Files = contiene le parole delle frasi taggate, lemmatizzate e classificate
Outss=[Povs,DataPass,SortEnts,OutCors],
*/
questionanswer(Input,[NewDats,Pass,RefList,Data,Files]):-
   inittagnew,
   dynamic(speaker/2),
   newtager(Input,_),
   findall(N, fp(N,_), Inds),
   length(Inds,NoFrs),
   lengthtexttoks(LenToks),
   opintaggingall(Inds,Outs,File,Logs,Funcs),
   writetelllogs(Input,Logs,File,Files),
   createrefexss(Outs,Logs,Files,Funcs,RefList,Data,NVerbs,EntsPass),
   computeandcount(Input,NoFrs,LenToks,Files,RefList,Data,NVerbs,NewDats),
   elaboratentspass(EntsPass,Pass),
   rteitalian(RefList,Pass,Data,Files,OutTrue),
   !.

writeallcorerefs([]):-!.
writeallcorerefs([Ents|Pass]):-
   writeallfs(Ents),nl,nl,
   writeallcorerefs(Pass),
   !.
writeallfs([]):-!.
writeallfs([E|Ents]):-
   write(E),nl,
   writeallfs(Ents),
   !.   
elaboratentspass(EntsPass,Outss):-
   separateentpas(EntsPass,Entss,Pass),
   appiattisci(Entss,Ents),
   appiattisci(Pass,Pas),
   connectpasrefs(Ents,Pas,Outs),
   sort(Outs,SortOut),
   selectentitiesinds(Ents,IndEnts),
   sort(IndEnts,SortEnts),
   recoverheadsrefs(SortEnts,EntsHeads),
   cercacoreferentis(EntsHeads,Corefs),
   buildcoreferents(SortEnts,Corefs,OutCors),
   listingpovs(Povs),
   Outss=[Povs,SortOut,SortEnts,OutCors],
   !.


diaelaboratentspass(Data,EntsPass,Outss,NewPas,EllipsOuts):-
   separateentpas(EntsPass,Entss,Pass),
   appiattisci(Entss,Ents),
   appiattisci(Pass,Pas),
   assemblenewpas(1,Data,Pas,NewPs),
   computellipsis(NewPs,EllipsOuts,NewPas),
   printelipsed(EllipsOuts),
   connectpasrefs(Ents,Pas,Outs),
   sort(Outs,SortOut),
   selectentitiesinds(Ents,IndEnts),
   sort(IndEnts,SortEnts),
   recoverheadsrefs(SortEnts,EntsHeads),
   cercacoreferentis(EntsHeads,Corefs),
   buildcoreferents(SortEnts,Corefs,OutCors),
   listingpovs(Povs),
   Outss=[Povs,SortOut,SortEnts,OutCors],
   !.

printelipsed([]):-!.
printelipsed([A-B|EllipsOuts]):-
   nl,nl,write('Elliptical Trigger'),write('   '),write(A),
   nl,nl,write('Semantic Substitution'),write('   '),write(B),
   printelipsed(EllipsOuts),
   !.

assemblenewpas(N,[],Pass,[]):-!.
assemblenewpas(N,[Pov1|Data],[Pas1|Pass],[NewP|NewPs]):-
   Pov1=..[sempro,Pol,POV,DA,Diat,Preds,Sems],
   Pas1=..[pas,Ind1,Pred1-Args1,S-Sems1],
   NewP=..[pas,Ind1,Pol,POV,DA,Diat,Pred1-[PredProps1,Args1],S-Sems1],
   once(remove(_-Sem,Sems,Rest)),
   nogen_member(lemma=Lem,Sem), Lem=Pred1,
   Args1=[PredProps1|RestArg],
   (nogen_member(parola=W,Sem),
    nogen_member(parola=W,Sems1)
    ;
    (is_list(PredProps1),PredProps1=[First|_];\+is_list(PredProps1),First=PredProps1),
   (First=..[refex,Ind1-Id,Cat,W-Lem|_],
    nogen_member(parola=W,Sem)
    ;
    First=..[refex,Ind1-Id,Cat,Lem|_])
    ;
    is_list(PredProps1),PredProps1=[],
    nogen_member(parola=W,Sem),
    nogen_member(parola=W,Sems1)
    ),
   (Rest=[],Datas=Data
     ;
     Rest\=[],
     Pov2=..[sempro,Pol,POV,DA,Diat,Preds,Rest],
     append([Pov2],Data,Datas)
     ),
   N1 is N + 1,
   assemblenewpas(N1,Datas,Pass,NewPs),
   !.
assemblenewpas(N,[Pov1|Data],[Pas1|Pass],[NewP|NewPs]):-
   Pov1=..[sempro,Pol,POV,DA,Diat,Preds,Sems],
   Pas1=..[pas,Ind1,Pred1-Args1,Sems1],
   Args1=[PredProps1|RestArg],
   NewP=..[pas,Ind1,Pol,POV,DA,Diat,Pred1-[PredProps1,RestArg],Sems1],
   once(remove(_-Sem,Sems,Rest)),
   nogen_member(lemma=W,Sem), W=Pred1,
   (Rest=[],Datas=Data
     ;
     Rest\=[],
     Pov2=..[sempro,Pol,POV,DA,Diat,Preds,Rest],
     append([Pov2],Data,Datas)
     ),
   N1 is N + 1,
   assemblenewpas(N1,Datas,Pass,NewPs),
   !.
assemblenewpas(N,[Pov1|Data],Pass,[NewP|NewPs]):-
   Pov1=..[sempro,Pol,POV,DA,Diat,Preds,Sems],
   once(remove(_-Sem,Sems,Rest)),
   nogen_member(lemma=Lem,Sem), 
   Pas1=..[pas,Ind1,Pred1-Args1,S-Sems1],
   remove(Pas1,Pass,RestPass),
   Lem=Pred1,
   Args1=[PredProps1|RestArg],
   (nogen_member(parola=W,Sem),
    nogen_member(parola=W,Sems1)
    ;
   (is_list(PredProps1),PredProps1=[First|_];
    \+is_list(PredProps1),First=PredProps1),
   (First=..[refex,Ind1-Id,Cat,W-Lem|_],
    nogen_member(parola=W,Sem)
    ;
    First=..[refex,Ind1-Id,Cat,Lem|_])
    ;
    is_list(PredProps1),PredProps1=[],
    nogen_member(parola=W,Sem),
    nogen_member(parola=W,Sems1)
    ),
   NewP=..[pas,Ind1,Pol,POV,DA,Diat,Pred1-Args1,S-Sems1],
   (Rest=[],Datas=Data
     ;
     Rest\=[],
     Pov2=..[sempro,Pol,POV,DA,Diat,Preds,Rest],
     append([Pov2],Data,Datas)
     ),
   N1 is N + 1,
   assemblenewpas(N1,Datas,RestPass,NewPs),
   !.
assemblenewpas(N,[Pov1|Data],Pass,NewPs):-
   Pov1=..[sempro,Pol,POV,DA,Diat,Preds,Sems],
   (remove(_-[],Sems,Rest);remove(_-List,Sems,Rest),List=[A]),
   Pov2=..[sempro,Pol,POV,DA,Diat,Preds,Rest],
   assemblenewpas(N,[Pov2|Data],Pass,NewPs),
   !.
assemblenewpas(N,[Pov1|Data],Pass,NewPs):-
   assemblenewpas(N,Data,Pass,NewPs),
   !.

computellipsis([],[],[]):-!.
computellipsis([Pas1,Pas0|Pass],[Ellip-Pas|Outs],[Pas1,Pas|Rest]):-
   Pas1=..[pas,Ind1,Pol1,POV1,DA1,Diat1,Pred1-Args1,Sems1],
   Args1=[PredProps1|RestArg1],
   Pas0=..[pas,Ind,Pol,POV,DA,Diat,Pred-Args,Sems],
   Args=[PredProps|RestArg],
   searchellips([Pas1,Pas0],RestArg1,RestArg,Ellip),
   substitutellip(Pas1,Pas0,Pas),
   computellipsis(Pass,Outs,Rest),
   !.
computellipsis([Pas1|Pass],Outs,[Pas1|Rest]):-
   computellipsis(Pass,Outs,Rest),
   !.

/* substitution is done by copying the semantics of the verbal complex belonging to
the ellipsed utterance, and adding the predicate argument structure of the antecedent
utterance 
subject substitution: this should be checked, because the substituend could be talking about
any subject and obviously it should be maintained in the case in which it is different from
the local subject*/
substitutellip(Pas1,Pas0,Pas):-
   Pas1=..[pas,Ind1,Pol1,POV1,DA1,Diat1,Pred1-[PredProps1|Args1],Sems1],
   Pas0=..[pas,Ind,Pol,POV,DA,Diat,Pred-[PredProps|Args0],Sems0],
   Pas=..[pas,Ind,Pol,POV,DA,Diat,Pred1-[PredProps1,Args],Sems1],
   Ref1=..[refex,I1-Id1,C1,W1Le1,Feat1,SemFe1,Dep1,subj/Role1],
   appiattisci(Args1,Args11),
   remove(Ref1,Args11,Arg),
   Ref=..[refex,I-Id,C,WLe,Feat,SemFe,Dep,subj/Role],
   appiattisci(Args0,Args2),
   remove(Ref,Args2,Argg),
   append([Ref],Args11,Args),
   !.
   
searchellips([Pov1,Pov0],Args1,Args,Args):-
   checkquestionanswer(Pov1,Pov0),
   Args\=[],
   appiattisci(Args,Argss),
   member(Ref,Argss),
   Ref=..[refex,I-Id,C,W-Le|_],
   (Le=sì;Le=no;Le=certo),
   !.
checkquestionanswer(Pov1,Pov0):-
   Pov1=..[pas,Ind,Pol,POV,DA|_],
   Pov0=..[pas,Ind1,Pol1,POV1,DA1|_],
   POV\=POV1,
   DA=question, DA1=statement,
   !.
checkquestionanswer(Pov1,Pov0):-
   Pov1=..[pas,Ind,Pol,POV,DA,Diat|Args],
   Args=[Pred1-PredProps1|_],
   Pov0=..[pas,Ind1,Pol1,POV1,DA1,Diat1|Args1],
   Args1=[Pred-PredProps|_],
   Pred1\=Pred,
   checkrispondere(Pred),
   POV=POV1,
   !.

checkrispondere(Pred):-
   rispostaposneg(List),
   member(Pred,List),
   !.
   
rispostaposneg([rispondere,replicare,ribattere,dire,sboccare,reagire,controbattere,rimbeccare,opporsi,opporre,ribellarsi,difendersi,rintuzzare,ammettere,confessare,dichiarare,esclamare,esprimere,pronunciare,reciatre,riferire,rivelare,spiegare,smentire,differenziarsi]).

listingpovs(Povs):-
   findall(I-Lem-Preds,(
               mmsem(I,[_,W-Lem,Spact,_],Preds),
               \+fct(W),W\=little_pro),Pres
                       ),
   listpvs(Pres,Povs),
   !.
listpvs(Pres,Povs):-
      findall(pov-I-Lem-Pre,(member(I-Lem-Preds,Pres),
                   member(Pred,Preds),is_list(Pred),
                   member(lemma=Pre,Pred)),Povs
                       ),
   !.

cercacoreferentis(EntsHeads,Corefs):-
   findall(Coref,cercacoreferenti(EntsHeads,Coref),AllCorefs),
   appiattisci(AllCorefs,Corefss),
   sort(Corefss,Corefs),
   !.


buildcoreferents(SortEnts,[],[]):-!.
buildcoreferents(SortEnts,[Head-Cores|Corefs],[Head-Outs|Cors]):-
   buildcorefers(SortEnts,Head-Cores,Outs),Cores\=[],
   buildcoreferents(SortEnts,Corefs,Cors),
   !.
buildcoreferents(SortEnts,[Head-Cores|Corefs],Cors):-
   buildcoreferents(SortEnts,Corefs,Cors),
   !.


buildcorefers(SortEnts,Head-[],[]):-!.
buildcorefers(SortEnts,Head-Corefs,Outs):-
   Ref=..[Head,Sind,Se],
   remove(Ref,SortEnts,RestEnts),
   buildcornts(RestEnts,Ref-Corefs,Outs),
   !.   
buildcorefers(SortEnts,Head-Corefs,Outs):-
   remove(Ent,Corefs,RestCor),
   Ref=..[Ent,Sind,Se],
   remove(Ref,SortEnts,RestEnts),
   buildcornts(SortEnts,Ref-Corefs,Outs),
   !.   
buildcorefers(SortEnts,Head-Corefs,[]):-
   !. 
  
  
buildcornts(SortEnts,Head-[],[]):-!.
buildcornts(SortEnts,Ref1-Corefs,[coref-Sind1-Sind|OutCors]):-
   remove(Ent,Corefs,RestCor),
   Ref=..[Ent,Sind,Se],
   remove(Ref,SortEnts,RestEnt),
   Ref1=..[Head,Sind1,Se1],
   buildcornts(RestEnt,Ref1-RestCor,OutCors),
   !.   
buildcornts(SortEnts,Ref1-Corefs,[coref-Sind1-Sind|OutCors]):-
   Ref1=..[Head,Sind1,Se1],
   recover_descs(Head,List),is_list(List),
   reverse(List,[Surname|RevList]),
   (is_list(Corefs),remove(Surname,Corefs,RestCor);
     atomic(Corefs),Corefs=Surname),
   Ref=..[Ent,Sind,Se],
   remove(Ref,SortEnts,RestEnt),
   buildcornts(RestEnt,Ref1-RestCor,OutCors),
   !.   
buildcornts(SortEnts,Head-Corefs,[]):-
   !.   

   
recoverheadsrefs([],[]):-!.
recoverheadsrefs([Ent|SortEnts],[Lem|EntsHeads]):-
   Ent=..[Lem,Sind,Se],
   recoverheadsrefs(SortEnts,EntsHeads),
   !.
recoverheadsrefs([Ent|SortEnts],EntsHeads):-
   recoverheadsrefs(SortEnts,EntsHeads),
   !.


selectentitiesinds([],[]):-!.
selectentitiesinds([Ref|Ents],[Ent|IndEnts]):-
  (Ref=..[refex,Sent-Ind,Ca,W-Lem,Feat,Sems,Dep,Fun/Rol];
    Ref=..[refex,Sent-Ind,Ca,W-Lem,Feat,Sems,Fun/Rol]),
    nouncats(Ca),
    stringof(List,W),W\=[],
    (member('_',List),Lemm=W,Se=Sems;
      \+integer(Lem),Lem\=[],Lemm=Lem,Se=Sems;
      integer(Lem),term_to_atom(Lem,Lemm),Se=num;
      integer(W),term_to_atom(W,Lemm),Se=num),
   mcon(Sent,'_',S),
   mcon(S,Ind,Sind),
   atomic(Lemm),
   Ent=..[Lemm,Sind,Se],
   selectentitiesinds(Ents,IndEnts),
   !.
selectentitiesinds([Ref|Ents],IndEnts):-
   selectentitiesinds(Ents,IndEnts),
   !.

separateentpas([],[],[]):-!.
separateentpas([[Ents|Pas]|EntsPass],[Ents|Restns],[Pas|Restpas]):-
   separateentpas(EntsPass,Restns,Restpas),
   !.

connectpasrefs(Ents,[],[]):-!.
connectpasrefs(Ents,[pas(Ind,Pred-[PredProps,Args],Sems)|Pas],[Preds|Pass]):-
   connctars(Ents,Args,Log,Rest),
   Preds=..[Ind,Pred,Log,Sems],
   connectpasrefs(Rest,Pas,Pass),
   !.
connectpasrefs(Ents,[pas(Ind,Pred-Args,Sems)|Pas],[Preds|Pass]):-
   connctars(Ents,Args,Log,Rest),
   Preds=..[Ind,Pred,Log,Sems],
   connectpasrefs(Rest,Pas,Pass),
   !.
connectpasrefs(Ents,[pas(Ind,Pred-Args,Sems)|Pas],Pass):-
   connectpasrefs(Rest,Pas,Pass),
   !.

%    logform(Ind,Pred,PredProps,NewArs,Log),

connctars(Ents,[],[],Ents):-!.
connctars(Ents,Ref,Lems,Ents):-
    Ref=..[refex,Sent-Ind,Ca,Pro,Feat,W-Lem,Dep,Fun/Rol],
    Ca\=clit,Ca\=clitac,Ca\=clitdat,
   (\+integer(Lem),Lem\=nil,Lemm=Lem;integer(Lem),term_to_atom(Lem,Lemm);
    Lem=nil,Lemm=arb;Lem\=nil,Lemm=Lem),
   (atomic(Lemm),
    Lems=..[Lemm,Fun/Rol]
    ;
    is_list(Lemm),
    Lems=..[W,Fun/Rol]
    ),
   !.
connctars(Ents,Ref,Lems,Ents):-
    Ref=..[refex,Sent-Ind,Ca,Pro,Feat,Sem,Dep,Fun/Rol],
    (Ca=clit;Ca=clitac;Ca=clitdat),
   nonvar(Pro), Pro\=_-_,
   Lems=..[Pro,Sem,Fun/Rol],
   !.
connctars(Ents,Ref,Lems,Rest):-
   (Ref=..[refex,Sent-Ind,Ca,W-Lem,Feat,Sems,Dep,Fun/Rol],
    stringof(List,W),
    (member('_',List),Lemm=W;
     \+integer(Lem),Lemm=Lem;
      integer(Lem),term_to_atom(Lem,Lemm))
   ;
   Ref=..[refex,Sent-Ind,Ca,W-Lem,Feat,Sems,Fun/Rol],
    stringof(List,W), List\=[],
    (member('_',List),Lemm=W;
     \+integer(Lem),Lemm=Lem;
      integer(Lem),term_to_atom(Lem,Lemm))
    ),
   extractmodalls(Ents,Ind,Mods,Rest),
   nonvar(Lemm),
   createargsmod(Lem,Mods,NewArs),
   Lems=..[Lemm,NewArs,Sems,Fun/Rol],
   !.
connctars(Ents,[Ref|Args],[Lems|NewLems],Rests):-
   (Ref=..[refex,Sent-Ind,Ca,W-Lem,Feat,Sems,Dep,Fun/Rol],
    stringof(List,W), List\=[],
    (member('_',List),Lemm=W;
     \+integer(Lem),Lemm=Lem;
      integer(Lem),term_to_atom(Lem,Lemm))
   ;
   Ref=..[refex,Sent-Ind,Ca,W-Lem,Feat,Sems,Fun/Rol],
    stringof(List,W), List\=[],
    (member('_',List),Lemm=W;
     \+integer(Lem),Lemm=Lem;
      integer(Lem),term_to_atom(Lem,Lemm))
    ),
   extractmodalls(Ents,Ind,Mods,Rest),
%   remove(Ref,Restt,Rest),
   nonvar(Lemm),
   createargsmod(Lem,Mods,NewArs),
   Lems=..[Lemm,NewArs,Sems,Fun/Rol],
   connctars(Rest,Args,NewLems,Rests),
   !.
connctars(Ents,[Ref|Args],[Lems|NewLems],Rests):-
    Ref=..[refex,Sent-Ind,Ca,Pro,Feat,W-Lem,Dep,Fun/Rol],
    Ca\=clit,Ca\=clitac,Ca\=clitdat,
    (\+integer(Lem),Lem\=nil,Lemm=Lem;integer(Lem),term_to_atom(Lem,Lemm);
    Lem=nil,Lemm=arb;Lem\=nil,Lemm=Lem),
    (atomic(Lemm),
     Lems=..[Lemm,Fun/Rol]
     ;
     is_list(Lemm),
     concat_atom(Lemm,'_',Le),
     Lems=..[Le,Fun/Rol]
     ),
   connctars(Ents,Args,NewLems,Rests),
   !.
connctars(Ents,[Ref|Args],[Lems|NewLems],Rests):-
    Ref=..[refex,Sent-Ind,Ca,Pro,Feat,Sem,Dep,Fun/Rol],
    (Ca=clit;Ca=clitac;Ca=clitdat),
   nonvar(Pro), Pro\=_-_,
   Lems=..[Pro,Sem,Fun/Rol],
   connctars(Ents,Args,NewLems,Rests),
   !.
connctars(Ents,[Ref|Args],NewArs,Rest):-
   connctars(Ents,Args,NewArs,Rest),
   !.

createargsmod(Lem,[],[]):-!.
createargsmod(Lem,[Mod|Mods],[attr(Mod)|NewArs]):-
   Mod\=[],\+fct(Mod),Mod\=che-che,\+grw(Mod),
   createargsmod(Lem,Mods,NewArs),
   !.
createargsmod(Lem,[Mod|Mods],NewArs):-
   createargsmod(Lem,Mods,NewArs),
   !.


extractmodalls(Ents,Ind,[Out|Outs],Rests):-
   extractmods(Ents,Ind,Out,Rest),
   extractmodalls(Rest,Ind,Outs,Rests),
   !.
extractmodalls(Ents,Ind,[],Ents):-
   !.

extractmods(Ents,Ind,Lem,Rest):-
   remove(i(Id,W,Ca,Lem,Cos,Fea,Ind1,Se),Ents,Rest),nonvar(Ind1),Ind1=Ind
   ;
   remove(refex(Sent-Id,Ca,Lem,MFea,Sems,Ind1,Fun/Rol),Ents,Rest),nonvar(Ind1),Ind1=Ind,
   !.

countcontentwords(Input,RefList,Files,RefLists):-
   appiattisci(RefList,Refs),
   mcon(Input,'_',Ou),
   mcon(Ou,newtext,Out),
   tell(Out),
   allcountcontwords(1,Files,Refs,RefListss),
   told,
   appiattisci(RefListss,Reflists),
   sort(Reflists,RefLists),
   !.

allcountcontwords(N,[],Refs,[]):-!.
allcountcontwords(N,[FraseNo-Sent|Files],Refs,[RefLists|Refliss]):-
   findall(Agg, (
   			(Agg=..[refex,FraseNo-Ind,Ca,Lem,Tratti,CatSem,Dep,F/R];
   			Agg=..[refex,FraseNo-Ind,Ca,Lem,Tratti,CatSem,F/R];
   			Agg=..[refex,FraseNo-Ind,Ca,Lem,Tratti,CatSem]),
   					member(Agg,Refs)),RefListt),
   sort(RefListt,RefList),
   countcontwords(N,Sent,RefList,RefLists,N2),
   allcountcontwords(N2,Files,Refs,Refliss),
   !.

countcontwords(N,[],[],[],N):-!.
countcontwords(N,[i(Ind,W,Cat,Lem-Feat)|Words],RefListAgg,[Agg1|RefLists],K):-
   (Agg=..[refex,I-Ind,Ca,Lem,Tratti,CatSem,Dep,F/R];
     Agg=..[refex,I-Ind,Ca,W-Lem,Tratti,CatSem,Dep,F/R]),
   remove(Agg,RefListAgg,RefList),
   Agg1=..[refex,N,I-Ind,Ca,Lem,Tratti,CatSem,Dep,F/R],
   N1 is N + 1,
   write(N-Agg1),nl,
   countcontwords(N1,Words,RefList,RefLists,K),
   !.
countcontwords(N,[i(Ind,W,Cat,Lem-Feat)|Words],RefListAgg,[Agg1|RefLists],K):-
   (Agg=..[refex,I-Ind,Ca,Lem,Tratti,CatSem,F/R];
     Agg=..[refex,I-Ind,Ca,W-Lem,Tratti,CatSem,F/R]),
   remove(Agg,RefListAgg,RefList),
   Agg1=..[refex,N,I-Ind,Ca,Lem,Tratti,CatSem,F/R],
   N1 is N + 1,
   write(N-Agg1),nl,
   countcontwords(N1,Words,RefList,RefLists,K),
   !.
countcontwords(N,[i(Ind,W,Cat,Lem-Feat)|Words],RefListAgg,[Agg1|RefLists],K):-
   (Agg=..[refex,I-Ind,Ca,Lem,Tratti,CatSem];
     Agg=..[refex,I-Ind,Ca,W-Lem,Tratti,CatSem]),
   remove(Agg,RefListAgg,RefList),
   Agg1=..[refex,N,I-Ind,Ca,Lem,Tratti,CatSem],
   N1 is N + 1,
   write(N-Agg1),nl,
   countcontwords(N1,Words,RefList,RefLists,K),
   !.
countcontwords(N,[Word|Words],RefList,RefLists,K):-
   N1 is N + 1,
   write(N-Word),nl,
   countcontwords(N1,Words,RefList,RefLists,K),
   !.
countcontwords(N,Words,[Agg|RefList],RefLists,K):-
   countcontwords(N,Words,RefList,RefLists,K),
   !.

writemostfrequentsbann(Input,[N-[A|_],N1-[B|_],N2-[C|_],N3-[D|_],N4-[E|_],N5-[F|_],N6-[G|_],N7-[H|_],N8-[I|_],N9-[L|_],M1-[M|_]|RevS]):-
   sommatoria([N,N1,N2,N3,N4,N5,N6,N7,N8,N9,M1],Count,_),
   write('<most_frequent_words>'),nl,
   writef('\t',[]),write('<best_candidates id="'),write(Input),
   write('" totale="'),write(Count),
   write('" lista="'),write([A-N,B-N1,C-N2,D-N3,E-N4,F-N5,G-N6,H-N7,I-N8,L-N9,M-M1]),
   write('">'),writef('\t',[]),nl,write('</best_candidates>'),nl,
   write('</most_frequent_words>'),nl,
   !.
writemostfrequentsbann(Input,[N-[A|_],N1-[B|_],N2-[C|_],N3-[D|_],N4-[E|_],N5-[F|_],N6-[G|_],N7-[H|_],N8-[I|_],N9-[L|_]|RevS]):-
   sommatoria([N,N1,N2,N3,N4,N5,N6,N7,N8,N9],Count,_),
   write('<most_frequent_words>'),nl,
   writef('\t',[]),write('<best_candidates id="'),write(Input),
   write('" totale="'),write(Count),
   write('" lista="'),write([A-N,B-N1,C-N2,D-N3,E-N4,F-N5,G-N6,H-N7,I-N8,L-N9]),
   write('">'),writef('\t',[]),nl,write('</best_candidates>'),nl,
   write('</most_frequent_words>'),nl,
   !.
writemostfrequentsbann(Input,[N-[A|_],N1-[B|_],N2-[C|_],N3-[D|_],N4-[E|_],N5-[F|_],N6-[G|_],N7-[H|_],N8-[I|_]|RevS]):-
   sommatoria([N,N1,N2,N3,N4,N5,N6,N7,N8],Count,_),
   write('<most_frequent_words>'),nl,
   writef('\t',[]),write('<best_candidates id="'),write(Input),
   write('" totale="'),write(Count),
   write('" lista="'),write([A-N,B-N1,C-N2,D-N3,E-N4,F-N5,G-N6,H-N7,I-N8]),
   write('">'),writef('\t',[]),nl,write('</best_candidates>'),nl,
   write('</most_frequent_words>'),nl,
   !.
writemostfrequentsbann(Input,[N-[A|_],N1-[B|_],N2-[C|_],N3-[D|_],N4-[E|_],N5-[F|_],N6-[G|_],N7-[H|_]|RevS]):-
   sommatoria([N,N1,N2,N3,N4,N5,N6,N7],Count,_),
   write('<most_frequent_words>'),nl,
   writef('\t',[]),write('<best_candidates id="'),write(Input),
   write('" totale="'),write(Count),
   write('" lista="'),write([A-N,B-N1,C-N2,D-N3,E-N4,F-N5,G-N6,H-N7]),
   write('">'),writef('\t',[]),nl,write('</best_candidates>'),nl,
   write('</most_frequent_words>'),nl,
   !.
writemostfrequentsbann(Input,[N-[A|_],N1-[B|_],N2-[C|_],N3-[D|_],N4-[E|_],N5-[F|_],N6-[G|_]|RevS]):-
   sommatoria([N,N1,N2,N3,N4,N5,N6],Count,_),
   write('<most_frequent_words>'),nl,
   writef('\t',[]),write('<best_candidates id="'),write(Input),
   write('" totale="'),write(Count),
   write('" lista="'),write([A-N,B-N1,C-N2,D-N3,E-N4,F-N5,G-N6]),
   write('">'),writef('\t',[]),nl,write('</best_candidates>'),nl,
   write('</most_frequent_words>'),nl,
   !.
writemostfrequentsbann(Input,[N-[A|_],N1-[B|_],N2-[C|_],N3-[D|_],N4-[E|_],N5-[F|_]|RevS]):-
   sommatoria([N,N1,N2,N3,N4,N5],Count,_),
   write('<most_frequent_words>'),nl,
   writef('\t',[]),write('<best_candidates id="'),write(Input),
   write('" totale="'),write(Count),
   write('" lista="'),write([A-N,B-N1,C-N2,D-N3,E-N4,F-N5]),
   write('">'),writef('\t',[]),nl,write('</best_candidates>'),nl,
   write('</most_frequent_words>'),nl,
   !.
writemostfrequentsbann(Input,[N-[A|_],N1-[B|_],N2-[C|_],N3-[D|_],N4-[E|_]|RevS]):-
   sommatoria([N,N1,N2,N3,N4],Count,_),
   write('<most_frequent_words>'),nl,
   writef('\t',[]),write('<best_candidates id="'),write(Input),
   write('" totale="'),write(Count),
   write('" lista="'),write([A-N,B-N1,C-N2,D-N3,E-N4]),
   write('">'),writef('\t',[]),nl,write('</best_candidates>'),nl,
   write('</most_frequent_words>'),nl,
   !.
writemostfrequentsbann(Input,[N-[A|_],N1-[B|_],N2-[C|_],N3-[D|_]|RevS]):-
   sommatoria([N,N1,N2,N3],Count,_),
   write('<most_frequent_words>'),nl,
   writef('\t',[]),write('<best_candidates id="'),write(Input),
   write('" totale="'),write(Count),
   write('" lista="'),write([A-N,B-N1,C-N2,D-N3]),
   write('">'),writef('\t',[]),nl,write('</best_candidates>'),nl,
   write('</most_frequent_words>'),nl,
   !.
writemostfrequentsbann(Input,[N-[A|_],N1-[B|_],N2-[C|_]|RevS]):-
   sommatoria([N,N1,N2],Count,_),
   write('<most_frequent_words>'),nl,
   writef('\t',[]),write('<best_candidates id="'),write(Input),
   write('" totale="'),write(Count),
   write('" lista="'),write([A-N,B-N1,C-N2]),
   write('">'),writef('\t',[]),nl,write('</best_candidates>'),nl,
   write('</most_frequent_words>'),nl,
   !.
writemostfrequentsbann(Input,[N-[A|_],N1-[B|_]|RevS]):-
   sommatoria([N,N1],Count,_),
   write('<most_frequent_words>'),nl,
   writef('\t',[]),write('<best_candidates id="'),write(Input),
   write('" totale="'),write(Count),
   write('" lista="'),write([A-N,B-N1]),
   write('">'),writef('\t',[]),nl,write('</best_candidates>'),nl,
   write('</most_frequent_words>'),nl,
   !.

newcountfeatssems(Input,RefLists,NFeatss):-
  newcountfs(RefLists,PFeats,NFeats,PFeats1,NFeats1,PFeats2),
  length(PFeats1,Pos1),
  length(NFeats1,Neg1),
  msort(PFeats1,PFeas1),
  msort(NFeats1,NFeas1),
  writef('\t',[]),write('<indicatori_positivi_specifici id="'),write(Input),
  write('" totale="'),write(Pos1),
  write('" lista="'),write(PFeas1),
  write('">'),nl,writef('\t',[]),write('</indicatori_positivi_specifici>'),nl,
  writef('\t',[]),write('<indicatori_negativi_specifici id="'),write(Input),
  write('" totale="'),write(Neg1),
  write('" lista="'),write(NFeas1),
  write('">'),nl,writef('\t',[]),write('</indicatori_negativi_specifici>'),nl,
  length(PFeats,Pos),
  length(NFeats,Neg),
  msort(PFeats,PFeas),
  msort(NFeats,NFeas),
  writef('\t',[]),write('<indicatori_positivi id="'),write(Input),
  write('" totale="'),write(Pos),
  write('" lista="'),write(PFeas),
  write('">'),nl,writef('\t',[]),write('</indicatori_positivi>'),nl,
  writef('\t',[]),write('<indicatori_negativi id="'),write(Input),
  write('" totale="'),write(Neg),
  write('" lista="'),write(NFeas),
  write('">'),writef('\t',[]),nl,write('</indicatori_negativi>'),nl,
  Pos2 is Pos + Pos1,
  Neg2 is Neg + Neg1,
  append([positives(Pos2-PFeas1)],[negatives(Neg2-NFeas1)],NFeatss),
  !.
  
newcountfs([],[],[],[],[],[]):-!.
newcountfs([Agg|RefLists],Feats1,Feats2,[Cat1-Lem1/N-pos|Feats3],Feats4,Feats5):-
   Agg=..[refex,N,I-Ind,Ca,Lem|_],
   checkcatsent(Lem,Cat),
   Cat=3,Lem1=Lem,Cat1=Cat,
   newcountfs(RefLists,Feats1,Feats2,Feats3,Feats4,Feats5),
   !.
newcountfs([Agg|RefLists],Feats1,Feats2,Feats3,[Cat2-Lem2/N-neg|Feats4],Feats5):-
   Agg=..[refex,N,I-Ind,Ca,Lem|_],
   checkcatsent(Lem,Cat),
   Cat\=3,
   Lem2=Lem,Cat2=Cat,
   newcountfs(RefLists,Feats1,Feats2,Feats3,Feats4,Feats5),
   !.
newcountfs([Agg|RefLists],Feats1,Feats2,[Cat1-Lem1/N-pos|Feats3],Feats4,Feats5):-
   Agg=..[refex,N,I-Ind,Ca,Lem|_],
   newcheck_itallex(Lem,Pol),
   Pol=pos,Lem1=Lem,Pol1=Pol,Cat1=3,
   newcountfs(RefLists,Feats1,Feats2,Feats3,Feats4,Feats5),
   !.
newcountfs([Agg|RefLists],Feats1,Feats2,Feats3,[Cat1-Lem1/N-neg|Feats4],Feats5):-
   Agg=..[refex,N,I-Ind,Ca,Lem|_],
   newcheck_itallex(Lem,Pol),
   Pol=neg,Lem1=Lem,Pol1=Pol,Cat1=1,
   newcountfs(RefLists,Feats1,Feats2,Feats3,Feats4,Feats5),
   !.
newcountfs([Agg|RefLists],[Cat1-Lem1/N-Pol1|Feats1],Feats2,Feats3,Feats4,Feats5):-
   Agg=..[refex,N,I-Ind,Ca,Lem|_],
%   newcheck_itallex(Lem,Pol),
   check_itallex(Lem,Pol),
   Pol=pos,Lem1=Lem,Pol1=Pol,Cat1=4,
   newcountfs(RefLists,Feats1,Feats2,Feats3,Feats4,Feats5),
   !.
newcountfs([Agg|RefLists],Feats1,[Cat2-Lem2/N-Pol2|Feats2],Feats3,Feats4,Feats5):-
   Agg=..[refex,N,I-Ind,Ca,Lem|_],
%   newcheck_itallex(Lem,Pol),
   check_itallex(Lem,Pol),
   Pol=neg,
   Lem2=Lem,Pol2=Pol,Cat2=2,
   newcountfs(RefLists,Feats1,Feats2,Feats3,Feats4,Feats5),
   !.
/*
newcountfs([Agg|RefLists],Feats1,[Cat2-Lem2/N-Pol2|Feats2],Feats3,Feats4,Feats5):-
   Agg=..[refex,N,I-Ind,Ca,Lem|_],
   berlusconi1_coreferents(Corefs),
   member(Lem,Corefs)
   Lem2=Lem,Pol2=neu,Cat2=4,
   newcountfs(RefLists,Feats1,Feats2,Feats3,Feats4,Feats5),
   !.
*/
newcountfs([Agg|RefLists],Feats1,Feats2,Feats3,Feats4,Feats5):-
   newcountfs(RefLists,Feats1,Feats2,Feats3,Feats4,Feats5),
   !.

newcheck_itallex(Lem,Pol):-
   nclp(Lem,Pol,Fea),
%   check_itallex(Lem,Pol),
   !.
newcheck_itallex(_-Lem,Pol):-
   nclp(Lem,Pol,Fea),
%   check_itallex(Lem,Pol),
   !.

checkcatsent(Lem,1):-
    wndang(Cat,Lem),!.
checkcatsent(Lem,Cat):-
    catop(Cat,Lem),!.
checkcatsent(_-Lem,1):-
    wndang(Cat,Lem),!.
checkcatsent(_-Lem,Cat):-
    catop(Cat,Lem),!.

countfeatssems([],[]):-!.
countfeatssems([Agg|RefLists],[Lem-Pol|Feats]):-
   Agg=..[refex,I-Ind,Cat,Lem,Tratti,CatSem],
%   analyzecatsem(CatSem,Lem,Feat),
   check_itallex(Lem,Pol),
   countfeatssems(RefLists,Feats),
   !.
countfeatssems([Agg|RefLists],Feats):-
   countfeatssems(RefLists,Feats),
   !.


analyzecatsem([cse,dyn],Lem,[dyn-Lem]).
analyzecatsem([dyn,expr,mnt,prpt,stat|CatSem],Lem,[stat-Lem]).
analyzecatsem([cse,dyn,med,prpt,stat|CatSem],Lem,[prpt-Lem]).
analyzecatsem([prpt,sdnt,stat,stodrn|CatSem],Lem,[stdn-Lem]).
analyzecatsem([cse,dyn,mnt,odrn|CatSem],Lem,[odrn-Lem]).
analyzecatsem([cse,dyn,expr,mnt|CatSem],Lem,[cse-Lem]).
analyzecatsem([dyn,expr,mnt|CatSem],Lem,[expr-Lem]).


/*
dyn,expr,mnt,prpt,stat = expr
cse,dyn,med,prpt,stat = prpt
prpt,sdnt,stat,stodrn = stdn
dyn,expr,mnt = mnt
cse,dyn,mnt,odrn = odnr
[cse,dyn] = dyn
*/

computelittleprobinding(NoFr,Outs,Ibars,NewRefs,Prons,Exts,NTops):-
%    checkwriteallrefs(Outs,RefExs,NewRefs),nl,nl,
    newpbinding(Outs,Ibars,NewRefs,Prons,Exts,NTops),
%    frase_corrente(NoFr, Symb),
    PronIn=[Prons,NTops,NewRefs],
    anaphora_resolution(NoFr,Exts,Consts,Out,PronIn,AllOuts),
    recoverantes(Ind,Outs,NewOuts),
    !.

getsentfunc(Ind,Funcs,Logs,Sems,Sent,Func,Sem):-
   nogen_member(Ind-Sent,Logs),nonvar(Sent),Sent\=[],
   nogen_member(Ind-Func,Funcs),nonvar(Func),Func\=[],
   nogen_member(Ind-Sem,Sems),nonvar(Sem),
   !.
createrefexss(Funcs,Logs,[],Sems,[],[],[],[]):-!.
createrefexss(Funcs,Logs,[Ind-Lemmed|Rest],Sems,[Refs|RefList],[Data|Dats],[No|Nos],[EntsPas|Es]):-
   getsentfunc(Ind,Funcs,Logs,Sems,Sent,Func,Sem),
   createrss(Func,Sent,Ind,Lemmed,Sem,Refs,Data,No,EntsPas,Deps),
%   pbbased_depend(Deps,Sent,Lemmed,Sems,Func,NewDeps,Diffs),
   writedepsall(Ind,Deps,[]),
   createrefexss(Funcs,Logs,Rest,Sems,RefList,Dats,Nos,Es),
   !.
createrefexss(Funcs,Logs,[Ind-Lemmed|Rest],Sems,RefList,Dats,Nos,Es):-
   createrefexss(Funcs,Logs,Rest,Sems,RefList,Dats,Nos,Es),
   !.

diacreaterefexss(Funcs,Logs,[],Sems,[],[],[],[],[]):-!.
diacreaterefexss(Funcs,Logs,[Ind-Lemmed|Rest],Sems,[Refs|RefList],[Data|Dats],[No|Nos],[EntsPas|Es],[Deps|Restdeps]):-
   getsentfunc(Ind,Funcs,Logs,Sems,Sent,Func,Sem),
   checkspeakerassert(Ind),
   diacreaterss(Func,Sent,Ind,Lemmed,Sem,Refs,Data,No,EntsPas,Deps),
%   pbbased_depend(Deps,Sent,Lemmed,Sems,Func,NewDeps,Diffs),
   diacreaterefexss(Funcs,Logs,Rest,Sems,RefList,Dats,Nos,Es,Restdeps),
   !.
diacreaterefexss(Funcs,Logs,[Ind-Lemmed|Rest],RefList,Dats,Nos,Es,Deps):-
   diacreaterefexss(Funcs,Logs,Rest,RefList,Dats,Nos,Es,Deps),
   !.

checkspeakerassert(Ind):-
   genre(dialogue),
   getnumfile(Ind,Num),
   speaker(Num,_),
   !.
checkspeakerassert(Ind):-
   genre(dialogue),
   \+speaker(Ind,_),
   getnumfile(Ind,Num),
   Sent is Num - 1,
   speaker(Sent,W),
   asserta(speaker(Num,W)),
   !.
checkspeakerassert(Ind):-
   \+genre(dialogue),
   !.   
checkdataconsist(Datas,Datas):-
   Datas=..[sempro,Pol,SpA,Dia,VeCo,Sems],
   VeCo=[],
   !.
checkdataconsist(Datas,Data):-
   Datas=..[sempro,Pol,SpA,Dia,VeCo,Sems],
   VeCo\=[],
   verifysems(Sems,NewSems),
   Data=..[sempro,Pol,SpA,Dia,VeCo,NewSems],
   !.

verifysems([],[]):-!.
verifysems([Sem|Sems],NewSems):-
   Sem=N-Feats,
   member(parola=Att,Feats),
   member(parola=Att1,Feats),Att\=Att1,
   remove(parola=Att1,Feats,Feat),
   verifysems([N-Feat|Sems],NewSems),
   !.
verifysems([Sem|Sems],NewSems):-
   Sem=N-Feats,
   bagof(Att,member(factive=Att,Feats),Facts),
   length(Facts,L),1<L,
   reverse(Facts,[Att|Rev]),
   remove(factive=Att,Feats,Feat),
   verifysems([N-Feat|Sems],NewSems),
   !.
verifysems([Sem|Sems],NewSems):-
   Sem=N-Feats,
   bagof(Att,member(polsem=Att,Feats),Facts),
   length(Facts,L),1<L,
   reverse(Facts,[Att|Rev]),
   remove(polsem=Att,Feats,Feat),
   verifysems([N-Feat|Sems],NewSems),
   !.
verifysems([Sem|Sems],NewSems):-
   Sem=N-Feats,
   bagof(Att,member(lemma=Att,Feats),Facts),
   length(Facts,L),1<L,
   reverse(Facts,[Att|Rev]),
   remove(lemma=Att,Feats,Feat),
   verifysems([N-Feat|Sems],NewSems),
   !.
verifysems([Sem|Sems],NewSems):-
   Sem=N-Feats,
   bagof(Att,member(change=Att,Feats),Facts),
   length(Facts,L),1<L,
   reverse(Facts,[Att|Rev]),
   remove(change=Att,Feats,Feat),
   verifysems([N-Feat|Sems],NewSems),
   !.
verifysems([Sem|Sems],NewSems):-
   Sem=N-Feats,
   bagof(Att,member(view=Att,Feats),Facts),
   length(Facts,L),1<L,
   reverse(Facts,[Att|Rev]),
   remove(view=Att,Feats,Feat),
   verifysems([N-Feat|Sems],NewSems),
   !.
verifysems([Sem|Sems],NewSems):-
   Sem=N-Feats,
   bagof(Att,member(moodtense=Att,Feats),Facts),
   length(Facts,L),1<L,
   reverse(Facts,[Att|Rev]),
   remove(moodtense=Att,Feats,Feat),
   verifysems([N-Feat|Sems],NewSems),
   !.
verifysems([Sem|Sems],NewSems):-
   Sem=N-Feats,
   bagof(Att,member(progr=Att,Feats),Facts),
   length(Facts,L),1<L,
   reverse(Facts,[Att|Rev]),
   remove(progr=Att,Feats,Feat),
   verifysems([N-Feat|Sems],NewSems),
   !.
verifysems([Sem|Sems],NewSems):-
   Sem=N-Feats,
   bagof(Att,member(negation=Att,Feats),Facts),
   length(Facts,L),1<L,
   reverse(Facts,[Att|Rev]),
   remove(negation=Att,Feats,Feat),
   verifysems([N-Feat|Sems],NewSems),
   !.
verifysems([Sem|Sems],NewSems):-
   Sem=N-Feats,
   bagof(Att,member(modal=Att,Feats),Facts),
   length(Facts,L),1<L,
   reverse(Facts,[Att|Rev]),
   remove(modal=Att,Feats,Feat),
   verifysems([N-Feat|Sems],NewSems),
   !.
verifysems([Sem|Sems],NewSems):-
   Sem=N-Feats,
   bagof(Att,member(modal1=Att,Feats),Facts),
   length(Facts,L),1<L,
   reverse(Facts,[Att|Rev]),
   remove(modal1=Att,Feats,Feat),
   verifysems([N-Feat|Sems],NewSems),
   !.
verifysems([Sem|Sems],NewSems):-
   Sem=N-Feats,
   bagof(Att,member(acceptance=Att,Feats),Facts),
   length(Facts,L),1<L,
   reverse(Facts,[Att|Rev]),
   remove(acceptance=Att,Feats,Feat),
   verifysems([N-Feat|Sems],NewSems),
   !.
verifysems([Sem|Sems],NewSems):-
   Sem=N-Feats,
   bagof(Att,member(evident=Att,Feats),Facts),
   length(Facts,L),1<L,
   reverse(Facts,[Att|Rev]),
   remove(evident=Att,Feats,Feat),
   verifysems([N-Feat|Sems],NewSems),
   !.
verifysems([Sem|Sems],NewSems):-
   Sem=N-Feats,
   bagof(Att,member(reconstr=Att,Feats),Facts),
   length(Facts,L),1<L,
   reverse(Facts,[Att|Rev]),
   remove(reconstr=Att,Feats,Feat),
   verifysems([N-Feat|Sems],NewSems),
   !.
verifysems([Sem|Sems],NewSems):-
   Sem=N-Feats,
   bagof(Att,member(aspectv=Att,Feats),Facts),
   length(Facts,L),1<L,
   reverse(Facts,[Att|Rev]),
   remove(aspectv=Att,Feats,Feat),
   verifysems([N-Feat|Sems],NewSems),
   !.
verifysems([Sem|Sems],[Sem|NewSems]):-
   verifysems(Sems,NewSems),
   !.


% write_banneropxml,nl,

write_banneropxml:-
   write('<?xml version="1.0"'),
   write(' encoding="ISO-8859-1"?>'),
   nl,
   write('<text_semantics>'),nl,
   write('<semantic_propositional>'),nl.

%computelittleprobinding(NoFr,Outs,Ibars,NewRefs,Prons,Exts,NTops):-


discoverdirectspeech(VComp,Sem,Lemmed,true,Sem1):-
    nonvar(VComp),VComp\=[],
    member(Verb,VComp),
    Verb=..[i,N,Ve,Cat,Lem-Feats],
    feats_pers_num(Feats, Agr),
    stringof(List,Agr),
    List=[P,_,Nu],
    (integer(P),(P=1;P=2)
     ;
     integer(Nu),(Nu=1;Nu=2)),
    remove(view=View,Sem,Sems),
    append([view=internal],Sems,Sem1),
    !.    
discoverdirectspeech(VComp,Sem,Lemmed,true,Sem1):-
    Lemmed=[i(I,Che,_,_)|_],
    (Che=che;Che='Che'),
    remove(view=View,Sem,Sems),
    append([view=internal],Sems,Sem1),
    !.    
discoverdirectspeech(VComp,Sem,Lemmed,true,Sem1):-
    Lemmed=[i(I,Intj,Cat,_)|_],
    Cat=intj,
    remove(view=View,Sem,Sems),
    append([view=internal],Sems,Sem1),
    !.    
discoverdirectspeech(VComp,Sem,Lemmed,true,Sem1):-
    Lemmed=[i(I,Par,[par],_)|_],
    par_punct(Par,_),
    remove(view=View,Sem,Sems),
    append([view=internal],Sems,Sem1),
    !.    
discoverdirectspeech(VComp,Sem,Lemmed,true,Sem1):-
    reverse(Lemmed,Reverse),
    Reverse=[i(I,Par,Nw,_)|_],
    (stringof(List,I),
     member('!',List)
     ;
     Nw=nw),
    remove(view=View,Sem,Sems),
    append([view=internal],Sems,Sem1),
    !.    
discoverdirectspeech(VComp,Sem,Lemmed,true,Sem1):-
    reverse(Lemmed,Reverse),
    Reverse=[_,i(I,Par,[par],_)|_],
    par_punct(Par,_),
    remove(view=View,Sem,Sems),
    append([view=internal],Sems,Sem1),
    !.    
discoverdirectspeech(VComp,Sem,Lemmed,true,Sem1):-
    findall(I-Par,member(i(I,Par,[par],_),Lemmed),Pars),
    Pars\=[],
    member(I-Par,Pars),member(I1-Par1,Pars),I\=I1,
    par_punct(Par,_),par_punct(Par1,_),
    (I < I1,
      Dif is I1 - I; I1 < I, Dif is I - I1),
    3 < Dif,
    member(WordLem,VComp),
    WordLem=..[i,Ind|_], 
    checkindinds(I,I1,Ind),
    remove(view=View,Sem,Sems),
    append([view=internal],Sems,Sem1),
    !.    
discoverdirectspeech(VComp,Sem,Lemmed,false,Sem):-
    !.
    
checkindinds(I,I1,Ind):-
    I < I1, Ind < I1, I < Ind
    ;
    I1 < I, Ind < I, I1 < Ind,
    !.

createrss(Funcs,Sent,Ind,Lemmed,Sem,NewRefs,SemProps,No,EntsPas,Deps):-
    minordeps(Lemmed,Minors,Heads),
    buildverbcompound(Sem,Ind,Funcs,Sent,Refs,Lemmed,SemPro,VerbHeads,Pov),
    length(VerbHeads,No),
    checkdataconsist(SemPro,SemProp),
    enrichheads(Minors,Heads,Lemmed,Funcs,NewHeads),
    nwcreaterefexs(Ind,NewHeads,Minors,Refexs),
    enrichverifysubcat(Ind,Pov,Funcs,Sem,SemProp,NewHeads,Lemmed,VerbHeads,Refs,Refexs,NewRefs,PAS,Deps),
    confirmpov(Ind,Pov,Refs,NewRefs,POV),
    augmentsempro(SemProp,POV,SemProps),
    write('<opin_snipp id="'),
    write(Ind),
    writesempros(Ind,SemProps,PAS),
    append([Refexs],PAS,EntsPas),
    !.

diacreaterss(Funcs,Sent,Ind,Lemmed,Sem,NewRefs,SemProps,No,EntsPas,Deps):-
    minordeps(Lemmed,Minors,Heads),
    buildverbcompound(Sem,Ind,Funcs,Sent,Refs,Lemmed,SemPro,VerbHeads,Pov),
    length(VerbHeads,No),
    checkdataconsist(SemPro,SemProp),
    enrichheads(Minors,Heads,Lemmed,Funcs,NewHeads),
    nwcreaterefexs(Ind,NewHeads,Minors,Refexs),
    enrichverifysubcat(Ind,Pov,Funcs,Sem,SemProp,NewHeads,Lemmed,VerbHeads,Refs,Refexs,NewRefs,PAS,Deps),
    diaconfirmpov(Ind,Pov,Refs,NewRefs,POV),
    augmentsempro(SemProp,POV,SemProps),
    write('<opin_snipp id="'),
    write(Ind),
    writesempros(Ind,SemProps,PAS),
    append([Refexs],PAS,EntsPas),
    !.

checkcompounddisjoint(Funcs,OutV,OutVs):-
    getcosts(Funcs,Costs),
    explorecompvs(OutV,Seqs,N,Rest),
    checkdisjointverbcomps(Seqs,N,Costs,NewVv),
    appiattisci(NewVv,NewV),
    append(NewV,Rest,OutVs),
%    appendnumb(NewV,Rest,OutVs),
    write(Seqs),nl,nl,
    !.
checkcompounddisjoint(Funcs,OutV,OutV):-
    !.

appendnumb([],OutVs,OutVs):-!.
appendnumb([Verbs|NewV],Rest,OutVs):-
    Verbs=[N-_|_],
    append([N-Verbs],Rest,NewRest),
    appendnumb(NewV,NewRest,OutVs),
    !. 
    
checkdisjointverbcomps([],[],Costs,[]):-!.
checkdisjointverbcomps([Seqss|Verbs],[Nn|L],Costs,[Nn-Seq|NewV]):-
    cleanindexverbs(Seqss,Seqs),
    appiattisci(Seqs,Seq),
    checkdisjvs(Seq,Costs),
    checkdisjointverbcomps(Verbs,L,Costs,NewV),
    !.
checkdisjointverbcomps([Seqs|Verbs],[Nn|L],Costs,[Seqs|NewV]):-
    checkdisjointverbcomps(Verbs,L,Costs,NewV),
    !.

cleanindexverbs([],[]):-!.
cleanindexverbs([N-Seq|Seqss],[Seq|Seqs]):-
    cleanindexverbs(Seqss,Seqs),
    !.

verbnewprendi_testa(ibar,VP,Pre):-
    newprendi_testa(ibar,VP,Pre),
    !.
verbnewprendi_testa(ibar,VP,Pre):-
    VP=[Pre-vppt-_],
    !.
    
checkdisjvs(Verbs,Costs):-
     reverse(Verbs,RevVerbs),
     member(i(N,Pred,Ca,LemFeat),RevVerbs),
     (Func=ibar;Func=sv3;Func=xadj),
     member(Func-VP,Costs),
     verbnewprendi_testa(ibar,VP,Pre),
     Pre=Pred,
     nth(Costs,Num,Func-VP),
        Num1 is Num - 1,
     (nth(Costs,Num1,Sp-NP1), (Sp=sp;Sp=spd;Sp=spda);
      nth(Costs,Num1,savv-NP1);
      nth(Costs,Num1,obl-NP1)),
        Num2 is Num - 2,
     (Func1=ibar;Func1=ir_infl),
      nth(Costs,Num2,Func1-VP1),
     newprendi_testa(ibar,VP1,Head),
     member(i(N1,Head,Ca1,LemFeat1),Verbs),
     !.

explorecompvs([],[],N,[]):-!.
explorecompvs([N-Seq,N1-Seq1,N2-Seq2|OutV],[[N-Seq,N1-Seq1,N2-Seq2]|Sequent],[Nn|L],Rest):-
    N1 is N + 1,
    N2 is N1 + 1,
    (var(Nn),Nn=N;nonvar(Nn)),
    member(Aux,Seq),
    Aux=..[i,Id,V,Ca,Lem-Fea],
    Lem=essere,
    member(Aux1,Seq1),
    Aux1=..[i,Id1,V1,Ca1,Lem1-Fea1],
    Lem1=essere, Ca1=ausep,
    length(Seq2,Len),
    (Len=1,
     member(Aux2,Seq2),
     Aux2=..[i,Id2,V2,Ca2,Lem2-Fea2]
     ;
     1<Len,
     (Seq2=[i(Id22,V22,Ca22,Lem2Fea2)|Rest2],
      \+check_auxcat(Cat22),\+coplb(V22),\+coplh(V22),
       member(i(Id2,V2,Ca2,Lem2-Fea2),Rest2))
       ),
    Lem2\=essere,
    (member(mfeats=Fe1,Fea2),mfs(Fe1,PP1),PP1=participio_passato
      ;
      member(mood=part,Fea2),member(tense=pass,Fea2)),
    explorecompvs(OutV,Sequent,L,Rest),
    !.
explorecompvs([N-Seq,N1-Seq1|OutV],[[N-Seq,N1-Seq1]|Sequent],[Nn|L],Rest):-
    N1 is N + 1,
    (var(Nn),Nn=N;nonvar(Nn)),
    member(Aux,Seq),
    Aux=..[i,Id,V,Ca,Lem-Fea],
    Lem=essere,
    member(Aux1,Seq1),
    Aux=..[i,Id1,V1,Ca1,Lem1-Fea1],
    Lem1=essere,
    member(mfeats=Fe,Fea),mfs(Fe,PP),PP=participio_passato,
    L is N + 1,
    explorecompvs(OutV,Sequent,L,Rest),
    !.
explorecompvs([N-Seq|OutV],Sequent,L,[N-Seq|Rest]):-
    explorecompvs(OutV,Sequent,L,Rest),
    !.
    

buildverbcompound(Sem,Ind,Funcs,Sent,Refs,Lemmed,SemProps,NewHeadss,POV):-
    serchverbc(Lemmed,VerbCs),
    identifycompouns(1,VerbCs,OutVs),
    checkcompounddisjoint(Funcs,OutVs,OutV),
    refidentdiat(Ind,Lemmed,Refs,OutV,Diats),
    enrichverbs(OutV,Funcs,NewHead),
    sort(NewHead,NewHeads),
    checkspeechact(Sem,Sent,Spact),
    classifypropsem(Spact,Lemmed,Refs,NewHeads,SemProp),
    verifypointofv(Ind,Funcs,Refs,NewHeads,Lemmed,POV),
    countpols(Refs,Pol),
    msort(Diats,Diat),
    (SemProp=[], NewHeadss=[1-[i(0,è,v,essere-[sems=dummy, mfeats=kl3])]],
      getpoldummy(Lemmed,Pol1),
     SemPro=[view=external,subcat=[exten-state-cop],parola=è,lemma=essere,change=null,factive=factive,moodtense=presente],
     discoverdirectspeech(OutV,SemPro,Lemmed,True,SemP1),
     checkspactsemfact(Spact,Lemmed,SemP1,NewSem),
     checknegazionirefs(Lemmed,NewSem,SemPro2),
      SemProps=..[sempro,Pol1,statement,[active],[i(0,è,v,essere-[sems=dummy, mfeats=kl3])],[1-SemPro2]]
      ;
     SemProp\=[],
     genre(dialogue),
      Funcs=[sn-SN,fp-FP,fs-FS,ibar-IBAR|_],
      NewHeadss=[0-[i(0,è,v,essere-[sems=dummy, mfeats=kl3])]|NewHeads],
      selectlemmed(SN,Lemmed,Sellemmed),
      getpoldummy(Sellemmed,Pol1),
     SemPro=[view=external,subcat=[exten-state-cop],parola=è,lemma=essere,change=null,factive=factive,moodtense=presente],
     discoverdirectspeech([],SemPro,Sellemmed,True,SemP1),
     checkspactsemfact(Spact1,Sellemmed,SemP1,NewSem),
     checknegazionirefs(Sellemmed,NewSem,SemPro2),
     append([active],Diat,Diat1),
      SemProps=..[sempro,Pol,[statement,Spact],Diat1,[i(0,è,v,essere-[sems=dummy, mfeats=kl3])|OutV],[0-SemPro2|SemProp]]
      ;
      
     SemProp\=[],NewHeadss=NewHeads,
      SemProps=..[sempro,Pol,Spact,Diat,OutV,SemProp]),
    !.

selectlemmed([],Lemmed,[]):-!.
selectlemmed([W-_-_|SN],[First|Lemmed],[First|Sellemmed]):-
      First=..[i,N,W|_],
      selectlemmed(SN,Lemmed,Sellemmed),
      !.
getpoldummy([],pos):-!.
getpoldummy([i(Ind,W,Cat,LemFeat)|Heads],neg):-
     atomic(W),
     tolower(W,Low),
     (negazione(W);negazione(Low)),
    !.
getpoldummy([i(Ind,W,Cat,LemFeat)|Lemmed],Pol):-
    getpoldummy(Lemmed,Pol),
    !.
    
augmentsempro(SemPro,POV,SemProps):-
    nonvar(POV),
    SemPro=..[sempro,Pol,Spact,Diat,OutV,SemProp],
    SemProps=..[sempro,Pol,POV,Spact,Diat,OutV,SemProp],
    !.
augmentsempro(SemPro,POV,SemPro):-!.

/*
lemma="essere" parola="è" change="null" view="external" factivity="factive" moodtense="presente"
*/

verifypointofv(Ind,Funcs,Refs,NewHeads,Lemmed,Id-W-Lem):-
    (Lemmed=[i(1,'Secondo',_,_)|_];Lemmed=[i(1,'Per',_,_)|_]),
    member(obl-Cost,Funcs),
    Cost=[P-p-sp|Rest],
    (P='Per';P='Secondo'),
    (member(Fu-Cos,Rest),
     reverse(Cos,Rev),
     Rev=[W-Ca-Cc|_]
     ;
     Rest=[W-Ca-Cc]),
     nouncats(Ca),
    F=..[i,Id,W,C,Lem-Fea],
    member(F,Lemmed),
    !.
verifypointofv(Ind,Funcs,Refs,NewHeads,Lemmed,Id-W-Lem):-
    Lemmed=[i(1,'Per',_,_)|_],
    member(vcomp-Cost,Funcs),
    member(obj-Cost1,Funcs),
    newprendi_testa(obj,Cost1,Head),
    Head=parole,
    remove(obl-Cos,Cost1,Rest),
    reverse(Cos,Rev),
    Rev=[W-Ca-Cc|_],
     nouncats(Ca),
    F=..[i,Id,W,C,Lem-Fea],
    member(F,Lemmed),
    !.
verifypointofv(Ind,Funcs,Refs,NewHeads,Lemmed,Id-W-Lem):-
    Lemmed=[i(N,secondo,_,_)|_],
    member(obl-Cost,Funcs),
    Cost=[P-p-sp|Rest],
    P=secondo,
    (member(Fu-Cos,Rest),
     reverse(Cos,Rev),
     Rev=[W-Ca-Cc|_]
     ;
     Rest=[W-Ca-Cc]),
    F=..[i,Id,W,C,Lem-Fea],
    member(F,Lemmed),
    !.
verifypointofv(Ind,Funcs,Refs,NewHeads,Lemmed,Id-W-Lem):-
    member(i(I,Par,[par],_),Lemmed),
    par_punct(Par,_),
    member(obl-Cost,Funcs),
    Lemmed=[i(_,_,p,per-per),i(_,dirla,v,dire-Fe),i(_,con,p,con),
                i(Id,W,Ca,Lem-Feas)|_],
    !.
verifypointofv(Ind,Funcs,Refs,NewHeads,Lemmed,Id-W-Lem):-
    member(i(I,Par,[par],_),Lemmed),
    par_punct(Par,_),
    remove(_-Vs,NewHeads,Rest),
    is_list(Vs),
    reverse(Vs,[F|Rev]),
    F=..[i,Id,W,C,Lem-Fea], Id < I,
    Dif is I - Id, Dif =<3,
    \+ deleteexcep(Lem),
    checkcmm(Lem),
    checkpropscat(Lem),
    !.    
verifypointofv(Ind,Funcs,Refs,NewHeads,Lemmed,Id-W-Lem):-
    remove(I-Vs,NewHeads,Rest),
    is_list(Vs),
    member(dirs/Prop,Vs),
    (reverse(Vs,[F|Rev]),
     F=..[i,Id,W,C,Lem-Fea]
     ;
     Vs=[_,F,G|_],
     F=..[i,Id,W,C,Lemm-Fea],
     G=..[i,Id1,W1,C1,Lem1-Fea1],
     mcon(Lemm,'_',L1),
     mcon(L1,Lem1,Lem)),
    \+ deleteexcep(Lem),
    checkcmm(Lem),
    checkpropscat(Lem),
    !.
verifypointofv(Ind,Funcs,Refs,NewHeads,Lemmed,Id-W-Lem):-
    remove(I-Vs,NewHeads,Rest),
    is_list(Vs),
    (member(fcomp/Prop,Vs);
       member(vcomp/Prop,Vs)),
    Ib is I - 1,
    remove(Ib-Vbs,Rest,Res),
    is_list(Vbs),
    (reverse(Vbs,[F|Rev]),
     F=..[i,Id,W,C,Lem-Fea]
     ;
     Vbs=[_,F,G|_],
     F=..[i,Id,W,C,Lemm-Fea],
     G=..[i,Id1,W1,C1,Lem1-Fea1],
     mcon(Lemm,'_',L1),
     mcon(L1,Lem1,Lem)),
    \+ deleteexcep(Lem),
    checkcmm(Lem),
    checkpropscat(Lem),
    !.
verifypointofv(Ind,Funcs,Refs,NewHeads,Lemmed,disc-W-Lem):-
    Lemmed=[i(I,Par,[par],_)|_],
    par_punct(Par,_),
    stringof(List,Ind),
    reverse(List,[File|_]),
    N1 is File - 1,
    mmsem(N1,[Pol,W-Lem|_],_),
    !.
verifypointofv(Ind,Funcs,Refs,NewHeads,Lemmed,disc-W-Lem):-
    reverse(Lemmed,Reverse),
    Reverse=[_,i(I,Par,[par],_)|_],
    par_punct(Par,_),
    stringof(List,Ind),
    reverse(List,[File|_]),
    N1 is File - 1,
    mmsem(N1,[Pol,W-Lem|_],_),
    !.
verifypointofv(Ind,Funcs,Refs,NewHeads,Lemmed,Id-W-Lem):-
    member(i(I,':',[dirs],_),Lemmed),
    remove(_-Vs,NewHeads,Rest),
    is_list(Vs),
    reverse(Vs,[F|Rev]),
    F=..[i,Id,W,C,Lem-Fea], Id < I,
    !.    
verifypointofv(Ind,Funcs,Refs,NewHeads,Lemmed,Id-W-Lem):-
    member(i(I,Par,[par],_),Lemmed),
    par_punct(Par,_),
    member(obl-Cost,Funcs),
    Cost=[P-p-sp|Rest],
    (P=per;P=secondo;P='Per';P='Secondo'),
    (member(Fu-Cos,Rest),
     reverse(Cos,Rev),
     Rev=[W-Ca-Cc|_]
     ;
     Rest=[W-Ca-Cc]),
    F=..[i,Id,W,C,Lem-Fea],
    member(F,Lemmed),
    !.
verifypointofv(Ind,Funcs,Refs,NewHeads,Lemmed,Id-W-Lem):-
    findall(I-Par,member(i(I,Par,[par],_),Lemmed),Pars),
    Pars\=[],member(I-Par,Pars),
    par_punct(Par,_),
    remove(_-Vs,NewHeads,Rest),
    is_list(Vs),
    reverse(Vs,[F|Rev]),
    F=..[i,Id,W,C,Lem-Fea], Id < I,
    (Pars=[A];
     member(I1-Parr,Pars),par_punct(Parr,_),
     I1\=I,Dif is I1 - I, 3 < Dif),
    !.    
/*
verifypointofv(Ind,Funcs,Refs,NewHeads,Lemmed,Id-W-Lem):-
    remove(_-Vs,NewHeads,Rest),
    is_list(Vs),
    reverse(Vs,[F|Rev]),
    F=..[i,Id,W,C,Lem-Fea],
    \+ deleteexcep(Lem),
    checkcmm(Lem),
    checkpropscat(Lem),
    !.   
*/
verifypointofv(Ind,Funcs,Refs,NewHeads,Lemmed,POV):-!.

deleteexcep(fare).
deleteexcep(far).
deleteexcep(dare).
deleteexcep(dar).
deleteexcep(lasciare).
deleteexcep(lasciar).
deleteexcep(mettere).
deleteexcep(metter).
deleteexcep(vedere).
deleteexcep(veder).
deleteexcep(portare).
deleteexcep(portar).
deleteexcep(tenere).
deleteexcep(tener).
deleteexcep(permettere).
    

par_punct('«', [par]).
par_punct('“', [par]).
par_punct('"', [par]).

checksempov(Sems):-
   Sems=[List,Polsem=Pol],
  (member(agnt,List);
   member(occp,List);
   member(hum,List);
   member(person,List);
   member(soc,List);
   member(group,List);
   member(grp,List);
   member(relation,List);
   member(pert,List);
   member(ocprptcp,List)
   ),
   !.
checksempov(Sems):-
   Sems=[List,Polsem=Pol],
   \+ member(event,List),
   \+ member(qnt,List),
   \+ member(time,List),
   \+ member(bld,List),
   \+ member(artf,List),
   \+ member(nbde,List),
   \+ member(obj,List),
   \+ member(part,List),
   \+ member(purp,List),
   \+ member(artifact,List),
   \+ member(attribute,List),
   \+ member(event,List),
   \+ member(event,List),
    !.
diaconfirmpov(Sent,disc-W-Lem,Refs,NewRefs,W-Lem):-nonvar(Lem),!.
diaconfirmpov(Sent,Ind-W-Lem,Refs,NewRefs,W1-W1):-
    nonvar(Lem),
    speaker(Sent,W1),
    !.
diaconfirmpov(Sent,X,Refs,NewRefs,W1-W1):-
    stringof(List,Sent),
    reverse(List,[N|Rev]),
    (N1 is N - 1;N1 is N - 2;N1 is N - 3;N1 is N - 4;N1 is N - 5),
    reverse([N1|Rev],List1),
    stringof(List1,Sent1),
    speaker(Sent1,W1),
    !.
diaconfirmpov(Sent,X,Refs,NewRefs,W1-W1):-
    stringof(List,Sent),
    reverse(List,[N|Rev]),
    speaker(N,W1),
    !.
diaconfirmpov(Sent,X,Refs,NewRefs,narrator):-!.

confirmpov(Sent,disc-W-Lem,Refs,NewRefs,narrator):-var(Lem),!.
confirmpov(Sent,disc-W-Lem,Refs,NewRefs,W-Lem):-nonvar(Lem),!.
confirmpov(Sent,Ind-W-Lem,Refs,NewRefs,W1-Lem1):-
    nonvar(Lem),
    Verb=..[refex,Id-Ind,Ca,W-Lem,Fea,Sems],
    member(Verb,Refs),
    Subj=..[refex,Id-Ind1,Ca1,W1-Lem1,Fea1,Sems1,Ind,subj/Ro],
    appiattisci(NewRefs,NewRefss),
    member(Subj,NewRefss),
    checksempov(Sems1),
    !.    
% here I take little pros or big pros Ind is verbal index
confirmpov(Sent,Ind-W-Lem,Refs,NewRefs,W1-Lem1):-
    nonvar(Lem),
    (Subj=..[refex,Id-Ind,Ca1,W1-Lem1,Fea1,Sems1,Idd,Fu/Ro];
      Subj=..[refex,Id-Ind,Ca1,W1-Lem1,Fea1,Sems1,Fu/Ro];
      Subj=..[refex,Id-Ind,Ca1,Lem1,Fea1,Sems1,Idd,Fu/Ro], W1=Lem1;
      Subj=..[refex,Id-Ind,Ca1,Lem1,Fea1,Sems1,Fu/Ro], W1=Lem1),
    appiattisci(NewRefs,NewRefss),
    member(Subj,NewRefss),
    !.    
confirmpov(Sent,Ind-W-Lem,Refs,NewRefs,W1-Lem1):-
    nonvar(Lem),
    recover_descs(Lem,List), nonvar(List), is_list(List),
    Subj=..[refex,Id-Ind1,Ca1,W1-Lem1,Fea1,Sems1,Inds,subj/Ro],
    appiattisci(NewRefs,NewRefss),
    member(Subj,NewRefss),
    checksempov(Sems1),
    Verb=..[refex,Id-Inds,Ca,W0-Lem0,Fea,Sems],
    member(Verb,Refs),
    !.
confirmpov(Sent,Ind-W-Lem,Refs,NewRefs,W1-Lem1):-
    nonvar(Lem),
    Subj=..[refex,Id-Ind1,Ca1,W1-Lem1,Fea1,Sems1,Ind,Func/Ro],
    appiattisci(NewRefs,NewRefss),
    member(Subj,NewRefss),
    checksempov(Sems1),
    checkcmm(Lem), Func\=subj, Ind < Ind1,
    checkpropscat(Lem),
    Verb=..[refex,Id-Inds,Ca,W0-Lem0,Fea,Sems],
    member(Verb,Refs),
    !.
confirmpov(Sent,Ind-W-Lem,Refs,NewRefs,W1-Lem1):-
    nonvar(Lem),
    Verb=..[refex,Id-Ind,Ca,W-Lem,Fea,Sems],
    member(Verb,Refs),
    Subj=..[refex,Id-Ind1,pro,Pron-Pro,Fea1,Sems1,Ind,subj/Ro],
    appiattisci(NewRefs,NewRefss),
    member(Subj,NewRefss),
    search_antecedent(Ind-W-Lem,Refs,NewRefss,W1-Lem1),
    !.    
confirmpov(Sent,Ind-W-Lem,Refs,NewRefs,W1-Lem1):-
    nonvar(Lem),
    Verb=..[refex,Id-Ind,Ca,W-Lem,Fea,Sems],
    member(Verb,Refs),
    Subj=..[refex,Id-Ind1,Ca1,little_pro,Fea1,Sems1,Ind,subj/Ro],
    appiattisci(NewRefs,NewRefss),
    member(Subj,NewRefss),
    search_antecedent(Ind-W-Lem,Refs,NewRefss,W1-Lem1),
    !.    
confirmpov(Sent,Ind-W-Lem,Refs,NewRefs,W1-Lem1):-
    nonvar(Lem),
    Subj=..[refex,Id-Ind1,Ca1,W1-Lem1,Fea1,Sems1,subj/Ro],
    appiattisci(NewRefs,NewRefss),
    member(Subj,NewRefss),
    Ind < Ind1,
    checksempov(Sems1),
    Verb=..[refex,Id-Inds,Ca,W0-Lem0,Fea,Sems],
    member(Verb,Refs),
    !.    
confirmpov(Sent,X,Refs,NewRefs,narrator):-!.

checkpropscat(Lem):-
    getroot(Lem,Root,Cong),
    v(Root,Ir,Co,Scat),
    allproptrs(Props),
    member(Scat,Props),
    !.

    
search_antecedent(Ind-W-Lem,Verbs,NewRefs,W2-Lem2):-
    Subj=..[refex,Id-Ind1,Ca1,W1-Lem1,Fea1,Sems1,Inds,subj/Ro],
    findall(Ind1-W1-Lem1,(member(Subj,NewRefs),nonvar(Ind1),Ind1<Ind),Sbs),
    sort(Sbs,Sort),
    reverse(Sort,[I-W2-Lem2|Rev]),
    checkanteced(Ind,I,NewRefs,Verbs),
    !.

checkanteced(Ind,I,NewRefs,Verbs):-
    Subj=..[refex,Id-I,Ca1,W1-Lem1,Fea1,Sems1,Id1,subj/Ro],
    member(Subj,NewRefs),
    Verb=..[refex,Id-Inds,v,W-Lem,Fea,Sems],
    findall(Verb,(member(Verb,Verbs),nonvar(Id1),nonvar(Inds),Inds<Ind, Id1<Inds),Vs),
    Vs=[],
    Cong=..[refex,Id-Idd,Co,Wc-Lemc,Feac,Semsc],    
    findall(Wc,((Co=cosu;Co=cong),member(Cong,Verbs),nonvar(Id1),nonvar(Idd),
                 Idd<Ind, Id1<Idd),Cos),
    Cos\=[],
    !.
    

/*
 i(21,segretario,n,segretario-[sems=com,mfeats=ms]),
  i(22,'Angelino_Alfano',nh,'Angelino_Alfano'-[mfeats=mfs]),
  i(23,esprime,v,esprimere-[sems=intr,mfeats=kl3s]),
  i(24,'"',[par],-),
  i(25,apprezzamento,n,apprezzamento-[sems=com,mfeats=ms]),
  i(26,per,p,per),
  i(27,il,art,il-[sems=def,mfeats=fs]),
  i(28,'Colle',part,'Colle'-[mfeats=mfs]),
  i(29,'"',[par],-),
  i(30,',',[punt],-),
  i(31,',',[punt],-),
  i(32,ma,cosu,ma),
  i(33,al,part,a-[sems=det,mfeats=ms]),
  i(34,contempo,pw,contempo),
  i(35,fa,v,fare-[sems=intr,mfeats=kl3s]),
*/

/*
[ 1 - [ i(3,ha,aux,avere-[sems=aux,mfeats=kl3s]),
    i(4,detto,v,detto-[mfeats=ms])
  ],
  2 - [fcomp/prop,i(6,sceglierà,v,scegliere-[sems=tr,mfeats=ku3s])],
  3 - [i(14,non,neg,non-non),i(15,ci,clit,ci-[sems=nom,mfeats='1pmf'])],
  4 - [i(16,saranno,aux,essere-[sems=aux,mfeats=ku3p])]
]
*/
checkspeechact(Sem,Sent,Spact):-
    reverse(Sent,Revs),
    (Revs=['?'-_-_|_],Spact=question;Revs=['!'-_-_|_],Spact=exclamative),
    !.
checkspeechact(Sem,Sent,Spact):-
    member(I-I1-[Cosu-_-_|_],Sem),
    (Cosu=se;Cosu=nel_caso_in_cui;Cosu=qualora;Cosu=a_condizione_che;
     Cosu=se_si_desse_il_caso;Cosu=nell_ipotesi;Cosu=se_mai;
     Cosu=ogni_volta_che;Cosu=tutte_le_volte_che;
     Cosu=semmai;Cosu=nell_ipotesi_che;Cosu=metti_che;
     Cosu=putacaso;Cosu=casomai;Cosu=dandosi_il_caso_che;Cosu=nell_eventualità_che;
     Cosu=se_per_caso;Cosu=se_per_ipotesi;Cosu=a_meno_che;Cosu=salvo_che;
     Cosu=ammesso_pure_che;Cosu=posto_pure_che;Cosu=quand_anche;
     Cosu=se_si_desse_il_caso;Cosu=in_caso_di;Cosu=quand_anche),
     Spact=conditional,
     !.
     
checkspeechact(Sem,Sent,Spact):-
    Spact=statement,
    !.

refidentdiat(Ind,Lemmed,Refs,OutV,Diats):-
    ncreaterefs(Ind,OutV,Lemmed,Refs),
    getindexlemm(Ind,Lemmed),
    identdiat(Refs,OutV,Diats),
    !.

getindexlemm(Ind,[W|Lemmed]):-
    W=..[i,Id|_],
    (Lemmed=[],Id1=Id
     ;
     Lemmed\=[],reverse(Lemmed,[I1|Revs]),
      I1=..[i,Id1|_]),
    asserta(inds(Ind,Id,Id1)),
    !.
    
identdiat(Refs,[],[]):-!.
identdiat(Refs,[N-Vv|OutV],[Dia|Diat]):-
    is_list(Vv),
    length(Vv,L),
    ididat(L,Refs,Vv,Dia),
    identdiat(Refs,OutV,Diat),
    !.
identdiat(Refs,[N-Vv|OutV],Diat):-
    identdiat(Refs,OutV,Diat),
    !.
identdiat(Refs,[List|OutV],[Dia|Diat]):-
    is_list(List),
    length(List,L),
    ididat(L,Refs,List,Dia),
    identdiat(Refs,OutV,Diat),
    !.
identdiat(Refs,[List|OutV],Diat):-
    is_list(List),
    identdiat(Refs,OutV,Diat),
    !.

checkpastpartic(V,W1):-
    (V=v;V=vppt;V=ppas),
    stringof(List,W1),
    reverse(List,Rev),
    getpastpart(Rev,Root),
    (vlm(W1,_,_);
     mcon(Root,are,W2),
     vlm(W2,_,_)),
    !.

checkreflxs(OutV,Verb):-
    member(Refl,OutV),
    Refl=..[i,N,W|_],
    (
     (W=si;W=se),
     checkriflverb(Verb)
     ;
     (W=si;W=se),
    \+checkriflverb(Verb)),
    !.

checkcognatetrans(L):-
   findall(Args, pv(L,_,S,A,C,Args), LForm),
   appiattisci(LForm,Scats),
   member(np/nadverb/R/Fea,Scats),
   !.

  
ididat(1,Refs,OutV,active):-
    !.
ididat(L,Refs,OutV,Lem1-passive):-
  (member(i(Ind,Stato,Cat,essere-Feat),OutV),
    (Stato=stato;Stato=stati;Stato=stata;Stato=state)
    ;
    member(i(Ind,W,Cat,Lem-Feat),OutV),
    (auxcats(Cat, Lem),Lem\=avere;Lem=venire)
    ),
    member(i(Ind1,W1,Cat1,Lem1-Feat1),OutV),
    Lem1\=essere,Lem1\=venire,
    (on(Cat1, [ppas, vppin, vppt]);checkpastpartic(Cat1,W1)),
    \+checkreflxs(OutV,Lem1),
    getroot(Lem1,Root,Cong),
    v(Root,Ir,Co,Scat),
%    pv(Root,Suf,CatGr,CatV,Scat,LArgsV),
    transcat(Scat),
    \+checkcognatetrans(Root),
    !.
ididat(L,Refs,OutV,Lem1-passive):-
    member(i(Ind,Stato,Cat,Modal-Feat),OutV),
    modal(Modal),
    member(i(Ind2,W2,Cat2,Lem2-Feat2),OutV),
    (auxcats(Cat2, Lem2);Lem2=venire),
    member(i(Ind1,W1,Cat1,Lem1-Feat1),OutV),
    Lem1\=essere,Lem1\=venire,Ind1\=Ind,
    (on(Cat1, [ppas, vppin, vppt]);checkpastpartic(Cat1,W1)),
    \+checkreflxs(OutV,Lem1),
    getroot(Lem1,Root,Cong),
    v(Root,Ir,Co,Scat),
%    pv(Root,Suf,CatGr,CatV,Scat,LArgsV),
    transcat(Scat),
    \+checkcognatetrans(Root),
    !.
ididat(L,Refs,OutV,Lem1-passive):-
    member(i(Ind,Stato,Cat,Modal-Feat),OutV),
    coplbv(Stato),
    member(i(Ind2,W2,Cat2,Lem2-Feat2),OutV),
    (auxcats(Cat2, essere);Lem2=venire),
    member(i(Ind1,W1,Cat1,Lem1-Feat1),OutV),
    Lem1\=essere,Lem1\=venire,Ind1\=Ind,
    on(Cat1, [ppas, vppin, vppt]),
    \+checkreflxs(OutV,Lem1),
    getroot(Lem1,Root,Cong),
    v(Root,Ir,Co,Scat),
%    pv(Root,Suf,CatGr,CatV,Scat,LArgsV),
    transcat(Scat),
    \+checkcognatetrans(Root),
    !.
ididat(L,Refs,OutV,active):-
    !.

transcat(Scat):-
    alltrs(Trs),
    member(Scat,Trs),
    !.

%  Agg=refex(I-Ind,Cat,Lem,Feat,[Synt,Aspt,CatSem]),

memsem(Ind,Attrs,[Pol,POV,Spact,Diat]):-
   stringof(List,Ind),
   reverse(List,[File|_]),
   assert(mmsem(File,[Pol,POV,Spact,Diat],Attrs)),
   !.

writedepsall(Ind,Deps,Diffs):-
    term_to_atom(newsents/Ind,Outs),
    tell(Outs),
    writealldeps(Deps),
    nl,write(Diffs),nl,
    told,
    !.
    
writesempros(Ind,[],[]):-!.
writesempros(Ind,Sems,PAS):-
    Sems=..[sempro,Pol,POV,Spact,Diat,OutV,SemProp],
    write('" polarity="'),write(Pol),
    write('" point_of_view="'),write(POV),
    write('" speech_act="'),write(Spact),
    write('" diathesis="'),write(Diat),
    write('">'),
%    write('>'),
    length(SemProp,L),nl,writef('\t',[]),
    fp(Ind,Frase),
    write('<testo_frase id="'),write(Ind),write('">'),nl,
    write(Frase),write('</testo_frase>'),nl,
    write('<complessi_verbali No="'),write(L),write('">'),nl,
    writesempro(SemProp,Attrs,PAS),
    writef('\t',[]),write('</complessi_verbali>'),nl,
    memsem(Ind,Attrs,[Pol,POV,Spact,Diat]),
    write('</opin_snipp>'),nl,
    !.
writesempros(Ind,Sems,PAS):-!.

writesempro([],[],[]):-!.
writesempro([N-[]|SemProp],Attrs,PAS):-
    writesempro(SemProp,Attrs,PAS),
    !.
writesempro([N-V|SemProp],[Attrs|Rest],PAS):-
    (PAS=[pas(In,Lem-Args,N-Atrs)|_];
    member(pas(In,Lem-Args,N-Atrs),PAS);
    member(pas(In,Lem-Args,N1-Atrs),PAS)),
    writef('\t',[]),write('<semantica_del_verbo No="'),write(N),
    writeattrs(Atrs,Attrs), write('">'),
%    writeattrs(V,Attrs), write('">'),
    writepass(N-Atrs,PAS,Pas),
%    writepass(N-V,PAS,Pas),
    write('</semantica_del_verbo>'),nl,
    writesempro(SemProp,Rest,Pas),
    !.
writesempro([N-V|SemProp],[Attrs|Rest],PAS):-
    writesempro(SemProp,Rest,PAS),
    !.
writesempro(SemProp,Rest,PAS):-!.

writepass(N-V,PAS,Pas):-
    member(lemma=Lem,V),
    member(Ps,PAS),nonvar(Ps),
    Ps=..[pas,Ind|Rest],
    member(Lem-Feats,Rest),
    member(N-Fea,Rest),nl,
    writef('\t',[]),write('<predicate_arg_struc No="'),write(N),write('">'),
%    write('" pas="'),write(Ps),
    writeargspas(Rest),
%    write('">'),
    writef('\t',[]),write('</predicate_arg_struc>'),nl,
    remove(Ps,PAS,Pas),
    !.
writepass(N-V,PAS,Pas):-
    member(Ps,PAS),nonvar(Ps),
    Ps=..[pas,Ind|Rest],
    member(Lem-Feats,Rest),
    member(N-Fea,Rest),nl,
    writef('\t',[]),write('<predicate_arg_struc No="'),write(N),write('">'),
    writeargspas(Rest),
    writef('\t',[]),write('</predicate_arg_struc>'),nl,
    remove(Ps,PAS,Pas),
    !.
writepass(N-V,Pas,Pas):-
    !.

writeargspas([Lem-[]|Sem]):-!.
writeargspas([Lem-RefexRest|Sem]):-
    writeargspass(RefexRest),
    !.    
writeargspas(PAS):-!.


writeargspass([]):-!.
writeargspass([[]|Rest]):-
    writeargspass(Rest),
    !.    
writeargspass([Reff|Rest]):-
    (is_list(Reff),member(Ref,Reff),
      remove(Ref,Reff,Refs),append(Refs,Rest,Rests)
      ;
      Ref=Reff,Rests=Rest),
    Ref=..[refex,Id-Id1,rel_pro,bindee,Fes,Head-Lem,Idx,Func/Rol],
    nl,writef('\t',[]),write('<arg id="'),
    write(Id1), 
    write('" type="'),write(bindee),
    write('" feats="'),(nonvar(Fes),write(Fes);var(Fes),write(nil)),
    write('" antecedent="'),(nonvar(Lem),write(Lem);var(Lem),write(nil)),
    write('" dependent="'),write(Idx),
    write('" func_role="'),write(Func/Rol),
    write('">'),write('</arg>'),nl,
    writeargspass(Rests),
    !.    
writeargspass([Reff|Rest]):-
    (is_list(Reff),member(Ref,Reff),
      remove(Ref,Reff,Refs),append(Refs,Rest,Rests)
      ;
      Ref=Reff,Rests=Rest),
    Ref=..[refex,Id-Id1,pro,big_Pro,Fes,Head-Lem,Idx,subj/Rol],
    nl,writef('\t',[]),write('<arg id="'),
    write(Id1), 
    write('" type="'),write(big_Pro),
    write('" feats="'),(nonvar(Fes),write(Fes);var(Fes),write(nil)),
    write('" antecedent="'),(nonvar(Lem),write(Lem);var(Lem),write(nil)),
    write('" dependent="'),write(Id1),
    write('" func_role="'),write(subj/Rol),
    write('">'),write('</arg>'),nl,
    writeargspass(Rests),
    !.    
writeargspass([Reff|Rest]):-
    (is_list(Reff),member(Ref,Reff),
      remove(Ref,Reff,Refs),append(Refs,Rest,Rests)
      ;
      Ref=Reff,Rests=Rest),
    Ref=..[refex,Id-Id1,pro,little_pro,Fes,Ante,_,subj/Role],
    nl,writef('\t',[]),write('<arg id="'),
    write(Id1), 
    write('" type="'),write(little_pro),
    write('" feats="'),(nonvar(Fes),write(Fes);var(Fes),write(nil)),
    write('" antecedent="'),(nonvar(Ante),write(Ante);var(Ante),write(nil)),
    write('" dependent="'),write(Id1),
    write('" func_role="'),write(subj/Role),
    write('">'),write('</arg>'),nl,
    writeargspass(Rests),
    !.    
writeargspass([Reff|Rest]):-
    (is_list(Reff),member(Ref,Reff),
      remove(Ref,Reff,Refs),append(Refs,Rest,Rests)
      ;
      Ref=Reff,Rests=Rest),
    Ref=..[refex,Id-Id1,pron,Pro,Fes,Ante-_,Dep,Func/Role],
    nl,writef('\t',[]),write('<arg id="'),
    write(Id1), 
    write('" type="'),write(pron),
    write('" head="'),write(Pro),
    write('" feats="'),(nonvar(Fes),write(Fes);var(Fes),write(nil)),
    write('" antecedent="'),(nonvar(Ante),write(Ante);var(Ante),write(nil)),
    write('" dependent="'),write(Dep),
    write('" func_role="'),write(Func/Role),
    write('">'),write('</arg>'),nl,
    writeargspass(Rests),
    !.    
writeargspass([Reff|Rest]):-
    (is_list(Reff),member(Ref,Reff),
      remove(Ref,Reff,Refs),append(Refs,Rest,Rests)
      ;
      Ref=Reff,Rests=Rest),
    Ref=..[refex,Id-Id1,clit,si_impers,Fes,Ante,Dep,subj/Role],
    nl,writef('\t',[]),write('<arg id="'),
    write(Id1), 
    write('" type="'),write(clit),
    write('" feats="'),write(Fes),
    write('" head="'),write(si),
    write('" lemma="'),write(si_impers),
    write('" dependent="'),write(Dep),
    write('" func_role="'),write(subj/Role),
    write('">'),write('</arg>'),nl,
    writeargspass(Rests),
    !.    
writeargspass([Reff|Rest]):-
    (is_list(Reff),member(Ref,Reff),
      remove(Ref,Reff,Refs),append(Refs,Rest,Rests)
      ;
      Ref=Reff,Rests=Rest),
    (Ref=..[refex,Id-Id1,Ca,Head-Lem,Fes,Sem,Dep,Func/Role],Hea=Head;
    Ref=..[refex,Id-Id1,Ca,Lem,Fes,Sem,Dep,Func/Role],Hea=Lem),
    nl,writef('\t',[]),write('<arg id="'),
    write(Id1), 
    write('" type="'),write(Ca),
    write('" feats="'),write(Fes),
    write('" head="'),write(Hea),
    write('" lemma="'),write(Lem),
    write('" sems="'),write(Sem),
    write('" dependent="'),write(Dep),
    write('" func_role="'),write(Func/Role),
    write('">'),write('</arg>'),nl,
    writeargspass(Rests),
    !.    
writeargspass([Reff|Rest]):-
    writeargspass(Rest),
    !.    

% ;Mod=intendere;Mod=risultare;Mod=desiderare;Mod=bisognare    
modal(B):-
    (Mod=dovere;Mod=potere;Mod=volere),
    vlm(B,Mod,_),
    !.
% ;Mod=intendere;Mod=risultare;Mod=desiderare;Mod=bisognare
modal(Mod):-
    Mod=dovere;Mod=potere;Mod=volere,
    !.
modal(Modal):-
    tolower(Modal,Mod),Mod\=Modal,
    modal(Mod),
    !.
reconstr(Mod):-
    Mod=fare;Mod=lasciare;Mod=fatto;Mod=lasciato,
    !.
reconstr(Mod):-
    Mod=vedere;Mod=sentire;Mod=visto;Mod=sentito,
    !.
aspectv(Mod):-
    Mod=continuare;Mod=smettere;Mod=continuato;Mod=smesso;Mod=iniziare;Mod=incominciare;Mod=iniziato;Mod=incominciato,
    !.
aspectv(Mod):-
    Mod=interrompere;Mod=finire;Mod=interrotto;Mod=finito;Mod=mettersi;Mod=persistere;Mod=messo;Mod=persistito,
    !.
aspectv(Mod):-
    Mod=desistere;Mod=terminare;Mod=desistito;Mod=terminato;Mod=cessare;Mod=rinunciare;Mod=cessato;Mod=rinunciato,
    !.
aspectv(Mod):-
    Mod=insistere;Mod=perseverare;Mod=insistito;Mod=perseverato;Mod=seguitare;Mod=ostinarsi;Mod=seguitato;Mod=ostinato,
    !.

writeattrs([],[]):-!.
writeattrs([modale1=B|V],[modal1=B|Attrs]):-
    write('" modal1="'),write(B),
    writeattrs(V,Attrs),
    !.
writeattrs([modale=B|V],[modal=B|Attrs]):-
    write('" modal="'),write(B),
    writeattrs(V,Attrs),
    !.
writeattrs([accept=B|V],[accept=B|Attrs]):-
    write('" acceptance="'),write(B),
    writeattrs(V,Attrs),
    !.
writeattrs([evid=B|V],[evident=B|Attrs]):-
    write('" evident="'),write(B),
    writeattrs(V,Attrs),
    !.
writeattrs([parola=B|V],[modal=B|Attrs]):-
    modal(B), member(parola=P,V),
    write('" modal="'),write(B),
    writeattrs(V,Attrs),
    !.
writeattrs([progr=B|V],[progr=B|Attrs]):-
    write('" progr="'),write(B),
    writeattrs(V,Attrs),
    !.
writeattrs([reconstr=B|V],[reconstr=B|Attrs]):-
    write('" reconstr="'),write(B),
    writeattrs(V,Attrs),
    !.
writeattrs([aspectv=B|V],[aspectv=B|Attrs]):-
    write('" aspectualv="'),write(B),
    writeattrs(V,Attrs),
    !.
writeattrs([lemma=B|V],Attrs):-
    modal(B),member(lemma=P,V),
    writeattrs(V,Attrs),
    !.
writeattrs([parola=B|V],[parola=B|Attrs]):-
    write('" parola="'),write(B),
    writeattrs(V,Attrs),
    !.
writeattrs([lemma=B|V],[lemma=B|Attrs]):-
    write('" lemma="'),write(B),
    writeattrs(V,Attrs),
    !.
writeattrs([change=B|V],[change=B|Attrs]):-
    write('" change="'),write(B),
    writeattrs(V,Attrs),
    !.
writeattrs([view=B|V],[view=B|Attrs]):-
    write('" view="'),write(B),
    writeattrs(V,Attrs),
    !.
writeattrs([factive=B|V],[factivity=B|Attrs]):-
    write('" factivity="'),write(B),
    writeattrs(V,Attrs),
    !.
writeattrs([moodtense=B|V],[moodtense=B|Attrs]):-
    write('" moodtense="'),write(B),
    writeattrs(V,Attrs),
    !.
writeattrs([modale=B|V],[modal=B|Attrs]):-
    write('" modal="'),write(B),
    writeattrs(V,Attrs),
    !.
writeattrs([polsem=B|V],[polsem=B|Attrs]):-
    write('" polsem="'),write(B),
    writeattrs(V,Attrs),
    !.
writeattrs([negazione=B|V],[negation=B|Attrs]):-
    write('" negation="'),write(B),
    writeattrs(V,Attrs),
    !.
writeattrs([negazione1=B|V],[negation1=B|Attrs]):-
    write('" negation1="'),write(B),
    writeattrs(V,Attrs),
    !.
writeattrs([auxiliary=B|V],[auxiliary=B|Attrs]):-
    write('" auxiliary="'),write(B),
    writeattrs(V,Attrs),
    !.
writeattrs([A=B|V],Attrs):-
    writeattrs(V,Attrs),
    !.

matchfeatsmoodtense(Feat,MoodTense):-
    Feat\=[],nonvar(Feat),
    member(mfeats=MFea,Feat),
    identfeats(MFea,MoodTense),
    !.
matchfeatsmoodtense(Feat,MoodTense):-
    Feat\=[],nonvar(Feat),
    member(mood=Mood,Feat),
    member(tense=Tense,Feat),
    matchmoodtense(Mood,Tense,MoodTense),
    !.
matchfeatsmoodtense(Feat,Feat1):-
    Feat\=[],nonvar(Feat),
    member(mood=Mood,Feat),
    member(tense=Tense,Feat),
    member(mood=Mood1,Feat1),
    member(tense=Tense1,Feat1),
    mcon(Mood1,'_',Moo),
    mcon(Moo,Tense1,MoodTense),
    matchmoodtense(Mood,Tense,MoodTense),
    !.
recuperaparts(Refs,W,Lem,Lem,Fea,Sems,Refs1):-
    Refs\=[],nonvar(Refs),
     (member(refex(I-Ind,Cat,W-Lem,Fea,Sems),Refs);
       member(refex(I-Ind,Cat,Lem,Fea,Sems),Refs)),
     remove(refex(I-Ind,Cat,Lemm,Feat,Sems),Refs,Refs1),
     !.
     
recuperaparts(Refs,W,Lemm,Lem,Feat,Sems,Refs):-
     analtoken(W,Anal),
     member(Lem-Feat,Anal),
     member(mood=Mood,Feat), 
     Mood=part,
     getfeatsem(W,Lem,Sem,Fea,Pol),
     extractaspsem1(Lem,Synt,Aspt,CatSem),
     !.

/* probabilmente vs attualmente */

mapsemverb(Refs,[],I,[]):-!.
mapsemverb(Refs,[i(Ind0,W0,Cat0,Lemm-Feat0)|Comp],I,[modale1=Lemm|SemP]):-
    modal(Lemm),
    member(i(Ind,W,Cat,Lem-Feat),Comp),
    modal(Lem),
    mapsemverb1(Refs,Comp,I,SemP1),
    remove(factive=_,SemP1,SemP2),
    append(SemP2,[factive=nonfactive],SemP),
    !.
mapsemverb(Refs,[i(Ind,W,Cat,Lem-Feat)|Comp],I,[change=Change,progr=Lem,view=internal,factive=factive,moodtense=MoodTense|SemP]):-
    nonvar(Lem),
    progr(Lem),
    matchfeatsmoodtense(Feat,MoodTense),
    identchange(internal,MoodTense,Aspt,Change),
    mapsemverb1(Refs,Comp,I,SemP),
    !.
mapsemverb(Refs,[i(Ind,W,Cat,Lem-Feat)|Comp],I,[change=Change,reconstr=Lem,view=external,moodtense=MoodTense|SemP]):-
    nonvar(Lem),
    reconstr(Lem),
    matchfeatsmoodtense(Feat,MoodTense),
    identchange(external,MoodTense,Aspt,Change),
    mapsemverb1(Refs,Comp,I,SemP),
    !.
mapsemverb(Refs,[i(Ind,W,Cat,Lem-Feat)|Comp],I,[change=Change,aspectv=Lem,view=external,moodtense=MoodTense|SemP]):-
    nonvar(Lem),
    aspectv(Lem),
    matchfeatsmoodtense(Feat,MoodTense),
    identchange(external,MoodTense,Aspt,Change),
    mapsemverb1(Refs,Comp,I,SemP),
    !.
mapsemverb(Refs,[i(Ind0,W0,Cat0,Lemm-Featt),i(Ind2,W2,Avv,LemsFeat),i(Ind1,W1,Cat1,Lems-Feat1)|Comp],I,[subcat=SFeats,modale=Lemm,parola=W,lemma=Lem,change=Change,view=View,factive=nonfactive,moodtense=MoodTense,auxiliary=Lems|SemP]):-
    modal(Lemm),
    (coplb(Lems);coplh(Lems)),
    (Avv=av;Avv=avvl;Avv=avv;Avv=neg),
    member(i(Ind,W,Cat,Lem-Feat),Comp),
    (member(refex(I-Ind,Cat,W-Lem,Fea,Sems),Refs);
     member(refex(I-Ind,Cat,Lem,Fea,Sems),Refs)),
    matchfeatsmoodtense(Featt,MoodTense1),
    matchfeatsmoodtense(Fea,MoodTense2),
    matchtensecomp(MoodTense1,MoodTense2,MoodTense),
    (Sems=[Synt,Aspt,SemCat],SFeats=[Synt-Aspt-SemCat];
           Sems=[_,Synt,Aspt,SemCat],SFeats=[Synt-Aspt-SemCat];Sems=[polsem=Pol|SFeats]),
    identview(SemCat,View),
    identfact(MoodTense,View,Factive),
    identchange(View,MoodTense,Aspt,Change),
    remove(i(Ind,W,Cat,Lem-Feat),Comp,Comp1),
    remove(refex(I-Ind,Cat,Lemm,Fea,Sems),Refs,Refs1),
    mapsemverb(Refs1,Comp1,I,SemP),
    !.
mapsemverb(Refs,[i(Ind0,W0,Cat0,Lemm-Featt),i(Ind2,W2,Avv,LemsFeat),i(Ind1,W1,Cat1,Lems-Feat1)|Comp],I,[subcat=[Synt-Aspt-SemCat],modale=Lemm,parola=W,lemma=Lem,change=Change,view=View,factive=nonfactive,moodtense=MoodTense,auxiliary=Lems|SemP]):-
    modal(Lemm),
    (coplb(Lems);coplh(Lems)),
    (Avv=av;Avv=avvl;Avv=avv;Avv=neg),
    member(i(Ind,W,Cat,Lem-Feat),Comp),
    (coplb(Lem);coplh(Lem)),
    matchfeatsmoodtense(Featt,MoodTense1),
    matchfeatsmoodtense(Fea,MoodTense2),
    matchtensecomp(MoodTense1,MoodTense2,MoodTense),
    getroot(Lem,Root,Cong),
    pv(Root,Cong,Synt,Aspt,SemCat,Sub),
    identview(SemCat,View),
    identfact(MoodTense,View,Factive),
    identchange(View,MoodTense,Aspt,Change),
    remove(i(Ind,W,Cat,Lem-Feat),Comp,Comp1),
    mapsemverb(Refs,Comp1,I,SemP),
    !.
mapsemverb(Refs,[i(Ind0,W0,Cat0,Lems-Featt),i(Ind2,W2,Avv,LemsFeat),i(Ind1,W1,Cat1,Lems-Feat1)|Comp],I,[subcat=SFeats,parola=W,lemma=Lem,change=Change,view=View,factive=Factive,moodtense=MoodTense,auxiliary=Lems|SemP]):-
    (coplb(Lems);coplh(Lems)),
    (Avv=av;Avv=avvl;Avv=avv;Avv=neg),
    member(i(Ind,W,Cat,Lem-Feat),Comp),
    (member(refex(I-Ind,Cat,W-Lem,Fea,Sems),Refs);
     member(refex(I-Ind,Cat,Lem,Fea,Sems),Refs)),
    matchfeatsmoodtense(Featt,MoodTense1),
    matchfeatsmoodtense(Fea,MoodTense2),
    matchtensecomp(MoodTense1,MoodTense2,MoodTense),
    (Sems=[Synt,Aspt,SemCat],SFeats=[Synt-Aspt-SemCat];
          Sems=[_,Synt,Aspt,SemCat],SFeats=[Synt-Aspt-SemCat];Sems=[polsem=Pol|SFeats]),
    identview(SemCat,View),
    identfact(MoodTense,View,Factive),
    identchange(View,MoodTense,Aspt,Change),
    remove(i(Ind,W,Cat,Lem-Feat),Comp,Comp1),
    remove(refex(I-Ind,Cat,Lemm,Fea,Sems),Refs,Refs1),
    mapsemverb(Refs1,Comp1,I,SemP),
    !.

mapsemverb(Refs,[i(Ind0,W0,Cat0,Lemm-Featt),i(Ind1,W1,Cat1,Lems-Feat1)|Comp],I,[subcat=SFeats,modale=Lemm,parola=W,lemma=Lem1,change=Change,view=View,factive=nonfactive,moodtense=MoodTense,auxiliary=Lems|SemP]):-
    modal(Lemm),
    (coplb(Lems);coplh(Lems)),
    member(i(Ind,W,Cat,Lem-Feat),Comp),
    recuperaparts(Refs,W,Lem,Lem1,Fea,Sems,Refs1),
    matchfeatsmoodtense(Featt,MoodTense1),
    matchfeatsmoodtense(Fea,MoodTense2),
    matchtensecomp(MoodTense1,MoodTense2,MoodTense),
    (Sems=[Synt,Aspt,SemCat],SFeats=[Synt-Aspt-SemCat];
          Sems=[_,Synt,Aspt,SemCat],SFeats=[Synt-Aspt-SemCat];Sems=[polsem=Pol|SFeats]),
    identview(SemCat,View),
    identfact(MoodTense,View,Factive),
    identchange(View,MoodTense,Aspt,Change),
    remove(i(Ind,W,Cat,Lem-Feat),Comp,Comp1),
    mapsemverb(Refs1,Comp1,I,SemP),
    !.
mapsemverb(Refs,[i(Ind0,W0,Cat0,Lemm-Featt),i(Ind1,W1,Cat1,Lems-Feat1),i(Ind2,W2,Cat2,Lemss-Feat2)|Comp],I,[subcat=[Synt-Aspt-SemCat],modale=Lemm,parola=W,lemma=Lem,change=Change,view=View,factive=nonfactive,moodtense=MoodTense,auxiliary=Lems|SemP]):-
    modal(Lemm),
    (coplb(Lems);coplh(Lems)),
    (coplb(Lemss);coplh(Lemss)),
    member(i(Ind,W,Cat,Lem-Feat),Comp),
    (coplb(Lem);coplh(Lem)),
    matchfeatsmoodtense(Featt,MoodTense1),
    matchfeatsmoodtense(Feat2,MoodTense2),
    matchtensecomp(MoodTense1,MoodTense2,MoodTense),
    getroot(Lem,Root,Cong),
    pv(Root,Cong,Synt,Aspt,SemCat,Sub),
    identview(SemCat,View),
    identfact(MoodTense,View,Factive),
    identchange(View,MoodTense,Aspt,Change),
    remove(i(Ind,W,Cat,Lem-Feat),Comp,Comp1),
    mapsemverb(Refs,Comp1,I,SemP),
    !.
mapsemverb(Refs,[i(Ind0,W0,Cat0,Lemm-Featt),i(Ind1,W1,Cat1,Lems-Feat1)|Comp],I,[subcat=[Synt-Aspt-SemCat],modale=Lemm,parola=W,lemma=Lem,change=Change,view=View,factive=nonfactive,moodtense=MoodTense,auxiliary=Lems|SemP]):-
    modal(Lemm),
    (coplb(Lems);coplh(Lems)),
    member(i(Ind,W,Cat,Lem-Feat),Comp),
    (coplb(Lem);coplh(Lem)),
    matchfeatsmoodtense(Featt,MoodTense1),
    matchfeatsmoodtense(Feat,MoodTense2),
    matchtensecomp(MoodTense1,MoodTense2,MoodTense),
    getroot(Lem,Root,Cong),
    pv(Root,Cong,Synt,Aspt,SemCat,Sub),
    identview(SemCat,View),
    identfact(MoodTense,View,Factive),
    identchange(View,MoodTense,Aspt,Change),
    remove(i(Ind,W,Cat,Lem-Feat),Comp,Comp1),
    mapsemverb(Refs,Comp1,I,SemP),
    !.
mapsemverb(Refs,[i(Ind0,W0,Cat0,Lems-Featt),i(Ind1,W1,Cat1,Lems-Feat1)|Comp],I,[subcat=SFeats,parola=W,lemma=Lem,change=Change,view=View,factive=Factive,moodtense=MoodTense,auxiliary=Lems|SemP]):-
    (coplb(Lems);coplh(Lems)),
    member(i(Ind,W,Cat,Lem-Feat),Comp),
    (member(refex(I-Ind,Cat,W-Lem,Fea,Sems),Refs);
     member(refex(I-Ind,Cat,Lem,Fea,Sems),Refs)),
    matchfeatsmoodtense(Featt,MoodTense1),
    matchfeatsmoodtense(Fea,MoodTense2),
    matchtensecomp(MoodTense1,MoodTense2,MoodTense),
    (Sems=[Synt,Aspt,SemCat],SFeats=[Synt-Aspt-SemCat];
           Sems=[_,Synt,Aspt,SemCat],SFeats=[Synt-Aspt-SemCat];Sems=[polsem=Pol|SFeats]),
    identview(SemCat,View),
    identfact(MoodTense,View,Factive),
    identchange(View,MoodTense,Aspt,Change),
    remove(i(Ind,W,Cat,Lem-Feat),Comp,Comp1),
    remove(refex(I-Ind,Cat,Lemm,Fea,Sems),Refs,Refs1),
    mapsemverb(Refs1,Comp1,I,SemP),
    !.
mapsemverb(Refs,[i(Ind0,W0,Cat0,Lems-Featt),i(Ind1,W1,Cat1,Lem1-Feat1),i(Ind2,W2,Cat2,Lem2-Feat2)|Comp],I,[subcat=SFeats,modale=Lem1,parola=W,lemma=Lem,Mod=Lem2,change=Change,view=View,factive=Factive,moodtense=MoodTense,auxiliary=Lems|SemP]):-
    modal(Lem1),
    (coplb(Lems);coplh(Lems)),
    (reconstr(W2),Mod=reconstr;aspectv(W2),Mod=aspectv),
    member(i(Ind,W,Cat,Lem-Feat),Comp),
    (member(refex(I-Ind,Cat,W-Lem,Fea,Sems),Refs);
     member(refex(I-Ind,Cat,Lem,Fea,Sems),Refs)),
    matchfeatsmoodtense(Featt,MoodTense1),
    matchfeatsmoodtense(Fea,MoodTense2),
    matchtensecomp(MoodTense1,MoodTense2,MoodTense),
    (Sems=[Synt,Aspt,SemCat],SFeats=[Synt-Aspt-SemCat];
           Sems=[_,Synt,Aspt,SemCat],SFeats=[Synt-Aspt-SemCat];Sems=[polsem=Pol|SFeats]),
    identview(SemCat,View),
    identfact(MoodTense,View,Factive),
    identchange(View,MoodTense,Aspt,Change),
    remove(i(Ind,W,Cat,Lem-Feat),Comp,Comp1),
    remove(refex(I-Ind,Cat,Lemm,Fea,Sems),Refs,Refs1),
    mapsemverb(Refs1,Comp1,I,SemP),
    !.
mapsemverb(Refs,[i(Ind0,W0,Cat0,Lems-Featt)|Comp],I,[subcat=SFeats,modale=Lems,parola=W,lemma=Lem,change=Change,view=View,factive=nonfactive,moodtense=MoodTense|SemP]):-
    modal(Lems),
    member(i(Ind,W,Cat,Lem-Feat),Comp),
    (member(refex(I-Ind,Cat,W-Lem,Fea,Sems),Refs);
     member(refex(I-Ind,Cat,Lem,Fea,Sems),Refs)),
    matchfeatsmoodtense(Featt,MoodTense1),
    matchfeatsmoodtense(Fea,MoodTense2),
    matchtensecomp(MoodTense1,MoodTense2,MoodTense),
    (Sems=[Synt,Aspt,SemCat],SFeats=[Synt-Aspt-SemCat];
          Sems=[_,Synt,Aspt,SemCat],SFeats=[Synt-Aspt-SemCat];Sems=[polsem=Pol|SFeats]),
    identview(SemCat,View),
    identfact(MoodTense,View,Factive),
    identchange(View,MoodTense,Aspt,Change),
    remove(i(Ind,W,Cat,Lem-Feat),Comp,Comp1),
    remove(refex(I-Ind,Cat,Lemm,Fea,Sems),Refs,Refs1),
    mapsemverb(Refs1,Comp1,I,SemP),
    !.
mapsemverb(Refs,[i(Ind0,W0,Cat0,Lems-Featt)|Comp],I,[subcat=[Synt-Aspt-SemCat],modale=Lems,parola=W,lemma=Lem,change=Change,view=View,factive=nonfactive,moodtense=MoodTense,auxiliary=Lem|SemP]):-
    modal(Lems),
    member(i(Ind,W,Cat,Lem-Feat),Comp),
    (coplb(Lem);coplh(Lem)),
    matchfeatsmoodtense(Featt,MoodTense1),
    matchfeatsmoodtense(Feat,MoodTense2),
    matchtensecomp(MoodTense1,MoodTense2,MoodTense),
    getroot(Lem,Root,Cong),
    pv(Root,Cong,Synt,Aspt,SemCat,Sub),
    identview(SemCat,View),
    identfact(MoodTense,View,Factive),
    identchange(View,MoodTense,Aspt,Change),
    remove(i(Ind,W,Cat,Lem-Feat),Comp,Comp1),
    mapsemverb(Refs,Comp1,I,SemP),
    !.
mapsemverb(Refs,[i(Ind0,W0,Cat0,Lems-Featt),i(Ind1,W1,Cat1,Lem1-Feat1)|Comp],I,[subcat=[Synt-Aspt-SemCat],parola=W,lemma=Lem,change=Change,Mod=Lem1,view=View,factive=Factive,moodtense=MoodTense,auxiliary=Lems|SemP]):-
    (coplb(Lems);coplh(Lems)),
    (reconstr(W1),Mod=reconstr;aspectv(W1),Mod=aspectv),
    member(i(Ind,W,Cat,Lem-Feat),Comp),
%    recuperaparts(Refs,W,Lem,Lem1,Fea,Sems,Refs1),
    matchfeatsmoodtense(Featt,MoodTense1),
    matchfeatsmoodtense(Feat,MoodTense2),
    matchtensecomp(MoodTense1,MoodTense2,MoodTense),
    getroot(Lem,Root,Cong),
    pv(Root,Cong,Synt,Aspt,SemCat,Sub),
    identview(SemCat,View),
    identfact(MoodTense,View,Factive),
    identchange(View,MoodTense,Aspt,Change),
    remove(i(Ind,W,Cat,Lem-Feat),Comp,Comp1),
    mapsemverb(Refs,Comp1,I,SemP),
    !.
mapsemverb(Refs,[i(Ind0,W0,Cat0,Lems-Featt),i(Ind1,W1,Cat1,Lem1-Feat1)|Comp],I,[subcat=SFeats,modale=Lem1,parola=W,lemma=Lem1,change=Change,view=View,factive=Factive,moodtense=MoodTense,auxiliary=Lems|SemP]):-
    (coplb(Lems);coplh(Lems)),
    modal(Lem1),
    length(Comp,L),1<L,
    reverse(Comp,RevComp),
    member(i(Ind,W,Cat,Lem-Feat),RevComp),
    recuperaparts(Refs,W,Lem,Lem1,Fea,Sems,Refs1),
    matchfeatsmoodtense(Featt,MoodTense1),
    matchfeatsmoodtense(Fea,MoodTense2),
    matchtensecomp(MoodTense1,MoodTense2,MoodTense),
    (Sems=[Synt,Aspt,SemCat],SFeats=[Synt-Aspt-SemCat];
          Sems=[_,Synt,Aspt,SemCat],SFeats=[Synt-Aspt-SemCat];Sems=[polsem=Pol|SFeats]),
    identview(SemCat,View),
    identfact(MoodTense,View,Factive),
    identchange(View,MoodTense,Aspt,Change),
    remove(i(Ind,W,Cat,Lem-Feat),Comp,Comp1),
    mapsemverb(Refs1,Comp1,I,SemP),
    !.
mapsemverb(Refs,[i(Ind0,W0,Cat0,Lems-Featt),i(Ind1,W1,Cat1,Lem1-Feat1)|Comp],I,[subcat=SFeats,modale=Lem1,parola=W,lemma=Lem1,change=Change,view=View,factive=Factive,moodtense=MoodTense,auxiliary=Lems|SemP]):-
    (coplb(Lems);coplh(Lems)),
    modal(Lem1),
    length(Comp,L),1=L,
    reverse(Comp,RevComp),
    member(i(Ind,W,Cat,Lem-Feat),RevComp),
    recuperaparts(Refs,W,Lem,Lem1,Fea,Sems,Refs1),
    matchfeatsmoodtense(Featt,MoodTense1),
    matchfeatsmoodtense(Fea,MoodTense2),
    matchtensecomp(MoodTense1,MoodTense2,MoodTense),
    (Sems=[Synt,Aspt,SemCat],SFeats=[Synt-Aspt-SemCat];
          Sems=[_,Synt,Aspt,SemCat],SFeats=[Synt-Aspt-SemCat];Sems=[polsem=Pol|SFeats]),
    identview(SemCat,View),
    identfact(MoodTense,View,Factive),
    identchange(View,MoodTense,Aspt,Change),
    remove(i(Ind,W,Cat,Lem-Feat),Comp,Comp1),
    mapsemverb(Refs1,Comp1,I,SemP),
    !.
mapsemverb(Refs,[i(Ind0,W0,Cat0,Lems-Featt)|Comp],I,[subcat=SFeats,parola=W,lemma=Lem1,change=Change,view=View,factive=Factive,moodtense=MoodTense,auxiliary=Lems|SemP]):-
    (coplb(Lems);coplh(Lems)),
    length(Comp,L),1<L,
    reverse(Comp,RevComp),
    member(i(Ind,W,Cat,Lem-Feat),RevComp),
    recuperaparts(Refs,W,Lem,Lem1,Fea,Sems,Refs1),
    matchfeatsmoodtense(Featt,MoodTense1),
    matchfeatsmoodtense(Fea,MoodTense2),
    matchtensecomp(MoodTense1,MoodTense2,MoodTense),
    (Sems=[Synt,Aspt,SemCat],SFeats=[Synt-Aspt-SemCat];
          Sems=[_,Synt,Aspt,SemCat],SFeats=[Synt-Aspt-SemCat];Sems=[polsem=Pol|SFeats]),
    identview(SemCat,View),
    identfact(MoodTense,View,Factive),
    identchange(View,MoodTense,Aspt,Change),
    remove(i(Ind,W,Cat,Lem-Feat),Comp,Comp1),
    mapsemverb(Refs1,Comp1,I,SemP),
    !.
mapsemverb(Refs,[i(Ind0,W0,Cat0,Lems-Featt)|Comp],I,[subcat=SFeats,parola=W,lemma=Lem1,change=Change,view=View,factive=Factive,moodtense=MoodTense,auxiliary=Lems|SemP]):-
    (coplb(Lems);coplh(Lems)),
    member(i(Ind,W,Cat,Lem-Feat),Comp),
    recuperaparts(Refs,W,Lem,Lem1,Fea,Sems,Refs1),
    matchfeatsmoodtense(Featt,MoodTense1),
    matchfeatsmoodtense(Fea,MoodTense2),
    matchtensecomp(MoodTense1,MoodTense2,MoodTense),
    (Sems=[Synt,Aspt,SemCat],SFeats=[Synt-Aspt-SemCat];
          Sems=[_,Synt,Aspt,SemCat],SFeats=[Synt-Aspt-SemCat];Sems=[polsem=Pol|SFeats]),
    identview(SemCat,View),
    identfact(MoodTense,View,Factive),
    identchange(View,MoodTense,Aspt,Change),
    remove(i(Ind,W,Cat,Lem-Feat),Comp,Comp1),
    mapsemverb(Refs1,Comp1,I,SemP),
    !.
mapsemverb(Refs,[i(Ind0,W0,Cat0,Lems-Featt)|Comp],I,[subcat=[Synt-Aspt-SemCat],parola=W,lemma=Lem,change=Change,view=View,factive=Factive,moodtense=MoodTense,auxiliary=Lems|SemP]):-
    (coplb(Lems);coplh(Lems)),
    member(i(Ind,W,Cat,Lem-Feat),Comp),
    (coplb(Lem);coplh(Lem)),
    matchfeatsmoodtense(Featt,MoodTense1),
    matchfeatsmoodtense(Feat,MoodTense2),
    matchtensecomp(MoodTense1,MoodTense2,MoodTense),
    getroot(Lem,Root,Cong),
    pv(Root,Cong,Synt,Aspt,SemCat,Sub),
    identview(SemCat,View),
    identfact(MoodTense,View,Factive),
    identchange(View,MoodTense,Aspt,Change),
    remove(i(Ind,W,Cat,Lem-Feat),Comp,Comp1),
    mapsemverb(Refs,Comp1,I,SemP),
    !.
mapsemverb(Refs,[i(Ind,W,Cat,Lem-Feat)|Comp],I,[change=Change,modale=Lem,view=internal,moodtense=MoodTense|SemP]):-
    nonvar(Lem),
    modal(Lem),
    matchfeatsmoodtense(Feat,MoodTense),
    identchange(internal,MoodTense,Aspt,Change),
    mapsemverb1(Refs,Comp,I,SemP1),
    (remove(factive=_,SemP1,SemP2);true,SemP2=SemP1),
    append(SemP2,[factive=nonfactive],SemP),
    !.
mapsemverb(Refs,[i(Ind,W,Cat,Lem-Feat)|Comp],I,[subcat=SFeats,parola=W,lemma=Lem,change=Change,view=View,factive=Factive,moodtense=MoodTense|SemP]):-
    (member(refex(I-Ind,Cat,W-Lem,Fea,Sems),Refs);
     member(refex(I-Ind,Cat,Lem,Fea,Sems),Refs)),
%    member(refex(I-Ind,Cat,Lem,Feat,Sems),Refs),
    Cat\=avv,Cat\=av,Cat\=avvl,
    matchfeatsmoodtense(Feat,MoodTense),
    (Sems=[Synt,Aspt,SemCat],SFeats=[Synt-Aspt-SemCat];Sems=[_,Synt,Aspt,SemCat],SFeats=[Synt-Aspt-SemCat];Sems=[polsem=Pol|SFeats]),
    identview(SemCat,View),
    identfact(MoodTense,View,Factive),
    identchange(View,MoodTense,Aspt,Change),
    mapsemverb(Refs,Comp,I,SemP),
    !.
mapsemverb(Refs,[i(Ind,W,Cat,Lem-Feat)|Comp],I,[subcat=[],parola=W,lemma=Lem,view=View,factive=Factive,moodtense=MoodTense|SemP]):-
    nonvar(Feat),
    matchfeatsmoodtense(Feat,MoodTense),
    check_vcat(Cat),
    identview(MoodTense,View),
    identfact(MoodTense,View,Factive),
    mapsemverb(Refs,Comp,I,SemP),
    !.
/*
mapsemverb(Refs,[i(Ind,W,Cat,Lem-Feat)|Comp],I,[parola=W,lemma=Lem,view=View,factive=Factive,moodtense=MoodTense|SemP]):-
    nonvar(Feat),
    member(mood=Mood,Feat),
    member(tense=Tense,Feat),
    matchmoodtense(Mood,Tense,MoodTense),
    identview(MoodTense,View),
    identfact(MoodTense,View,Factive),
    mapsemverb(Refs,Comp,I,SemP),
    !.
*/
mapsemverb(Refs,[i(Ind,W,Cat,Lem-Feat)|Comp],I,SemP):-
    negazione(Lem),
    member(i(Ind1,W1,Cat1,Lem1-Feat1),Comp),(Lem\=Lem1,negazione(Lem1);negazione(Lem1)),
    mapsemverb(Refs,Comp,I,SemP),
    !.
mapsemverb(Refs,[i(Ind,W,Cat,Lem-Feat)|Comp],I,[negazione=Lem,polsem=negative|SemP]):-
    negazione(Lem),
    mapsemverb(Refs,Comp,I,SemP),
    !.
mapsemverb(Refs,[i(Ind,W,Cat,LemFeat)|Comp],I,SemP):-
    negazione(W),
    member(i(Ind1,W1,Cat1,Lem1-Feat1),Comp),(W\=W1,negazione(W1);negazione(W1)),
    mapsemverb(Refs,Comp,I,SemP),
    !.
mapsemverb(Refs,[i(Ind,W,Cat,LemFeat)|Comp],I,[negazione=W,polsem=negative|SemP]):-
    negazione(W),
    mapsemverb(Refs,Comp,I,SemP),
    !.
mapsemverb(Refs,[i(Ind,W,Cat,LemFeat)|Comp],I,[accept=W,polsem=positive|SemP]):-
    accept(W),
    mapsemverb(Refs,Comp,I,SemP),
    !.
mapsemverb(Refs,[i(Ind,W,Cat,LemFeat)|Comp],I,[evid=W,polsem=positive|SemP]):-
    evids(W),
    mapsemverb(Refs,Comp,I,SemP),
    !.
mapsemverb(Refs,[i(Ind,W,Cat,LemFeat)|Comp],I,[evid=W,polsem=positive|SemP]):-
    certainavv(Avvs),
    (member(W,Avvs);tolower(W,W1),member(W1,Avvs)),
    mapsemverb(Refs,Comp,I,SemP),
    !.
mapsemverb(Refs,[i(Ind,W,Cat,LemFeat)|Comp],I,[evid=W,polsem=positive|SemP]):-
    positivecomment(Avvs),
    (member(W,Avvs);tolower(W,W1),member(W1,Avvs)),
    mapsemverb(Refs,Comp,I,SemP),
    !.
mapsemverb(Refs,[i(Ind,W,Cat,LemFeat)|Comp],I,[modale1=W,view=internal,polsem=positive|SemP]):-
    modalavv(Avvs),
    (member(W,Avvs);tolower(W,W1),member(W1,Avvs)),
    mapsemverb(Refs,Comp,I,SemP),
    !.
mapsemverb(Refs,[i(Ind,W,Cat,LemFeat)|Comp],I,SemP):-
    mapsemverb(Refs,Comp,I,SemP),
    !.
mapsemverb(Refs,[_/_|Comp],I,SemP):-
    mapsemverb(Refs,Comp,I,SemP),
    !.

    
mapsemverb1(Refs,[i(Ind,W,Cat,Lem-Feat)|Comp],I,[parola=W,lemma=Lem|SemP]):-
    (member(refex(I-Ind,Cat,W-Lem,Fea,Sems),Refs);
     member(refex(I-Ind,Cat,Lem,Fea,Sems),Refs)),
%    member(refex(I-Ind,Cat,Lem,Feat,Sems),Refs),
    (Sems=[Synt,Aspt,SemCat];Sems=[_,Synt,Aspt,SemCat];Sems=[polsem=Pol|Feats]),
    mapsemverb(Refs,Comp,I,SemP),
    !.
mapsemverb1(Refs,[i(Ind,W,Cat,Lem-Feat)|Comp],I,[modale=Lem|SemP]):-
    modal(Lem),
    mapsemverb(Refs,Comp,I,SemP),
    !.
mapsemverb1(Refs,[i(Ind,W,Cat,Lem-Feat)|Comp],I,[parola=W,lemma=Lem|SemP]):-
    member(mfeats=MFea,Feat),
    mapsemverb(Refs,Comp,I,SemP),
    !.
mapsemverb1(Refs,[i(Ind,W,Cat,Lem-Feat)|Comp],I,[parola=W,lemma=Lem|SemP]):-
    member(mood=Mood,Feat),
    member(tense=Tense,Feat),
    mapsemverb(Refs,Comp,I,SemP),
    !.
mapsemverb1(Refs,[i(Ind,W,Cat,LemFeat)|Comp],I,SemP):-
    mapsemverb1(Refs,Comp,I,SemP),
    !.

checkoutslemsverbs(_,[i(Ind,W,Cat,Lem-Feat)],[],[i(Ind,W,Cat,Lem-Feat)],[]):-!.
checkoutslemsverbs(_,[i(Ind,W,Cat,Lem-Feat)],Lemmed,[i(Ind,W,Cat,Lem-Feat)],Lemmed):-
    W\=Lem,
    !.
checkoutslemsverbs(Ind1,[i(Ind,W,Cat,Lem-Feat)|Rest],Lemmed,[i(Ind,W,Cat,Lem-Feat)|Lems],Lemmedd):-
    length(Rest,L), 1=<L,
    (coplb(W);coplh(W);coplb(Lem);coplh(Lem);modal(W);Lem=stato;Lem=stare;Lem=andare;Lem=venire;reconstr(Lem);aspectv(Lem);
    Cat=clit;Cat=neg;Cat=avv;Cat=avvl;Cat=av),
    checkoutslemsverbs(Ind1,Rest,Lemmed,Lems,Lemmedd),
    !.
checkoutslemsverbs(Ind1,[i(Ind,W,Cat,LemFeat)|Rest],Lemmed,[i(Ind,W,Cat,LemFeat)|Lems],Lemmedd):-
    length(Rest,L), 1=<L,
    (Cat=clit;Cat=neg;Cat=av;Cat=avvl;Cat=avv),
    checkoutslemsverbs(Ind1,Rest,Lemmed,Lems,Lemmedd),
    !.
checkoutslemsverbs(_,[i(Ind,W,Cat,Lem-Feat)|Rest],Lemmed,[i(Ind,W,Cat,Lem-Feat)|Rest],Lemmed):-
    length(Rest,L), L=<1,
    (coplb(W);coplh(W);coplb(Lem);coplh(Lem);modal(W);Lem=stare;Lem=andare;Lem=venire;reconstr(Lem);aspectv(Lem)),
    !.
checkoutslemsverbs(Ind1,[i(Ind,W,Cat,LemFeat)|Rest],Lemmed,[i(Ind,W,Cat,LemFeat)],Lemmd):-
    Ind1=Ind,
    (Rest\=[];Rest=[],check_vcat(Cat)),
    append(Rest,Lemmed,Lemmd),!.
checkoutslemsverbs(_,[i(Ind,W,Cat,Lem-Feat)],Lemmed,[i(Ind,W,Cat,Lem-Feat)],Lemmed):-
    Lemmed=[i(Ind1,W1,Cat1,Lem1-Feat1)|Lemmed1],
    nogen_member(mfeats=Fe,Feat),
    nogen_member(mfeats=Fe,Feat1),
   !.
checkoutslemsverbs(_,[i(Ind,W,Cat,Lem-Feat)],Lemmed,[i(Ind,W,Cat,Lem-Feat)],Lemmed):-
    (Cat=ppas;nogen_member(mood=inf,Feat);nogen_member(mfeats=ms,Feat);
    nogen_member(mfeats=fl,Feat);nogen_member(mood=part,Feat)),
    !.
checkoutslemsverbs(_,[i(Ind,W,Cat,LemFeat)],Lemmed,[i(Ind,W,Cat,LemFeat),i(Ind1,W1,Cat1,Lem1-Feat)],Lemmed1):-
    (Cat=avv;Cat=av;Cat=avvl),Lemmed=[i(Ind1,W1,Cat1,Lem1-Feat)|Lemmed1],
    Dif is Ind1 - Ind, Dif = 2,
    (nogen_member(mfeats=ms,Feat);nogen_member(mfeats=tsms,Feat);
      nogen_member(mfeats=fs,Feat);nogen_member(mfeats=tsfs,Feat);
      nogen_member(mfeats=mp,Feat);nogen_member(mfeats=tsmp,Feat);
      nogen_member(mfeats=fp,Feat);nogen_member(mfeats=tsfp,Feat)),
    !.
checkoutslemsverbs(Ind1,[i(Ind,W,Cat,LemFeat)],Lemmed,[],[i(Ind,W,Cat,LemFeat)|Lemmed]):-!.
checkoutslemsverbs(Ind1,[],Lemmed,[],Lemmed):-!.
checkoutslemsverbs(Ind1,[i(Ind,W,Cat,Lem-Feat)|Rest],Lemmed,[i(Ind,W,Cat,Lem-Feat)],Lemmd):-
    Ind1 < Ind,
    Rest\=[], check_vcat(Cat),
    Rest=[i(Ind2,W1,Cat1,Lem1-Feat1)|Lemmed1],
    feats_pers_num(Feat, Agr),
    feats_pers_num(Feat1, Agr1),
    match(Agr, Agr1, TF), TF = false,
    append(Rest,Lemmed,Lemmd),
    !.
checkoutslemsverbs(Ind1,[i(Ind,W,Cat,Lem-Feat)|Rest],Lemmed,[i(Ind,W,Cat,Lem-Feat),i(Ind2,W1,Cat1,Lem1Feat1)],Lemmed):-
    Ind1 < Ind,
    Rest\=[], check_vcat(Cat),
    Rest=[i(Ind2,W1,Cat1,Lem1Feat1)],
    (Cat1=avv;Cat1=av;Cat1=avvl),
    !.

identifycompouns(N,[],[]):-!.
identifycompouns(N,[i(Ind,W,Cat,LemFeat),i(Ind1,W1,Cat1,Lem1-Feat1)|VerbCs],[N-Comp|OutV]):-
    check_vcat(Cat1),checkpastpartic(v,W1),
    (check_auxcat(Cat);coplb(W);coplh(W)),
    VerbCs=[i(Ind2,W2,Cat2,Lem2-Feat2)|Rest],
    \+ checkpastpartic(v,W2), \+ check_vcat(Cat2),
    Ind1 is Ind+1,
    (Ind2 is Ind1+1;
      Ind2 is Ind1+2, 
      (Lem\=essere;Lem=essere,\+member(mfeats=fl,Feat1),\+member(mood=inf,Feat1))
      ),
    W2=Lem2,
    Comp=[i(Ind,W,Cat,LemFeat),i(Ind1,W1,Cat1,Lem1-Feat1)],
    N1 is N + 1,
    Lemmedd=VerbCs,
    identifycompouns(N1,Lemmedd,OutV),
    !.
identifycompouns(N,[i(Ind0,W0,Cat0,Lem0Feat0)|VerbCs],[N-Comp|OutV]):-
    \+ check_vcat(Cat0),
    VerbCs=[i(Ind1,W1,Cat1,Lem1-Feat1)|Rest],LemF=Lem1-Feat1,
    (check_auxcat(Cat1);coplb(W1);coplh(W1);coplb(Lem1);coplh(Lem1);
        modal(W1);Lem1=stare;Lem1=andare;Lem1=venire;reconstr(Lem1);aspectv(Lem1);Cat1=neg),
    (Ind1 is Ind0+1;
       Ind1 is Ind0+2),
    identifycomps(Ind0,[i(Ind1,W1,Cat1,Lem1-Feat1)|Rest],Lemmed,Out),
    checkoutslemsverbs(Ind1,Out,Lemmed,Outs,Lemmedd),
    Comp=[i(Ind0,W0,Cat0,Lem0Feat0)|Outs],
    N1 is N + 1,
    identifycompouns(N1,Lemmedd,OutV),
    !.
identifycompouns(N,[i(Ind0,W0,Cat0,Lem0Feat0),i(Ind1,W1,Cat1,Lem1Feat1)|VerbCs],[N-Comp|OutV]):-
    \+ check_vcat(Cat0),\+ check_vcat(Cat1),
    VerbCs=[i(Ind,W,Cat,LemFeat)|Rest],LemF=Lem1-Feat1,
    Ind1 is Ind0+1,
    (check_auxcat(Cat1);coplb(W1);coplh(W1);coplb(Lem1);coplh(Lem1);
        modal(W1);Lem1=stare;Lem1=venire;Lem1=andare;reconstr(Lem1);aspectv(Lem1);Cat1=neg),
    (Ind is Ind1+1;
       Ind is Ind1+2),
    identifycomps(Ind1,[i(Ind,W,Cat,LemFeat)|Rest],Lemmed,Out),
    checkoutslemsverbs(Ind,Out,Lemmed,Outs,Lemmedd),
    Comp=[i(Ind0,W0,Cat0,Lem0Feat0),i(Ind1,W1,Cat1,Lem1Feat1)|Outs],
    N1 is N + 1,
    identifycompouns(N1,Lemmedd,OutV),
    !.
identifycompouns(N,[i(Ind,W,Cat,Lem-Feat)|VerbCs],[N-Comp|OutV]):-
    check_vcat(Cat),
    VerbCs=[i(Ind1,intenzione,Cat1,Lem1-Feat1),i(Ind2,di,Cat2,di)|Rest],
    Ind1 is Ind+1,
    identifycomps(Ind2,Rest,Lemmed,Out),
    checkoutslemsverbs(Ind2,Out,Lemmed,Outs,Lemmedd),
    Comp=[i(Ind,W,Cat,intendere-Feat)|Outs],
    N1 is N + 1,
    identifycompouns(N1,Lemmedd,OutV),
    !.
identifycompouns(N,[i(Ind,W,Cat,Lem-Feat)|VerbCs],[N-Comp|OutV]):-
    check_vcat(Cat),
    VerbCs=[i(Ind1,intenzione,Cat1,Lem1-Feat1),i(Ind2,di,Cat2,di),i(Ind3,non,Cat3,non)|Rest],
    Ind1 is Ind+1,
    identifycomps(Ind3,Rest,Lemmed,Out),
    checkoutslemsverbs(Ind3,Out,Lemmed,Outs,Lemmedd),
    Comp=[i(Ind,W,Cat,intendere-Feat),i(Ind3,non,Cat3,non)|Outs],
    N1 is N + 1,
    identifycompouns(N1,Lemmedd,OutV),
    !.
identifycompouns(N,[i(Ind,W,Cat,Lem-Feat)|VerbCs],[N-Comp|OutV]):-
    (modal(W);Lem=venire;Lem=andare; Lem=stare;reconstr(Lem);aspectv(Lem);Cat=clit;Cat=neg),
    (VerbCs=[i(Ind1,W1,Cat1,Lem1-Feat1)|Rest],LemF=Lem1-Feat1
      ;
    VerbCs=[i(Ind1,W1,Cat1,Lem1Feat1)|Rest],LemF=Lem1Feat1),
    (Ind1 is Ind+1;
       Ind1 is Ind+2
      ),
    identifycomps(Ind,[i(Ind1,W1,Cat1,LemF)|Rest],Lemmed,Out),
    checkoutslemsverbs(Ind1,Out,Lemmed,Outs,Lemmedd),
    Comp=[i(Ind,W,Cat,Lem-Feat)|Outs],
    N1 is N + 1,
    identifycompouns(N1,Lemmedd,OutV),
    !.
identifycompouns(N,[i(Ind,W,Cat,Lem-Feat)|VerbCs],[N-Comp|OutV]):-
    (check_auxcat(Cat), Lem\=essere, Lem\=avere;
         modal(W);Lem=venire;Lem=andare;Lem=stare;reconstr(Lem);aspectv(Lem);Cat=clit;Cat=neg),
    (VerbCs=[i(Ind1,W1,Cat1,Lem1-Feat1)|Rest],LemF=Lem1-Feat1;
    VerbCs=[i(Ind1,W1,Cat1,Lem1Feat1)|Rest],LemF=Lem1Feat1),
    (Ind1 is Ind+1;
       Ind1 is Ind+2, 
      (Lem\=essere;Lem=essere,\+member(mood=inf,Feat1), \+member(mfeats=fl,Feat1))
      ),
    identifycomps(Ind,[i(Ind1,W1,Cat1,LemF)|Rest],Lemmed,Out),
    checkoutslemsverbs(Ind1,Out,Lemmed,Outs,Lemmedd),
    Comp=[i(Ind,W,Cat,Lem-Feat)|Outs],
    N1 is N + 1,
    identifycompouns(N1,Lemmedd,OutV),
    !.
identifycompouns(N,[i(Ind,W,Cat,LemFeat)|VerbCs],[N-Comp|OutV]):-
    (VerbCs=[i(Ind1,W1,Cat1,Lem1-Feat1)|Rest],LemF=Lem1-Feat1;
    VerbCs=[i(Ind1,W1,Cat1,Lem1Feat1)|Rest],LemF=Lem1Feat1),
    Ind1 is Ind+1,
    \+ check_vcat(Cat1),
    identifycomps(Ind1,Rest,Lemmed,Out),
    checkoutslemsverbs(Ind1,Out,Lemmed,Outs,Lemmedd),
    Comp=[i(Ind,W,Cat,LemFeat),i(Ind1,W1,Cat1,LemF)|Outs],
    N1 is N + 1,
    identifycompouns(N1,Lemmedd,OutV),
    !.
identifycompouns(N,[i(Ind,W,Cat,LemFeat)|VerbCs],[N-Comp|OutV]):-
    VerbCs=[i(Ind1,W1,Cat1,Lem1-Feat1)|Rest],LemF=Lem1-Feat1,
%    VerbCs=[i(Ind1,W1,Cat1,Lem1Feat1)|Rest],LemF=Lem1Feat1),
    Ind1 is Ind+1,
    check_vcat(Cat1),
    (
    (\+check_vcat(Cat);      
      Cat=vc;
      check_auxcat(Cat))
      ;
     (Lem1=essere;Lem1=avere),
      member(mfeats=MF,Feat1),
        (MF=fl;MF=gl),
     check_auxcat(Cat)
        ), 
    identifycomps(Ind1,Rest,Lemmed,Out),
      Out=[i(Ind2,W2,Cat2,Lem2-Feat2)],
      Ind2 is Ind1+1,
      (Lem2\=essere;Lem2=essere,\+member(mfeats=fl,Feat2),\+member(mood=inf,Feat2)),
    checkoutslemsverbs(Ind1,Out,Lemmed,Outs,Lemmedd),
    (Outs=[],
     (
      (Cat=vc;check_auxcat(Cat)),
      member(mfeats=MF,Feat1),
      MF\=fl,MF\=gl
      ;
      Cat\=vc, \+check_auxcat(Cat))
      ;
      Outs\=[]
      ),
    Comp=[i(Ind,W,Cat,LemFeat),i(Ind1,W1,Cat1,LemF)|Outs],
    N1 is N + 1,
    identifycompouns(N1,Lemmedd,OutV),
    !.
identifycompouns(N,[i(Ind,W,Cat,LemFeat)|VerbCs],[N-Comp|OutV]):-
    VerbCs=[i(Ind1,W1,Cat1,Lem1-Feat1)|Rest],LemF=Lem1-Feat1,
    Ind1 is Ind+1,
    check_vcat(Cat1),
    (
    (\+check_vcat(Cat);      
      Cat=vc;
      check_auxcat(Cat))
      ;
     (Lem1=essere;Lem1=avere),
      member(mfeats=MF,Feat1),
        (MF=fl;MF=gl),
     check_auxcat(Cat)
     ), 
    (Rest=[],
     (
      (Cat=vc;check_auxcat(Cat)),
      member(mfeats=MF,Feat1),
      MF\=fl,MF\=gl
      ;
      Cat\=vc, \+check_auxcat(Cat))
      ;
      Rest\=[]
      ),
    Comp=[i(Ind,W,Cat,LemFeat),i(Ind1,W1,Cat1,LemF)],
    N1 is N + 1,
    Lemmedd=Rest,
    identifycompouns(N1,Lemmedd,OutV),
    !.
identifycompouns(N,[i(Ind,W,Cat,LemFeat)|VerbCs],[N-Comp|OutV]):-
    VerbCs=[i(Ind1,W1,Cat1,Lem1-Feat1)|Rest],LemF=Lem1-Feat1,
    Ind1 is Ind+1,
    check_vcat(Cat1),
     (Lem=essere;Lem=avere),
      member(mfeats=MF,Feat),
        (MF=fl;MF=gl),
    Comp=[i(Ind,W,Cat,LemFeat),i(Ind1,W1,Cat1,LemF)],
    N1 is N + 1,
    Lemmedd=Rest,
    identifycompouns(N1,Lemmedd,OutV),
    !.
identifycompouns(N,[i(Ind,W,Cat,LemFeat)|VerbCs],[N-Comp|OutV]):-
    \+ check_vcat(Cat),
    (VerbCs=[i(Ind1,W1,Cat1,Lem1-Feat1)|Rest],LemF=Lem1-Feat1;
    VerbCs=[i(Ind1,W1,Cat1,Lem1Feat1)|Rest],LemF=Lem1Feat1),
    Ind1 is Ind+1,
    Comp=[i(Ind,W,Cat,LemFeat),i(Ind1,W1,Cat1,LemF)],
    N1 is N + 1,
    Lemmedd=Rest,
    identifycompouns(N1,Lemmedd,OutV),
    !.
identifycompouns(N,[i(Ind,W,Cat,LemFeat)|VerbCs],[N-[i(Ind,W,Cat,LemFeat)]|OutV]):-
    N1 is N + 1,
    identifycompouns(N1,VerbCs,OutV),
    !.


identifycomps(Ind,[i(Ind1,W1,Cat1,Lem1-Feat1),i(Ind2,W,Cat,Lem-Feat)|VerbCs],VerbCs,[i(Ind1,W1,Cat1,Lem1-Feat1),i(Ind2,W,Cat,Lem-Feat)]):-
     Ind1 is Ind+2,
     check_vcat(Cat1),
     (Lem1=essere;Lem1=avere),
     checkpastpartic(v,W),
    !.
identifycomps(Ind,[i(Ind1,W1,Cat1,Lem1Feat1)|VerbCs],Verbs,[i(Ind1,W1,Cat1,Lem1Feat1)|OutV]):-
    Ind1 is Ind+1,W1\=non,
    identifycomps(Ind1,VerbCs,Verbs,OutV),
    !.
identifycomps(Ind,[i(Ind1,W1,Cat1,Lem1-Feat1)|VerbCs],Verbs,[i(Ind1,W1,Cat1,Lem1-Feat1)|OutV]):-
    Ind1 is Ind+2,
    nonvar(Feat1),Feat1\=[],
    member(mfeats=fl,Feat1),
    identifycomps(Ind1,VerbCs,Verbs,OutV),
    !.
identifycomps(Ind,Verbs,Verbs,[]):-!.
    
serchverbc([],[]):-!.
serchverbc([i(Ind,W,Cat,LemFeat)|Lemmed],[i(Ind,W,Cat,LemFeat),i(Ind1,W1,Cat1,LemF)|VerbC]):-
    Cat=neg,
    (Lemmed=[i(Ind1,W1,Cat1,Lem1-Feat1)|Lemmed1],LemF=Lem1-Feat1;
    Lemmed=[i(Ind1,W1,Cat1,Lem1Feat1)|Lemmed1],LemF=Lem1Feat1),
    (check_vcat(Cat1);
     Cat1=clitabl;Cat1=clitdat;Cat1=clitac;Cat1=clit;
      Cat1=avv;Cat1=avvl;Cat1=av),
     member(i(Ind2,W2,Cat2,Lem2-Feat2),Lemmed1),
      check_vcat(Cat2), (Ind2 is Ind1+1;Ind2 is Ind1+2),
    serchverbc(Lemmed1,VerbC),
    !.
serchverbc([i(Ind,W,Cat,Lem-Feat)|Lemmed],[i(Ind,W,Cat,Lem-Feat),i(Ind1,W1,Cat1,LemF)|VerbC]):-
    check_vcat(Cat),
    (Lemmed=[i(Ind1,W1,Cat1,Lem1-Feat1)|Lemmed1],LemF=Lem1-Feat1;
    Lemmed=[i(Ind1,W1,Cat1,Lem1Feat1)|Lemmed1],LemF=Lem1Feat1),
    (Cat1=clitabl;Cat1=clitdat;Cat1=clitac;Cat1=clit;
     Cat1=avv;Cat1=avvl;Cat1=av),
     serchverbc(Lemmed1,VerbC),
    !.
serchverbc([i(Ind,W,Cat,LemFeat)|Lemmed],[i(Ind,W,Cat,LemFeat),i(Ind1,W1,Cat1,LemF)|VerbC]):-
    (Cat=clitabl;Cat=clitdat;Cat=clitac;Cat=clit;Cat=neg),
    (Lemmed=[i(Ind1,W1,Cat1,Lem1-Feat1)|Lemmed1],LemF=Lem1-Feat1;
    Lemmed=[i(Ind1,W1,Cat1,Lem1Feat1)|Lemmed1],LemF=Lem1Feat1),
    (check_vcat(Cat1); 
     Cat1=clitabl;Cat1=clitdat;Cat1=clitac;Cat1=clit;Cat1=neg;
      Cat1=avv;Cat1=avvl;Cat1=av),
      member(i(Ind2,W2,Cat2,Lem2-Feat2),Lemmed1),
      check_vcat(Cat2), (Ind2 is Ind1+1;Ind2 is Ind1+2),
    serchverbc(Lemmed1,VerbC),
    !.
serchverbc([i(Ind,W,Cat,LemFeat)|Lemmed],[i(Ind,W,Cat,LemFeat),i(Ind1,W1,Cat1,LemF)|VerbC]):-
    (Cat=clitabl;Cat=clitdat;Cat=clitac;Cat=clit;Cat=neg),
    (Lemmed=[i(Ind1,W1,Cat1,Lem1-Feat1)|Lemmed1],LemF=Lem1-Feat1;
    Lemmed=[i(Ind1,W1,Cat1,Lem1Feat1)|Lemmed1],LemF=Lem1Feat1),
    check_vcat(Cat1),
    serchverbc(Lemmed1,VerbC),
    !.
serchverbc([i(Ind,W,Cat,Lem-Feat)|Lemmed],[i(Ind,W,Cat,Lem-Feat),i(Ind1,W1,Cat1,Lem1Feat1),i(Ind2,W2,Cat2,Lem1Feat2)|VerbC]):-
    check_vcat(Cat),
    Lemmed=[i(Ind1,W1,Cat1,Lem1Feat1),i(Ind2,W2,Cat2,Lem1Feat2)|Lemmed1],
    (check_vcat(Cat1),(Cat2=avv;Cat2=avvl;Cat2=av); (Cat2=avv;Cat2=avvl;Cat2=av),(Cat1=avv;Cat1=avvl;Cat1=av)),
    serchverbc(Lemmed1,VerbC),
    !.
serchverbc([i(Ind,W,Cat,Lem-Feat)|Lemmed],[i(Ind,W,Cat,Lem-Feat),i(Ind1,W1,Cat1,Lem1Feat1)|VerbC]):-
    check_vcat(Cat),
    Lemmed=[i(Ind1,W1,Cat1,Lem1Feat1)|Lemmed1],
    (check_vcat(Cat1); Cat1=avv; Cat1=avvl;Cat1=av),
    serchverbc(Lemmed1,VerbC),
    !.
serchverbc([i(Ind,W,Cat,Lem-Feat)|Lemmed],[i(Ind,W,Cat,Lem-Feat),i(Ind1,W1,Cat1,Lem1Feat1)|VerbC]):-
    (check_vcat(Cat); Cat=avv;Cat=avvl;Cat=av),
    Lemmed=[i(Ind1,W1,Cat1,Lem1Feat1)|Lemmed1],
    check_vcat(Cat1),
    serchverbc(Lemmed1,VerbC),
    !.
serchverbc([i(Ind,W,Cat,LemFeat)|Lemmed],[i(Ind,W,Cat,LemFeat),i(Ind1,W1,Cat1,Lem1Feat1)|VerbC]):-
    (check_vcat(Cat); Cat=avv; Cat=avvl; Cat=av),
    Lemmed=[i(Ind1,W1,Cat1,Lem1Feat1)|Lemmed1],
    check_vcat(Cat1),
    serchverbc(Lemmed1,VerbC),
    !.
serchverbc([i(Ind,W,Cat,avere-Feat)|Lemmed],[i(Ind,W,Cat,avere-Feat),i(Ind1,intenzione,Cat1,Lem1Feat1),i(Ind2,di,Cat2,di),i(Ind3,W3,Cat3,LemFeat)|VerbC]):-
    check_vcat(Cat),
    Lemmed=[i(Ind1,intenzione,Cat1,Lem1Feat1),i(Ind2,di,Cat2,di),i(Ind3,W3,Cat3,LemFeat)|Lemmed1],
    check_vcat(Cat3),
    serchverbc(Lemmed1,VerbC),
    !.
serchverbc([i(Ind,W,Cat,Lem-Feat)|Lemmed],[i(Ind,W,Cat,Lem-Feat)|VerbC]):-
    check_vcat(Cat),
    checkpresentpart(W,Feat),
    serchverbc(Lemmed,VerbC),
    !.
serchverbc([i(Ind,W,Cat,L)|Lemmed],VerbC):-
    serchverbc(Lemmed,VerbC),
    !.

checkpresentpart(W,Feat):-
    member(mood=Part,Feat),
    member(tense=Pres,Feat),
    (Part\=part;
    Part=part,Pres\=pres),
    !.
checkpresentpart(W,Feat):-
    \+member(mood=part,Feat),
    !.
/*
 i(10,dato,v,dato-[mfeats=ms]),
  i(30,è,ause,essere-[sems=aux,mfeats=kl3s]),
  i(38,intende,v,intendere-[sems=intr,mfeats=kl3s]),
  i(39,dare,v,dare-[sems=intr,mfeats=fl]),
  i(48,assunti,v,assunto-[mfeats=mp]),
  i(56,si,clit,si-[sems=nom,mfeats='3spm']),
  i(57,
    traducano,
    v,
    tradurre - [ (cat = verb),
      (pred = (tradu + rre)),
      (scat = intr),
      (mood = subj),
      (tense = pres),
      (pers = 3),
      (num = p)
    ]),
  i(68,incoraggiato,v,incoraggiare-[sems=intr,mfeats=tsms]),
  i(79,ha,ausa,avere-[sems=aux,mfeats=kl3s]),
  i(80,invitato,v,invitato-[mfeats=ms]),
  i(84,chiarire,v,chiarire-[sems=intr,mfeats=fl]),
  i(91,consentire,v,consentire-[sems=tr,mfeats=fl]),
  i(97,applicare,v,applicare-[sems=tr,mfeats=fl])
*/

getfeatsem(W,Lemm,Semm,Fea,Pol):-
     findall(Sem,(wnit(Lemm,C,Code),
                  wnitf(Sem,C,Code)),Sem),
     sort(Sem,Semm),
     (atomic(Lemm),tolower(Lemm,Ww);is_list(Lemm),Ww=W;Ww=Lemm),
     ((nclp(W,Pol,Fea);nclp(Lemm,Pol,Fea);nclp(Ww,Pol,Fea));
      (check_itallex(Lemm,Pol);check_itallex(W,Pol);check_itallex(Ww,Pol)),
            Fea=[polsem=Pol]),
     !.
getfeatsem(W,Lemm,Semm,Fea,Pol):-
     findall(Sem,(wnit(Lemm,C,Code),
                  wnitf(Sem,C,Code)),Sem),
     sort(Sem,Semm), Pol=neut,
     Fea=[polsem=Pol],
     !.
     
ncreaterefexs(I,[],Minors,[]):-!.   
ncreaterefexs(I,[i(Ind,W,Cat,Lem,sn,Feat,N1,Func/Role)|Heads],Minors,[Agg|Refexs]):-     
     Agg=refex(I-Ind,Cat,Lem,Tratti,CatSem),
     W\=a, W\=e, \+ dets(Cat),
     up_wn(Lem,CatSem,_),CatSem\=[],
     genera_tratt(Feat,Lem,Tratti,Cat),
     ncreaterefexs(I,Heads,Minors,Refexs),
     !.
/*
ncreaterefexs([i(Ind,W,Cat,Lem,sn,Feat,N1,Func/Role)|Heads],Minors,[Agg|Refexs]):-     
     Agg=ref_ex(Ind,Lem,Tratti,CatSem),
     dets(Cat),Cat\=ag,
     pr(Type,Part,W,Pers,Gen,Num,CatSem),
     genera_tratt(Feat,Lem,Tratti,Cat),
     ncreaterefexs(Heads,Minors,Refexs),
     !.
ncreaterefexs([i(Ind,W,Cat,Lem,sn,Feat,N1,Func/Role)|Heads],Minors,[Agg|Refexs]):-     
     Agg=ref_ex(Ind,Lem,Tratti,CatSem),
     proncat(Cat),
     tolower(W,Ww),
     pr(Type,Part,Ww,Pers,Gen,Num,CatSem),
     genera_tratt(Feat,Lem,Tratti,Cat),
     ncreaterefexs(Heads,Minors,Refexs),
     !.
*/
ncreaterefexs(I,[i(Ind,W,Cat,Lem,sn,Feat,N1,Func/Role)|Heads],Minors,[Agg|Refexs]):-     
     Agg=refex(I-Ind,Cat,Lem,Tratti,CatSem),
     (Cat=nh,CatSem=[umano];Cat=npro,CatSem=[istituzione,umano]),
     genera_tratt(Feat,Lem,Tratti,Cat),
     ncreaterefexs(I,Heads,Minors,Refexs),
     !.
ncreaterefexs(I,[i(Ind,W,Cat,Lem,sn,Feat,N1,Func/Role)|Heads],Minors,[Agg|Refexs]):-     
     Agg=refex(I-Ind,Cat,Lem,Tratti,CatSem),
     recover_descs(Lem,List),
     is_list(List),
     member(First,List),
     (up_wn(First,CatSem,_),CatSem\=[]
     ;
     tolower(First,Ww),Ww\=First,
     up_wn(Ww,CatSem,_),CatSem\=[]
     ),
     genera_tratt(Feat,Lem,Tratti,Cat),
     ncreaterefexs(I,Heads,Minors,Refexs),
     !.
ncreaterefexs(I,[Head|Heads],Minors,Refexs):-     
     ncreaterefexs(I,Heads,Minors,Refexs),
     !.
/* difficilmente farà mancare - difficilmente=pos, mancare=neg */

countpols(Refs,Pol):-
    findall(P,(member(refex(I-Ind,Cat,Lem,Feat,Feas),Refs),
                        nogen_member(polsem=negative,Feas)),Pols),
    Pols\=[],
    findall(P,(member(refex(I-Ind,Cat,Lem,Feat,Feas),Refs),nogen_member(polsem=neg,Feas)),Pols1),
    length(Pols,L),
    length(Pols1,L1),
    (1=L,(L1=0,Pol=neg;Pol=pos)
     ;
     1<L,(L1=0,Pol=neg;Pol=pos)
     ),
    !.
countpols(Refs,Pol):-
    findall(Lem,(member(refex(I-Ind,Cat,Lem,Feat,Feas),Refs),
                nogen_member(polsem=neg,Feas)),Pols),
    length(Pols,L),
    L=1,
    findall(Lem,(member(refex(I-Ind,Cat,Lem,Feat,Feas),Refs),nogen_member(polsem=pos,Feas),
         swn(Lem,Ca,Ps),Ca=r
         ),Pols1),
    Pols1\=[],
    !.
countpols(Refs,Pol):-
    findall(Lem,(member(refex(I-Ind,Cat,Lem,Feat,Feas),Refs),
           nogen_member(polsem=neg,Feas)),Pols),
    length(Pols,L),
    (L=1,Pol=neg;Pol=pos),
    !.
countpols(Refs,pos):-!.
    
ncreaterefs(I,Costs,[],[]):-!. 
ncreaterefs(I,Costs,[i(Ind,W,Cat,LemFeat)|Heads],Refexs):- 
     grw(W),
     ncreaterefs(I,Costs,Heads,Refexs),
     !.
ncreaterefs(I,Costs,[i(Ind,W,Cat,LemFeat)|Heads],Refexs):-     
     atomic(W),Cat\=ag, 
     (Cat=[par];Cat=p;Cat=pt;Cat=pd;Cat=part;Cat=partdi;Cat=pda;
     Cat=partda;dets(Cat);W='-';Cat=rel;Cat=int;Cat=pk;Cat=cong;Cat=clitabl),
     ncreaterefs(I,Costs,Heads,Refexs),
     !.
ncreaterefs(I,Costs,[i(Ind,W,ag,LemFeat)|Heads],[Agg|Refexs]):-  
     (LemFeat=Lem-Feat;LemFeat=Lem,getcatfeats(Lem,ag,Gen,Num),
     atomic(Gen),atomic(Num),
     concat(Gen,Num,Ft),
     Feat=[mfeats=Ft]),
     Agg=refex(I-Ind,ag,W-Lem,Feat,[Synt,Aspt,CatSem]),
     atomic(W),
     tolower(W,Ww),
     stringof(List,Lem),
     reverse(List,[_|Rev]),
     reverse(Rev,Roo),
     stringof(Roo,Root),
     (pa(Root,Synt,Aspt,CatSem,Sub);Synt=restr,Aspt=statv,CatSem=statv),
     ncreaterefs(I,Costs,Heads,Refexs),
     !.
ncreaterefs(I,Costs,[i(Ind,W,Cat,LemFeat)|Heads],[Agg|Refexs]):-
     atomic(W),
     tolower(W,Low),
     (negazione(W);negazione(Low)),
     Agg=refex(I-Ind,Cat,W-LemFeat,negazione=W,[polsem=negative]),
     ncreaterefs(I,Costs,Heads,Refexs),
     !.
ncreaterefs(I,Costs,[i(Ind,W,Cat,non-non)|Heads],[Agg|Refexs]):-
     atomic(W),
     tolower(W,Low),
     Agg=refex(I-Ind,Cat,W-LemFeat,negazione=W,[polsem=negative]),
     ncreaterefs(I,Costs,Heads,Refexs),
     !.
ncreaterefs(I,Costs,[i(Ind,W,Cat,LemFeat)|Heads],[Agg|Refexs]):-     
     atomic(W),
     \+ check_vcat(Cat),  \+ nouncats(Cat), \+ proncat(Cat),
     (LemFeat=Lem-Feat;atomic(LemFeat),LemFeat=Lem,Feat=[]),
     (atomic(Lem),tolower(Lem,Ww);is_list(Lem),Ww=W;Ww=Lem),
    ((nclp(W,Pol,Fea);nclp(Lem,Pol,Fea);nclp(Ww,Pol,Fea)),Fit=Fea;
     (up_wn(Ww,Fea,_),Fea\=[];allsemavvs(Ww,Fea)),
     (check_itallex(Lem,Pol);check_itallex(W,Pol);check_itallex(Ww,Pol);Pol=neut),
       Fit=Fea),
     Agg=refex(I-Ind,Cat,W-Lem,Feat,Feas),
     append([polsem=Pol],Fit,Feas),
     ncreaterefs(I,Costs,Heads,Refexs),
     !.
ncreaterefs(I,Costs,[i(Ind,W,Cat,Lem-Feat)|Heads],[Agg|Refexs]):-     
     check_vcat(Cat),
     Agg=refex(I-Ind,Cat,W-Lem,NFeat,[Synt,Aspt,CatSem]),
     \+ check_auxcat(Cat),
     updatefeats(Ind,W,Costs,NewCosts,Feat,NFeat),
     extractaspsem(Costs,Lem,Synt,Aspt,CatSem),
     ncreaterefs(I,NewCosts,Heads,Refexs),
     !.
ncreaterefs(I,Costs,[i(Ind,W,Cat,LemFeat)|Heads],[Agg|Refexs]):-     
     atomic(W),
     check_vcat(Cat),
     (LemFeat=Lem-Feat;atomic(LemFeat),LemFeat=Lem,Feat=[]),
     (atomic(Lem),tolower(Lem,Ww);is_list(Lem),Ww=W;Ww=Lem),
    \+ coplb(W), \+coplh(W), \+coplb(Lem), \+coplh(Lem),
    \+modal(W), Lem\=stare, Lem\=fare,
%     Ww\=avere,Ww\=essere,
     (wnit(Ww,C,Code);
      (vlm(Ww,Lemm,_),atomic(Lemm);
       vlm(Ww,_,Lemm),atomic(Lemm)),
       wnit(Lemm,C,Code)),
     wnitf(Sem,C,Code),
%     selectsem(Sem),
     updatefeats(Ind,W,Costs,NewCosts,Feat,NFeat),
     Agg=refex(I-Ind,Cat,W-Lem,NFeat,[polsem=neut, cats=Sem]),
     ncreaterefs(I,NewCosts,Heads,Refexs),
     !.
ncreaterefs(I,Costs,[i(Ind,W,Cat,LemFeat)|Heads],[Agg|Refexs]):-     
     atomic(W),
     check_vcat(Cat),
     (LemFeat=Lem-Feat;atomic(LemFeat),LemFeat=Lem,Feat=[]),
     (atomic(Lem),tolower(Lem,Ww);is_list(Lem),Ww=W;Ww=Lem),
    \+ coplb(W), \+coplh(W), \+coplb(Lem), \+coplh(Lem),
    \+modal(W), Lem\=stare, Lem\=fare,
%     Ww\=avere,Ww\=essere,
     analtoken(W,Feas),member(Lem1-Fe,Feas),
     (wnit(Lem1,C,Code),
      wnitf(Sem,C,Code)
%      selectsem(Sem)
       ;
       Sem=nil),
     Agg=refex(I-Ind,Cat,W-Lem1,NFeat,[polsem=neut, cats=Sem]),
     updatefeats(Ind,W,Costs,NewCosts,Fe,NFeat),
     ncreaterefs(I,NewCosts,Heads,Refexs),
     !.
ncreaterefs(I,Costs,[i(Ind,W,Cat,Lem-Feat)|Heads],[Agg|Refexs]):-     
     check_vcat(Cat),
     Agg=refex(I-Ind,Cat,W-Lem,NFeat,[Synt,Aspt,CatSem]),
     auxupdatefeats(Ind,W,Costs,NewCosts,Feat,NFeat),
     extractaspsem(Costs,Lem,Synt,Aspt,CatSem),
     ncreaterefs(I,NewCosts,Heads,Refexs),
     !.

ncreaterefs(I,Costs,[Head|Heads],Refexs):-     
     ncreaterefs(I,Costs,Heads,Refexs),
     !.
updatefeats(Ind,W,Costs,NewCosts,Feat,NFeat):-
     member(N-CompV,Costs),
     reverse(CompV,[i(Ind,W,Cat,Lem-Feat)|Rev]),
     length(CompV,L),
     1<L,
     member(i(Ind1,W1,Cat1,Lem1-Feat1),CompV),Ind1\=Ind,
     check_vcat(Cat1),
     member(mfeats=MF,Feat1),
     append([infls=MF],Feat,NFeat),
     remove(N-CompV,Costs,NewCosts),
     !.
updatefeats(Ind,W,Costs,NewCosts,Feat,NFeat):-
     member(N-CompV,Costs),
     member(i(Ind,W,Cat,Lem-Feat),CompV),
     length(CompV,L),
     1<L,
%     member(i(Ind1,W1,Cat1,Lem1-Feat1),CompV),Ind1\=Ind,
     reverse(CompV,[i(Ind1,W1,Cat1,Lem1-Feat1)|Rev]),Ind1\=Ind,
     member(mfeats=MF,Feat1),
     append([infls=MF],Feat,NFeat),
     remove(N-CompV,Costs,NewCosts),
     !.
updatefeats(Ind,W,Costs,Costs,Feat,Feat):-
     !.
auxupdatefeats(Ind,W,Costs,NewCosts,Feat,Feat):-
     member(N-CompV,Costs),
     member(i(Ind,W,Cat,Lem-Feat),CompV),
     length(CompV,L),
     (L=1
     ;
     1<L,
     CompV=[i(Ind1,W1,Cat1,Lem1-Feat1)|_],
     (\+ check_vcat(Cat1),
      (L=<3,reverse(CompV,Rev), 
      Rev=[i(Ind2,W2,Cat2,Lem2-Feat2)|_],
       W=W2
       ;
       check_vcat(Cat1),
       (L=<4
        ;
        L=2))
       )),
     remove(N-CompV,Costs,NewCosts),
     !.


extractaspsem1(Lem,Synt,Aspt,CatSem):-     
     (getroot(Lem,Root,Cong),Lem1=Lem
       ;
       recover_descs(Lem,List),is_list(List),List=[Lem1|_],
       getroot(Lem1,Root,Cong) ),
     findfeatssemasp([],Root,Cong,Synt,Aspt,CatSem)
     ;
     (vlm(Verb,Lem,_),atomic(Lem);
       vlm(Verb,_,Lem),atomic(Lem)),
     Synt=tr, Aspt=activ, CatSem=exten,
     !.
extractaspsem(Cost,Lem,Synt,Aspt,CatSem):-     
     (getroot(Lem,Root,Cong),Lem1=Lem
       ;
       recover_descs(Lem,List),is_list(List),List=[Lem1|_],
       getroot(Lem1,Root,Cong) ),
     findfeatssemasp(Cost,Root,Cong,Synt,Aspt,CatSem)
     ;
     (vlm(Verb,Lem,_),atomic(Lem);
       vlm(Verb,_,Lem),atomic(Lem)),
     Synt=tr, Aspt=activ, CatSem=exten,
     !.

findfeatssemasp(Cost,Root,Cong,Synt,Aspt,CatSem):-
     findall(Synt-Aspt-CatSem,
               pv(Root,Cong,Synt,Aspt,CatSem,Sub),AllCats),
     AllCats\=[],
     length(AllCats,L),
     (L=1,
      AllCats=[Synt-Aspt-CatSem]
      ;
      1<L,
      (member(_-Verb,Cost),
       member(Clit,Verb),
       Clit=..[i,N,si,clit|_],
       (Refl=refl;Refl=refl_in),
       member(Refl-Aspt-CatSem,AllCats)
       ;
       (Refl=refl;Refl=refl_in),
       remove(Refl-As-CatS,AllCats,RestCats),
       member(Synt-Aspt-CatSem,RestCats),
       Synt\=refl_in,Synt\=refl
       ;
       member(Synt-Aspt-CatSem,AllCats))
       ),
       !.
       

% pv(arrampic,1,refl_in,achiev,posit,[np/subj1/agent/[rifl,+hum],pp/obl/locat/su/[-ani]]).
% pa(superstit,restr,statv,statv,[np/head/[+ani,-ani,+hum]]).

onlytagging([],[],File,[]):-!.
onlytagging([Ind|Inds],[Outs|Outalls],File, [Ind-Outs|Logs]):-
   initchunks,
   fp(Ind,Frase),
   ttagtext(1,Frase,Outs),
   disambs(Outs,Frase1),
   cleantags1(Outs,Frase1,Fras),
   write(Fras),
   nl,
   onlytagging(Inds,Outalls,File,Logs),
   !.
onlytagging([Ind|Inds],[Outs|Outalls],File, Logs):-
   onlytagging(Inds,Outalls,File,Logs),
   !.


onlytaggingall([],[],File,[]):-!.
onlytaggingall([Ind|Inds],[Outs|Outalls],File, [Ind-Fras|Logs]):-
   initchunks,
   fp(Ind,Frase),
   ttagtext(1,Frase,Outs),
   write(Outs),
   disambs(Outs,Frase1),
   cleantags1(Outs,Frase1,Fras),
   nl,
   onlytaggingall(Inds,Outalls,File,Logs),
   !.
onlytaggingall([Ind|Inds],[Outs|Outalls],File, Logs):-
   onlytaggingall(Inds,Outalls,File,Logs),
   !.

collectfuncsems(Funcs):-
   findall(A-B-Sem,(funcs(sem,A-B,Sem,_),nonvar(Sem),Sem\=[],Sem=[Se]),Funcss),
   appiattisci(Funcss,Funcs),
   !.
opintaggingall([],[],[],[],[]):-!.
opintaggingall([Ind|Inds],[Ind-ToLog|Outalls],[Ind-Tagged|File],[Ind-Fras|Logs],[Ind-Funcs|Funs]):-
   initchunks,
   fp(Ind,Frase),
   ttagtext(1,Frase,Outs),
%   write(Outs),told,
   disambs(Outs,Frase1),
   cleantags1(Outs,Frase1,Fras),
   convlemm1(1,Fras,Tagged),
   assertfrasecorr2(Frase,Ind),
   shallowparsing(Fras,Out,ToLog),
   collectfuncsems(Funcs),
%   createeventsall(Ind,Tagged,ToLog,Out,Events),
%   nl,
   opintaggingall(Inds,Outalls,File,Logs,Funs),
   !.
opintaggingall([Ind|Inds],Outalls,File, Logs,Funs):-
   opintaggingall(Inds,Outalls,File,Logs,Funs),
   !.

writeallrefs([]):-!.
writeallrefs([Ref|RefExs]):-
   writenl(_,Ref),nl,
   writeallrefs(RefExs),
   !.
writeoutlemm([]):-!.
writeoutlemm([W-Log-L|Logs]):-
   writenl(_,W-Log-L),
   writeoutlemm(Logs),
   !.
writeoutlemm([W-Log-L|Logs]):-
   writeoutlemm(Logs),
   !.

writeouttagged([]):-!.
writeouttagged([Id-Log|Logs]):-
   writenl(_,Id-Log),
   writeouttagged(Logs),
   !.
writeouttagged([Id-Log|Logs]):-
   writeouttagged(Logs),
   !.

parserita(Input,Logs):-
   newtager(Input,_),
   findall(N, fp(N,_), Inds),
   init_sems,
   tell(output_tagged),
   ftaggingalls(Inds,Outs,Logs),
   told,
   !.

parseritatag(Input,Logs):-
   init_sems,
   collectsentsall(Input,Inds),
   ftaggingtalls(Inds,Outs,Logs),
   !.

getbfilename(Text,Outs):-
   concat_atom(List,'/',Text),
   reverse(List,[File|_]),
   concat(sent,'_',Logfil),
   concat(Logfil, File, Logfile),
   term_to_atom(outs/Logfile,Outs),
   !.
getcfilename(Text,Outs):-
   concat(sent,'_',Logfil),
   concat(Logfil, Text, Logfile),
   term_to_atom(outs/Logfile,Outs),
   !.
getefilename(Text,Outs):-
   concat_atom(List,'/',Text),
   reverse(List,[File|_]),
   concat(sent,'_',Logfil),
   concat(Logfil, File, Logfile),
   term_to_atom(outs/Logfile,Outs),
   !.
getdfilename(Text,Outs):-
   term_to_atom(outs/Text,Outs),
   !.
getffilename(Text,Outs):-
   concat_atom(List,'/',Text),
   reverse(List,[File|_]),
   term_to_atom(outs/opinions,OutFil),
   concat(OutFil,'_',Logfi),
   concat(Logfi, File, Logfil),
   concat(Logfil,'.',Logfill),
   concat(Logfill, xml, Outs),
%   term_to_atom(Logs,Logfile),
   !.
getreffilename(Text,Outs):-
   concat_atom(List,'/',Text),
   reverse(List,[File|_]),
   concat(refexs,'_',Logfi),
   concat(Logfi, File, Logfile),
   term_to_atom(outs/Logfile,Outs),
   !.

assertfrasecorr(Ind,Ind):-
   write(Ind),nl,
   stringof(List,Ind),
   (reverse(List,[I,G,F|Rev]),integer(F),integer(G),
     reverse([I,G,F],Idd),
     stringof(Idd,Id)
     ;
     reverse(List,[I,G|Rev]),integer(G),
     reverse([I,G],Idd),
     stringof(Idd,Id)
     ;
   reverse(List,[Id|Rev])),
   abolish(firstword/1),
   abolish(frase_corrente/2),
   assert(frase_corrente(Id,Ind)),
   getcfilename(Ind,Sent),
%   mcon(sent,'_',Sen),
%   mcon(Sen,Ind,Sent),
   tell(Sent),
   write(Sent),nl,
   !.
assertfrasecorr(Ind,Sent):-
   mcon(sent,'_',Sen),
   mcon(Sen,Ind,Sent),
   write(Sent),nl,
   abolish(frase_corrente/2),
   assert(frase_corrente(Sent,Ind)),
   !.

assertfrasecorr1([First|Frase],Ind,Ind):-
   write(Ind),nl,
   stringof(List,Ind),
   (reverse(List,[I,G|Rev]),integer(G),
     reverse([I,G],Idd),
     stringof(Idd,Id)
     ;
   reverse(List,[Id|Rev])),
   abolish(firstword/1),
   assert(firstword(First)),
   abolish(frase_corrente/2),
   assert(frase_corrente(Id,Ind)),
   getbfilename(Ind,Sent),
%   getcfilename(Ind,Sent),
%   mcon(sent,'_',Sen),
%   mcon(Sen,Ind,Sent),
   tell(Sent),
   write(Sent),nl,
   !.

assertfrasecorr2([First|Frase],Ind):-
   stringof(List,Ind),
   (reverse(List,[I,G|Rev]),integer(G),
     reverse([I,G],Idd),
     stringof(Idd,Id)
     ;
   reverse(List,[Id|Rev])),
   abolish(firstword/1),
   assert(firstword(First)),
   abolish(frase_corrente/2),
   assert(frase_corrente(Id,Ind)),
%      tell(events),
   !.

ftaggingtalls([],[],[]):-!.
ftaggingtalls([Ind|Inds],[Ind-Out|Outalls],[ToLog-PAS|Logs]):-
   initchunks,
   fp(Ind,Frase),
   assertfrasecorr1(Frase,Ind,Sent),
   shallowparsing(Frase,Out,ToLog),
   maptofstr1(Sent,Frase,ToLog,PAS),told,
   ftaggingtalls(Inds,Outalls,Logs),
   !.

readtfrase([Out|Frase], [W-Cat-Cos|Tokens], Toks):-
    (Out=end_of_file,Toks=Frase,Tokens=[],!
    ;
     Out=W-da_riempire-cp,Cat-Cos=da_riempire-cp,Toks=Frase,Tokens=[],!
    ;
     Out=W-dirs-cp,Cat-Cos=dirs-cp,Toks=Frase,Tokens=[],!
    ;
     Out=W-punto-cp,Cat-Cos=punto-cp,Toks=Frase,Tokens=[],!
    ;
     Out=W-puntint-cp,Toks=Frase,Tokens=[],!
    ;
     Out=W-Cat-Cos,
     readtfrase(Frase, Tokens, Toks)
    ).

collectsentsall(Input,Inds):-
   consult(Input),
   findall(W-Cat-Cos,b(W-Cat-Cos),Words),
   memorizefrasi(Input,Words,Inds),
   !.

readtfraseall(Input,[], []):-!.
readtfraseall(Input,Words, [Ind|Inds]):-
   readtfrase(Words, Tokens, Toks),
   itmults(Tokens,Frase,Mults),
   gen_sym(Input,Ind),
   asserta(fp(Ind,Frase)),
   readtfraseall(Input,Toks, Inds),
   !.
   
memorizefrasi(Input,Words,Inds):-
   readtfraseall(Input,Words, Inds),
   !.
   
funzparsetext(NFile, File):-
%   tell(File),
   see(NFile),
   retractall(current_num(_,_)),
   newtager(NFile,_),
   findall(N, fp(N,_), Inds),
   nl,
   ftaggingalls(Inds,Outs,Logs),
%   told,
   seen,
   !.
ftaggingalls([],[],[]):-!.
ftaggingalls([Ind|Inds],[Ind-Out|Outalls],[ToLog-PAS|Logs]):-
   initchunks,
   fp(Ind,Frase),
   assertfrasecorr(Ind,Sent),
   ttagtext(1,Frase,Outs),
   disambs(Outs,Frase1),
   cleantags1(Outs,Frase1,Fras),
   shallowparsing(Fras,Out,ToLog),
   maptofstr(Sent,Fras,ToLog,PAS),
   ftaggingalls(Inds,Outalls,Logs),
   !.

shallowparsing(Tags, FunctsOut, Outs):-
   initheaps,
   collect_np(Tags, CStruct, Words),
   parsecs1(CStruct,  Chunk),
   parsecs1(Chunk,  Chunkss),
   parsecs1(Chunkss,  Chunks_In),
   parsef2(0,Chunks_In, Chunks),
   initscl,
   assign_all_functions(Chunks, Rest, FunctsOut),
   search_f_boundaries(FunctsOut,Outs),
%   write_fss1(Outs),
%   nl,
   !.

getcosts([],[]):-!.
getcosts(Costss,Costs):-
   Costss=[Costt|_],
   is_list(Costt),
   getcosts(Costt,Costs),
   !.
getcosts([F-Costss],Costs):-
   (F=f2;F=f3;F=fs;F=fc;F=dirsp;F=fac;F=cp;F=f;F=fint),
%   (F=f2;F=f3;F=fs;F=fc;F=dirsp;F=cp;F=f;F=fint),
   getcosts(Costss,Costs),
   !.
getcosts([fp-Cost|Costss],Costs):-
   getcosts(Costss,Costs),
   !.
getcosts([F-[Cost]|Costss],[F-[Cost]|Costs]):-
%   (F=fs;F=fac;F=fc;F=fint;F=cp;F=f2),
   (F=fs;F=fc;F=fint;F=cp),
   getcosts(Costss,Costs),
   !.
getcosts([F-Cost|Costss],Costs):-
   F\=f,F\=f2,F\=f3,F\=fs,F\=fc,F\=fac,F\=cp,F\=fint,F\=dirsp,
   nonvar(Cost),Cost\=[],
   (remove(f2-F2,Cost,Mod);remove(fac-F2,Cost,Mod)),
   getcosts([F-Mod,f2-F2|Costss],Costs),
   !.
getcosts([F-Cost|Costss],[F-Cost|Costs]):-
   F\=f,F\=f2,F\=f3,F\=fs,F\=fc,F\=fac,F\=cp,F\=fint,F\=dirsp,
   getcosts(Costss,Costs),
   !.
getcosts([F-Costs|Costss],Costs3):-
   (F=f2;F=fs;F=fc;F=dirsp;F=fac;F=cp;F=f;F=fint),
%   (F=f2;F=fs;F=fc;F=dirsp;F=cp;F=f;F=fint),
   getcosts(Costs,Costs1),
   getcosts(Costss,Costs2),
   append(Costs1,Costs2,Costs3),
   !.
   
/*
getcosts([],[]):-!.
getcosts(Costss,Costs):-
   Costss=[Costt|_],
   is_list(Costt),
   getcosts(Costt,Costs),
   !.
getcosts([F-Costss],Costs):-
%   (F=f2;F=f3;F=fs;F=fc;F=dirsp;F=fac;F=cp;F=f;F=fint),
   (F=f2;F=f3;F=fs;F=fc;F=dirsp;F=cp;F=f;F=fint),
   getcosts(Costss,Costs),
   !.
getcosts([fp-Cost|Costss],Costs):-
   getcosts(Costss,Costs),
   !.
getcosts([F-[Cost]|Costss],[F-[Cost]|Costs]):-
%   (F=fs;F=fac;F=fc;F=fint;F=cp;F=f2),
   (F=fs;F=fc;F=fint;F=cp;F=f2),
   getcosts(Costss,Costs),
   !.
getcosts([F-Cost|Costss],[F-Cost|Costs]):-
%   F\=f,F\=f2,F\=f3,F\=fs,F\=fc,F\=fac,F\=cp,F\=fint,F\=dirsp,
   F\=f,F\=f2,F\=f3,F\=fs,F\=fc,F\=cp,F\=fint,F\=dirsp,
   getcosts(Costss,Costs),
   !.
getcosts([F-Costs|Costss],Costs3):-
%   (F=f2;F=fs;F=fc;F=dirsp;F=fac;F=cp;F=f;F=fint),
   (F=f2;F=fs;F=fc;F=dirsp;F=cp;F=f;F=fint),
   getcosts(Costs,Costs1),
   getcosts(Costss,Costs2),
   append(Costs1,Costs2,Costs3),
   !.
*/
createdepheads(Lemmed,Costss,Depsall,HIndex,Refexs):-
    minordeps(Lemmed,Minors,Heads),
    createrefexs(Heads,Minors,Refexs),
    latecommit(Heads,Costss,Costs),
    createdephead(V,Lemmed,Costs,Depsall,HIndex),
    !.
%funcs(sem,permettere-5,[ma-cosu-fs],fs-[ma-cosu-fs]).
latecommit(Heads,[],[]):-!.
latecommit(Heads,[Subj,Compl|Costss],[NewCost|Costs]):-
    Subj=Obl-NP,(Obl=iobj;Obl=obl;Obl=subj;Obl=obj;Obl=sn),
    Compl=Obl1-NP1,(Obl1=iobj;Obl1=obl;Obl1=sp),
    (NP1=[W-Cat-_|Res];NP=[_,W-Cat-_|Res]),
    (Cat=p;Cat=part;Cat=pd;Cat=pda;Cat=partd;Cat=partda),
    newprendi_testa(Obl,NP,Head),
    newprendi_testa(Obl1,NP1,Head1),
    remove(i(N,Head,Ca,Lem,sn,Feat,N1,Func/Role),Heads,Lemm),
    remove(i(N2,Head1,Ca1,Lem1,sn,Feat1,N3,Func/Role),Lemm,Lee),
    matchheadprep(Lem,Lem1,W),
    append(NP,[mod-NP1],NPs),
    NewCost=Obl-NPs,
    latecommit(Heads,Costss,Costs),
    !.
latecommit(Heads,[Subj|Costss],[Subj|Costs]):-
    latecommit(Heads,Costss,Costs),
    !.
matchheadprep(Head,Head1,W):-
    (prepos(W),Prep=W;prepart(Lem,W,_),Prep=Lem),
    (Prep=a;Prep=per;Prep=con;Prep=da;Prep=contro),
    wnit(Head,n,Code),
    wnitf(Sem,n,Code),
    selectsem(Sem),
    !.
selectsem(dyn).
selectsem(bnde).
selectsem(nbde).
selectsem(stml).
selectsem(stat).

/* 
tipo_agg(malefattivo, contro, [umano, evento, attivita, istituzione]).
tipo_agg(comitativo, con, [umano, relat, hum, istituzione, evento]).
tipo_agg(beneficiario, a, [relat, hum, umano, animato]).
tipo_agg(causale, per, [attivita, evento]).
tipo_agg(subj_disc, su, [oggetto, umano, animato, evento, luogo, attivita]).
 dynamic (dyn)
 bounded_event (bnde)
 unbounded_event (nbde)
 stimulating (stml)
*/

minordeps([],[],[]):-!.
minordeps([i(N,W,Cat,-)|Lemmed],[i(N,W,Cat,-)|Minors],Heads):-
    (grw(W);Cat=[par]),
    minordeps(Lemmed,Minors,Heads),
    !.
minordeps([i(N,W,Cat,Lem-Feat)|Lemmed],[i(N,W,Cat,Lem,sn,Feat,N1,-)|Minors],Heads):-
    dets(Cat),Cat\=ag,Cat\=q,Cat\=num,
    minordeps(Lemmed,Minors,Heads),
    !.
minordeps([i(N,W,Cat,Lem)|Lemmed],[i(N,W,Cat,Lem,sn,Feat,N1,-)|Minors],Heads):-
    dets(Cat),Cat\=ag,Cat\=q,Cat\=num,
%    minordeps(N1,Lemmed,Minors,Heads),
    minordeps(Lemmed,Minors,Heads),
    !.
minordeps([i(N,W,Cat,Lem-Feat)|Lemmed],Minors, [i(N,W,Cat,Lem,sn,Feat,N1,Func/Role)|Heads]):-
    (nouncats(Cat);proncat(Cat);Cat=relin;Cat=int;Cat=rel,W\=che),
    minordeps(Lemmed,Minors,Heads),
    !.
minordeps([i(N,W,Cat,LemFeat)|Lemmed],Minors, [i(N,W,Cat,W,sn,Feat,N1,Func/Role)|Heads]):-
    (nouncats(Cat);proncat(Cat);Cat=relin;Cat=int;Cat=rel,W\=che;
    W='No';W=no;W='Sì';W=sì),
    minordeps(Lemmed,Minors,Heads),
    !.
minordeps([i(N,W,Cat,Lem-Feat)|Lemmed],[i(N,W,Cat,Lem,sn,Feat,N1,mod/adj)|Minors],[i(N,W,Cat,Lem,sn,Feat,N1,mod/adj)|Heads]):-
    Cat=ag,
    minordeps(Lemmed,Minors,Heads),
    !.
minordeps([i(N,W,Cat,Lem-Feat)|Lemmed],Minors,Heads):-
    (prepos(W);prepart(Lem,W,_);
        (Cat=p;Cat=php;Cat=pt;Cat=part;Cat=pd;Cat=pda;Cat=partd;Cat=partda)),
    minordeps(Lemmed,Minors,Heads),
    !.
minordeps([i(N,W,Cat,Lem)|Lemmed],Minors,Heads):-
    (prepos(W);prepart(Lem,W,_);
        (Cat=p;Cat=php;Cat=pt;Cat=part;Cat=pd;Cat=pda;Cat=partd;Cat=partda)),
    minordeps(Lemmed,Minors,Heads),
    !.
minordeps([i(N,W,Cat,Lem-Feat)|Lemmed],Minors,[i(N,W,Cat,Lem,sn,Feat,N1,-)|Heads]):-
    Cat=clit,
    minordeps(Lemmed,Minors,Heads),
    !.
minordeps([i(N,W,Cat,Lem)|Lemmed],Minors,[i(N,W,Cat,Lem,sn,Feat,N1,-)|Heads]):-
    Cat=clit,
    minordeps(Lemmed,Minors,Heads),
    !.
minordeps([i(N,W,Cat,Lem)|Lemmed],[i(N,W,Cat,Lem,Savv,Feat,N1,-)|Minors],Heads):-
    ((Cat=avv;Cat=av;Cat=neg;Cat=avvl),Savv=savv
      ;
      (Cat=cong;Cat=congf;Cat=cosu;Cat=pk;Cat=conjl;Cat=cosul),Savv=fc),
    minordeps(Lemmed,Minors,Heads),
    !.
minordeps([i(N,W,Cat,Lem-Feat)|Lemmed],Minors,Heads):-
     check_vcat(Cat),
%     check_all_verbs(Cat)
    minordeps(Lemmed,Minors,Heads),
    !.
minordeps([i(N,W,Cat,Lem)|Lemmed],[i(N,W,Cat,Lem,sn,-,N1,-)|Minors],Heads):-
    \+headn(Cat), Cat\=ag,
    minordeps(Lemmed,Minors,Heads),
    !.
minordeps([i(N,W,Cat,Lem-Feat)|Lemmed],[i(N,W,Cat,Lem,sn,Feat,N1,mod/adj)|Minors],Heads):-
    \+ nouncats(Cat), \+ proncat(Cat),
    minordeps(Lemmed,Minors,Heads),
    !.
minordeps([i(N,W,Cat,Lem-Feat)|Lemmed],Minors,[i(N,W,Cat,Lem,Cos,Feat,N1,Func/Role)|Heads]):-
    minordeps(Lemmed,Minors,Heads),
    !.
minordeps([i(N,W,Cat,Lem)|Lemmed],[i(N,W,Cat,Lem,Cos,-,N1,-)|Minors],Heads):-
    minordeps(Lemmed,Minors,Heads),
    !.

/*
minordeps(N1,[i(N,W,Cat,Lem-Feat)|Lemmed],[i(N,W,Cat,Lem,sn,Feat,N1,mod/adj)|Minors],Heads):-
    \+ nouncats(Cat), \+ proncat(Cat), \+headn(Cat), 
    minordeps(N1,Lemmed,Minors,Heads),
    !.
minordeps(N1,[i(N,W,Cat,Lem)|Lemmed],[i(N,W,Cat,Lem,Cos,-,N1,-)|Minors],Heads):-
    \+ nouncats(Cat), \+ proncat(Cat), \+headn(Cat), 
    minordeps(N1,Lemmed,Minors,Heads),
    !.
minordeps(N1,[i(N,W,Cat,Lem)|Lemmed],[i(N,W,Cat,Lem,sn,Feat,N1,-)|Minors],Heads):-
    dets(Cat),Cat\=ag,Cat\=poss,Cat\=ind,Cat\=abbr,Cat\=num,
    minordeps(N1,Lemmed,Minors,Heads),
    !.
minordeps(N,[i(N,W,Cat,Lem-Feat)|Lemmed],Minors,[i(N,W,Cat,Lem,sn,Feat,N1,Func/Role)|Heads]):-
    (headn(Cat);nouncats(Cat);proncat(Cat)),
    minordeps(Lemmed,Minors,Heads),
    !.
minordeps(N,[i(N,W,Cat,Lem)|Lemmed],Minors,[i(N,W,Cat,Lem,sn,Feat,N1,Func/Role)|Heads]):-
    (headn(Cat);nouncats(Cat);proncat(Cat)),
    minordeps(Lemmed,Minors,Heads),
    !.
*/

gettagdefs(Ind,Minors,DetsAll):-
    findall(W-Cat,(member(i(N,W,Cat,Lem,sn,Feat,N1,Func/Role),Minors),nonvar(N1),N1=Ind;
    member(i(N,W,Cat,Lem,Cos,-,N1,-),Minors),nonvar(N1),N1=Ind),DetsAll),
    !.
gettagdefs(Ind,Minors,Tab,Tab):-
    !.

anal_prenominals(Tab,[],Tab):-!.

anal_prenominals(Tab,Resto,Tab1):-
     Resto\=[],
     remove(Testa-Cat, Resto, Res),
     anncats(Cat),
     \+ qm(Testa),
     anal_prenominals(Tab,Res,Tab1),
     !.
anal_prenominals(Tab,Resto,Tab1):-
     Resto\=[],
     remove(Testa-Cat, Resto, Res),
     nncats(Cat),
     \+ qm(Testa),
     anal_prenominals(Tab,Res,Tab1),
     !.
anal_prenominals(Tab,Resto,Tab2):-
     Resto\=[],
     remove(Testa-Cat, Resto, Res),
     Cat=num,
     remove(nil,Tab, [Ref,Def,Part|Tabs]),
%     Tab=[Ref,Def,Part|Tabs],
     Tab1=[Ref,Def,Part,Testa|Tabs],
     anal_prenominals(Tab1,Res,Tab2),
     !.
anal_prenominals(Tab,Resto,Tab2):-
     Resto\=[],
     remove(Testa-Cat, Resto, Res),
     (qcats(Cat);qm(Testa)),
     remove(nil,Tab, [Ref,Def|Tabs]),
%     Tab=[Ref,Def|Tabs],
     Tab1=[Ref,Def,Testa|Tabs],
     anal_prenominals(Tab1,Res,Tab2),
     !.
anal_prenominals(Tab,Resto,Tab2):-
     Resto\=[],
     remove(Testa-Cat, Resto, Res),
     (qcats(Cat);qm(Testa)),
     remove(nil,Tab, [Ref,Def,Quant|Tabs]),
%     Tab=[Ref,Def,Quant|Tabs],
     Tab1=[Ref,Def,Quant,Testa|Tabs],
     anal_prenominals(Tab1,Res,Tab2),
     !.
anal_prenominals(Tab,Resto,Tab1):-
     Resto\=[],
     remove(Testa-Cat, Resto, Res),
     anal_prenominals(Tab,Res,Tab1),
     !.
anal_prenominals(Tab,Resto,Tab1):-
     Resto\=[],
     remove(Testa, Resto, Res),
     anal_prenominals(Tab,Res,Tab1),
     !.
anal_prenominals(Tab,[],Tab1):-!.

/*
foca(anche).
foca(proprio).
inten(abbastanza).
inten(almeno).
inten(alquanto).
inten(altrettanto).
inten(anche).
inten(ben).
inten(così).
inten(davvero).
inten(meno).
inten(più).
inten(proprio).
inten(quasi).
*/

qm(W):-
  pr(pr_quantif,D,W,P,G,N,_),!.

qm(W):-
   nm(W, _, _),!.
qm(W):-
   quant(W, _, _, _,_),!.
qm(W):-
   integer(W),!.
qm(W):-
    atomic(W),
    stringof([I|Ints],W),
    integer(I), 
    (\+ on('/',Ints)
    ;
    on('/',Ints),
    reverse(Ints,[A|Rev]),
    integer(A)), 
   !.
qm(W):-
   up_wn(W,Cats,K),
   Cats\=[],
   is_list(Cats),
   (member(qnt,Cats);member(grp,Cats)),
   !.

createrefexs([],Minors,[]):-!.   
/*
createrefexs([i(N,W,Cat,Lem,sp,-,N1,-)|Heads],Minors,Refexs):-     
     (prepos(W),Prep=W;prepart(Lem,W,_),Prep=Lem),
     createrefexs(Heads,Minors,Refexs),
     !.
createrefexs([i(Ind,W,Cat,Lem,sp,Feat,N1,Func/Role)|Heads],Minors,Refexs):-     
     (prepos(W),Prep=W;prepart(Lem,W,_),Prep=Lem),
     createrefexs(Heads,Minors,Refexs),
     !.
*/
createrefexs([i(Ind,W,Cat,Lem,sn,Feat,N1,Func/Role)|Heads],Minors,[Agg|Refexs]):-     
     Agg=ref_ex(Ind,Lem,Tab1,Tratti,CatSem,Mod,Func/Role),
     up_wn(Lem,CatSem,_),CatSem\=[],
     gettagdefs(Ind,Minors,DetsAll),
     assegna_tab(Cat,Lem,DetsAll,Tab),
     anal_prenominals(Tab,DetsAll,Tab1),
     genera_tratt(Feat,Lem,Tratti,Cat),
     createrefexs(Heads,Minors,Refexs),
     !.
createrefexs([i(Ind,little_pro,pro,pro,sn,Feat,A,Fun/Role)|Heads],Minors,[Agg|Refexs]):-     
     Agg=ref_ex(Ind,little_pro,Tab1,Tratti,CatSem,Mod,Fun/Role),
     member(mfeats=MFea,Feat),
     matchfeatvesdis(MFe,MFea),
     Tratti=MFe,
     gettagdefs(Ind,Minors,DetsAll),
     assegna_tab(pron,little_pro,DetsAll,Tab),
     anal_prenominals(Tab,DetsAll,Tab1),
     createrefexs(Heads,Minors,Refexs),
     !.
createrefexs([i(Ind,W,Cat,Lem,sn,Feat,N1,Func/Role)|Heads],Minors,[Agg|Refexs]):-     
     Agg=ref_ex(Ind,Lem,Tab1,Tratti,CatSem,Mod,Func/Role),
     dets(Cat),Cat\=ag,
     pr(Type,Part,W,Pers,Gen,Num,CatSem),
     gettagdefs(Ind,Minors,DetsAll),
     assegna_tab(Cat,Lem,DetsAll,Tab),
     anal_prenominals(Tab,DetsAll,Tab1),
     genera_tratt(Feat,Lem,Tratti,Cat),
     createrefexs(Heads,Minors,Refexs),
     !.
createrefexs([i(Ind,W,Cat,Lem,sn,Feat,N1,Func/Role)|Heads],Minors,[Agg|Refexs]):-     
     Agg=ref_ex(Ind,Lem,Tab1,Tratti,CatSem,Mod,Func/Role),
     (Cat=nh,CatSem=[umano];Cat=npro,CatSem=[istituzione,umano]),
     gettagdefs(Ind,Minors,DetsAll),
     assegna_tab(Cat,Lem,DetsAll,Tab),
     anal_prenominals(Tab,DetsAll,Tab1),
     genera_tratt(Feat,Lem,Tratti,Cat),
     createrefexs(Heads,Minors,Refexs),
     !.
createrefexs([i(Ind,W,Cat,Lem,sn,Feat,N1,Func/Role)|Heads],Minors,[Agg|Refexs]):-     
     Agg=ref_ex(Ind,Lem,Tab1,Tratti,CatSem,Mod,Func/Role),
     proncat(Cat),
     tolower(W,Ww),
     pr(Type,Part,Ww,Pers,Gen,Num,CatSem),
     assegna_tab(Cat,Lem,[+def],Tab),
     anal_prenominals(Tab,[+def],Tab1),
     genera_tratt(Feat,Lem,Tratti,Cat),
     createrefexs(Heads,Minors,Refexs),
     !.
     
createrefexs([Head|Heads],Minors,Refexs):-     
     createrefexs(Heads,Minors,Refexs),
     !.
% ref_ex(Snx,Testa,Tab,Pers,Gen,Num,Cat,F/R)

checkwriteallrefs(Outs,RefExs,RefList):-
    checkwrarefs(Outs,RefExs,OutRefs),
    s_estrai_argomenti([1-OutRefs],_,RefList),
    writeallrefs(RefList),
    !.

convertproslittle([],[]):-!.
convertproslittle([Pros|AllPros],[Agg|Aggs]):-
     Pros=..[i,Ind,little_pro,pro,pro,sn,Feat,A,Fun/Role],
     assegna_tab(pron,little_pro,[],Tab),
     genera_tratt(Feat,Lem,Tratti,Cat),
     Agg=ref_ex(Ind,little_pro,Tab,Tratti,[any],[],Fun/Role),
     convertproslittle(AllPros,Aggs),
    !.
convertproslittle([Pros|AllPros],[Agg|Aggs]):-
     Pros=..[i,Ind,Clit,clit,Lem,Sn,Feat,A,Fun/Role],
     nonvar(Clit),
     tolower(Clit,Ww), Ww\=si,
     c_case(Lem,Case),
     assegna_tab(clit,Lem,[+def],Tab),
     anal_prenominals(Tab,[+def],Tab1),
     p_cli(Clit,P,N,G),
     genera_tratt([num=N,gen=G,pers=P],Lem,Tratti,clit),
     append(Tratti,[Case],Tratti1),
     Agg=ref_ex(Ind,Clit,Tab1,Tratti,CatSem,[],Fun/Role),
     convertproslittle(AllPros,Aggs),
     !.
convertproslittle([Pros|AllPros],[Agg|Aggs]):-
     convertproslittle(AllPros,Aggs),
     !.

checkwrarefs(Outs,[],[]):-!.
checkwrarefs(Outs,RefExs,OutRefss):-
     findall(Pros,((Pros=..[i,Ind,little_pro,pro,pro,sn,Feat,A,Fun/Role];
     				Pros=..[i,Ind1,Clit,clit,Lem,Sn,Feat1,A1,Fun1/Role1],nonvar(Clit);
     				Pros=..[i,Ind1,Clit,clit,Lem,Sn,Feat1,A1,Fun1Role1],nonvar(Clit)),
     					member(Pros,Outs)),AllPros),
     convertproslittle(AllPros,Aggs),
     checkwrarefss(Outs,RefExs,OutRefs),
     append(Aggs,OutRefs,OutRefss),
     !.
checkwrarefss(Outs,[],[]):-!.
checkwrarefss(Outs,[ref_ex(Ind,Lem,Tab,Tratti,CatSem,Mod,_)|RefExs],[Agg1|OutRefs]):-
     member(i(Ind,W,Cat,Lem,Cos,Feat,N1,Func/Role),Outs),
     Agg1=ref_ex(Ind,Lem,Tab,Tratti,CatSem,[],Func/Role),
%     Agg1=ref_ex(Ind,Lem,Tab,Pers,Gen,Num,CatSem,Func/Role),
     checkwrarefss(Outs,RefExs,OutRefs),
     !.
checkwrarefss(Outs,[ref_ex(Ind,Lem,Tab,Tratti,CatSem,Mod,Func/Role)|RefExs],[Agg1|OutRefs]):-
     Agg1=ref_ex(Ind,Lem,Tab,Tratti,CatSem,[],Func/Role),
%     Agg1=ref_ex(Ind,Lem,Tab,Pers,Gen,Num,CatSem,Func/Role),
     checkwrarefss(Outs,RefExs,OutRefs),
     !.

createdephead(V,[],[],[],[]):-!.

createdephead(X,[i(N,W,Cat,Lem-Feat)|Lemmed],[Subj|Costs],[i(N,Verb,Cat,Lem,ibar,Feat,V,CatV/Scat),Output|Deps],HIndex):-
    (checkcatfunc1(Subj,Ibar),
     (var(X),((Subj=vcomp-_;Subj=sv2-_;Subj=sv3-_);V=X)
       ;
        nonvar(X),V=X), Nx=N
      ;
      checkcatfunc(Subj,Ibar),
      ((Subj=ibar-Ibar;Subj=ir_infl-Ibar),V=0,
       (var(X),X=N,Nx=N;nonvar(X),Nx=N);
       (var(X),Nx=V;nonvar(X),V=X, Nx=N))
       ),
    Ibar=[Verb-Ca-_],Verb=W,
    getcatsemasp(Lem,CatV,Scat,LArgsV,Le),
    checkfeatsclits1(i(N,Verb,Ca,Lem-Feat),Lemmed,Lemms,Output,Indx),
    createdephead(Nx,Lemms,Costs,Deps,HIndex),
    !.
createdephead(X,[i(N,W,Cat,Lem-Feat)|Lemmed],[Subj|Costs],[i(N,Verb,Cat,Lem,ibar,Feat,X,CatV/Scat),Output|DepsAll],HIndex):-
    checkcatfunc1(Subj,Ibar),
    Ibar=[Verb-Ca-_|Res],Verb=W,
    getcatsemasp(Lem,CatV,Scat,LArgsV,Le),
    make_list1(Res,List,Struc),
    length(List,L),
    depsrestcost(L,N,Lemmed,List,Rest,Lems),
    checkcostrest(Costs,Struc,CostRest),
    checkfeatsclits1(i(N,Verb,Ca,Lem-Feat),Lems,Lemms,Output,Indx),
    createdephead(N,Lemms,CostRest,Deps,HIndex),
    append(Rest,Deps,DepsAll),
    !.
createdephead(X,[Input|Lemmed],[Subj|Costs],[Output,i(N1,Verb,Ca,Lem1,Infl,Feat1,DepI,CatV/Scat)|DepsAll],[Indx|HIndex]):-
    (Input=i(N,W,Cat,Lem-Feat);Input=i(N,W,Cat,Lem)),
    (Subj=ibar-Ibar;Subj=ir_infl-Ibar),
    Infl=ibar, V1=N1, DepI=0,
    reverse(Ibar,Revs),
     (Revs=[Verb-Ca1-_|Rev],
     check_all_verbs(Ca1)
     ;
     member(Verb-Ca1-_,Revs),
     check_all_verbs(Ca1)),     
     remove(i(N1,Verb,Ca,Lem1-Feat1),Lemmed,Lemres),
     getcatsemasp(Lem1,CatV,Scat,LArgsV,Le),
    make_list1(Ibar,List,Struc),
    remove(W,List,List1),
    remove(Verb,List1,List2),
    length(List1,L),
    depsrestcost(L,N1,Lemres,List2,Rest,Lemss),
%    checkfeatsclits(N1,i(N,W,Cat,Lem),Ibar,Output,Indx),
    checkfeatsclits2(i(N,W,Cat,Lem),Ibar,i(N1,Verb,Ca,Lem1-Feat1),Lemss,Lems,Output,Indx),
    createdephead(V1,Lems,Costs,Deps,HIndex),
    append(Rest,Deps,DepsAll),
    !.
createdephead(X,[i(N,W,Cat,Lem-Feat)|Lemmed],[Subj|Costs],[Output,i(N,Verb,Cat,Lem,Infl,Feat,DepI,CatV/Scat)|DepsAll],[Indx|HIndex]):-
    (Subj=ibar-Ibar;Subj=ir_infl-Ibar),
    Infl=ibar, V1=N, DepI=0,
    reverse(Ibar,Revs),
     (Revs=[Verb-Ca1-_|Rev],
     check_all_verbs(Ca1)
     ;
     member(Verb-Ca1-_,Revs),
     check_all_verbs(Ca1)),     
     getcatsemasp(Lem,CatV,Scat,LArgsV,Le),
    make_list1(Ibar,List,Struc),
    remove(W,List,List1),
    remove(Verb,List1,List2),
    length(List1,L),
    depsrestcost(L,N1,Lemres,List2,Rest,Lemss),
%    checkfeatsclits(N1,i(N,W,Cat,Lem),Ibar,Output,Indx),
    checkfeatsclits2(i(N,W,Cat,Lem),Ibar,i(N1,Verb,Ca,Lem1-Feat1),Lemss,Lems,Output,Indx),
    createdephead(V1,Lems,Costs,Deps,HIndex),
    append(Rest,Deps,DepsAll),
    !.
createdephead(X,[Input|Lemmed],[Subj|Costs],[i(N,W,Cat,Lem,ibar,Feat,N1,-),i(N1,Verb,Ca,Lem1,Infl,Feat1,DepI,CatV/Scat),Output|DepsAll],[Indx|HIndex]):-
    (Input=i(N,W,Cat,Lem-Feat);Input=i(N,W,Cat,Lem)),
    (Subj=sv3-Ibar;Subj=sv5-Ibar;Subj=sv2-Ibar;Subj=vcomp-Ibar), 
    ((Infl=vcomp;Infl=sv2;Infl=sv3), V1=N1, DepI=X
       ;V1=X),
    reverse(Ibar,Revs),
     (Revs=[Verb-Ca1-_|Rev],
     check_all_verbs(Ca1)
     ;
     member(Verb-Ca1-_,Revs),
     check_all_verbs(Ca1)),     
     remove(i(N1,Verb,Ca,Lem1-Feat1),Lemmed,Lemres),
     getcatsemasp(Lem1,CatV,Scat,LArgsV,Le),
    make_list1(Ibar,List,Struc),
    remove(W,List,List1),
    remove(Verb,List1,List2),
    length(List1,L),
    checkfeatsclits1(i(N1,Verb,Ca,Lem1-Feat1),Lemres,Lemms,Output,Indx),
    depsrestcost(L,N1,Lemms,List2,Rest,Lems),
    createdephead(V1,Lems,Costs,Deps,HIndex),
    append(Rest,Deps,DepsAll),
    !.
createdephead(X,[Input|Lemmed],[Subj|Costs],[i(N1,Verb,Cat,Lem1,Infl,Feat1,DepI,CatV/Scat),Output|Deps],[Indx|HIndex]):-
    (Input=i(N1,Verb,Cat,Lem1-Feat1);Input=i(N1,Verb,Cat,Lem1)),
    (Subj=sv3-Ibar;Subj=sv5-Ibar;Subj=sv2-Ibar;Subj=vcomp-Ibar), 
    ((Infl=vcomp;Infl=sv2;Infl=sv3), V1=N1, DepI=X
       ;V1=X),
     Ibar=[Verb-Ca1-_|Ress],
     (Ress\=[],append(Ress,Costs,RestCost);Ress=[],RestCost=Costs),
     check_all_verbs(Ca1),    
     getcatsemasp(Lem1,CatV,Scat,LArgsV,Le),
    checkfeatsclits1(i(N1,Verb,Cat,Lem1-Feat1),Lemmed,Lems,Output,Indx),
    createdephead(N1,Lems,RestCost,Deps,HIndex),
    !.
/*
createdephead(X,[Input|Lemmed],[Subj|Costs],[i(N1,Verb,Cat,Lem1,Infl,Feat1,DepI,CatV/Scat),Output|DepsAll],[Indx|HIndex]):-
    (Input=i(N1,Verb,Cat,Lem1-Feat1);Input=i(N1,Verb,Cat,Lem1)),
    (Subj=sv3-Ibar;Subj=sv5-Ibar;Subj=sv2-Ibar;Subj=vcomp-Ibar), 
    Infl=vcomp, V1=X, DepI=X,
    reverse(Ibar,Revs),
     (Revs=[Verb-Ca1-_|Rev],
     check_all_verbs(Ca1)
     ;
     member(Verb-Ca1-_,Revs),
     check_all_verbs(Ca1)),    
     getcatsemasp(Lem1,CatV,Scat,LArgsV,Le),
    make_list1(Ibar,List,Struc),
    remove(Verb,List,List1),
    length(List1,L),
    checkfeatsclits1(i(N1,Verb,Cat,Lem1-Feat1),Lemmed,Lemms,Output,Indx),
    depsrestcost(L,N1,Lemms,List1,Rest,Lems),
    createdephead(V1,Lems,Costs,Deps,HIndex),
    append(Rest,Deps,DepsAll),
    !.
*/
createdephead(V,[i(N,W,Cat,Lem)|Lemmed],[Subj|Costs],[i(N,W,Cat,Lem,cp,-,N1,-)|Deps],HIndex):-
    select_punct(W,Type),
    (Subj=Func-NP,(NP=[W-_-_];NP=[_-Cat-_]);Subj=W-B-C;atomic(W),\+is_list(NP)),
    (Type=[dirs];W=';';Type=[puntint];V1=V),
    createdephead(V1,Lemmed,Costs,Deps,HIndex),
    !.
createdephead(V,[i(N,W,Cats,Lem)|Lemmed],[Subj|Costs],[i(N,W,Cat,Lem,sp,Feat,N2,-),i(N1,Noun,Ca,Lem1,sp,Feat1,N,Obl/Role)|DepsAll],[N1-N2-Lem1-Role|HIndex]):-
    Subj=Obl-NP,(Obl=iobj;Obl=obl;Obl=xadj;Obl=xcomp),
    (NP=[W-Cat-_|Res];NP=[_,W-Cat-_|Res]),
    (Cat=p;Cat=part;Cat=php;Cat=pd;Cat=pda;Cat=partd;Cat=partda),
    newprendi_testa(Obl,NP,Noun),
    (remove(i(N1,Noun,Ca,Lem1-Feat1),Lemmed,Lee);
    remove(i(N1,Noun,Ca,Lem1),Lemmed,Lee)),
    make_list3(NP,List,Struc),
    remove(W,List,Lists),
    remove(Noun,Lists,List1),
    length(Lists,L),
    (N=1,N2=0,V=N1,nt(Noun);N2=V),
    depsrestcost(L,N1,Lee,List1,Rest,Lemss),
    checkcostrest(Costs,Struc,CostRest),
    callf2facs(CostRest,NP,N1-Lem1-Feat1,Rest,Lemss,Costss,Lems,Rests,HIndex2),
    createdephead(V,Lems,Costss,Deps,HIndex1),
    append(Rests,Deps,DepsAll),
    append(HIndex2,HIndex1,HIndex),
    !.
createdephead(V,[i(N,W,Cats,Lem)|Lemmed],[Subj|Costs],[i(N,W,Cat,Lem,sp,Feat,N2,-),i(N1,Noun,Ca,Lem1,sp,Feat1,N,obl/Role)|DepsAll],[N1-N2-Lem1-Role|HIndex]):-
    Subj=Obl-NP,(Obl=sp;Obl=spd;Obl=spda),
    (NP=[W-Cat-_|Res];NP=[_,W-Cat-_|Res]),
    (Cat=p;Cat=part;Cat=php;Cat=pd;Cat=pda;Cat=partd;Cat=partda),
    newprendi_testa(Obl,NP,Noun),
    (remove(i(N1,Noun,Ca,Lem1-Feat1),Lemmed,Lee);
    remove(i(N1,Noun,Ca,Lem1),Lemmed,Lee)),
    make_list3(NP,List,Struc),
    remove(W,List,Lists),
    remove(Noun,Lists,List1),
    length(Lists,L),
    (N=1,N2=0,V=N1,nt(Noun);N2=V),
    depsrestcost(L,N1,Lee,List1,Rest,Lemss),
    checkcostrest(Costs,Struc,CostRest),
    callf2facs(CostRest,NP,N1-Lem1-Feat1,Rest,Lemss,Costss,Lems,Rests,HIndex2),
    createdephead(V,Lems,Costss,Deps,HIndex1),
    append(Rests,Deps,DepsAll),
    append(HIndex2,HIndex1,HIndex),
    !.
createdephead(V,[LemF|Lemmed],[Subj|Costs],[i(N,W,Cat,Lem,sn,Feat,N1,-),i(N1,Noun,Ca,Lem1,sn,Feat1,N2,Func/Role)|DepsAll],[N1-N2-Lem1-Role|HIndex]):-
    (LemF=i(N,W,Cat,Lem-Feat);LemF=i(N,W,Cat,Lem),Feat=[]),
   (\+ select_punct(W,_);Cat=[par];Cat=par),
    Subj=Func-NP,
    checkfuncnotnom(Func),
    newprendi_testa(Func,NP,Noun),
    (remove(i(N1,Noun,Ca,Lem1-Feat1),Lemmed,Lee);
    remove(i(N1,Noun,Ca,Lem1),Lemmed,Lee)),
    make_list3(NP,List,Struc),
    remove(W,List,Lists),
    remove(Noun,Lists,List1),
    length(Lists,L),N2=V,
    depsrestcost(L,N1,Lee,List1,Rest,Lemss),
    checkcostrest(Costs,Struc,CostRest),
    callf2facs(CostRest,NP,N1-Lem1-Feat1,Rest,Lemss,Costss,Lems,Rests,HIndex2),
    createdephead(V,Lems,Costss,Deps,HIndex1),
    append(Rests,Deps,DepsAll),
    append(HIndex2,HIndex1,HIndex),
    !.
createdephead(V,[LemF|Lemmed],[Subj|Costs],[i(N,W,Cat,Lem,Func,Feat,N1,-)|Deps],HIndex):-
    (LemF=i(N,W,Cat,Lem-Feat);LemF=i(N,W,Cat,Lem),Feat=[]),
    Subj=Func-NP, 
    (NP=[W-_-_],Costss=Costs;NP=[W-_-_|Rest],Costss=[Func-Rest|Costs]),
    (Func=savv;Func=cp;Func=dirsp;Func=f3),
    (N=1,N1=0,V=N1;N1=V),
    createdephead(V,Lemmed,Costss,Deps,HIndex),
    !.
createdephead(X,[LemF|Lemmed],[Subj|Costs],[i(N,W,Cat,Lem,Func,Feat,N1,-)|Deps],HIndex):-
    (LemF=i(N,W,Cat,Lem-Feat);LemF=i(N,W,Cat,Lem),Feat=[]),
    (Subj=Func-NP, 
    (NP=[W-_-_],Costss=Costs;NP=[W-_-_|Rest],Costss=[Func-Rest|Costs])
    ;
    Subj=W-B-C, Func=C, Costss=Costs),
    (Func=fc;
      Func=fs),
    (N=1,N1=0,V=N1;
      (W=e;W=o;W=oppure;W=ed),N1=X;
      N1=V),
%    (member(ibar-Ibar,Costs);member(ir_infl,Costs)),
    createdephead(V,Lemmed,Costss,Deps,HIndex),
    !.
createdephead(X,[LemF|Lemmed],[Subj|Costs],[i(N,W,Cat,Lem,Cos,Feat,V1,-)|DepsAll],[N-V1-Lem-fcomp|HIndex]):-
    (LemF=i(N,W,Cat,Lem-Feat);LemF=i(N,W,Cat,Lem),Feat=[]),
    (Subj=fac-Fac,Sent=Fac,Costss=Costs;Subj=fc-Fac,Fac=[_-che-_],Sent=Costs,Costss=[]
     ;Subj=f2-Fac,Sent=Fac,Costss=Costs),
    getindexrel(Fac,W1,Clause),W1=W,
    reldepscost(X/V1,Lemmed,Clause,Rests,Lems,HIndex2),
    createdephead(V,Lems,Costss,Deps,HIndex1),
    append(Rests,Deps,DepsAll),
    append(HIndex2,HIndex1,HIndex),
    !.
createdephead(X,[LemF|Lemmed],[Subj|Costs],[Rells|Deps],[N2-V1-Lem2-Role|HIndex]):-
    (LemF=i(N,W,Cat,Lem-Feat);LemF=i(N,W,Cat,Lem),Feat=[]),
    (Subj=fint-Fac,Sent=Fac,Costss=Costs,Cos=fint
     ;Subj=f2-Fac,Sent=Fac,Costss=Costs,Cos=f2),
    getindexrel(Fac,W1,Clause),
    (W1=W,Lemms=Lemmed,Lem2=Lem,Feat2=Feat,
      Rells=[i(N,W,Cat,Lem,Cos,Feat,N1,binder),
              i(V1,rel_pro,pro,bindee,Cos,Feat2,ante=Lem,obj/Role)],
       (Costss\=[],RestCos=Costss;Costss=[],Clause\=[],RestCos=Clause)
      ;
     recover_descs(W1,List),is_list(List),member(W,List),
      Lemmed=[i(N2,W2,Cat2,Lem2-Feat2)|Lemms],
       Rells=[i(N,W,Cat,Lem,Cos,Feat,N1,-),i(N2,W2,Cat2,Lem2,Cos,Feat2,N,binder),
              i(V1,rel_pro,pro,bindee,Cos,Feat2,ante=Lem2,obj/Role)],
       (Costss\=[],RestCos=Costss;Costss=[],Clause\=[],RestCos=Clause)
      ;
      Cos=f2,
      (prepos(W);prepart(Lem,W,_)),
      Lemmed=[i(N2,W2,Cat2,Lem2-Feat2)|Lemms],W2=W1,
       Rells=[i(N,W,Cat,Lem,Cos,Feat,N1,-),i(N2,W2,Cat2,Lem2,Cos,Feat2,N,binder),
              i(V1,rel_pro,pro,bindee,Cos,Feat2,ante=Lem2,obj/Role)],
      (Clause=f-[subj-pro|RestCo]
       ;
       Clause=[subj-pro|RestCo]
       ;
        nogen_member(Sn-Sub,Clause),(Sn=sn;Sn=subj),
         nth(Clause,Num,Sn-Sub),Num<4,RestCo=Clause),
       append(RestCo,Costss,RestCos)
      ),
     (N=1,N1=0;N\=1,N1=V1),
%    reldepscost(X/V1,Lemms,Clause,Rests,Lems,HIndex2),
    createdephead(V,Lemms,RestCos,Deps,HIndex),
    !.
createdephead(V,[i(N,W,Cats,Lem)|Lemmed],[Subj|Costs],[i(N,W,Cat,Lem,sp,Feat,V,-),i(N1,Noun,Ca,Lem1,sp,Feat1,N,obl/Role)|DepsAll],[N1-N2-Lem1-Role|HIndex]):-
    Subj=Obl-NP,(Obl=sp;Obl=spd;Obl=spda),
    (NP=[W-Cat-_|Res];NP=[_,W-Cat-_|Res]),
    (Cat=p;Cat=part;Cat=php;Cat=pd;Cat=pda;Cat=partd;Cat=partda),
     remove(f2-Fac,Res,Resto),
     getindexrel(Fac,W1,Clause),
     Lemms=Lemmed,Lem2=Lem,Feat2=Feat,
      Rells=[i(N1,W1,Cat,Lem,Cos,Feat,N,binder),
              i(V1,rel_pro,pro,bindee,Cos,Feat2,ante=Lem,obj/Role)],
       (Costss\=[],RestCos=Costss;Costss=[],Clause\=[],RestCos=Clause),
    reldepscost(V/V1,Lemms,RestCos,Deps,Lems,HIndex),
%    createdephead(V,Lemms,RestCos,Deps,HIndex),
    !.
createdephead(V,Lemmed,[Subj|Costs],[i(N,W,Cat,Lem,Cos,Feat,N1,-)|DepsAll],HIndex):-
    Subj=coord-NP,
    remove(fc-[W-cong-_],NP,Res),
    (remove(i(N,W,Cat,Lem-Feat),Lemmed,Lee);
    remove(i(N,W,Cat,Lem),Lemmed,Lee)),
    make_list1(NP,List,Struc),
    remove(W,List,Lists),
    length(Lists,L),N1=V,
    depsrestcost(L,N,Lee,Lists,Rest,Lems),
    createdephead(V,Lems,Costs,Deps,HIndex),
    append(Rest,Deps,DepsAll),
    !.
createdephead(V,[i(N,W,Cat,Lem-Feat)|Lemmed],[Subj|Costs],[i(N,Noun,Cat,Lem,sn,Feat,N2,Func/Role)|DepsAll],[N-N2-Lem-Role|HIndex]):-
   (\+ select_punct(W,_);Cat=[par];Cat=par),
    Subj=Func-NP,
%    Func\=ibar,Func\=ir_infl,Func\=fac,Func\=fs,Func\=fc,Func\=dirsp,Func\=cp,Func\=f3,Func\=f2,
    newprendi_testa(Func,NP,Noun),Noun=W,
    make_list3(NP,List,Struc),
    remove(W,List,Lists),
    length(Lists,L),N2=V,
    depsrestcost(L,N,Lemmed,Lists,Rest,Lemss),
    checkcostrest(Costs,Struc,CostRest),
    callf2facs(CostRest,NP,N-Lem-Feat,Rest,Lemss,Costss,Lems,Rests,HIndex2),
    createdephead(V,Lems,Costss,Deps,HIndex1),
    append(Rests,Deps,DepsAll),
    append(HIndex2,HIndex1,HIndex),
    !.
createdephead(V,[i(N,W,Cat,Lem)|Lemmed],[Subj|Costs],[i(N,W,Cat,Lem,sn,Feat,N1,-),i(N1,Noun,Ca,Lem1,sn,Feat1,N2,Func/Role)|DepsAll],[N1-N2-Lem1-Role|HIndex]):-
   (\+ select_punct(W,_);Cat=[par];Cat=par),
    Subj=Func-NP,
%    Func\=ibar,Func\=ir_infl,Func\=fac,Func\=fs,Func\=fc,Func\=dirsp,Func\=cp,Func\=f3,Func\=f2,
    NP\=[],
    newprendi_testa(Func,NP,Noun),
    (remove(i(N1,Noun,Ca,Lem1-Feat1),Lemmed,Lee);
    remove(i(N1,Noun,Ca,Lem1),Lemmed,Lee)),
    make_list3(NP,List,Struc),
    remove(W,List,Lists),
    remove(Noun,Lists,List1),
    length(Lists,L),N2=V,
    depsrestcost(L,N1,Lee,List1,Rest,Lemss),
    checkcostrest(Costs,Struc,CostRest),
    callf2facs(CostRest,NP,N1-Lem1-Feat1,Rest,Lemss,Costss,Lems,Rests,HIndex2),
    createdephead(V,Lems,Costss,Deps,HIndex1),
    append(Rests,Deps,DepsAll),
    append(HIndex2,HIndex1,HIndex),
    !.
createdephead(V,[i(N,W,Cat,Lem)|Lemmed],[Subj|Costs],[i(N,Noun,Cat,Lem,sn,Feat,N2,Func/Role)|DepsAll],[N-N2-Lem-Role|HIndex]):-
   (\+ select_punct(W,_);Cat=[par];Cat=par),
   Subj=Func-NP,
%    Func\=ibar,Func\=ir_infl,Func\=fac,Func\=fs,Func\=fc,Func\=dirsp,Func\=cp,Func\=f3,Func\=f2,
    NP\=[],
    newprendi_testa(Func,NP,Noun),
    make_list3(NP,List,Struc),
    remove(W,List,Lists),W=Noun,N2=V,
    checkcostrest(Costs,Struc,CostRest),
    callf2facs(CostRest,NP,N-Lem-Feat,[],Lemmed,Costss,Lems,Rests,HIndex2),
    createdephead(V,Lems,Costss,Deps,HIndex1),
    append(Rests,Deps,DepsAll),
    append(HIndex2,HIndex1,HIndex),
    !.    
createdephead(V,[i(N,W,Cat,Lem-Feat)|Lemmed],[Subj|Costs],[i(N,Noun,Ca,Lem,sn,Feat,N1,Func/Role)|Deps],[N-N1-Lem-Role|HIndex]):-
    Subj=Func-NP,
    (Func=sn;Func=sa;Func=obj;Func=subj;Func=xadj;Func=xcomp),
    NP=[Noun-Ca-_],Noun=W,N1=V,
    createdephead(V,Lemmed,Costs,Deps,HIndex),
    !.
createdephead(V,[i(N,W,Cat,Lem)|Lemmed],[Subj|Costs],[i(N1,W1,Ca1,Lem1,-,Feat1,N2,-)|Deps],HIndex):-
   (\+ select_punct(W,_);Cat=[par];Cat=par),
    Subj=Func-NP,
    NP\=[],
    make_list1(NP,List,Struc),length(List,L),L=1,
    remove(W1,List,[]),W1\=W,N2=V,
    (remove(i(N1,W1,Ca,Lem1-Feat1),Lemmed,Lee);
    remove(i(N1,W1,Ca,Lem1),Lemmed,Lee)),
    createdephead(V,[i(N,W,Cat,Lem)|Lee],Costs,Deps,HIndex),
    !.
createdephead(V,[i(N,W,Cat,Lem)|Lemmed],[Subj|Costs],[i(N,W,Cat,Lem,Cos,Feat,N2,-)|DepsAll],HIndex):-
   (\+ select_punct(W,_);Cat=[par];Cat=par),
    Subj=Func-NP,
    make_list1(NP,List,Struc),
    remove(W,List,Lists),
    length(Lists,L),
    depsrestcost(L,N1,Lemmed,Lists,Rests,Lems),
    member(Head,Rests),
    Head=..[i,N1|_],
    (var(V),V=N1;nonvar(V)),N2=N1,
    createdephead(V,Lems,Costs,Deps,HIndex),
    append(Rests,Deps,DepsAll),
    !.
createdephead(V,[i(N,W,Cat,Lem)|Lemmed],[Subj|Costs],[i(N,W,Cat,Lem,Cos,Feat,N1,-)|Deps],HIndex):-
   (\+ select_punct(W,_);Cat=[par];Cat=par),
    Subj=Func-NP,NP=[A],
    make_list1(NP,List,Struc),
    remove(W,List,[]),N1=V,
    createdephead(V,Lemmed,Costs,Deps,HIndex),
    !.
createdephead(V,[i(N,W,Cat,Lem-Feat)|Lemmed],[Subj|Costs],[i(N,W,Cat,Lem,Cos,Feat,N1,-)|Deps],HIndex):-
      N1=V,
    createdephead(V,Lemmed,Costs,Deps,HIndex),
    !.
createdephead(V,[i(N,W,Cat,Lem)|Lemmed],[Subj|Costs],[i(N,W,Cat,Lem,-,Feat,N1,-)|Deps],HIndex):-
     \+ select_punct(W,_),N1=V,
    createdephead(V,Lemmed,Costs,Deps,HIndex),
    !.
createdephead(V,[i(N,W,Cat,Lem-Feat)|Lemmed],Costs,[i(N,W,Cat,Lem,-,Feat,N1,-)|Deps],HIndex):-
      N1=V,Costs\=[],
    createdephead(V,Lemmed,Costs,Deps,HIndex),
    !.
createdephead(V,[i(N,W,Cat,Lem)|Lemmed],Costs,[i(N,W,Cat,Lem,Cos,-,N1,-)|Deps],HIndex):-
    (select_punct(W,Type);select_punct(_,[Cat])),
    (Type=[dirs];W=';';Type=[puntint];V1=V),
    createdephead(V1,Lemmed,Costs,Deps,HIndex),
    !.

checkcostrest(Costs,[],Costs):-
    !.
checkcostrest(Costs,Struc,CostRest):-
    append(Struc,Costs,CostRest),
    !.
checkcostrest(Costs,Struc,Costs):-
    !.

checkfuncnotnom(Func):-
   Func\=ibar,Func\=ir_infl,Func\=fac,Func\=fs,Func\=fc,Func\=dirsp,Func\=cp,Func\=f3,Func\=f2,
   !.

checkfeatsclits(V1,i(N,W,Cat,Lem),NP,Output,N-V1-Lem-Role):-    
    (is_list(NP),c_case(Lem,Case),W1=Lem;
     atomic(NP),c_case(NP,Case),W1=NP),
     (Case=acc,Obj=obj;Case=dat,Obj=iobj),
     (
     Case=acc,Output=i(N,W,Cat,Lem,sn,[case=Case],V1,obj/Role)
     ;
     Case\=acc,Output=i(N,W,Cat,Lem,sp,[case=Case],V1,iobj/Role)
     ),
     !.
checkfeatsclits(V1,i(N,W,Cat,Lem),NP,i(N,W,Cat,Lem,ibar,-,V1,-),[]):-
     !.
checkfeatsclits2(i(N,W,Ct,Lem),NP,i(N1,Verb,Ca,Lem1-Feat1),[i(N1,Clit,Cat,Lem-Feat)|Lems],Lems,Output,N1-V1-Lem-Role):-
     (
       (is_list(NP),c_case(Lem,Case),Clit=Lem;
        atomic(NP),c_case(NP,Case),Clit=NP),
        (Case=acc,Obj=obj;Case=dat,Obj=iobj;Case\=acc,Obj=obl),
        (
         Case=acc,Output=i(N,Clit,Ct,Lem,sn,Feat,N1,obj/Role)
         ;
         Case\=acc,Output=i(N,Clit,Ct,Lem,sp,Feat,N1,Obj/Role)
         )
        ;
        member(encl=Clit,Feat1),
        member(case=Case,Feat1),
        (Case=acc,Obj=obj;Case=dat,Obj=iobj;Case\=acc,Obj=obl),
        (
         Case=acc,Output=i(N1,Clit,Cat,Lem,sn,Feat,N1,obj/Role)
         ;
         Case\=acc,Output=i(N1,Clit,Cat,Lem,sp,Feat,N1,Obj/Role)
         )
         ),
     !.
checkfeatsclits2(i(N,W,Ct,Lem),NP,i(N1,Verb,Ca,Lem1-Feat1),Lems,Lems,Output,N1-V1-Lem-Role):-
     (
       (is_list(NP),c_case(Lem,Case),Clit=Lem;
        atomic(NP),c_case(NP,Case),Clit=NP),
        (Case=acc,Obj=obj;Case=dat,Obj=iobj;Case\=acc,Obj=obl),
        (
         Case=acc,Output=i(N,Clit,Ct,Lem,sn,Feat,N1,obj/Role)
         ;
         Case\=acc,Output=i(N,Clit,Ct,Lem,sp,Feat,N1,Obj/Role)
         )
        ;
        member(encl=Clit,Feat1),
        member(case=Case,Feat1),
        (Case=acc,Obj=obj;Case=dat,Obj=iobj;Case\=acc,Obj=obl),
        (
         Case=acc,Output=i(N1,Clit,Cat,Lem,sn,Feat,N1,obj/Role)
         ;
         Case\=acc,Output=i(N1,Clit,Cat,Lem,sp,Feat,N1,Obj/Role)
         )
         ),
     !.
checkfeatsclits2(i(N,W,Cat,Lem),NP,i(N1,Verb,Ca,Lem1-Feat1),Lemres,Lemres,i(N,W,Cat,Lem,ibar,-,N1,-),[]):-    
     !.

checkfeatsclits1(i(N1,Verb,Ca,Lem1-Feat1),[i(N1,Clit,Cat,Lem-Feat)|Lems],Lems,Output,N1-V1-Lem-Role):-
     member(encl=Clit,Feat1),
     member(case=Case,Feat1),
     (Case=acc,Obj=obj;Case=dat,Obj=iobj;Case\=acc,Obj=obl),
     (
     Case=acc,Output=i(N1,Clit,Cat,Lem,sn,Feat,N1,obj/Role)
     ;
     Case\=acc,Output=i(N1,Clit,Cat,Lem,sp,Feat,N1,Obj/Role)
     ),
     !.
checkfeatsclits1(i(N1,Verb,Ca,Lem1-Feat1),Lems,Lems,Output,N1-V1-Lem-Role):-
     (Ca=vcl;Ca=v),
     analtoken(Verb,Feats1),
     member(Lem-Feass,Feats1),
     member(encl=Clit,Feass),
     member(case=Case,Feass),
     (Case=acc,Obj=obj;Case=dat,Obj=iobj;Case\=acc,Obj=obl),
     (
     Case=acc,Output=i(N1,Clit,clit,Clit,sn,[case=Case],N1,obj/Role)
     ;
     Case\=acc,Output=i(N1,Clit,clit,Clit,sp,[case=Case],N1,Obj/Role)
     ),
     !.
checkfeatsclits1(Input,Lemres,Lemres,[],[]):-    
     !.

/*
 la - art - sn,
  data - n - sn,
  mod - [ (1309 - num - sn),
    (f2 - [ (f2 - [sp-[nel-part-sp,quale-rel-f2]]),
      (f - [ (subj - pro),
	(ibar - [si-clit-ibar,registra-vt-ibar])
      ])
    ])
  ]
*/

checkcatfunc(Subj,Ibar):-
   Subj=ibar-Ibar;Subj=ir_infl-Ibar;Subj=sv3-Ibar;Subj=sv5-Ibar;Subj=sv2-Ibar;Subj=vcomp-Ibar,
   !.
checkcatfunc1(Subj,Ibar):-
   Subj=sv3-Ibar;Subj=sv5-Ibar;Subj=sv2-Ibar;Subj=vcomp-Ibar;Subj=xadj-Ibar,reverse(Ibar,Rev),Rev=[_-_-V|_],(V=sv3;V=ppas;V=ppre),
   !.

% Ind1 = N that is the index of the complementizer
% V1 on the contrary is the governing Verb of the clause

reldepscost(Fac,N1-Lem1-Feat1,NP,LemmedAll,[Subj|Costs],[Rels|Ress],Lemout,[N1-V1-Lem1-Role|HIndex2]):-
    getindexrel([Subj|Costs],W1,Clause),
    (Costs\=[],Costt=Costs;Clause\=[],Costt=Clause),
    (is_list(Costt),Costt1=Costt;Costt1=[Costt]),
     getcosts(Costt1,Costss),
    (
    LemmedAll=[i(N,W,Cat,Lem)|Lemmed],
     Fac=f2,
     (W1=W,Lemss=Lemmed,Ind1=N
      ;
      W1=nil,Lemss=[i(N,W,Cat,Lem)|Lemmed],Ind1=N1),
     (Costss=[subj-pro|RestCos],Fun=subj
       ;
      remove(subj-pro,Costss,RestCos),Fun=subj
       ;
      nogen_member(Sn-Sub,Costss),(Sn=sn;Sn=subj),
         RestCos=Costss,Fun=obj,
         nth(Costss,Num,Sn-Sub),Num<4
       ;
       Fun=subj,RestCos=Costss),
     Rels=[i(Ind1,W1,Cat,W1,f2,Feat1,N1,binder),i(V1,rel_pro,pro,bindee,f2,Feat1,ante=Lem1,Fun/Role)]
     ;
    LemmedAll=[i(N2,W2,Cat2,Lem2),i(N,W,Cat,Lem)|Lemmed],
     Fac=f2,W1=W,Lemss=Lemmed,Ind1=N,
     (Costss=[subj-pro|RestCos],Fun=subj
       ;
      remove(subj-pro,Costss,RestCos),Fun=subj
       ;
      nogen_member(Sn-Sub,Costss),(Sn=sn;Sn=subj),
         RestCos=Costss,Fun=obj,
         nth(Costss,Num,Sn-Sub),Num<4
       ;
       Fun=subj,RestCos=Costss),     Rels=[i(N2,W2,Cat2,Lem2,sp,-,Ind1,-),i(Ind1,W1,Cat,W1,f2,Feat1,N1,binder),i(V1,rel_pro,pro,bindee,f2,Feat1,ante=Lem1,Fun/Role)]
     ;
     LemmedAll=[i(N,W,Cat,Lem)|Lemmed],
     Fac=fac,W1=W,Ind1=N,RestCos=Costss,Lemss=Lemmed,
     Rels=[i(Ind1,W1,Cat,W1,fac,Feat1,N1,-)]
     ;
     LemmedAll=[i(N,W,Cat,Lem)|Lemmed],
     W1\=W,RestCos=Costss,
     make_listss(NP,List),
     remove(W,List,List1),
     remove(i(Ind1,W1,Ca,Lemm),Lemmed,Lems),
     remove(W1,List1,List2),
     length(List,L),
     depsrestcost(L,Ind1,Lems,List2,Rest,Lemss),
Rells=[i(N,W,Cat,Lem,Cos,Feat,N1,-),i(Ind1,W1,Cat,W1,f2,Feat1,N1,binder),
              i(V1,rel_pro,pro,bindee,f2,Feat1,ante=Lem1,obl/Role)],
     append(Rest,Rells,Rels)
      ;
     LemmedAll=[i(N,W,Cat,Lem)|Lemmed],
     W1\=W,
     Subj=f2-Cost,
     make_list3(Cost,List,R),
     remove(i(Ind1,W1,Ca,Lemm),Lemmed,Lems),
     remove(W1,List1,List2),
     length(List,L),
     depsrestcost(L,Ind1,Lems,List2,Rest,Lemss),
     (Costss=[subj-pro|RestCos]
       ;
      remove(subj-pro,Costss,RestCos)
       ;
      nogen_member(Sn-Sub,Costss),(Sn=sn;Sn=subj),
         RestCos=Costss,
         nth(Costss,Num,Sn-Sub),Num<4
       ;
       RestCos=Costss),          Rells=[i(N,W,Cat,Lem,Cos,Feat,N1,-),i(Ind1,W1,Cat,W1,f2,Feat1,N1,binder),
              i(V1,rel_pro,pro,bindee,f2,Feat1,ante=Lem1,obl/Role)],
     append(Rest,Rells,Rels)
    ;
     LemmedAll=[i(N,W,Cat,Lem)|Lemmed],
%     RestCos=Costss,
     make_listss([Subj],List),
     remove(W,List,List1),
     remove(i(Ind1,W1,Ca,Lemm),Lemmed,Lems),
     remove(W1,List1,List2),
     length(List,L),
     depsrestcost(L,Ind1,Lems,List2,Rest,Lemss),
     (
      Costss=[subj-pro|RestCos]
       ;
      nogen_member(Sn-Sub,Costss),(Sn=sn;Sn=subj),
         RestCos=Costss,
         nth(Costss,Num,Sn-Sub),Num<4
       ;
       RestCos=Costss),
     Rells=[i(N,W,Cat,Lem,Cos,Feat,N1,-),i(Ind1,W1,Cat,W1,f2,Feat1,N1,binder),
              i(V1,rel_pro,pro,bindee,f2,Feat1,ante=Lem1,obl/Role)],
     append(Rest,Rells,Rels)
     ),
%    createdephead(Ind1,Lemss,RestCos,Ress,HIndex2),Lemout=[],
    reldepscost(Ind1/V1,Lemss,RestCos,Ress,Lemout,HIndex2),
    !.
reldepscost(V1/X,[],[],[],[],[]):-!.
reldepscost(V1/X,Lemmed,[],[],Lemmed,[]):-!.
reldepscost(V1/X,[i(N,W,Cat,Lem-Feat)|Lemmed],[Subj|Costs],[i(N,Verb,Cat,Lem,ibar,Feat,V1,CatV/Scat)|Deps],Lemout,HIndex):-
    checkcatfunc(Subj,Ibar),
    Ibar=[Verb-Ca-_],Verb=W,
    getcatsemasp(Lem,CatV,Scat,LArgsV,Le),
    (var(X),X=N,Nx=N;nonvar(X),Nx=N),
    reldepscost(V1/Nx,Lemmed,Costs,Deps,Lemout,HIndex),
    !.
reldepscost(V1/X,[i(N,W,Cat,Lem-Feat)|Lemmed],[Subj|Costs],[i(N,Verb,Cat,Lem,ibar,Feat,X,CatV/Scat)|DepsAll],Lemout,HIndex):-
    checkcatfunc1(Subj,Ibar),
    Ibar=[Verb-Ca-_|Res],Verb=W,
    getcatsemasp(Lem,CatV,Scat,LArgsV,Le),
    make_list1(Res,List,Struc),
    length(List,L),
    depsrestcost(L,N,Lemmed,List,Rest,Lems),
    reldepscost(V1/N,Lems,Costs,Deps,Lemout,HIndex),
    append(Rest,Deps,DepsAll),
    !.
reldepscost(V1/X,[Input|Lemmed],[Subj|Costs],[Output,i(N1,Verb,Ca,Lem1,Infl,Feat1,V1,CatV/Scat)|DepsAll],Lemout,[Indx|HIndex]):-
    (Input=i(N,W,Cat,Lem-Feat);Input=i(N,W,Cat,Lem)),
    (Subj=ibar-Ibar;Subj=ir_infl-Ibar),Infl=ibar, 
    (var(X),X=N1,V2=N1;nonvar(X),V2=N1),
    reverse(Ibar,Revs),
     (Revs=[Verb-Ca1-_|Rev],
     check_all_verbs(Ca1)
     ;
     member(Verb-Ca1-_,Revs),
     check_all_verbs(Ca1)),     
     remove(i(N1,Verb,Ca,Lem1-Feat1),Lemmed,Lemres),
     getcatsemasp(Lem1,CatV,Scat,LArgsV,Le),
    make_list1(Ibar,List,Struc),
    remove(W,List,List1),
    remove(Verb,List1,List2),
    length(List1,L),
    depsrestcost(L,N1,Lemres,List2,Rest,Lemss),
%    checkfeatsclits(N1,i(N,W,Cat,Lem),Ibar,Output,Indx),
    checkfeatsclits2(i(N,W,Cat,Lem),Ibar,i(N1,Verb,Ca,Lem1-Feat1),Lemss,Lems,Output,Indx),
    reldepscost(V1/V2,Lems,Costs,Deps,Lemout,HIndex),
    append(Rest,Deps,DepsAll),
    !.
reldepscost(V1/X,[i(N,W,Cat,Lem-Feat)|Lemmed],[Subj|Costs],[Output,i(N,Verb,Cat,Lem,Infl,Feat,V1,CatV/Scat)|DepsAll],Lemout,[Indx|HIndex]):-
    (Subj=ibar-Ibar;Subj=ir_infl-Ibar),
    Infl=ibar, 
    (var(X),X=N1,V2=N1;nonvar(X),V2=N1),
    reverse(Ibar,Revs),
     (Revs=[Verb-Ca1-_|Rev],
     check_all_verbs(Ca1)
     ;
     member(Verb-Ca1-_,Revs),
     check_all_verbs(Ca1)),     
     getcatsemasp(Lem,CatV,Scat,LArgsV,Le),
    make_list1(Ibar,List,Struc),
    remove(W,List,List1),
    remove(Verb,List1,List2),
    length(List1,L),
    depsrestcost(L,N1,Lemres,List2,Rest,Lemss),
%    checkfeatsclits(N1,i(N,W,Cat,Lem),Ibar,Output,Indx),
    checkfeatsclits2(i(N,W,Cat,Lem),Ibar,i(N1,Verb,Ca,Lem1-Feat1),Lemss,Lems,Output,Indx),
    reldepscost(V1/V2,Lems,Costs,Deps,Lemout,HIndex),
    append(Rest,Deps,DepsAll),
    !.
reldepscost(V1/X,[Input|Lemmed],[Subj|Costs],[i(N,W,Cat,Lem,ibar,Feat,N1,-),i(N1,Verb,Ca,Lem1,Infl,Feat1,X,CatV/Scat),Output|DepsAll],Lemout,[Indx|HIndex]):-
    (Input=i(N,W,Cat,Lem-Feat);Input=i(N,W,Cat,Lem)),
    (Subj=sv3-Ibar;Subj=sv5-Ibar;Subj=sv2-Ibar;Subj=vcomp-Ibar), 
    Infl=vcomp, V2=X,
    reverse(Ibar,Revs),
     (Revs=[Verb-Ca1-_|Rev],
     check_all_verbs(Ca1)
     ;
     member(Verb-Ca1-_,Revs),
     check_all_verbs(Ca1)),     
     remove(i(N1,Verb,Ca,Lem1-Feat1),Lemmed,Lemres),
     getcatsemasp(Lem1,CatV,Scat,LArgsV,Le),
    make_list1(Ibar,List,Struc),
    remove(W,List,List1),
    remove(Verb,List1,List2),
    length(List1,L),
    checkfeatsclits1(i(N1,Verb,Ca,Lem1-Feat1),Lemres,Lemms,Output,Indx),
    depsrestcost(L,N1,Lemms,List2,Rest,Lems),
    reldepscost(V1/V2,Lems,Costs,Deps,Lemout,HIndex),
    append(Rest,Deps,DepsAll),
    !.
reldepscost(V1/X,[Input|Lemmed],[Subj|Costs],[i(N1,Verb,Cat,Lem1,Infl,Feat1,X,CatV/Scat),Output|DepsAll],Lemout,[Indx|HIndex]):-
    (Input=i(N1,W,Cat,Lem1-Feat1);Input=i(N1,W,Cat,Lem1)),
    (Subj=sv3-Ibar;Subj=sv5-Ibar;Subj=sv2-Ibar;Subj=vcomp-Ibar), 
    Infl=vcomp, V2=X,
    reverse(Ibar,Revs),
     (Revs=[Verb-Ca1-_|Rev],
     check_all_verbs(Ca1)
     ;
     member(Verb-Ca1-_,Revs),
     check_all_verbs(Ca1)),W=Verb,     
     getcatsemasp(Lem1,CatV,Scat,LArgsV,Le),
    make_list1(Ibar,List,Struc),
    remove(Verb,List,List1),
    length(List1,L),
    checkfeatsclits1(i(N1,Verb,Ca,Lem1-Feat1),Lemmed,Lemms,Output,Indx),
    depsrestcost(L,N1,Lemms,List1,Rest,Lems),
    reldepscost(V1/V2,Lems,Costs,Deps,Lemout,HIndex),
    append(Rest,Deps,DepsAll),
    !.
reldepscost(V1/X,[i(N,W,Cat,Lem)|Lemmed],[Subj|Costs],[i(N,W,Cat,Lem,cp,-,N1,-)|Deps],Lemout,HIndex):-
    select_punct(W,_),
    (Subj=Func-NP,NP=[W-_-_],Costss=Costs;Subj=W-B-C,Costss=Costs
       ;Subj=Func-[W-_-_|Rest],Costss=[Subj-Rest|Costs]),
    reldepscost(V1/X,Lemmed,Costss,Deps,Lemout,HIndex),
    !.
/*
reldepscost(V1/X,[i(N,W,Cat,Lem)|Lemmed],[Subj|Costs],[Output,i(N1,Verb,Ca,Lem1,Infl,Feat1,V1,CatV/Scat)|DepsAll],Lemout,[Indx|HIndex]):-
   ((Subj=ibar-Ibar;Subj=ir_infl-Ibar),Infl=ibar, V2=N1
     ;
     (Subj=sv3-Ibar;Subj=sv5-Ibar;Subj=sv2-Ibar;Subj=vcomp-Ibar), Infl=vcomp, V2=X),
     reverse(Ibar,Revs),
     (Revs=[Verb-Ca1-_|Rev],
     check_all_verbs(Ca1)
     ;
     member(Verb-Ca1-_,Revs),
     check_all_verbs(Ca1)),     
     remove(i(N1,Verb,Ca,Lem1-Feat1),Lemmed,Lemres),
     getcatsemasp(Lem1,CatV,Scat,LArgsV,Le),
    make_list1(Ibar,List,Struc),
    remove(W,List,List1),
    remove(Verb,List1,List2),
    length(List,L),
    depsrestcost(L,N1,Lemres,List2,Rest,Lems),
    checkfeatsclits(N1,i(N,W,Cat,Lem),Ibar,Output,Indx),
    reldepscost(V1/V2,Lems,Costs,Deps,Lemout,HIndex),
    append(Rest,Deps,DepsAll),
    !.
*/
reldepscost(V1/X,[i(N,W,Cats,Lem)|Lemmed],[Subj|Costs],[i(N,W,Cat,Lem,sp,Feat,X,-),i(N1,Noun,Ca,Lem1,sp,Feat1,N,Func/Role)|DepsAll],Lemout,[N1-N2-Lem1-Role|HIndex]):-
    Subj=Obl-NP,(Obl=iobj;Obl=obl;Obl=xadj;Obl=xcomp),
    (NP=[W-Cat-_|Res];NP=[_,W-Cat-_|Res]),
    (Cat=p;Cat=part;Cat=php;Cat=pd;Cat=pda;Cat=partd;Cat=partda),
    newprendi_testa(Obl,NP,Noun),
    (remove(i(N1,Noun,Ca,Lem1-Feat1),Lemmed,Lee);
    remove(i(N1,Noun,Ca,Lem1),Lemmed,Lee)),
    make_list3(NP,List,Struc),
    remove(W,List,Lists),
    remove(Noun,Lists,List1),
    length(List,L),
    depsrestcost(L,N1,Lee,List1,Rest,Lemss),
    checkcostrest(Costs,Struc,CostRest),
    callf2facs(CostRest,NP,N1-Lem1-Feat1,Rest,Lemss,Costss,Lems,Rests,HIndex2),
    reldepscost(V1/X,Lems,Costss,Deps,Lemout,HIndex1),
    append(Rests,Deps,DepsAll),
    append(HIndex2,HIndex1,HIndex),
    !.
reldepscost(V1/X,[i(N,W,Cats,Lem)|Lemmed],[Subj|Costs],[i(N,W,Cat,Lem,sp,Feat,X,-),i(N1,Noun,Ca,Lem1,sp,Feat1,N,Func/Role)|DepsAll],Lemout,[N1-N2-Lem1-Role|HIndex]):-
    Subj=Obl-NP,(Obl=sp;Obl=spd;Obl=spda),
    (NP=[W-Cat-_|Res];NP=[_,W-Cat-_|Res]),
    (Cat=p;Cat=part;Cat=php;Cat=pd;Cat=pda;Cat=partd;Cat=partda),
    newprendi_testa(Obl,NP,Noun),
    (remove(i(N1,Noun,Ca,Lem1-Feat1),Lemmed,Lee);
    remove(i(N1,Noun,Ca,Lem1),Lemmed,Lee)),
    make_list3(NP,List,Struc),
    remove(W,List,Lists),
    remove(Noun,Lists,List1),
    length(List,L),
    depsrestcost(L,N1,Lee,List1,Rest,Lemss),
    checkcostrest(Costs,Struc,CostRest),
    callf2facs(CostRest,NP,N1-Lem1-Feat1,Rest,Lemss,Costss,Lems,Rests,HIndex2),
    reldepscost(V1/X,Lems,Costss,Deps,Lemout,HIndex1),
    append(Rests,Deps,DepsAll),
    append(HIndex2,HIndex1,HIndex),
    !.
reldepscost(V1/X,[i(N,W,Cat,Lem-Feat)|Lemmed],[Subj|Costs],[i(N,W,Cat,Lem,sn,Feat,N1,-),i(N1,Noun,Ca,Lem1,sn,Feat1,N2,Func/Role)|DepsAll],Lemout,[N1-N2-Lem1-Role|HIndex]):-
   (\+ select_punct(W,_);Cat=[par];Cat=par),
    Subj=Func-NP,
    checkfuncnotnom(Func),
    newprendi_testa(Func,NP,Noun),
    (remove(i(N1,Noun,Ca,Lem1-Feat1),Lemmed,Lee);
    remove(i(N1,Noun,Ca,Lem1),Lemmed,Lee)),
    make_list3(NP,List,Struc),
    remove(W,List,Lists),
    remove(Noun,Lists,List1),
    length(List,L),
    (
     (member(ibar-_,Costs);member(ir_infl-_,Costs)),
      Func=subj,N2=V
      ;
      (Func=sn;Func=obj),N2=X,V=X
      ;
      N2=V),
    depsrestcost(L,N1,Lee,List1,Rest,Lemss),
    checkcostrest(Costs,Struc,CostRest),
    callf2facs(CostRest,NP,N1-Lem1-Feat1,Rest,Lemss,Costss,Lems,Rests,HIndex2),
    reldepscost(V1/V,Lems,Costss,Deps,Lemout,HIndex1),
    append(Rests,Deps,DepsAll),
    append(HIndex2,HIndex1,HIndex),
    !.
reldepscost(V1/X,[LemF|Lemmed],[Subj|Costs],[i(N,W,Cat,Lem,Func,Feat,N1,-)|Deps],Lemout,HIndex):-
    (LemF=i(N,W,Cat,Lem-Feat);LemF=i(N,W,Cat,Lem),Feat=[]),
    Subj=Func-NP, 
    (NP=[W-_-_],Costss=Costs;NP=[W-_-_|Rest],Costss=[Func-Rest|Costs]),
    (Func=savv;Func=cp;Func=f3),N1=X,
    reldepscost(V1/X,Lemmed,Costss,Deps,Lemout,HIndex),
    !.
reldepscost(V1/X,[LemF|Lemmed],[Subj|Costs],[i(N,W,Cat,Lem,Func,Feat,N1,-)|Deps],Lemout,HIndex):-
    (LemF=i(N,W,Cat,Lem-Feat);LemF=i(N,W,Cat,Lem),Feat=[]),
    (Subj=Func-NP, 
    (NP=[W-_-_],Costss=Costs;NP=[W-_-_|Rest],Costss=[Func-Rest|Costs])
    ;
    Subj=W-B-C, Func=C, Costss=Costs),
    (Func=fc;Func=fs;Func=dirsp),N1=X,
%    createdephead(N,Lemmed,Costs,Deps,HIndex),Lemout=[],
    reldepscost(V1/V,Lemmed,Costss,Deps,Lemout,HIndex),
    !.
reldepscost(V1/N1,[i(N,W,Cat,Lem-Feat)|Lemmed],[Subj|Costs],[i(N,W,Cat,Lem,Cos,Feat,V1,-)|DepsAll],Lemout,[N-V1-Lem-fcomp|HIndex]):-
    (Subj=fac-Fac;Subj=fc-Fac,Fac=[_-che-_]),
    getindexrel(Fac,W1,Clause),W1=W,
%    getcosts(Fac,Costss),
    reldepscost(X/V,Lemmed,Clause,Rests,Lems,HIndex2),
    reldepscost(V2/Y,Lems,Costs,Deps,Lemout,HIndex1),
    append(Rests,Deps,DepsAll),
    append(HIndex2,HIndex1,HIndex),
    !.
reldepscost(V1/X,[i(N,W,Cat,Lem-Feat)|Lemmed],[Subj|Costs],[Rells|Deps],Lemout,[N2-V1-Lem2-Role|HIndex]):-
    (Subj=fint-Fac,Sent=Fac,Costss=Costs,Cos=fint
     ;Subj=f2-Fac,Sent=Fac,Costss=Costs,Cos=f2),
    getindexrel(Fac,W1,Clause),
    (W1=W,Lemms=Lemmed,Lem2=Lem,Feat2=Feat,
      Rells=[i(N,W,Cat,Lem,Cos,Feat,N1,binder),
              i(V1,rel_pro,pro,bindee,Cos,Feat2,ante=Lem,obj/Role)],
       (Costss\=[],RestCos=Costss;Costss=[],Clause\=[],RestCos=Clause)
      ;
     recover_descs(W1,List),is_list(List),member(W,List),
      Lemmed=[i(N2,W2,Cat2,Lem2-Feat2)|Lemms],
       Rells=[i(N,W,Cat,Lem,Cos,Feat,N1,-),i(N2,W2,Cat2,Lem2,Cos,Feat2,N,binder),
              i(V1,rel_pro,pro,bindee,Cos,Feat2,ante=Lem2,obj/Role)],
       (Costss\=[],RestCos=Costss;Costss=[],Clause\=[],RestCos=Clause)
      ;
      Cos=f2,
      (prepos(W);prepart(Lem,W,_)),
      Lemmed=[i(N2,W2,Cat2,Lem2-Feat2)|Lemms],W2=W1,
       Rells=[i(N,W,Cat,Lem,Cos,Feat,N1,-),i(N2,W2,Cat2,Lem2,Cos,Feat2,N,binder),
              i(V1,rel_pro,pro,bindee,Cos,Feat2,ante=Lem2,obj/Role)],
      (Clause=f-[subj-pro|RestCo]
       ;
       Clause=[subj-pro|RestCo]
       ;
        nogen_member(Sn-Sub,Clause),(Sn=sn;Sn=subj),
         nth(Clause,Num,Sn-Sub),Num<4,RestCo=Clause),
       append(RestCo,Costss,RestCos)
      ),
     (N=1,N1=0;N\=1,N1=V1),
    reldepscost(V1/X,Lemms,RestCos,Deps,Lemout,HIndex),
%    createdephead(V,Lemms,RestCos,Deps,HIndex),
    !.
reldepscost(V1/X,[i(N,W,Cat,Lem-Feat)|Lemmed],[Subj|Costs],[i(N,Noun,Cat,Lem,sn,Feat,N2,Func/Role)|DepsAll],Lemout,[N-N2-Lem-Role|HIndex]):-
   (\+ select_punct(W,_);Cat=[par];Cat=par),
    Subj=Func-NP,
%    Func\=ibar,Func\=ir_infl,Func\=fac,Func\=fs,Func\=fc,Func\=dirsp,Func\=cp,Func\=f3,Func\=f2,
    newprendi_testa(Func,NP,Noun),Noun=W,
    make_list3(NP,List,Struc),
    remove(W,List,Lists),
    length(List,L),
    ((member(ibar-_,Costs);member(ir_infl-_,Costs)),
      Func=subj,N2=V
      ;
      Func=obj,N2=X,V=X
      ;
      N2=V),
    depsrestcost(L,N,Lemmed,Lists,Rest,Lemss),
    checkcostrest(Costs,Struc,CostRest),
    callf2facs(CostRest,NP,N-Lem-Feat,Rest,Lemss,Costss,Lems,Rests,HIndex2),
    reldepscost(V1/V,Lems,Costss,Deps,Lemout,HIndex1),
    append(Rests,Deps,DepsAll),
    append(HIndex2,HIndex1,HIndex),
    !.
reldepscost(V1/X,[i(N,W,Cat,Lem)|Lemmed],[Subj|Costs],[i(N,W,Cat,Lem,sn,-,N1,-),i(N1,Noun,Ca,Lem1,sn,Feat1,N2,Func/Role)|DepsAll],Lemout,[N1-N2-Lem1-Role|HIndex]):-
   (\+ select_punct(W,_);Cat=[par];Cat=par),
    Subj=Func-NP,
%    Func\=ibar,Func\=ir_infl,Func\=fac,Func\=fs,Func\=fc,Func\=dirsp,Func\=cp,Func\=f3,Func\=f2,
    newprendi_testa(Func,NP,Noun),
    (remove(i(N1,Noun,Ca,Lem1-Feat1),Lemmed,Lee);
    remove(i(N1,Noun,Ca,Lem1),Lemmed,Lee)),
    make_list3(NP,List,Struc),
    remove(W,List,Lists),
    remove(Noun,Lists,List1),
    length(List,L),
    ((member(ibar-_,Costs);member(ir_infl-_,Costs)),
      Func=subj,N2=V
      ;
      Func=obj,N2=X,V=X
      ;
      N2=V),
    depsrestcost(L,N1,Lee,List1,Rest,Lemss),
    checkcostrest(Costs,Struc,CostRest),
    callf2facs(CostRest,NP,N1-Lem1-Feat1,Rest,Lemss,Costss,Lems,Rests,HIndex2),
    reldepscost(V1/V,Lems,Costss,Deps,Lemout,HIndex1),
    append(Rests,Deps,DepsAll),
    append(HIndex2,HIndex1,HIndex),
    !.    
reldepscost(V1/X,[i(N,W,Cat,Lem-Feat)|Lemmed],[Subj|Costs],[i(N,Noun,Ca,Lem,sn,Feat,N1,Func/Role)|Deps],Lemout,[N-N1-Lem-Role|HIndex]):-
    Subj=Func-NP,
    (Func=sn;Func=sa;Func=obj;Func=subj;Func=xadj;Func=xcomp),
    NP=[Noun-Ca-_],Noun=W,N1=X,
    reldepscost(V1/X,Lemmed,Costs,Deps,Lemout,HIndex),
    !.
reldepscost(V1/X,[i(N,W,Cat,Lem)|Lemmed],[Subj|Costs],[i(N,W,Cat,Lem,Cos,Feat,N1,-)|Deps],Lemout,HIndex):-
    Subj=Func-NP,
    make_list1(NP,List,Struc),List=[W],
    reldepscost(V1/X,Lemmed,Costs,Deps,Lemout,HIndex),
    !.
reldepscost(V1/X,[i(N,W,Cat,Lem)|Lemmed],[Subj|Costs],[i(N,Noun,Cat,Lem,sn,Feat,N2,Func/Role)|DepsAll],Lemout,[N-N2-Lem-Role|HIndex]):-
   (\+ select_punct(W,_);Cat=[par];Cat=par),
    Subj=Func-NP,
%    Func\=ibar,Func\=ir_infl,Func\=fac,Func\=fs,Func\=fc,Func\=dirsp,Func\=cp,Func\=f3,Func\=f2,
    newprendi_testa(Func,NP,Noun),
    make_list3(NP,List,Struc),
    remove(W,List,Lists),W=Noun,N2=X,
    checkcostrest(Costs,Struc,CostRest),
    callf2facs(CostRest,NP,N-Lem-Feat,[],Lemmed,Costss,Lems,Rests,HIndex2),
    reldepscost(V1/X,Lems,Costss,Deps,Lemout,HIndex1),
    append(Rests,Deps,DepsAll),
    append(HIndex2,HIndex1,HIndex),
    !.    
reldepscost(V1/X,Lemmed,[Subj|Costs],[i(N,W,Cat,Lem,Cos,Feat,N1,-)|DepsAll],Lemout,HIndex):-
    Subj=coord-NP,
    remove(fc-[W-cong-_],NP,Rest),
    (remove(i(N,W,Cat,Lem-Feat),Lemmed,Lee);
    remove(i(N,W,Cat,Lem),Lemmed,Lee)),
    make_list1(NP,List,Struc),
    remove(W,List,Lists),
    length(Lists,L),N1=X,
    depsrestcost(L,N,Lee,Lists,Rest,Lems),
    reldepscost(V1/X,Lems,Costs,Deps,Lemout,HIndex),
    append(Rest,Deps,DepsAll),
    !.
reldepscost(V1/X,[i(N,W,Cat,Lem)|Lemmed],[Subj|Costs],[i(N1,W1,Ca1,Lem1,-,Feat1,N2,-)|DepsAll],Lemout,HIndex):-
   (\+ select_punct(W,_);Cat=[par];Cat=par),
    Subj=Func-NP,
    make_list1(NP,List,Struc),length(List,L),L=1,
    newprendi_testa(Func,NP,Noun),W1=Noun,
    remove(W1,List,Lists),W1\=W,
    (remove(i(N1,W1,Ca,Lem1-Feat1),Lemmed,Lee);
    remove(i(N1,W1,Ca,Lem1),Lemmed,Lee)),
    N2=X,
    depsrestcost(L,N1,Lee,Lists,Rest,Lems),
    reldepscost(V1/X,[i(N,W,Cat,Lem)|Lems],Costs,Deps,Lemout,HIndex),
    append(Rest,Deps,DepsAll),
    !.
reldepscost(V1/X,[i(N,W,Cat,Lem)|Lemmed],[Subj|Costs],[i(N,W,Cat,Lem,Cos,Feat,N1,-)|DepsAll],Lemout,HIndex):-
   (\+ select_punct(W,_);Cat=[par];Cat=par),
    Subj=Func-NP,
    make_list1(NP,List,Struc),
    remove(W,List,Lists),
    length(Lists,L),N1=V,
    depsrestcost(L,N1,Lemmed,Lists,Rests,Lems),
    member(Head,Rests),
    Head=..[i,N1|_],
    reldepscost(V1/X,Lems,Costs,Deps,Lemout,HIndex),
    append(Rests,Deps,DepsAll),
    !.
reldepscost(V1/X,[i(N,W,Cat,Lem)|Lemmed],Costs,[i(N,W,Cat,Lem,Cos,-,X,-)|Deps],Lemout,HIndex):-
    Costs\=[],
    reldepscost(V1/X,Lemmed,Costs,Deps,Lemout,HIndex),
    !.
reldepscost(V1/X,[i(N,W,Cat,Lem-Feat)|Lemmed],Costs,[i(N,W,Cat,Lem,-,Feat,X,-)|Deps],Lemout,HIndex):-
    Costs\=[],
    reldepscost(V1/X,Lemmed,Costs,Deps,Lemout,HIndex),
    !.

checkmatchappend([A,B,C,D,E,M],[A,B,C,D,E],[M|Costs],Costs):-!.
checkmatchappend([A,B,C,D,M],[A,B,C,D],[M|Costs],Costs):-!.
checkmatchappend([A,B,C,M],[A,B,C],[M|Costs],Costs):-!.
checkmatchappend([A,B,M],[A,B],[M|Costs],Costs):-!.
checkmatchappend([A,B,C|M],[A,B,C|Mo],Costs,Costs):-!.
checkmatchappend([A,B|M],[A,B|Mo],Costs,Costs):-!.
checkmatchappend([A|M],[A|[]],M,[]):-!.
checkmatchappend([A,M],[A|[]],[M|Costs],Costs):-!.
checkmatchappend([A|M],[A|Mo],Costs,Costs):-
    M\=Mo,
    append(Mo,Costs,Costss)
    ;
    M=Mo,
    Costss=Costs,!.
checkmatchappend(M,Mo,Costs,Costss):-
    append(Mo,Costs,Costss),!.

checkmatchappend1([A,B|M],[A|Mo],Costs,Costss):-
    M=Mo,
    append(Mo,Costs,Costss),
    !.
checkmatchappend1([A,B,C|M],[A,B|Mo],Costs,Costss):-
    M=Mo,
    append(Mo,Costs,Costss),
    !.
checkmatchappend1([A,B,C,D|M],[A,B,C|Mo],Costs,Costss):-
    M=Mo,
    append(Mo,Costs,Costss),
    !.
checkmatchappend1(M,Mo,Costs,Costss):-
    append(Mo,Costs,Costss),!.


newcheckmatchappend([A,B,C,D,E,M],[A,B,C,D,E,M|Costs],Costs):-!.
newcheckmatchappend([A,B,C,D,M],[A,B,C,D,M|Costs],Costs):-!.
newcheckmatchappend([A,B,C,M],[A,B,C,M|Costs],Costs):-!.
newcheckmatchappend([A,B,M],[A,B,M|Costs],Costs):-!.
newcheckmatchappend([A,B],[A,B|Costs],Costs):-!.
newcheckmatchappend([A],[A|Costs],Costs):-!.
newcheckmatchappend([A],[A|Costs],Costs):-!.

callf2facs(Costs,NP,N1-Lem1-Feat1,Rest,Lemss,Costss,Lems,Rests,HIndex2):-
     (remove(f2-F2,NP,Mod),Fac=f2;remove(fac-F2,NP,Mod),Fac=fac),
      reldepscost(Fac,N1-Lem1-Feat1,NP,Lemss,F2,Ress,Lems,HIndex2),
      append(Rest,Ress,Rests),
       (newcheckmatchappend([Fac-F2],Costs,Costss);Costss=Costs)
      ;
     (remove(f2-F2,NP,Mod),Fac=f2;remove(fac-F2,NP,Mod),Fac=fac),
      F2=[A], remove(f-F,Mod,Head),Mods=[f2-[f2-F2,F]],
      reldepscost(Fac,N1-Lem1-Feat1,NP,Lemss,Mods,Ress,Lems,HIndex2),
      append(Rest,Ress,Rests),
       (newcheckmatchappend([f2-F2,f-F],Costs,Costss);Costss=Costs)
      ;
      (FunM=mod;FunM=obl),
      remove(FunM-M,NP,Mod),
      remove(f2-F2,M,Mo),
      nth(NP,Nn,FunM-M),
      (FunM\=mod,Nn=<4;FunM=mod,Nn<6),
      reldepscost(Fac,N1-Lem1-Feat1,NP,Lemss,F2,Ress,Lems,HIndex2),
      append(Rest,Ress,Rests),
      (Mo=[],Costss=Costs;Mo\=[],checkmatchappend(M,Mo,Costs,Costss))
      ;
      (FunM=spd;FunM=spda;FunM=sp),
      remove(FunM-M,NP,Mod),
      remove(f2-F2,M,Mo),
      reldepscost(Fac,N1-Lem1-Feat1,NP,Lemss,F2,Ress,Lems,HIndex2),
      append(Rest,Ress,Rests),
      (Mo=[],Costss=Costs;Mo\=[],checkmatchappend1(NP,Mod,Costs,Costss))
      ;
      Costs=[fac-F2|Coss], F2\=[A],Fac=fac,
      reldepscost(Fac,N1-Lem1-Feat1,NP,Lemss,F2,Ress,Lems,HIndex2),
      append(Rest,Ress,Rests),Costss=Coss
      ;
      (
       (Costs=[Fp-[_-Punt-_],f2-F2|Re],Fac=f2, F22=[f2-F2|Re];
       Costs=[Fp-[_-Punt-_],fac-F2|Re],Fac=fac, F22=[f2-F2|Re]), 
       (Fp=fp;Fp=cp;Fp=dirs)
       ;
        Costs=[f2-F2|_],Fac=f2, F22=Costs;Costs=[fac-F2|_],Fac=fac, F22=Costs),
%      F2=[A],
      reldepscost(Fac,N1-Lem1-Feat1,NP,Lemss,F22,Ress,Lems,HIndex2),
      append(Rest,Ress,Rests),Costss=[]
      ;
      NP=[Prep-_-_|Resto],
      (prepos(Prep);prepart(Le,Prep,_)),
      getF2(Resto,Lem1,Restos),Restos\=[],Fac=f2,F2=[f2-Restos],
      reldepscost(Fac,N1-Lem1-Feat1,NP,Lemss,F2,Ress,Lems,HIndex2),
      append(Rest,Ress,Rests),Costss=Costs
      ;
      computexadjs(N1-Lem1-Feat1,Costs,NP,Lemss,Rest,Costss,Lems,Rests),HIndex2=[]
      ;
      Lems=Lemss,Rests=Rest,Costss=Costs,HIndex2=[],
      !.

computexadjs(N1-Lem1-Feat1,Costs,NP,Lemms,Rest,Costss,Lems,Rests):-
      (Costs=[xadj-Adj,obl-Obl|Costss], Adjs=[xadj-Adj,obl-Obl]
       ;
       Costs=[savv-Avv,xadj-Adj,obl-Obl|Costss], Adjs=[savv-Avv,xadj-Adj,obl-Obl]
       ;
       Costs=[Fp-Punc,xadj-Adj,obl-Obl|Costss], Punc=[A], (Fp=fp;Fp=cp;Fp=dirs), Adjs=[xadj-Adj,obl-Obl]
       ;
       Costs=[Fp-Punc,savv-Avv,xadj-Adj,obl-Obl|Costss], Punc=[A], (Fp=fp;Fp=cp;Fp=dirs), Adjs=[savv-Avv,xadj-Adj,obl-Obl]
       ;
       Costs=[xadj-Adj|Costss], Adjs=[xadj-Adj]
       ;
       Costs=[appos-Adj|Costss], Adjs=[appos-Adj]
       ;
       Costs=[sa-Adj|Costss], Adjs=[sa-Adj]
       ;
       Costs=[savv-Avv,xadj-Adj|Costss], Adjs=[savv-Avv,xadj-Adj]
       ;
       Costs=[Fp-Punc,xadj-Adj|Costss], Punc=[A], (Fp=fp;Fp=cp;Fp=dirs), Adjs=[xadj-Adj]
       ;
       Costs=[Fp-Punc,savv-Avv,xadj-Adj|Costss], Punc=[A], (Fp=fp;Fp=cp;Fp=dirs), Adjs=[savv-Avv,xadj-Adj]
       ),
      make_list1(Adjs,List,Struc),Struc=[],
      length(List,L),
      depsrestcost(L,N1,Lemms,List,Ress,Lems),
      append(Rest,Ress,Rests),
%       Lems=Lemms,Rests=Rest,HIndex2=[],
       !.
%computexadjs(N1-Lem1-Feat1,Costs,NP,Lems,Rest,Costs,Lems,Rest):-
%       !.

getF2(Rest,Lem1,F2):-
    getf2lem(Rest,Lem1,F2),
    !.
getf2lem([Lem-_-_|Rest],Lem,Rest):-
    !.
getf2lem([W-_-_|Rest],Lem1,F2):-
    getf2lem(Rest,Lem1,F2),
    !.
checkndist(N,N2):-
    nonvar(N),nonvar(N2),
    N1 is N2 - N,
    N1 < 10,
    !.
checkndist(N,N2):-
    var(N);var(N2),!.

getfindwordlem(W,i(N,W,Cat2,Le2-Feat2),Lemmed,Lemres):-
      Lemmed=[LemF|Lemress],
      (
       (LemF=i(N,W1,Cat,Le-Feat);LemF=i(N,W1,Cat,Le),Feat=[]),
        W1=W,N2=N,Feat2=Feat,Le2=Le,Cat2=Cat,Lemres=Lemress
       ;
       (LemF=i(N2,W1,Cat,Le-Feat);LemF=i(N2,W1,Cat,Le),Feat=[]),
       remove(i(N,W,Cat2,Le2-Feat2),Lemmed,Lemres);
       remove(i(N,W,Cat2,Le2),Lemmed,Lemres),Feat2=[]),
       checkndist(N,N2),
      !.
    
depsrestcost(_,N1,[],[],[],[]):-!.
depsrestcost(_,N1,Lems,[],[],Lems):-!.
depsrestcost(L,N1,Lemmed,Ibar,[i(N2,W2,Cat2,Lem2,coord,Feat2,N1,-)|RestVerb],Lems):-
    Ibar=[W|_],
    \+ prepos(W), \+ prepart(Lem,W,_),
    Lemmed=[LemF|_],
    (LemF=i(N,W,Cat,Lem-Feat);LemF=i(N,W,Cat,Lem),Feat=[]),
    member(W2,Ibar),W2\=W,
    (member(i(N2,W2,Cat2,Lem2-Feat2),Lemmed);
    member(i(N2,W2,Cat2,Lem2),Lemmed)),
    Cat2=cong,checkndist(N,N2),
    (remove(i(N2,W2,Cat2,Lem2-Feat2),Lemmed,Lemres);
    remove(i(N2,W2,Cat2,Lem2),Lemmed,Lemres),Feat=[]),
    remove(W2,Ibar,Ibars),
    L1 is L - 1,
    depsrestcost(L1,N2,Lemres,Ibars,RestVerb,Lems),
    !.
depsrestcost(L,N1,Lemmed,[W|Ibar],[i(N,Ww,Cat,Lem,sp,Feat,N1,-),i(N2,W2,Cat2,Lem2,sn,Feat2,N,mod/specif)|RestVerb],Lems):-
    (prepos(W);prepart(Lem,W,_)),
    getfindwordlem(W,i(N,Ww,Cat,Lem-Feat),Lemmed,Lemress),
    member(W2,Ibar),W2\=W,
    (member(i(N2,W2,Cat2,Lem2-Feat2),Lemmed);
    member(i(N2,W2,Cat2,Lem2),Lemmed)),
    (nouncats(Cat2);proncat(Cat2)),
    remove(W2,Ibar,List),checkndist(N,N2),
    (remove(i(N2,W2,Cat2,Lem2-Feat2),Lemress,Lemres);
    remove(i(N2,W2,Cat2,Lem2),Lemress,Lemres),Feat=[]),
    L1 is L - 1,
    depsrestcost(L1,N2,Lemres,List,RestVerb,Lems),
    !.
depsrestcost(L,N1,Lemmed,[W|Ibar],[i(N,Ww,Cat,Lem,vcomp,Feat,N1,CatV/Scat)|RestVerb],Lems):-
    getfindwordlem(W,i(N,Ww,Cat,Lem-Feat),Lemmed,Lemres),
    check_vcat(Cat),
    getcatsemasp(Le,CatV,Scat,LArgsV,Le),
    L1 is L - 1,
    depsrestcost(L1,N,Lemres,Ibar,RestVerb,Lems),
    !.
depsrestcost(L,N1,Lemmed,[W|Ibar],[i(N,Ww,Cat,Lem,sn,Feat,N1,-)|RestVerb],Lems):-
    getfindwordlem(W,i(N,Ww,Cat,Lem-Feat),Lemmed,Lemres),
    dets(Cat),Cat\=ag,Cat\=av,Cat\=avv,Cat\=avvl,
    L1 is L - 1,
    depsrestcost(L1,N1,Lemres,Ibar,RestVerb,Lems),
    !.
depsrestcost(L,N1,Lemmed,[W|Ibar],[i(N,Ww,Cat,Lem,sn,Feat,N1,mod/adj)|RestVerb],Lems):-
    getfindwordlem(W,i(N,Ww,Cat,Lem-Feat),Lemmed,Lemres),
    \+ nouncats(Cat), \+ proncat(Cat),
    L1 is L - 1,
    depsrestcost(L1,N1,Lemres,Ibar,RestVerb,Lems),
    !.
depsrestcost(L,N1,Lemmed,[W|Ibar],[i(N,Ww,Cat,Lem,sn,Feat,N1,mod/specif)|RestVerb],Lems):-
    getfindwordlem(W,i(N,Ww,Cat,Lem-Feat),Lemmed,Lemres),
    L1 is L - 1,
    depsrestcost(L1,N1,Lemres,Ibar,RestVerb,Lems),
    !.
depsrestcost(L,N1,Lemmed,Ibar,[i(N,W,Cat,W,Cat,-,N1,-)|RestVerb],Lems):-
    Lemmed=[LemF|Lemres],
    LemF=i(N,W,Cat,Le),
    (select_punct(W,_);select_punct(_,[Cat])),
    depsrestcost(L,N1,Lemres,Ibar,RestVerb,Lems),
    !.
/*the first N is the preposition, and the second is the head noun
modifiers present in the list must be dependent on the head noun
while the head noun must be dependent on the preposition*/

depsrestcost1(_,N3-N1-W1,[],[],[],[]):-!.
depsrestcost1(_,N3-N1-W1,Lems,[],[],Lems):-!.
depsrestcost1(L,N3-N1-W1,Lemmed,Ibar,[i(N2,W2,Cat2,Lem2,coord,Feat2,N1,-)|RestVerb],Lems):-
    member(W2,Ibar),
    (member(i(N2,W2,Cat2,Lem2-Feat2),Lemmed);
    member(i(N2,W2,Cat2,Lem2),Lemmed)),
    Cat2=cong,
    (remove(i(N2,W2,Cat2,Lem2-Feat2),Lemmed,Lemres);
    remove(i(N2,W2,Cat2,Lem2),Lemmed,Lemres),Feat=[]),
    remove(W2,Ibar,Ibars),
    L1 is L - 1,
    depsrestcost1(L1,N-N2-W2,Lemres,Ibars,RestVerb,Lems),
    !.
depsrestcost1(L,N3-N1-W1,Lemmed,[W|Ibar],[i(N,W,Cat,Lem,sp,Feat,N1,-),i(N2,W2,Cat2,Lem2,sn,Feat2,N,mod/specif)|RestVerb],Lems):-
    (prepos(W);prepart(Lem,W,_)),
    (remove(i(N,W,Cat,Le-Feat),Lemmed,Lemress);
    remove(i(N,W,Cat,Le),Lemmed,Lemress),Feat=[]),
    member(W2,Ibar),
    (member(i(N2,W2,Cat2,Lem2-Feat2),Lemmed);
    member(i(N2,W2,Cat2,Lem2),Lemmed)),
    remove(W2,Ibar,Ibars),
    (
     (nouncats(Cat2);proncat(Cat2))
     ;
      (Cat2=ag;Cat2=num),
      member(W3,Ibars),
      (member(i(N3,W3,Cat3,Lem3-Feat3),Lemmed);
       member(i(N3,W3,Cat3,Lem3),Lemmed)),
       \+nouncats(Cat3), \+proncat(Cat3)),
    (remove(i(N2,W2,Cat2,Lem2-Feat2),Lemress,Lemres);
    remove(i(N2,W2,Cat2,Lem2),Lemress,Lemres),Feat=[]),
    L1 is L - 1,
    depsrestcost(L1,N2,Lemres,Ibars,RestVerb,Lems),
    !.
depsrestcost1(L,N2-N1-W1,Lemmed,[W|Ibar],[i(N,W,Cat,Lem,sn,Feat,N1,-)|RestVerb],Lems):-
    getfindwordlem(W,i(N,W,Cat,Lem-Feat),Lemmed,Lemres),
    dets(Cat),Cat\=ag,
    L1 is L - 1,
    depsrestcost1(L1,N2-N1-W1,Lemres,Ibar,RestVerb,Lems),
    !.
depsrestcost1(L,N2-N1-W1,Lemmed,[W|Ibar],[i(N,W,Cat,Lem,sn,Feat,N1,mod/adj)|RestVerb],Lems):-
    getfindwordlem(W,i(N,W,Cat,Lem-Feat),Lemmed,Lemres),
    \+ nouncats(Cat), \+ proncat(Cat),
    L1 is L - 1,
    depsrestcost1(L1,N2-N1-W1,Lemres,Ibar,RestVerb,Lems),
    !.
depsrestcost1(L,N2-N1-W1,Lemmed,[W|Ibar],[i(N,W,Cat,Lem,sn,Feat,N1,mod/specif)|RestVerb],Lems):-
    getfindwordlem(W,i(N,W,Cat,Lem-Feat),Lemmed,Lemres),
    L1 is L - 1,
    depsrestcost1(L1,N2-N1-W1,Lemres,Ibar,RestVerb,Lems),
    !.
depsrestcost1(L,N2-N1-W1,Lemmed,Ibar,[i(N,W,Cat,W,Cat,-,N1,-)|RestVerb],Lems):-
    Lemmed=[LemF|Lemres],
    LemF=i(N,W,Cat,Le),
    (select_punct(W,_);select_punct(_,[Cat])),
    depsrestcost1(L,N2-N1-W1,Lemres,Ibar,RestVerb,Lems),
    !.

extractallibarscost(L1,ToLog,Ibarss,ToLogs):-
    findall(Ibar,(member(ibar-Ibar,ToLog);member(ir_infl-Ibar,ToLog)),Ibars),
    length(Ibars,L),
    (L=0,remove(fac-Fac,ToLog,Rest),
     (is_list(Fac),remove(Fa,Fac,_),Fa=[A],Facc=Fac
      ;
      remove(fac-Facc,Fac,_)),
      getcosts(Facc,ToLog1),
      findall(Ibar,(member(ibar-Ibar,ToLog1);member(ir_infl-Ibar,ToLog1)),Ibarss),
      length(Ibarss,L1),append(Rest,ToLog1,ToLogs)
      ;
      L=0,member(Fun-Cost,ToLog),
      remove(f2-Clause,Cost,Rest),
      findall(Ibar,(member(ibar-Ibar,Clause);member(ir_infl-Ibar,Clause)),Ibarss),
      Ibarss\=[],length(Ibarss,L1),ToLogs=ToLog
      ;
      L=0,ToLogs=ToLog
      ;
      0<L,L1=L,Ibarss=Ibars,ToLogs=ToLog),
     !.

maptofstr1(Ind,Frase,Costs,PAS-NewOuts):-
    convlemm1(1,Frase,Lemmed),
    getcosts(Costs,ToLog),
    createdepheads(Lemmed,ToLog,Depsall,HIndex,RefExs),
    extractallibarscost(L,ToLog,Ibars,ToLogs),
    maptofstrs(L,Lemmed,ToLogs,Ibars,PAS,Deps),
    collectalldeps(Ind,Deps,Depsall,HIndex,DepOut),
    recoverall(Ind,DepOut,Outs),
/*    checkwriteallrefs(Outs,RefExs,NewRefs),nl,nl,
    newpbinding(Outs,Ibars,NewRefs,Prons,Exts,NTops),
    frase_corrente(NoFr, Symb),
    PronIn=[Prons,NTops,NewRefs],
    anaphora_resolution(NoFr,Exts,Consts,Out,PronIn,AllOuts),
    recoverantes(Ind,Outs,NewOuts),
*/    !.

maptofstr1(Ind,Frase,Costs,[]):-
    !.

/* modify
i(1,'C',clit,c,ibar,-,2,-)
i(2,erano,vc,essere,ibar,[sems=cop,mfeats=kj3p],0,cop/esistenza)
i(2,little_pro,pro,pro,sn,[sems=cop,mfeats=kj3p],2,subj/agent)
i(3,una,art,uno,sn,[sems=ind,mfeats=fs],6,-)
i(4,volta,n,volta,sn,[sems=invar,mfeats=m],6, (mod)/specif)
i(5,tre,num,tre,sn,[sems=card],6,-)
i(6,fratelli,n,fratello,sn,[sems=com,mfeats=mp],2,xcomp/theme)
i(7,porcellini,n,porcello,sn,[cat=noun,type=com,pred=porcell+o,gen=m,num=p,mode=dim,suff=ino],2,obj/theme)
*/

/* variables
i(12,nutriva,vt,nutrire,ibar,[sems=tr,mfeats=kj3s],10,trans/attivita)
i(12,rel_pro,pro,bindee,f2,[sems=com,mfeats=ms],ante=lup,subj/_G4450)
i(13,proprio,avv,proprio,savv,[sems=q],12,-)
i(14,di,q,di,sn,-,15,-)
i(15,porcellini,n,porcello,sn,[cat=noun,type=com,pred=porcell+o,gen=m,num=p,mode=dim,suff=ino],_G4842,sn/theme)
i(16,grassi,ag,grassi,sn,[sems=inst],17, (mod)/adj)
i(17,e,cong,e,coord,[sems=sum],15,-)
i(18,teneri,ag,tenero,sn,[cat=adj,pred=tener+o,type=pred,gen=m,num=p],17, (mod)/adj)
i(19,'.',[punto],-,cp,-,_G5029,-)
*/

/* object-subject
i(5,dice,vt,dire,ibar,[sems=intr,mfeats=kl3s],0,trans/riport_dir)
i(6,'Nicola_Cabibbo',nh,'Nicola',sn,[mfeats=mfs],5,obj/theme_aff)
*/
recovervariables(Ind,Depsall,Finals):-
    collectvariables(Depsall,Zeroes,Length),
    verifyvars(Length,Depsall,Zeroes,Final),
    msort(Final,Finals),
    writefinal(Ind,Finals),
    !.

collectvariables(Depsall,Is,Len):-
    Dep=..[i,I,W,C,L,S,F,Z,R],
    findall(I-C,(member(Dep,Depsall),var(Z)),Is),
    length(Is,Len),
    !.

verifyvars(1,Depsall,[I-[Punto]],[Dep1|Rest]):-
    (Punto=punto;Punto=puntint),
    Dep=..[i,I,W,[punto],L,S,F,Z,R],
    remove(Dep,Depsall,Rest),
    (var(S),Sh=cp;nonvar(S),Sh=S),
%    reverse(Depsall,Revall),
    Depi=..[i,Ii,Wi,Ci,Li,Ibar,Fi,0,Ri],
%    check_all_verbs(Ci),
    member(Depi,Depsall),
    nonvar(Ibar),(Ibar=ibar;Ibar=ir_infl),
    Dep1=..[i,I,W,Punto,Punto,Sh,-,Ii,-],
    !.
verifyvars(N,Depsall,[I-[Punto]],[Dep1|Rest]):-
    (Punto=punto;Punto=puntint),
    Dep=..[i,I,W,[punto],L,S,F,Z,R],
    remove(Dep,Depsall,Rest),
    (var(S),Sh=cp;nonvar(S),Sh=S),
    Depi=..[i,Ii,Wi,Ci,Li,Ibar,Fi,0,Ri],
    member(Depi,Depsall),
    nonvar(Ibar),(Ibar=ibar;Ibar=ir_infl),
    Dep1=..[i,I,W,Punto,Punto,Sh,-,Ii,-],
    !.
verifyvars(Length,Depsall,[I-[Punt]|Punts],[Dep1|Final]):-
    Punt=par,
    Dep=..[i,I,W,[Punt],L,S,F,Z,R],
    remove(Dep,Depsall,Rest),
    (var(S),Sh=fp;nonvar(S),Sh=S),
    Depi=..[i,Ii,Wi,Ci,Li,Ibar,Fi,H,Ri],
    (Ibar=par;Ibar=[par]),
    member(Depi,Depsall),
    nonvar(I),nonvar(Ii),
    Ii<I,
    Dep1=..[i,I,W,Punt,Punt,Sh,-,Ii,-],
    verifyvars(Length,Rest,Punts,Final),
    !.
verifyvars(Length,Depsall,[I-[Punt]|Punts],[Dep1|Final]):-
    (Punt=punt;Punt=par),
    Dep=..[i,I,W,[Punt],L,S,F,Z,R],
    remove(Dep,Depsall,Rest),
    (var(S),Sh=fp;nonvar(S),Sh=S),
    Depi=..[i,Ii,Wi,Ci,Li,Ibar,Fi,H,Ri],
    member(Depi,Depsall),
    nonvar(I),nonvar(Ii),
    I<Ii,
    Dep1=..[i,I,W,Punt,Punt,Sh,-,Ii,-],
    verifyvars(Length,Rest,Punts,Final),
    !.
verifyvars(Length,Depsall,[I-[Punto]|Punts],[Dep1|Final]):-
    (Punto=punto;Punto=puntint),
    Dep=..[i,I,W,[Punto],L,S,F,Z,R],
    remove(Dep,Depsall,Rest),
    (var(S),Sh=cp;nonvar(S),Sh=S),
    Depi=..[i,Ii,Wi,Ci,Li,Ibar,Fi,0,Ri],
    member(Depi,Depsall),
    nonvar(I),nonvar(Ii),
    Ii<I, check_all_verbs(Ci),
    nonvar(Ibar),(Ibar=ibar;Ibar=ir_infl),
    Dep1=..[i,I,W,Punto,Punto,Sh,-,Ii,-],
    verifyvars(Length,Rest,Punts,Final),
    !.
verifyvars(Length,Depsall,[I-[Punto]|Punts],[Dep1|Final]):-
    (Punto=punto;Punto=puntint),
    Dep=..[i,I,W,[Punto],L,S,F,Z,R],
    remove(Dep,Depsall,Rest),
    (var(S),Sh=cp;nonvar(S),Sh=S),
    Depi=..[i,Ii,Wi,Ci,Li,Ibar,Fi,0,Ri],
    member(Depi,Depsall),
    Dep1=..[i,I,W,Punto,Punto,Sh,-,Ii,-],
    verifyvars(Length,Rest,Punts,Final),
    !.
verifyvars(Length,Depsall,[I-rel|Punts],[Dep1|Final]):-
    Dep=..[i,I,W,rel,L,S,F,Z,R],
    remove(Dep,Depsall,Rests),
    (var(S),Sh=cp;nonvar(S),Sh=S),
    Ii is I - 1,
    Depi=..[i,Ii,Wi,cong,Li,Ibar,Fi,H,Ri],
    member(Depi,Depsall),
    Depp=..[i,I1,che,cong,L1,Ib,F1,H1,R1],
    member(Depp,Depsall),
    Dep1=..[i,I,W,cong,W,Ib,F1,H1,R1],
    remove(i(I,rel_pro,pro,bindee,f2,[sems=invar,mfeats=f],ante=_,Fu/Ro),Rests,Rest),
    verifyvars(Length,Rest,Punts,Final),
    !.
verifyvars(Length,Depsall,[I-Rel|Punts],[Dep1|Final]):-
    (Rel=rel;Rel=relob),
    Dep=..[i,I,W,Rel,L,S,F,Z,R],
    remove(Dep,Depsall,Rest),
    (var(S),Sh=cp;nonvar(S),Sh=S),
    Depi=..[i,Ii,Wi,Ci,Li,Ibar,Fi,H,Ri],
    member(Depi,Depsall),
    nonvar(I),nonvar(Ii),
    Ii<I, check_all_verbs(Ci),
    nonvar(Ibar),(Ibar=ibar;Ibar=ir_infl),
    Dep1=..[i,I,W,Rel,W,Sh,F,Ii,binder],
    verifyvars(Length,Rest,Punts,Final),
    !.
verifyvars(Length,Depsall,[I-Rel|Punts],[Dep1|Final]):-
    Rel=pk,
    Dep=..[i,I,W,Rel,L,S,F,Z,R],
    remove(Dep,Depsall,Rest),
    Depi=..[i,Ii,Wi,Ci,Li,Ibar,Fi,H,Fun/Ri],
    member(Depi,Depsall),
    nonvar(I),nonvar(Ii),
    Ii<I, check_all_verbs(Ci),
    nonvar(Ibar),(Ibar=ibar;Ibar=ir_infl),
    Dep1=..[i,I,W,Rel,W,cp,F,Ii,fcomp],
    verifyvars(Length,Rest,Punts,Final),
    !.
verifyvars(Length,Depsall,[I-Rel|Punts],[Dep1|Final]):-
    Rel=cosu,
    Dep=..[i,I,W,Rel,L,S,F,Z,R],
    remove(Dep,Depsall,Rest),
    Depi=..[i,Ii,Wi,Ci,Li,Ibar,Fi,H,Fun/Ri],
    member(Depi,Depsall),
    nonvar(I),nonvar(Ii),
    I<Ii, check_all_verbs(Ci),
    nonvar(Ibar),(Ibar=ibar;Ibar=ir_infl),
    Dep1=..[i,I,W,Rel,W,cp,F,Ii,fcomp],
    verifyvars(Length,Rest,Punts,Final),
    !.
verifyvars(Length,Depsall,[I-Rel|Punts],[Dep1|Final]):-
    Rel=vcomp,
    Dep=..[i,I,W,Rel,L,S,F,Z,R],
    remove(Dep,Depsall,Rest),
    Depi=..[i,Ii,Wi,Ci,Li,Ibar,Fi,H,Fun/Ri],
    member(Depi,Depsall),
    nonvar(I),nonvar(Ii),
    Ii<I, check_all_verbs(Ci),
    nonvar(Ibar),(Ibar=ibar;Ibar=ir_infl),
    Dep1=..[i,I,W,Rel,W,cp,F,Ii,fcomp],
    verifyvars(Length,Rest,Punts,Final),
    !.
verifyvars(Length,Depsall,[I-Rel|Punts],[Dep1,Dep2|Final]):-
    (Rel=av;Rel=avv; Rel=avvl),
    Dep=..[i,I,W,Rel,L,S,F,Z,R],
    remove(Dep,Depsall,Rest),
    (W=più;W=meno;W=tanto;W=così),
    Depi=..[i,Ii,Wi,Ci,Li,Ibar,Fi,H,Fun/Ri],
    member(Depi,Depsall),
    nonvar(I),nonvar(Ii),
    Ii<I, check_all_verbs(Ci),
    nonvar(Ibar),(Ibar=ibar;Ibar=ir_infl),
    Dep1=..[i,I,W,Rel,W,cp,F,Ii,compar],
    Dep2=..[i,I1,che,Rel1,che,fc,F,I2,-],
    var(I2),I2=I,
    remove(Dep2,Rest,Restt),
    verifyvars(Length,Restt,Punts,Final),
    !.
verifyvars(Length,Depsall,[I-Punt|Punts],Final):-
    verifyvars(Length,Depsall,Punts,Final),
    !.
verifyvars(N,Depsall,Zeroes,Depsall):-
    !.

/*
i(13,che,cong,che,fc,che,17,-)
i(23,e,cong,e,fc,[sems=sum],17,-)
i(24,che,rel,che,_G2459,[sems=rel,mfeats=anyany],_G2461,-)
i(24,rel_pro,pro,bindee,f2,[sems=invar,mfeats=f],ante='sensibilit‡',obj/theme)


i(28,',',punt,punt,fp,-,29,-)
i(29,'"',par,par,cp,-,30,-)
i(30,che,rel,che,_G2238,[sems=rel,mfeats=anyany],_G2240,-)


i(72,'offrÏ',v,offrire,ibar,[cat=verb,pred=offr+ire,scat=tr,mood=indic,tense=pass,pers=3,num=s],65,refl/activ)
i(72,rel_pro,pro,bindee,f2,[mfeats=mfs],ante=cronologia,subj/_G4483)
i(73,il,art,il,sn,[sems=def,mfeats=fs],74,-)
i(74,'Vasari',nh,'Vasari',sn,[mfeats=mfs],_G4620,subj/theme)
i(75,',',punt,punt,fp,-,76,-)
i(76,nella,part,nella,ibar,_G4649,78,-)
i(77,biografia,n,biografia,sn,[sems=com,mfeats=fs],78, (mod)/specif)
i(78,dedicata,ppas,dedicare,vcomp,[sems=rifl,mfeats=tsfs],_G4620,refl_in/statv)
i(79,all,part,all,sn,[],78, (mod)/adj)
i(80,artista,n,artista,sn,[sems=com,mfeats=s],78, (mod)/specif)
i(81,'.',punto,punto,cp,-,1,-)
*/

reassignzeroes(Ind,Depsall,Finals):-
    appiattisci(Depsall,Deps1),
    collectzeroes(Deps1,Zeroes,Length),
    verifyzeroes(Length,Deps1,Zeroes,Final),
    msort(Final,Finals),
    !.

collectzeroes(Depsall,Is,Len):-
    Dep=..[i,I,W,C,L,S,F,Z,R],
    findall(I-S,(member(Dep,Depsall),nonvar(Z),Z=0),Is),
    length(Is,Len),
    !.

verifyzeroes(1,Depsall,Zeroes,Depsall):-
    !.
verifyzeroes(N,Depsall,Zeroes,Final):-
    evaluateheads(N,Zeroes,Depsall,Head,Todo),
    connectzeroes(N,Depsall,Head,Todo,Final),
    !.

evaluateheads(2,Zeroes,Depsall,Head,[Todo]):-
    Zeroes=[Head,Todo],
    Head=1-S,
    !.
evaluateheads(2,Zeroes,Depsall,Head,[Todo]):-
    Zeroes=[Head,Todo],
    Head=N-ibar,
    !.
evaluateheads(2,Zeroes,Depsall,Head,[Todo]):-
    Zeroes=[Todo,Head],
    Head=N-ibar,
    !.
evaluateheads(N,Zeroes,Depsall,Head,Todo):-
    Zeroes=[Head|Todo],
    Head=Ni-ibar,
    !.
evaluateheads(N,Zeroes,Depsall,[],[]):-
    !.
evaluateheads(N,Zeroes,Depsall,Ni-ibar,Todo):-
    remove(Ni-ibar,Zeroes,Todo),
    !.
evaluateheads(N,Zeroes,Depsall,I-ibar,Todo):-
    Dep=..[i,I,W,C,L,ibar,F,Z,R],
    member(Dep,Depsall),
    remove(Ni-S,Zeroes,Todo),
    Ni<I,
    !.
connectzeroes(1,Depsall,Head,[],Depsall):-!.
connectzeroes(N,Depsall,Head,[],Depsall):-!.
connectzeroes(N,Depsall,H-Sh,[1-S|ToDo],[Dep1|Final]):-
    Dep=..[i,H,W,C,L,Sh,F,Z,R],
    remove(Dep,Depsall,Rest),
    Dep1=..[i,H,W,C,L,Sh,F,1,R],
    connectzeroes(N,Rest,H-Sh,ToDo,Final),
    !.
connectzeroes(N,Depsall,H-Sh,[First-S|ToDo],[Dep1|Final]):-
    Dep=..[i,First,W,C,L,S,F,Z,R],
    remove(Dep,Depsall,Rest),
    Dep1=..[i,First,W,C,L,S,F,H,R],
    connectzeroes(N,Rest,H-Sh,ToDo,Final),
    !.
connectzeroes(N,Depsall,H-Sh,[First-S],[Dep1|Rest]):-
    Dep=..[i,First,W,C,L,S,F,Z,R],
    remove(Dep,Depsall,Rest),
    Dep1=..[i,First,W,C,L,S,F,H,R],
    !.

recoverall(Ind,Depsall,Outss):-
    reassignzeroes(Ind,Depsall,Outs),
    recovervariables(Ind,Outs,Outss),
    !.

maptofstr(Ind,Frase,Costs,PAS-Outs):-
    convlemm(1,Frase,Lemmed),
    length(Lemmed,Le),
    getcosts(Costs,ToLog),
    continuachecklength(Ind,Le,Lemmed,ToLog,Outs),
    !.
maptofstr(Ind,Frase,Costs,[]):-
    !.

getindexind(Ind,Id):-
   stringof(List,Ind),
   reverse(List,[Id|Rev]),!.

recoverantes(Ind,Outs,NewOuts):-
    getindexind(Ind,Id),
    findall(Ante-Pro-N,risolto(Id,N,Pro,Ante),Antes),
    (Antes=[]
      ;
     substituteants(Antes,Outs,NewOut),
       msort(NewOut,NewOuts),
        writefinal(Ind,NewOuts)
        ),!.

substituteants([],Outs,Outs):-
    !.
substituteants([Ante-Pro-N1|Antes],Deps,[i(N1,Pro,Ca,Lem1,Infl,Feat1,ante=Ante,Fun/Role)|NewOuts]):-
    (member(i(V,Verb,Cat,Lem,ibar,Feat,X,CatV/Scat),Deps);
      member(i(V,Verb,Cat,Lem,ir_infl,Feat,X,CatV/Scat),Deps)),
     (Pro=little_pro,
       member(i(V,Pro,Ca,Lem1,Infl,Feat1,V,Fun/Role),Deps),N1=V,
            remove(i(V,Pro,Ca,Lem1,Infl,Feat1,V,Fun/Role),Deps,KDeps)
       ;
       (member(i(N,Pro,Ca,Lem1,Infl,Feat1,V,Fun/Role),Deps);
          member(i(N,Pro,Ca,Lem1,Infl,Feat1,V,_),Deps)),N1=N,
            remove(i(N,Pro,Ca,Lem1,Infl,Feat1,V,Fun/Role),Deps,KDeps)),
    (member(i(A,Ant,Ca2,Ante,Inf2,Feat2,V2,Fun2/Role2),Deps);
       member(i(A,Ante,Ca2,Lem2,Inf2,Feat2,V2,Fun2/Role2),Deps)),
    (member(i(V2,Ver,Catv,Pred,ibar,Featv,Xv,CatVv/Scatv),Deps);
      member(i(V2,Ver,Catv,Pred,ir_infl,Featv,Xv,CatVv/Scatv),Deps)),
      V\=V2,
    substituteants(Antes,KDeps,NewOuts),
     !.
substituteants([Ante-Pro-N1|Antes],Deps,[i(N1,Pro,Ca,Lem1,Infl,Feat1,ante=Ante,Fun2/Role2)|NewOuts]):-
       (member(i(N,W,Ca,Pro,Infl,Feat1,V1,Fun/Role),Deps);
          member(i(N,W,Ca,Pro,Infl,Feat1,V1,_),Deps)),N1=N,
            remove(i(N,W,Ca,Pro,Infl,Feat1,V1,FunRole),Deps,KDeps),
    (member(i(A,Ant,Ca2,Ante,Inf2,Feat2,V2,Fun2/Role2),Deps);
       member(i(A,Ante,Ca2,Lem2,Inf2,Feat2,V2,Fun2/Role2),Deps)),
      V1\=V2,
    substituteants(Antes,KDeps,NewOuts),
     !.
substituteants([Ante-Pro-N1|Antes],Deps,NewOuts):-
    substituteants(Antes,Deps,NewOuts),
     !.
substituteants([],Outs,Outs):-
    !.
       

/*
i(16,sua,poss,suo,sn,[mfeats=fs],17,-)
i(9,tua,poss,tuo,sn,[mfeats=fs],10,-)
risolto(1, 16, suo, 'Jimmy').
risolto(1, 14, little_pro, 'Jimmy').
risolto(5, 16, suo, 'Jimmy').
risolto(5, 14, little_pro, 'Jimmy').
risolto(2, 14, little_pro, 'Dalla').
risolto(9, 7, little_pro, 'Jimmy').
i(10,little_pro,pro,pro,sn,[sems=intr,mfeats=tsfp],10,subj/agente)
*/
continuachecklength(Ind,Le,Lemmed,ToLog,NewOuts):-
%    Le=<80,
    createdepheads(Lemmed,ToLog,Depsall,HIndex,RefExs),
    extractallibarscost(L,ToLog,Ibars,ToLogs),
    maptofstrs(L,Lemmed,ToLogs,Ibars,PAS,Deps),
    collectalldeps(Ind,Deps,Depsall,HIndex,DepOut),
    recoverall(Ind,DepOut,Outs),
    checkwriteallrefs(Outs,RefExs,NewRefs),nl,nl,
    newpbinding(Outs,Ibars,NewRefs,Prons,Exts,NTops),
    frase_corrente(NoFr, Symb),
    garb_coll(NoFr),
    PronIn=[Prons,NTops,NewRefs],
    anaphora_resolution(NoFr,Exts,Consts,Out,PronIn,AllOuts),
    recoverantes(Ind,Outs,NewOuts),
!.
continuachecklength(Ind,Le,Lemmed,ToLog,Outs):-
    80=<Le,
    splitsentencepunct(Lemmed,ToLog,First-Tolog1,Second-Tolog2),
    continuachecklength(Ind,Le,First,Tolog1,Out1),
    continuachecklength(Ind,Le,Second,Tolog2,Out2),
    append(Out1,Out2,Outs),
    !.
    
splitsentencepunct(Lemmed,ToLog,First-Tolog1,Second-Tolog2):-
    splitsenpunct(Lemmed,First,Second),
    reverse(First,Rev),
    Rev=[_,Last|_],
    Last=..[i,N,W,C,L,S,F,Z,R],
    Second=[Fir|_],
    Last=..[i,N1,W1,C1,L1,S1,F1,Z1,R1],
    splitsencost(ToLog,W,Tolog1,W1,Tolog2),
    !.

splitsencost(ToLog,W,Tolog1,W1,Tolog2):-
    splitsencosts(ToLog,W,W1,Tolog1),
    !.

splitsencosts(ToLog,W,W1,Tolog1):-
    make_listss(ToLog, List),
    splittologlist(List,W,W1,Tolog1),
    !.
splitsenpunct([Dep|Lemmed],[Dep],Lemmed):-
    Dep=..[i,First,W,C,L,S,F,Z,R],
    (W=':', W=';'),
    !.
splitsenpunct([Dep|Lemmed],[Dep|First],Second):-
    Dep=..[i,First,W,C,L,S,F,Z,R],
    W\=':', W\=';',
    splitsenpunct(Lemmed,First,Second),
    !.


/*
appiattisci(Deps,Depss),
    buildpuntdepend(Lemmed,Depss,PAS,Depp),
    msort(Depp,Dep),
    tell(Ind),
    printalldeps(Dep),
    told,
*/
%    builddepend(Lemmed,Depss,PAS,Depp),

recoverhindex([[]|Rest],Dep1,Dep,Depp):-
    recoverhindex(Rest,Dep1,Dep,Depp),
    !.    
recoverhindex([A-B-C-D|HIndex],Dep1,Dep,[i(A,W,Cat,Lem,Cos,Feat,N1,Fun1/Role)|Depp]):-
    remove(i(A,W,Cat,Lem,Cos,Feat,N1,Fun/Role),Dep1,Deps),
    (member(i(A,W,Cat,Lem,_,_,N1,Fun/Role),Dep), Fun1=Fun
    ;
    member(i(A,W,Cat,Lem,_,_,N1,Fun1/Role),Dep), nonvar(Role)
    ;
    member(i(A,W,Cat,Lem,_,_,N1,_),Dep),Role=theme, Fun1=Fun
    ;
    Role=theme),
    recoverhindex(HIndex,Deps,Dep,Depp),
    !.    
recoverhindex([A-B-C-D|HIndex],Deps,Dep,Depp):-
    recoverhindex(HIndex,Deps,Dep,Depp),
    !.    
recoverhindex([],Dep1,Dep,AllDepp):-
    findall(i(N,little_pro,pro,pro,sn,Feat,A,Fun/Role),
                  member(i(N,little_pro,pro,pro,sn,Feat,A,Fun/Role),Dep),LPs),
    findall(i(N,big_pPro,Ca1,Lem1,Cos1,Feat1,N2,Fun1/Role1),(
                  member(i(N,big_pPro,Ca1,Lem1,Cos1,Feat1,N2,Fun1/Role1),Dep),nonvar(Role1)),
                  BPs),
    sort(LPs,LPss),
    sort(BPs,BPss),
    append(LPss,BPss,Adds),
    (recoversihindex(Dep1,Dep,Depp);true,Depp=Dep1),
      append(Adds,Depp,AllDepp),
    !.
recoverhindex([],Dep1,Dep,Dep1):-!.

recoversihindex(Dep1,Dep,AllDepp):-
    findall(i(N,si_impers,si,Cat,sn,Feat,N2,subj/Role),
                  member(i(N,si_impers,si,Cat,sn,Feat,N2,subj/Role),Dep),SIs),
    removeSi(SIs,Dep1,Deps),
    append(SIs,Deps,AllDepp),
    !.
removeSi([],Dep,Dep):-
    !.
removeSi([i(N,si_impers,si,Cat,sn,Feat,N2,subj/Role)|SIs],Dep1,Deps):-
    remove(i(N,si,Clit,si,_,Feat,_,_),Dep1,Deps1),
    removeSi(SIs,Deps1,Deps),
    !.

collectalldeps(Ind,Deps,Depsall,HIndex,Dep):-
    appiattisci(Depsall,Deps1),
    appiattisci(Deps,Deps2),
    sort(Deps2,Deps22),
%    reassignbiglittle(Deps22,Deps1,Deps11),
    recoverhindex(HIndex,Deps1,Deps22,Dep3),
%    msort(Deps1,Dep1),
    msort(Dep3,Dep),
    !.    

writefinal(Ind,Dep):-
%   getdfilename(Ind,Sent),
   getefilename(Ind,Sent),
    tell(Sent),
%    printalldeps(Deps1),
%    nl,nl,
    printalldeps(Dep),
    told,
    !.
    
printalldeps([]):-!.
printalldeps([Dep|Deps]):-
    writenl(_,Dep),
    printalldeps(Deps),
    !.

extractpasinf([],[]):-!.
extractpasinf(pas(Pol,Voice,N-V-Lem,Fun-Subj,Compls)-Adjs,[N-V-Lem-Args,LemArgs]):-
    (Subj=[L/Fu/Ro/Fea|F],Le=L;
     Subj=[L/Fu/Ro|F],Le=L;
     Subj=[si_impers/Ro/Fea],Le=si;
     Subj=[little_pro/Ro/Fea],Le=little_pro),
    (Cost\=[],member(W-C-Cos,Cost),nonvar(Cos);Cos=sn),
    findargs(Compls,Arg,ResPas),
    checkrecursive(Arg,ResPas,LemArgs,Argg),
    Args=[Le/subj/Ro/Fea/sn|Argg],
    !.
extractpasinf(pas(Pol,Voice,N-V-Lem,Fun-Subj,Obj-All)-Adjs,[N-V-Lem-Args]):-
    (Subj=[L/Fu/Ro/Fea|F],Le=L;
     Subj=[L/Fu/Ro|F],Le=L;
     Subj=[si_impers/Ro/Fea],Le=si;
     Subj=[little_pro/Ro/Fea],Le=little_pro),
    All=[L,Feats,Cost],
    Args=[Le/subj/Ro/Fea/sn,L/Obj/R/Feats/Cos],
    (Cost\=[],member(W-C-Cos,Cost),nonvar(Cos);Cos=sn),
    !.
extractpasinf([pas(Pol,Voice,N-V-Lem,Fun-Subj,Compls)-Adjs],[N-V-Lem-Args,LemArgs]):-
    (Subj=[L/Fu/Ro/Fea|F],Le=L;
     Subj=[L/Fu/Ro|F],Le=L;
     Subj=[si_impers/Ro/Fea],Le=si;
     Subj=[little_pro/Ro/Fea],Le=little_pro),
    (Cost\=[],member(W-C-Cos,Cost),nonvar(Cos);Cos=sn),
    findargs(Compls,Arg,ResPas),
    checkrecursive(Arg,ResPas,LemArgs,Argg),
    Args=[Le/subj/Ro/Fea/sn|Argg],
    !.
extractpasinf([pas(Pol,Voice,N-V-Lem,Fun-Subj,Obj-All)-Adjs],[N-V-Lem-Args]):-
    (Subj=[L/Fu/Ro/Fea|F],Le=L;
     Subj=[L/Fu/Ro|F],Le=L;
     Subj=[si_impers/Ro/Fea],Le=si;
     Subj=[little_pro/Ro/Fea],Le=little_pro),
    All=[L,Feats,Cost],
    Args=[Le/subj/Ro/Fea/sn,L/Obj/R/Feats/Cos],
    (Cost\=[],member(W-C-Cos,Cost),nonvar(Cos);Cos=sn),
    !.
extractpasinf([First|Pas]-Adjs,[N-V-Lem-Args|Rest]):-
    First=pas(Pol,Voice,N-V-Lem,Fun-Subj,Obj-All),
    (Subj=[L/Fu/Ro/Fea|F],Le=L;
     Subj=[L/Fu/Ro|F],Le=L;
     Subj=[si_impers/Ro/Fea],Le=si;
     Subj=[little_pro/Ro/Fea],Le=little_pro),
    All=[L,Feats,Cost],
    Args=[Le/subj/Ro/Fea/sn,L/Obj/R/Feats/Cos],
    (Cost\=[],member(W-C-Cos,Cost),nonvar(Cos);Cos=sn),
    extractpasinf(Pas,Rest),
    !.
extractpasinf([First|Pas],[N-V-Lem-Args|Rest]):-
    First=pas(Pol,Voice,N-V-Lem,Fun-Subj,Obj-All),
    (Subj=[L/Fu/Ro/Fea|F],Le=L;
     Subj=[L/Fu/Ro|F],Le=L;
     Subj=[si_impers/Ro/Fea],Le=si;
     Subj=[little_pro/Ro/Fea],Le=little_pro),
    All=[L,Feats,Cost],
    Args=[Le/subj/Ro/Fea/sn,L/Obj/R/Feats/Cos],
    (Cost\=[],member(W-C-Cos,Cost),nonvar(Cos);Cos=sn),
    extractpasinf(Pas,Rest),
    !.
extractpasinf([First|Pas]-Adjs,[N-V-Lem-Args,LemArgs|Rest]):-
    First=pas(Pol,Voice,N-V-Lem,Fun-Subj,Compls),
    (Subj=[L/Fu/Ro/Fea|F],Le=L;
     Subj=[L/Fu/Ro|F],Le=L;
     Subj=[si_impers/Ro/Fea],Le=si;
     Subj=[little_pro/Ro/Fea],Le=little_pro),
    findargs(Compls,Arg,ResPas),
    checkrecursive(Arg,ResPas,LemArgs,Argg),
    Args=[Le/subj/Ro/Fea/sn|Argg],
    extractpasinf(Pas,Rest),
    !.
extractpasinf([First|Pas],[N-V-Lem-Args,LemArgs|Rest]):-
    First=pas(Pol,Voice,N-V-Lem,Fun-Subj,Compls),
    (Subj=[L/Fu/Ro/Fea|F],Le=L;
     Subj=[L/Fu/Ro|F],Le=L;
     Subj=[si_impers/Ro/Fea],Le=si;
     Subj=[little_pro/Ro/Fea],Le=little_pro),
    findargs(Compls,Arg,ResPas),
    checkrecursive(Arg,ResPas,LemArgs,Argg),
    Args=[Le/subj/Ro/Fea/sn|Argg],
    extractpasinf(Pas,Rest),
    !.
extractpasinf([First|Pas],[N-V-Lem-Args,LemArgs|Rest]):-
    First=pas(Pol,Voice,N-V-Lem,Fun-Subj,Compls),
    Subj=[Le-Id/Fu/Ro/Fea|F],
    findargs(Compls,Arg,ResPas),
    checkrecursive(Arg,ResPas,LemArgs,Argg),
    Args=[Le-Id/subj/Ro/Fea/sn|Argg],
    extractpasinf(Pas,Rest),
    !.
   
checkrecursive(Compl,ResPas,Lem-Args,Argg):-
    remove(Lem-Args,Compl,Rest),is_list(Args),
    append(Rest,ResPas,Argg),
    !.
checkrecursive(Compl,ResPas,[],Argg):-
    append(Compl,ResPas,Argg),
    !.
   
findargs([],[],[]):-!.
findargs(Compls,[Arg|Args],Rests):-
    appiattisci(Compls,Compl),
    remove(Fun-[L,Feats,Cost],Compl,Rest),
    is_list(Feats),
    (Cost\=[],member(W-C-Cos,Cost),nonvar(Cos);Cos=sn),
    Arg=L/Fun/Ro/Feats/Cos,
    findargs(Rest,Args,Rests),
    !.    
findargs(Compls,[Arg|Args],Rests):-
    appiattisci(Compls,Compl),
    remove(Fun-[L-Id/Ro/Feats],Compl,Rest),
    is_list(Feats),
    (Cost\=[],member(W-C-Cos,Cost),nonvar(Cos);Cos=sn),
    Arg=L-Id/Fun/Ro/Feats/Cos,
    findargs(Rest,Args,Rests),
    !.    
findargs(Compls,[N-V-Lem-Arg|Args],[ResPas|Rests]):-
    appiattisci(Compls,Compl),
    Compl=[First|Pas],
    (First=pas(Pol,Voice,N-V-Lem,Fun-Subj,Comp), Complss=Comp;
    First=pas(Pol,Voice,N-V-Lem,Fun-Subj,Obj-All), Complss=Obj),
    findargs(Complss,RestArg,ResPas),
    (Subj=[Le,Fea,Cost];
     Subj=[si_impers,Fea],Le=si;
     Subj=[little_pro,Fea],Le=little_pro),
    (Cost\=[],member(W-C-Cos,Cost),nonvar(Cos);Cos=sn),
    Arg=[Le/subj/Ro/Fea/Cost|RestArg],
    findargs(Pas,Args,Rests),
    !.    
findargs(Compls,[[N-V-Lem-Arg]|Args],[ResPas|Rests]):-
    appiattisci(Compls,Compl),
    Compl=[First|Pas],
    (First=pas(Pol,Voice,N-V-Lem,Fun-Subj,Comp), Complss=Comp;
    First=pas(Pol,Voice,N-V-Lem,Fun-Subj,Obj-All), Complss=Obj),
    findargs(Complss,RestArg,ResPas),
    (Subj=[Le,Fea,Cost];
     Subj=[si_impers,Fea],Le=si;
     Subj=[little_pro,Fea],Le=little_pro),
    (Cost\=[],member(W-C-Cos,Cost),nonvar(Cos);Cos=sn),
    Arg=[Le/subj/Ro/Fea/Cost|RestArg],
    findargs(Pas,Args,Rests),
    !.    
findargs(Compls,[],Compls):-!.

buildlemmedheads(Lemmed,[],[]):-!.
buildlemmedheads(Lemmed,[[N-V-Lem-Arg]|Heads],[Deps|Args]):-
    member(i(N,W,Cat,Lem-Feat),Lemmed),
    appiattisci(Arg,Argg),
    buildep(N,Lemmed,Argg,Dep,Rest,Lems),
    append(Dep,[i(N,W,Cat,Lem,ibar,Feat,0,Fun/Role)],Deps),
    append(Rest,Heads,Headd),
    buildlemmedheads(Lems,Headd,Args),
    !.
buildlemmedheads(Lemmed,[N-V-Lem-Arg|Heads],[Deps|Args]):-
    member(i(N,W,Cat,Lem-Feat),Lemmed),
    appiattisci(Arg,Argg),
    buildep(N,Lemmed,Argg,Dep,Rest,Lems),
    append(Dep,[i(N,W,Cat,Lem,ibar,Feat,0,Fun/Role)],Deps),
    append(Rest,Heads,Headd),
    buildlemmedheads(Lems,Headd,Args),
    !.
/*
buildlemmedheads(Lemmed,[Lem-Arg|Heads],[i(Id1,W1,Cat1,Lem1,f2,Fea,Id,binder),i(N1-11,rel_pro,Cat1,bindee,f2,Fea,ante=Lem,Fun/Role)|Args]):-
%    buildep(N,Lemmed,[Lem-Arg],Dep,Rest,Lems),
    Arg=Id1/Fun/Role/Fea/Cos,
    remove(i(Id1,W1,Cat1,Lem1-Feat1),Lemres,Lems),
    buildlemmedheads(Lems,Heads,Args),
    !.
*/

% relative clauses have a head which is indexed according to the clause it belongs to and is bound to the main verb of that clause
% then it has a relative pronoun, the binder, which is indexed and dependent on the head
% then it has a bindee, which is indexed according to the main verb of the relative clause and is bound to the head noun with a given role and grammatical function
% i(3,volta,n,volta,sn,[mfeats=mfs],9,subj/[mfeats=mfs])
% i(4,che,rel,che,f2,[sems=rel,mfeats=anyany],3,binder,-)
% i(8-11,rel_pro,rel,bindee,f2,[mfeats=mfs],ante=volta,obl/tema_bound)
%i(8,nominato,vppt,nominare,ibar,[sems=tr,mfeats=tsms],0,_G53387/_G53388)
% i(9,è,vc,essere,ibar,[sems=cop,mfeats=kl3s],0,_G53071/_G53072)


buildeps([],[],[]):-!.
buildeps([],[i(N,little_pro,pro,pro,sn,Feat,ante,Fun/Role)|Args],[i(N,little_pro,pro,pro,sn,Feat,ante,Fun/Role)|Rest]):-
    buildeps([],Args,Rest),
    !.
buildeps([i(N,W,Cat,Lem-Feat)|Lemmed],[i(N,W,Cat,Lem,Cos,Feat,N1,Fun/Role),i(N,little_pro,pro,pro,sn,Feat,ante,Fun/Role)|Args],[i(N,W,Cat,Lem,Cos,Feat,N1,Fun/Role),i(N,little_pro,pro,pro,sn,Feat,ante,Fun/Role)|Rest]):-
    buildeps(Lemmed,Args,Rest),
    !.
buildeps([i(N0,W0,Cat0,Lem1-Fea),i(N,W,Cat,Lem-Feat)|Lemmed],[i(N0,W0,Cat0,Lem1,Cos,Fea,N1,Fun1/Role1),i(N,W,Cat,Lem,f2,Feat,N0,binder)|Args],[i(N0,W0,Cat0,Lem1,Cos,Fea,N1,Fun1/Role1),i(N,W,Cat,Lem,f2,Feat,N0,binder,-),i(N2,rel_pro,Cat,bindee,f2,Fea,ante=Lem1,Fun/Role)|Rest]):-
    (Cat=rel;Cat=relob;Cat=relin;Cat=relq),
    remove(i(N2,rel_pro,Cat,bindee,f2,Fea,ante=Lem1,Fun/Role),Args,RestoA),
    buildeps(Lemmed,RestoA,Rest),
    !.
buildeps([i(N,W,Cat,Lem-Feat)|Lemmed],[i(N,W,Cat,Lem,Cos,Feat,N1,Fun/Role)|Args],[i(N,W,Cat,Lem,Cos,Feat,N1,Fun/Role)|Rest]):-
    buildeps(Lemmed,Args,Rest),
    !.

buildeps([i(N,W,Cat,Lem-Feat)|Lemmed],Args,[i(N,W,Cat,Lem,f2,Feat,N2,binder),i(N1,rel_pro,Cat1,bindee,f2,Feat,ante=Lem,Fun/Role)|Rest]):-
    (Cat=rel;Cat=relob;Cat=relin;Cat=relq),
    \+ member(i(N,W,Cat,Lem,Cos,Feat,N1,Fun/Role),Args),
    remove(i(N,W,Cat1,Lem1,Cos1,Feat1,N1,binder),Args,RestoA),
    buildeps(Lemmed,RestoA,Rest),
    !.

buildeps([i(N,W,Cat,Lem-Feat)|Lemmed],Args,[i(N,W,Cat,Lem,Cos,Feat,N1,Fun/Role)|Rest]):-
    remove(i(N,W,Cat,Lem,Cos,Feat,N1,Fun/Role),Args,RestoA),
    buildeps(Lemmed,RestoA,Rest),
    !.
buildeps([i(N,W,Cat,Lem-Feat)|Lemmed],Args,[i(N,W,Cat,Lem,Cos,Feat,N1,-)|Rest]):-
    buildeps(Lemmed,Args,Rest),
    !.
buildeps([i(N,W,Cat,[])|Lemmed],Args,[i(N,W,Cat,W,-,-,-,-)|Rest]):-
    buildeps(Lemmed,Args,Rest),
    !.
buildeps([i(N,W,Cat,Lem)|Lemmed],Args,[i(N,W,Cat,W,Lem,-,N1,-)|Rest]):-
    buildeps(Lemmed,Args,Rest),
    !.

buildep(N1,[],[],[],[],[]):-!.
buildep(N1,Lemmed,[little_pro/Fun/Role/Fea/Cos|Pas],[i(N1,little_pro,pro,pro,sn,Fea,ante,Fun/Role)|Dep],Rest,Lems):-
    buildep(N1,Lemmed,Pas,Dep,Rest,Lems),
    !.
buildep(N1,[i(Id,W,Cat,Lem1-Feat)|Lemmed],[Lem-Id/Fun/Role/Fea/Cos|Pas],[i(Id,W,Cat,Lem1,f2,Feat,Id1,binder),i(N1,rel_pro,Cat,bindee,f2,Fea,ante=Lem,Fun/Role)|Dep],Rest,Lems):-
%buildep(N1,[i(Id,W,Cat,Lem1-Feat)|Lemmed],[Lem-Id/Fun/Role/Fea/Cos|Pas],[i(Id,W,Cat,Lem1,f2,Feat,Id1,binder)|Dep],Rest,Lems):-
    buildep(N1,Lemmed,Pas,Dep,Rest,Lems),
    !.
buildep(N1,[i(N,si,Cat,Lem-Feat)|Lemmed],[si_impers/Fun/Role/Fea/Cos|Pas],[i(N,W,Cat,Lem,Cos,Feat,N1,Fun/Role)|Dep],Rest,Lems):-
    buildep(N1,Lemmed,Pas,Dep,Rest,Lems),
    !.
buildep(N1,[i(N,W,Cat,Lem-Feat)|Lemmed],[Lem/Fun/Role/Fea/Cos|Pas],[i(N,W,Cat,Lem,Cos,Feat,N1,Fun/Role)|Dep],Rest,Lems):-
    buildep(N1,Lemmed,Pas,Dep,Rest,Lems),
    !.
buildep(N1,[i(N,W,Cat,Lem-Feat)|Lemmed],[N-V-Lem-Args|Pas],[i(N,W,Cat,Lem,Cos,Feat,0,Fun/Role)|Dep],Rest,Lems):-
    buildep(N,Lemmed,Args,Dep1,Rest1,Lemss),
    buildep(N,Lemss,Pas,Dep2,Rest2,Lems),
    append(Dep1,Dep2,Dep),
    append(Rest1,Rest2,Rest),
    !.
buildep(N1,[i(N,W,Cat,Lem-Feat)|Lemmed],[Lem-Args|Pas],[i(N,W,Cat,Lem,Cos,Feat,0,Fun/Role)|Dep],Rest,Lems):-
    buildep(N,Lemmed,Args,Dep1,Rest1,Lemss),
    buildep(N,Lemss,Pas,Dep2,Rest2,Lems),
    append(Dep1,Dep2,Dep),
    append(Rest1,Rest2,Rest),
    !.
buildep(N1,Lemmed,[],Dep,[],Lemmed):-
    !.
buildep(N1,Lemmed,[Lem/Fun/Role/Fea/Cos|Pas],[i(N,W,Cat,Lem,Cos,Feat,N1,Fun/Role)|Dep],Rest,Lems):-
    remove(i(N,W,Cat,Lem-Feat),Lemmed,Lemres),
    buildep(N1,Lemres,Pas,Dep,Rest,Lems),
    !.
buildep(N1,[i(N,W,Cat,Lem)|Lemmed],Pas,Dep,Rest,[i(N,W,Cat,Lem)|Lems]):-
    buildep(N1,Lemmed,Pas,Dep,Rest,Lems),
    !.
buildep(N1,[],Pas,[],Pas):-
    !.

builddepheads([],[]):-!.
builddepheads([Pas|Rest],[Args|Heads]):-
    extractpasinf(Pas,Args),
    builddepheads(Rest,Heads),
    !.    
builddepend(Lemmed,Deps,PAS,Dep):-
    appiattisci(PAS,Pas),
    builddepheads(Pas,Headss),
    appiattisci(Headss,Heads),
    buildlemmedheads(Lemmed,Heads,Argss),
    appiattisci(Argss,Args1),
    sort(Args1,Args),
    buildeps(Lemmed,Args,Dep),
    !.
builddepend(Lemmed,Deps,PAS,Headd):-
    appiattisci(PAS,Pas),
    builddepheads(Pas,Headss),
    appiattisci(Headss,Heads),
    append(Deps,Heads,Headd),
    !.
builddepend(Lemmed,Deps,PAS,Deps):-
    !.

buildpuntdepend(Lemmed,Deps,PAS,Headd):-
    sort(Deps,Args1),
    togli_doppie(Lemmed,Args1,Args),
    numberlacks(Lemmed,Args,Nums),
    addpuntdeps(Nums,Lemmed,Args,Headd),
    !.

numberlacks(Lemmed,Args,Nums):-
    findall(N, member(i(N,W,Ca,Lem,Cos,Feat,N1,Fun),Args), Num),
    sort(Num,Numss),
    togli_doppi(Numss,Numm),
    lackingnum(Lemmed,Numm,Nums),
    !.

checkclosenum(N,N1,N2):-
    Diff is N1 - N,
    Diff1 is N2 - N,
    Diff1<Diff,
    !.

getmissingword(Lemmed,N2,Word):-
    (N3 is N2 - 1,
     member(i(N3,W,Ca,Lem-Feat),Lemmed)
     ;
     N3 is N2 - 2,
     member(i(N3,W,Ca,Lem-Feat),Lemmed)
     ),
    Word=i(N3,W,Ca,Lem,Cos,Feat,N2,-),
    !.


togli_doppie(Lemmed,[],[]):-!.
togli_doppie(Lemmed,[i(N,W,Ca,Lem,Cos,Feat,N1,Fun/Role),i(N,W,Ca,Lem,Cos,Feat,N2,Fun/Role)|Rest],[i(N,W,Ca,Lem,Cos,Feat,N2,Fun/Role)|Args]):-
    N2<N1, 
    checkclosenum(N,N1,N2),
    togli_doppie(Lemmed,Rest,Args),
    !.
togli_doppie(Lemmed,[i(N,W,Ca,Lem,Cos,Feat,N1,Fun/Role),i(N,W,Ca,Lem,Cos,Feat,N2,Fun/Role)|Rest],[i(N,W,Ca,Lem,Cos,Feat,N1,-)|Args]):-
    N1<N2,
    Ca=art,
    getmissingword(Lemmed,N2,Word),
    togli_doppie(Lemmed,Rest,Args),
    !.
togli_doppie(Lemmed,[i(N,W,Ca,Lem,Cos,Feat,N1,-),i(N,W,Ca,Lem,Cos,Feat,N2,-),i(N,W,Ca,Lem,Cos,Feat,N3,-)|Rest],[i(N,W,Ca,Lem,Cos,Feat,N1,-)|Args]):-
    N1<N2, 
    N2<N3, 
    togli_doppie(Lemmed,Rest,Args),
    !.
togli_doppie(Lemmed,[i(N,W,Ca,Lem,Cos,Feat,N1,-),i(N,W,Ca,Lem,Cos,Feat,N2,-)|Rest],[i(N,W,Ca,Lem,Cos,Feat,N2,-)|Args]):-
    N1<N2, 
    checkclosenum(N,N2,N1),
    togli_doppie(Lemmed,Rest,Args),
    !.
togli_doppie(Lemmed,[i(N,W,Ca,Lem,Cos,Feat,N1,-)|Rest],[i(N,W,Ca,Lem,Cos,Feat,N1,-)|Args]):-
    togli_doppie(Lemmed,Rest,Args),
    !.
togli_doppie(Lemmed,[i(N,W,Ca,Lem,Cos,Feat,N1,Fun/Role)|Rest],[i(N,W,Ca,Lem,Cos,Feat,N1,Fun/Role)|Args]):-
    togli_doppie(Lemmed,Rest,Args),
    !.
togli_doppie(Lemmed,[i(N,W,Ca,Lem,Cos,Feat,N1,Fun)|Rest],[i(N,W,Ca,Lem,Cos,Feat,N1,Fun)|Args]):-
    togli_doppie(Lemmed,Rest,Args),
    !.

lackingnum([],[],[]):-!.
lackingnum([i(N,W,Cat,Lem)|Lemmed],[N|Numm],Nums):-
    lackingnum(Lemmed,Numm,Nums),
    !.
lackingnum([i(N,W,Cat,Lem)|Lemmed],Numm,[N|Nums]):-
    lackingnum(Lemmed,Numm,Nums),
    !.
%[16,24,34,35,36,37,38,39,41,42,43,48,50,54,55,57,59]

addpuntdeps([],Lemmed,Rest,Rest):-!.
/*
addpuntdeps([i(N,W,Cat,Lem-Feat)|Lemmed],[i(N,W,Ca,Lem,Cos,Feat,N1,Fun/Role),i(N,big_pPro,Ca1,Lem1,Cos1,Feat1,N2,Fun1/Role1)|Rest],[i(N,W,Ca,Lem,Cos,Feat,N1,Fun/Role),i(N,big_pPro,Ca1,Lem1,Cos1,Feat1,N2,Fun1/Role1)|Headd]):-
    addpuntdeps(Lemmed,Rest,Headd),
    !.
addpuntdeps([i(N,W,Cat,Lem-Feat)|Lemmed],[i(N,little_pro,Ca1,Lem1,Cos1,Feat1,N2,Fun1/Role1),i(N,W,Ca,Lem,Cos,Feat,N1,Fun)|Rest],[i(N,little_pro,Ca1,Lem1,Cos1,Feat1,N2,Fun1/Role1),i(N,W,Ca,Lem,Cos,Feat,N2,Fun)|Headd]):-
    addpuntdeps(Lemmed,Rest,Headd),
    !.
addpuntdeps([i(N,W,Cat,Lem-Feat)|Lemmed],[i(N,W,Ca,Lem,Cos,Feat,N1,Fun/Role),i(N,Clit,Ca1,Lem1,Cos1,Feat1,ante,Fun1/Role1)|Rest],[i(N,W,Ca,Lem,Cos,Feat,N1,Fun/Role),i(N,Clit,Ca1,Lem1,Cos1,Feat1,ante,Fun1/Role1)|Headd]):-
    addpuntdeps(Lemmed,Rest,Headd),
    !.
addpuntdeps([i(N,W,Cat,Lem-Feat)|Lemmed],[i(N,Clit,Ca1,Lem1,Cos1,Feat1,ante,Fun1/Role1),i(N,W,Ca,Lem,Cos,Feat,N1,Fun/Role)|Rest],[i(N,W,Ca,Lem,Cos,Feat,N1,Fun/Role),i(N,Clit,Ca1,Lem1,Cos1,Feat1,ante,Fun1/Role1)|Headd]):-
    addpuntdeps(Lemmed,Rest,Headd),
    !.
addpuntdeps([i(N,ci,Cat,Lem-Feat)|Lemmed],[i(N,ci,Ca,Lem,Cos,Feat,N1,-),i(N,little_pro,Ca1,Lem1,Cos1,Feat1,N1,Fun1/Role1)|Rest],[i(N,ci,Ca,Lem,Cos,Feat,N1,-)|Headd]):-
    addpuntdeps(Lemmed,Rest,Headd),
    !.
addpuntdeps([i(N,W,Cat,Lem1-Feat)|Lemmed],[i(N,W,Ca,Lem,Cos,Feat,N1,Fun/Role)|Rest],[i(N,W,Ca,Lem,Cos,Feat,N1,Fun/Role)|Headd]):-
    addpuntdeps(Lemmed,Rest,Headd),
    !.
addpuntdeps([i(N,W,Cat,Lem1-Feat)|Lemmed],[i(N,W,Ca,Lem,Cos,Feat,N1,Fun)|Rest],[i(N,W,Ca,Lem,Cos,Feat,N1,Fun)|Headd]):-
    addpuntdeps(Lemmed,Rest,Headd),
    !.
addpuntdeps([i(N,W,Cat,Lem1-Feat1)|Lemmed],[i(N,W,Ca,Lem,Cos,Feat,N1,Fun)|Rest],[i(N,W,Ca,Lem,Cos,Feat,N1,Fun)|Headd]):-
    addpuntdeps(Lemmed,Rest,Headd),
    !.
addpuntdeps([i(N,W,Cat,Lem)|Lemmed],[i(N,W,Ca,Lem,Cos,Feat,N1,Fun)|Rest],[i(N,W,Ca,Lem,Cos,Feat,N1,Fun)|Lems]):-
    addpuntdeps(Lemmed,Rest,Lems),
    !.
*/

addpuntdeps([N|Nums],Lemmed,Rest,[i(N,W,Cat,Lem,-,-,N1,-)|Lems]):-
    remove(i(N,W,Cat,Lem),Lemmed,Lemres),
    select_punct(W,_),
    addpuntdeps(Nums,Lemres,Rest,Lems),
    !.
addpuntdeps([N|Nums],Lemmed,Rest,Lems):-
    member(i(N,little_pro,Ca,Lem,Cos,Feat,N1,Fun),Rest),
    addpuntdeps(Nums,Lemmed,Rest,Lems),
    !.
addpuntdeps([N|Nums],Lemmed,Rest,Lems):-
    member(i(N,big_pPro,Ca,Lem,Cos,Feat,N1,Fun),Rest),
    addpuntdeps(Nums,Lemmed,Rest,Lems),
    !.
addpuntdeps([N|Nums],Lemmed,Rest,Lems):-
    member(i(N,Clit,Ca1,Lem1,Cos1,Feat1,ante,Fun1/Role1),Rest),
    addpuntdeps(Nums,Lemmed,Rest,Lems),
    !.
addpuntdeps([N|Nums],Lemmed,Rest,[i(N,W,Cat,Le,-,-,N1,-)|Lems]):-
    remove(i(N,W,Cat,Lem),Lemmed,Lemres),
    (Cat=cong;prepos(W),Le=Lem;prepart(Lem,W,L),Le=Lem;prepart(Le,W,L)),
    addpuntdeps(Nums,Lemres,Rest,Lems),
    !.
addpuntdeps([N|Nums],Lemmed,Rest,[i(N,W,Cat,Lem,Cat,Feat,N1,-)|Lems]):-
    remove(i(N,W,Cat,Lem-Feat),Lemmed,Lemres),
    (Cat=av;Cat=avv;Cat=avvl;Cat=congf;Cat=rel;Cat=pk;Cat=cosu),
    addpuntdeps(Nums,Lemres,Rest,Lems),
    !.
addpuntdeps([N|Nums],Lemmed,Rest,[i(N,W,Cat,Lem,-,-,N1,-)|Lems]):-
    remove(i(N,W,Cat,Lem),Lemmed,Lemres),
    (Cat=av;Cat=avv;Cat=avvl;Cat=congf;Cat=rel;Cat=pk;Cat=cosu),
    addpuntdeps(Nums,Lemres,Rest,Lems),
    !.
addpuntdeps([N|Nums],Lemmed,Rest,[i(N,W,Ca1,Lem1,Cos1,Feat1,Ante,Fun1/Role1)|Lems]):-
    remove(i(N,W,Cat,Lem),Lemmed,Lemres),
    member(i(N1,W,Ca1,Lem1,Cos1,Feat1,Ante,Fun1/Role1),Rest),
    addpuntdeps(Nums,Lemres,Rest,Lems),
    !.
addpuntdeps([N|Nums],Lemmed,Rest,[i(N,W,Cat,Lem,sn,Feats,Ante,-)|Lems]):-
    remove(i(N,W,Cat,Lem-Feats),Lemmed,Lemres),
    Cat=art, N1 is N + 1,
    member(i(N1,W1,Ca1,Lem1,Cos1,Feat,Ante,Fun1),Rest),
    addpuntdeps(Nums,Lemres,Rest,Lems),
    !.
addpuntdeps([N|Nums],Lemmed,Rest,[i(N,W,Cat,Lem,Cos1,Feat,Ante,-)|Lems]):-
    (remove(i(N,W,Cat,Lem-Feat),Lemmed,Lemres);
    remove(i(N,W,Cat,Feat),Lemmed,Lemres)),
    (Cat=p;Cat=pd;Cat=pda;Cat=partd;Cat=partda;Cat=part), 
    N1 is N + 1,
    member(i(N1,W1,Ca1,Lem1,Cos1,Feats,Ante,Fun1),Rest),
    addpuntdeps(Nums,Lemres,Rest,Lems),
    !.
addpuntdeps([N|Nums],Lemmed,Rest,[i(N,W,Cat,Lem,Cos1,Feat,Ante,Fun1/Role1)|Lems]):-
    remove(i(N,W,Cat,Lem-Feat),Lemmed,Lemres),
%    member(i(N1,W,Ca1,Lem1,Cos1,Feat1,Ante,Fun1/Role1),Rest),
    addpuntdeps(Nums,Lemres,Rest,Lems),
    !.
addpuntdeps([N|Nums],Lemmed,Rest,[i(N,W,Cat,Lem,Cos1,Feat1,Ante,-)|Lems]):-
    remove(i(N,W,Cat,Lem),Lemmed,Lemres),
%    member(i(N1,W,Ca1,Lem1,Cos1,Feat1,Ante,Fun1/Role1),Rest),
    addpuntdeps(Nums,Lemres,Rest,Lems),
    !.


matchfeatvesdis(MFe,Fe):-
    member(mfeats=MFes,Fe),
    stringof(List,MFes),
    reverse(List,Rev),
    Rev=[Num,Pers|_],
    matchfvsd(Num,Pers,MFe),
    !.
matchfeatvesdis(MFe,Fe):-
    member(num=Nu,Fe),
    member(gen=Ge,Fe),
    mcon(Ge,Nu,GenN),
    stringof(List,MFe),
    reverse(List,Rev),
    Rev=[Num,Per|_],
    matchfvsd(Num,Pers,GenN),
    !.

matchfvsd(s,3,ms).
matchfvsd(s,3,fs).
matchfvsd(s,3,mfs).
matchfvsd(p,3,mp).
matchfvsd(p,3,fp).
matchfvsd(p,3,mfp).

getcatsemasp(Verb,CatV,Scat,Subs, Lem):-
   nonvar(Verb),
   cat_gramm(Verb,CatV,Scat,Subs),
   !.
getcatsemasp(Lem,CatV,Scat,LArgsVs, Lem):-
   getroot(Lem,Root,Cong),
   findall(CatV-Scat-LArgsV,pv(Root,Suf,CatGr,CatV,Scat,LArgsV),LArgsVs),
   LArgsVs\=[],
   member(CatV-Scat-LArgs,LArgsVs),!.
getcatsemasp(Lem,CatV,Scat,LArgsVs, Lem):-
   atomic(Lem),
   stringof(List,Lem),
   reverse(List,[e,r,r|Rest]),
   reverse(Rest,VerbL),
   stringof(VerbL,Verb),
   mcon(Verb,r,Root),
   findall(CatV-Scat-LArgsV,pv(Root,Suf,CatGr,CatV,Scat,LArgsV),LArgsVs),
   LArgsVs\=[],
   member(CatV-Scat-LArgs,LArgsVs),
   !.
getcatsemasp(Verb,CatV,Scat,LArgsV,Le):-
   atomic(Verb),
   getlem(Verb,v,Lems),
   Lems=Le-Feats,
   Le\=Verb,
   getcatsemasp(Le,CatV,Scat,LArgsV,Le),
   !.
getcatsemasp(Lem,Cat,Scat,LArgsV, Lem):-
   atomic(Lem),
   prendi_lemma(Lem,LArgsV,_,_),
   (member(Lem-CatV-_-Scat-_,LArgsV)
   ;
   LArgsV\=[],Cat=tr,Scat=activ),
   !.
getcatsemasp(Lem,Cat,Scat,LArgsV, Lem):-
   atomic(Lem),Cat=tr,Scat=activ,
   !.
depsrestverb(1,Lems,N,[],[],Lems):-!.
depsrestverb(L,Lemmed,N1,[Verb-Cl-_|Ibar],[i(N,Verb,Cat,Lem,ibar,Feat,N1,-)|RestVerb],Lems):-
    Cl\=clit,
    (remove(i(N,Verb,Cat,Lem-Feat),Lemmed,Lemres);
    remove(i(N,Verb,Cat,Feat),Lemmed,Lemres)),
    checkproximity(Lemmed,N,N1),
    L1 is L - 1,
    depsrestverb(L1,Lemres,N1,Ibar,RestVerb,Lems),
    !.
depsrestverb(L,Lemmed,N1,[Verb-Cl-_|Ibar],RestVerb,Lems):-
    L1 is L - 1,
    depsrestverb(L1,Lemmed,N1,Ibar,RestVerb,Lems),
    !.

lookforintcomp(Ibar,Rest,[Func-Subj]):-
    remove(Func-Subj,Ibar,Rest),
    Subj\=[],nonvar(Subj),
    is_list(Subj),
    !.
lookforintcomp(Ibar,Ibar,[]):-!.
    
createdepverbrest(Lemmed,Ibar,Verb,DepVerb,Lems,ResComp):-
    lookforintcomp(Ibar,NewI,ResComp),
    createdepverb(Lemmed,NewI,Verb,DepVerb,Lems),
    !.

createdepverb(Lemmed,Ibar,N-Verb-Lem-LForm,[i(N,W,Cat,Lemm,ibar,Feat,0,CatV/Scat)],Lemres):-
    nonvar(Lem),
    Ibar=[Verb-_-_],
    remove(i(N,W,Cat,Lem-Feat),Lemmed,Lemres),
    getcatsemasp(Lem,CatV,Scat,Subs,Lemm),
    !.
createdepverb(Lemmed,Ibar,N-Verb-Lem-LForm,[i(N,W,Cat,Lemm,ibar,Feat,0,CatV/Scat)|RestVerb],Lems):-
    nonvar(Lem),
    reverse(Ibar,Rev),
    Rev=[Verb-_-_|Rest],
    remove(i(N,W,Cat,Lem-Feat),Lemmed,Lemres),
    getcatsemasp(Lem,CatV,Scat,Subs,Lemm),
    length(Ibar,L),
    depsrestverb(L,Lemres,N,Rest,RestVerb,Lems),
    !.
createdepverb(Lemmed,Ibar,N-Verb-Lem-LForm,[i(N,Verb,Cat,Lemm,ibar,Feat,0,CatV/Scat)],Lemres):-
    var(Lem),
    (Ibar=[Verb-_-_],
     remove(i(N,Verb,Cat,Lem-Feat),Lemmed,Lemres),
     getcatsemasp(Lem,CatV,Scat,Subs,Lemm),RestVerb=Lemres
     ;
     remove(Verb-_-_,Ibar,Rest),
     remove(i(N,Verb,Cat,Lem-Feat),Lemmed,Lemres),
     getcatsemasp(Lem,CatV,Scat,Subs,Lemm),
     length(Ibar,L),
     depsrestverb(L,Lemres,N,Rest,RestVerb,Lems)),
    !.
    
appendcompls(Objs,Open,[Obj1,Adjs]):-
    Objs=[Obj,Adjs],
    Obj=[Ob,Obl],
    is_list(Obl),
    append(Open,Obl,Outs),
    Obj1=[Ob,Outs],
    !.
appendcompls(Objs,Open,[Obj1,Adjs]):-
    Objs=[Obj,Adjs],
    Obj=[Ob|Obls],
    appiattisci(Obls,Obl),
    append(Open,Obl,Outs),
    Obj1=[Ob,Outs],
    !.
appendcompls(Objs,Open,[Obj,Outs]):-
    Objs=[Obj,Adjs],
    append(Adjs,Open,Outs),
    !.
appendcompls(Objs,Open,Outs):-
    appiattisci(Objs,Obj),
    append(Obj,Open,Outs),
    !.

maptofstrs(L,Lemmed,ToLog,[],[],[]):-!.
maptofstrs(L,Lemmed,[],Ibar,[],[]):-!.
maptofstrs(1,Lemmed,ToLog,[Ibar],[PAS-Rest2],[DepVerb,DepsC,DepsAll,DepsAdj]):-
    extractibar(Lemmed,ToLog,Ibar,Verb,Rest),
    createdepverb(Lemmed,Ibar,Verb,DepVerb,Lems),
    extractsubj(Lemmed,Verb,Ibar,Rest,Subj,Rest1),
    createdepsubj(Lems,DepVerb,Subj,DepSubj,Subj1,Lems1),
    extractcompls(Lems,Verb,Ibar,DepSubj,Rest1,Objs,Rest22,DepsAll),
    extractopencompladjs(Verb,Lems,Subj1,Rest22,Open,Rest2,DepsAdj),
    appendcompls(Objs,Open,Outs),
    extractpol(Ibar,Pol),
    extractvoice(Ibar,Voice),
    mapsemrols(Lems1,[Pol,Voice,Verb,Subj1,Outs],DepSubj,PAS,DepsC),
    writepassnew(PAS-Rest2),nl,nl,
    !.
maptofstrs(L,Lemmed,ToLog,[Ibar|Ibars],[PAS-Rest2|RestoP],[DepVerb,DepsC,DepsAll,DepsAdj|Deps]):-
    1<L,
    extractclause(Ibar,ToLog,Clause,RestCl),
    extractibar(Lemmed,Clause,Ibar,Verb,Rest),
    createdepverb(Lemmed,Ibar,Verb,DepVerb,Lems),
    extractsubj(Lemmed,Verb,Ibar,Rest,Subj,Rest1),
    createdepsubj(Lems,DepVerb,Subj,DepSubj,Subj1,Lems1),
    extractcompls(Lems,Verb,Ibar,DepSubj,Rest1,Objs,Rest22,DepsAll),
    extractopencompladjs(Verb,Lems,Subj1,Rest22,Open,Rest2,DepsAdj),
    appendcompls(Objs,Open,Outs),
    extractpol(Ibar,Pol),
    extractvoice(Ibar,Voice),
    mapsemrols(Lems1,[Pol,Voice,Verb,Subj1,Outs],DepSubj,PAS,DepsC),
    writepassnew(PAS-Rest2),nl,nl,
    L1 is L - 1,
    maptofstrs(L1,Lems1,RestCl,Ibars,RestoP,Deps),
    !.
maptofstrs(L,Lemmed,ToLog,Ibars,[PAS-Rest2|RestoP],[DepVerb,DepsC,DepsAll,DepsAdj|Deps]):-
    1<L,
    length(Ibars,Le),1<Le,
    member(Ibar,Ibars),
    extractclause(Ibar,ToLog,Clause,RestCl),
    extractibar(Lemmed,Clause,Ibar,Verb,Rest),
    createdepverb(Lemmed,Ibar,Verb,DepVerb,Lems),
    extractsubj(Lemmed,Verb,Ibar,Rest,Subj,Rest1),
    createdepsubj(Lems,DepVerb,Subj,DepSubj,Subj1,Lems1),
    extractcompls(Lems,Verb,Ibar,DepSubj,Rest1,Objs,Rest22,DepsAll),
    extractopencompladjs(Verb,Lems,Subj1,Rest22,Open,Rest2,DepsAdj),
    appendcompls(Objs,Open,Outs),
    extractpol(Ibar,Pol),
    extractvoice(Ibar,Voice),
    mapsemrols(Lems1,[Pol,Voice,Verb,Subj1,Outs],DepSubj,PAS,DepsC),
    writepassnew(PAS-Rest2),nl,nl,
    L1 is L - 1,
    maptofstrs(L1,Lems1,RestCl,Ibars,RestoP,Deps),
    !.
maptofstrs(L,Lemmed,ToLog,[Ibar|Ibars],[PAS-Rest2|RestoP],[DepVerb,DepSubj,DepsAll,DepsAdj|Deps]):-
    1<L,
    extractclause(Ibar,ToLog,Clause,RestCl),
    extractibar(Lemmed,Clause,Ibar,Verb,Rest),
    createdepverb(Lemmed,Ibar,Verb,DepVerb,Lems),
    extractsubj(Lemmed,Verb,Ibar,Rest,Subj,Rest1),
    createdepsubj(Lems,DepVerb,Subj,DepSubj,Subj1,Lems1),
    extractcompls(Lems,Verb,Ibar,DepSubj,Rest1,Objs,Rest22,DepsAll),
    extractopencompladjs(Verb,Lems,Subj1,Rest22,Open,Rest2,DepsAdj),
    appendcompls(Objs,Open,Outs),
    extractpol(Ibar,Pol),
    extractvoice(Ibar,Voice),
    Verb=N-V-Lem-LForms,
    appiattisci(LForms, LFormm),
    sort(LFormm,LForm),
    member(K-L-Subs,LForm),
    assignrolesubj(N,DepSubj,Subs,DepSubj1),
    PAS=pas(Pol,Voice,N-V-Lem,subj-Subj1,Outs),
    writepassnew(PAS-Rest2),nl,nl,
    L1 is L - 1,
    maptofstrs(L1,Lems1,RestCl,Ibars,RestoP,Deps),
    !.
maptofstrs(L,Lemmed,ToLog,[Ibar|Ibars],RestoP,Deps):-
    1<L,
    extractclause(Ibar,ToLog,Clause,RestCl),Clause\=[],
    writenl(_,Clause-[failed]),nl,nl,
    L1 is L - 1,
    maptofstrs(L1,Lemmed,RestCl,Ibars,RestoP,Deps),
    !.
maptofstrs(L,Lemmed,ToLog,Ibars,[],[]):-
    !.

assignrolesubj(N1,DepSubj,Subs,DepSubj1):-
    is_list(Subs),
    checksubjectssubroles(Subs,Role),
    remove(i(N,W,Cat,Lem,Cos,Feat,0,subj/Rol),DepSubj,Rest),
    append([i(N,W,Cat,Lem,Cos,Feat,N1,subj/Role)],Rest,DepSubj1),
    !.
assignrolesubj(N1,DepSubj,Subs,DepSubj1):-
    atomic(Subs),
    remove(i(N,W,Cat,Lem,Cos,Feat,0,subj/Rol),DepSubj,Rest),
    append([i(N,W,Cat,Lem,Cos,Feat,N1,subj/Subs)],Rest,DepSubj1),
    !.
assignrolesubj(N1,DepSubj,Subs,DepSubj1):-
    atomic(Subs),
    (remove(i(N,W,Cat,Lem,Cos,Feat,N1,subj/Rol),DepSubj,Rest),N3=N1;
    remove(i(N,W,Cat,Lem,Cos,Feat,N2,subj/Rol),DepSubj,Rest),N3=N2),
    append([i(N,W,Cat,Lem,Cos,Feat,N3,subj/Subs)],Rest,DepSubj1),
    !.

writepassnew([]):-!.
writepassnew([First|Pas]):-
    writenl(_,First),nl,nl,
    writepassnew(Pas),
    !.
writepassnew([First|Pas]-Rest):-
    writenl(_,First-Rest),nl,nl,
    writepassnew(Pas),
    !.
writepassnew([[First|Pas]-Rest]):-
    writenl(_,First-Rest),nl,nl,
    writepassnew(Pas),
    !.
writepassnew(Pas-Rest):-
    writenl(_,Pas-Rest),nl,nl,
    !.
findboundaryclause(ToLog,L):-
    ToLog\=[],
    (nth(ToLog,N,ibar-Ibar);
    nth(ToLog,N,ir_infl-Ibar)),
    (nth(ToLog,N1,ibar-Ibar1);
    nth(ToLog,N1,ir_infl-Ibar1)),
    (Ibar\=Ibar1;
     Ibar=Ibar1, N\=N1),
    (N<N1,L=N1;N1<N,L=N),!.
findboundaryclause(ToLog,L):-
    ToLog\=[],
    (nth(ToLog,N,ibar-Ibar);
    nth(ToLog,N,ir_infl-Ibar)),
    length(ToLog,L),
    !.
matchcosts(A-Cos,A-Cost):-!.
matchcosts(A-Cost,C-Cost):-!.
matchcosts(A-Cos,B-Cost):-
    Cos=[N-C-_|R],
    Cost=[N-C-_|R1],
    !.
matchcosts(A-Cos,B-Cost):-
    Cos=[N-C-_|R],
    Cost=[N1-C1-_|R],
    !.
matchcosts(A-Cos,B-Cost):-
    reverse(Cos,RevC),
    reverse(Cost,RevCo),
    RevC=[N-C-_|R],
    RevCo=[N1-C-_|R1],
    !.
    
extractclause(Ibar,[fc-FS|ToLog],[fc-FS|Clause],Rest):-
    findboundaryclause([fc-FS|ToLog],L),
    extractclaus([fc-FS|ToLog],L,ToLog,Clause,Rest),
    !.
extractclause(Ibar,[fs-FS|ToLog],[fs-FS|Clause],Rest):-
    findboundaryclause([fs-FS|ToLog],L),
    extractclaus([fs-FS|ToLog],L,ToLog,Clause,Rest),
    !.
extractclause(Ibar,[cp-FS|ToLog],[cp-FS|Clause],Rest):-
    findboundaryclause([cp-FS|ToLog],L),
    extractclaus([cp-FS|ToLog],L,ToLog,Clause,Rest),
    !.
extractclause(Ibar,[dirs-FS|ToLog],[dirs-FS|Clause],Rest):-
    findboundaryclause([dirs-FS|ToLog],L),
    extractclaus([dirs-FS|ToLog],L,ToLog,Clause,Rest),
    !.
extractclause(Ibar,ToLog,Clause,Rest):-
    ToLog\=[],
    findboundaryclause(ToLog,L),
    extractclaus(ToLog,L,ToLog,Claus,Rests),
    (member(A-Ibar,Claus),Rest=Rests,Clause=Claus
    ;
    Rests=[fs-_|Clauses],member(fs-_,Clauses),
    extractclaus(Clauses,L,Clauses,Claus1,Rests1),
    append(Claus,Rests1,Rest),Clause=Claus1
    ;
    member(A-Ibar,Rests),Rest=Claus,Clause=Rests),
    !.
extractclaus(Sent,L,[],[],[]):-!.
extractclaus(Sent,L,[fp-B,ibar-Ibar|ToLog],[],[fp-B,ibar-Ibar|ToLog]):-!.
extractclaus(Sent,L,[fac-B,ibar-Ibar|ToLog],[],[fac-B,ibar-Ibar|ToLog]):-!.
extractclaus(Sent,L,[fc-B,ibar-Ibar|ToLog],[],[fc-B,ibar-Ibar|ToLog]):-!.
extractclaus(Sent,L,[fs-B,ibar-Ibar|ToLog],[],[fs-B,ibar-Ibar|ToLog]):-!.
extractclaus(Sent,L,[fp-B,ir_infl-Ibar|ToLog],[],[fp-B,ibar-Ibar|ToLog]):-!.
extractclaus(Sent,L,[fc-B,ir_infl-Ibar|ToLog],[],[fc-B,ibar-Ibar|ToLog]):-!.
%extractclaus(Sent,L,[fs-B,ir_infl-Ibar|ToLog],[],[fs-B,ibar-Ibar|Rest]):-
%           remove(fac-Clause,ToLog,Rest),!.
extractclaus(Sent,L,[fs-B,ir_infl-Ibar|ToLog],[],[fs-B,ibar-Ibar|ToLog]):-!.
extractclaus(Sent,L,[A-Cos,fp-B,C-Cost|ToLog],[A-Cos,fp-B,C-Cost|Rest],Clause):-
    (member(ibar-Ibar,ToLog);
     member(ir_infl-Ibar,ToLog)),
    matchcosts(A-Cos,C-Cost),
    extractclaus(Sent,L,ToLog,Rest,Clause),
    !.
extractclaus(Sent,L,[A-Cos,dirs-B,C-Cost|ToLog],[A-Cos,dirs-B,C-Cost|Rest],Clause):-
    (member(ibar-Ibar,ToLog);
     member(ir_infl-Ibar,ToLog)),
    matchcosts(A-Cos,C-Cost),
    extractclaus(Sent,L,ToLog,Rest,Clause),
    !.
extractclaus(Sent,L,[fc-B,ibar-Ibar|ToLog],[],[fc-B,ibar-Ibar|ToLog]):-!.
extractclaus(Sent,L,[fc-B,ir_infl-Ibar|ToLog],[],[fc-B,ibar-Ibar|ToLog]):-!.
extractclaus(Sent,L,[fp-B|ToLog],[],[fp-B|ToLog]):-
    member(ibar-Ibar,ToLog);
    member(ir_infl-Ibar,ToLog),!.
extractclaus(Sent,L,[fc-B|ToLog],[],[fc-B|ToLog]):-
    member(ibar-Ibar,ToLog);
    member(ir_infl-Ibar,ToLog),!.
extractclaus(Sent,L,[fs-B|ToLog],[],[fs-B|ToLog]):-
    member(ibar-Ibar,ToLog);
    member(ir_infl-Ibar,ToLog),!.
extractclaus(Sent,L,[cp-B|ToLog],[],[cp-B|ToLog]):-
    member(ibar-Ibar,ToLog);
    member(ir_infl-Ibar,ToLog),!.
extractclaus(Sent,L,[dirs-B|ToLog],[],[dirs-B|ToLog]):-
    member(ibar-Ibar,ToLog);
    member(ir_infl-Ibar,ToLog),!.
extractclaus(Sent,L,[A-B|ToLog],[A-B|Rest],Clause):-
    (A\=ibar,A\=ir_infl;
     (A=ibar;A=ir_infl),
     (nth(Sent,N,ibar-B);
     nth(Sent,N,ir_infl-B)),
     N<L
     ;
     L=1),
    extractclaus(Sent,L,ToLog,Rest,Clause),
    !.
extractclaus(Sent,L,[A-B|ToLog],[],[A-B|ToLog]):-
    !.

createallF2pas0(Lemmed,F2,SLem/Role/Feat,PAS1,Deps):-
     F2=Id-[N1-V1-Lem1-[subj/Head/Ind]-Pol1-Voice1|Obj1]-Struct,
     PAS1=pas(Pol1,Voice1,Lem1,subj-[SLem-Id/Role/Feat],Obj1)
     ;
     F2=Id-[N1-V1-Lem1-[Func/Head/Ind]-Pol1-Voice1|Obj1]-Struct,
     remove(Func-Subj,Obj1,Rest),
     PAS1=pas(Pol1,Voice1,N1-V1-Lem1,subj-[SLem-Id/Role/Feat],Rest)
     ;
     F2=pas(Pol,Voice,N-V-Lem,subj-[SLem/Role/Feat/NP],RestC),PAS1=F2,
     !.
createallF2pas(Lemmed,F2,SLem/Role/Feat,PAS1,Deps):-
     F2=Id-[N1-V1-Lem1-[subj/Head/Ind]-Pol1-Voice1|Obj1]-Struct,
     createF2pas(Lemmed,N1-V1-Lem1,[subj/Head],Pol1,Voice1,Obj1,Struct,PAS1,Deps)
     ;
     F2=Id-[N1-V1-Lem1-[subj/Head/Ind]-Pol1-Voice1|Obj1]-Struct,
     Obj1=[],
     createF2pas(Lemmed,N1-V1-Lem1,[subj/Head],Pol1,Voice1,[],Struct,PAS1,Deps)
     ;
     F2=Id-[N1-V1-Lem1-[Func/Head/Ind]-Pol1-Voice1|Obj1]-Struct,
     createF2pas11(Lemmed,N1-V1-Lem1,Id-Head-Ind,Pol1,Voice1,Func-[SLem/Role/Feat],Obj1,Struct,PAS1,Deps)
     ;
     F2=pas(Pol,Voice,N-V-Lem,subj-[SLem/Role/Feat/NP],RestC),PAS1=F2,
     !.
createallF2pas1(Lemmed,F2,SLem/Role/Feat,PAS1,Deps):-
     F2=Id-[N1-V1-Lem1-[subj/Head/Ind]-Pol1-Voice1|Obj1]-Struct,
     createF2pas(Lemmed,N1-V1-Lem1,[subj/Head],Pol1,Voice1,Obj1,Struct,PAS1,Deps)
     ;
     F2=Id-[N1-V1-Lem1-[subj/Head/Ind]-Pol1-Voice1|Obj1]-Struct,
     Obj1=[],
     createF2pas(Lemmed,N1-V1-Lem1,[subj/Head],Pol1,Voice1,[],Struct,PAS1,Deps)
     ;
     F2=Id-[N1-V1-Lem1-[Func/Head/Ind]-Pol1-Voice1|Obj1]-Struct,
     remove(Fun-Subj,Obj1,Rest),
     createF2pas11(Lemmed,N1-V1-Lem1,Id-subj-Subj,Pol1,Voice1,Func-Head/Ind,Rest,Struct,PAS1,Deps)
     ;
     F2=pas(Pol,Voice,N-V-Lem,subj-[SLem/Role/Feat/NP],RestC),PAS1=F2,
     !.
createallF2pas2(Lemmed,F2,SLem/Role/Feat,PAS1,Deps):-
     F2=Id-[N1-V1-Lem1-[subj/Head/Ind]-Pol1-Voice1|Obj1]-Struct,
     createF2pas(Lemmed,N1-V1-Lem1,[subj/Head-Id],Pol1,Voice1,Obj1,Struct,PAS1,Deps)
     ;
     F2=Id-[N1-V1-Lem1-[subj/Head/Ind]-Pol1-Voice1|Obj1]-Struct,
     Obj1=[],
     createF2pas(Lemmed,N1-V1-Lem1,[subj/Head-Id],Pol1,Voice1,[],Struct,PAS1,Deps)
     ;
     F2=Id-[N1-V1-Lem1-[Func/Head/Ind]-Pol1-Voice1|Obj1]-Struct,
     remove(Func-Subj,Obj1,Rest),
     createF2pas1(Lemmed,N1-V1-Lem1,Id-Func-Head-Subj,Pol1,Voice1,subj-[SLem/Role/Feat],Rest,Struct,PAS1,Deps)
     ;
     F2=pas(Pol,Voice,N-V-Lem,subj-[SLem/Role/Feat/NP],RestC),PAS1=F2,
     !.

checkremovepasall(Compls,PAS,Rest):-
     appiattisci(Compls,Compl),
     removeallpascompls(Compl,PAS,Rest),
     !.
removeallpascompls(Compl,[pas(Pol1,Voice1,N1-V1-Lem1,subj-Subjs,Rest1)|Other],Rest):-        
     remove(pas(Pol1,Voice1,N1-V1-Lem1,subj-Subjs,Rest1),Compl,RestCom),
     removeallpascompls(RestCom,Other,Rest),
     !.
removeallpascompls(Compl,[pas(Pol1,Voice1,N1-V1-Lem1,Fun-Subjs,Rest-All)|Other],Rest):-        
     remove(pas(Pol1,Voice1,N1-V1-Lem1,Fun-Subjs,Rest-All),Compl,RestCom),
     removeallpascompls(RestCom,Other,Rest),
     !.
removeallpascompls(Compl,[pas(Pol1,Voice1,N1-V1-Lem1,Control,Gerund)|Other],Rest):-        
     remove(pas(Pol1,Voice1,N1-V1-Lem1,Control,Gerund),Compl,RestCom),
     removeallpascompls(RestCom,Other,Rest),
     !.
removeallpascompls(Compl,[],Compl):-!.       

mapsemrols(Lemmed,[Pol,Voice,N-V-Lem-LForm,[subj-[SLem,Feat,NP],F2],Compls],DepSubj,[PAS,PASs,PAS1],[DepSubj1|DepsAll]):-
    F2\=[],F2=Pref-_-_,integer(Pref),
    checkremovepasall(Compls,PASs,RestComp),
    selectbestsubcat(Lemmed,N-V-Lem,RestComp,SLem,LForm,Roles,DepsComp),
    Roles=[Role|RestC],
    PAS=pas(Pol,Voice,N-V-Lem,subj-[SLem/Role/Feat/NP],RestC),
    assignrolesubj(N,DepSubj,Role,DepSubj1),
    createallF2pas(Lemmed,F2,SLem/Role/Feat,PAS1,Deps),
    buildbinderbindee(Lemmed,Ind-Head-SLem-Feat,F2,DepsR),
    append(DepsComp,DepsR,Deps1),
    append(Deps1,Deps,DepsAll),
    !.
mapsemrols(Lemmed,[Pol,Voice,N-V-Lem-LForm,subj-[SLem,Feat,NP],[Compls,F2]],DepSubj,[PAS,PASs,PAS1],[DepSubj1|DepsAll]):-
    F2\=[],F2=Pref-_-_,integer(Pref),
    checkremovepasall(Compls,PASs,RestComp),
    selectbestsubcat(Lemmed,N-V-Lem,RestComp,SLem,LForm,Roles,DepsComp),
    Roles=[Role|RestC],
    PAS=pas(Pol,Voice,N-V-Lem,subj-[SLem/Role/Feat/NP],RestC),
    assignrolesubj(N,DepSubj,Role,DepSubj1),
    createallF2pas1(Lemmed,F2,SLem/Role/Feat,PAS1,Deps),
    buildbinderbindee(Lemmed,Ind-Head-SLem-Feat,F2,DepsR),
    append(DepsComp,DepsR,Deps1),
    append(Deps1,Deps,DepsAll),
    !.
mapsemrols(Lemmed,[Pol,Voice,N-V-Lem-LForm,subj-[SLem,Feat,NP],Compls],DepSubj,[PAS,PASs],[DepSubj1|Deps]):-
    checkremovepasall(Compls,PASs,RestComp),
    selectbestsubcat(Lemmed,N-V-Lem,RestComp,SLem,LForm,Roles,Deps),
    Roles=[Role|RestC],
    PAS=pas(Pol,Voice,N-V-Lem,subj-[SLem/Role/Feat/NP],RestC),
    assignrolesubj(N,DepSubj,Role,DepSubj1),
    !.

mapsemrols(Lemmed,[Pol,Voice,N-V-Lem-LForm,[subj-[SLem,Feat],F2],Compls],DepSubj,[PAS,PASs,PAS1],[DepSubj1|DepsAll]):-
    F2\=[],F2=Pref-_-_,integer(Pref),
    checkremovepasall(Compls,PASs,RestComp),
    selectbestsubcat(Lemmed,N-V-Lem,RestComp,SLem,LForm,Roles,Deps),
    Roles=[Role|RestC],
    PAS=pas(Pol,Voice,N-V-Lem,subj-[SLem/Role/Feat],RestC),
    assignrolesubj(N,DepSubj,Role,DepSubj1),
    createallF2pas0(Lemmed,F2,SLem/Role/Feat,PAS1,Deps),
    buildbinderbindee(Lemmed,Ind-Head-SLem-Feat,F2,DepsR),
    append(DepsComp,DepsR,Deps1),
    append(Deps1,Deps,DepsAll),
    !.
mapsemrols(Lemmed,[Pol,Voice,N-V-Lem-LForm,subj-[SLem,Feat],[Compls,F2]],DepSubj,[PAS,PASs,PAS1],[DepSubj1|DepsAll]):-
    F2\=[],F2=Pref-_-_,integer(Pref),
    checkremovepasall(Compls,PASs,RestComp),
    selectbestsubcat(Lemmed,N-V-Lem,RestComp,SLem,LForm,Roles,DepsComp),
    Roles=[Role|RestC],
    PAS=pas(Pol,Voice,N-V-Lem,subj-[SLem/Role/Feat],RestC),
    assignrolesubj(N,DepSubj,Role,DepSubj1),
    createallF2pas2(Lemmed,F2,SLem/Role/Feat,PAS1,Deps),
    buildbinderbindee(Lemmed,Ind-Head-SLem-Feat,F2,DepsR),
    append(DepsComp,DepsR,Deps1),
    append(Deps1,Deps,DepsAll),
    !.
mapsemrols(Lemmed,[Pol,Voice,N-V-Lem-LForm,subj-[SLem,Feat],[Obj,Compls,F2|Adjs]],DepSubj,[PAS-Adjs,PASs,PAS1-Rest],[DepSubj1|DepsAll]):-
    F2\=[],F2=Pref-_-_,integer(Pref),
    checkremovepasall(Compls,PASs,RestComp),
    selectbestsubcat(Lemmed,N-V-Lem,[Obj,RestComp],SLem,LForm,Roles,DepsComp),
    Roles=[Role|RestC],
    PAS=pas(Pol,Voice,N-V-Lem,subj-[SLem/Role/Feat],RestC),
    assignrolesubj(N,DepSubj,Role,DepSubj1),
    createallF2pas2(Lemmed,F2,SLem/Role/Feat,PAS1,Deps),
    buildbinderbindee(Lemmed,Ind-Head-SLem-Feat,F2,DepsR),
    append(DepsComp,DepsR,Deps1),
    append(Deps1,Deps,DepsAll),
    !.
mapsemrols(Lemmed,[Pol,Voice,N-V-Lem-LForm,subj-[SLem,Feat],Compls],DepSubj,[PAS,PASs],[DepSubj1|RestDepsComps]):-
    checkremovepasall(Compls,PASs,RestCom),
    selectbestsubcat(Lemmed,N-V-Lem,RestCom,Head,LForm,Roles,DepsComp),
    Roles=[Role|Rest],
    PAS=pas(Pol,Voice,N-V-Lem,subj-[SLem/Role/Feat],Rest),
    checkassignrolesubj(N,SLem,LForm,DepsComp,DepSubj,Role,DepSubj1,RestDepsComps),
    !.
mapsemrols(Lemmed,[Pol,Voice,N-V-Lem-LForm,subj-[SLem,Feat],Compls],DepSubj,PAS,[DepSubj1|RestDepsComps]):-
    selectbestsubcat(Lemmed,N-V-Lem,Compls,Head,LForm,Roles,DepsComp),
    Roles=[Role|Rest],
    PAS=pas(Pol,Voice,N-V-Lem,subj-[SLem/Role/Feat],Rest),
    checkassignrolesubj(N,SLem,LForm,DepsComp,DepSubj,Role,DepSubj1,RestDepsComps),
    !.

checkassignrolesubj(N,little_pro,LForm,DepsComp,DepSubj,Role,DepSubj1,RestDepsComps):-
    member(K-L-Subs,LForm),
    (K=unac;K=unerg),
    DepSubj=[i(_,_,_,_,_,Feat1,_,subj/_)],
    (Func=obj;Func=xcomp),
    remove(i(N1,W,Cat,Lem,sn,Feat,N2,Func/Rol),DepsComp,RestDepsComps),
    member(mfeats=Fe,Feat),
    matchfeatvesdis(Fe,Feat1),
    DepSubj1=[i(N1,W,Cat,Lem,sn,Feat,N2,subj/Role)],
    !.
checkassignrolesubj(N,SLem,LForm,DepsComp,DepSubj,Role,DepSubj,DepsComp):-
    !.

takeverbssubs(Lem,LForm):- 
    findall(K-L-M, cat_gramm(Lem,K,L,M), LForms),
    appiattisci(LForms, LFormm),
    sort(LFormm,LForm),
    !.

selectrecursiveobl(K-Subs,[],[]):-!.
selectrecursiveobl(K-Subs,RestC,[Roles2|Roles]):-     
     (RestC\=[],
      remove(Func1-Feats1,RestC,Res),
      (
       (Func1=obl;Func1=iobj),
       checkiobjectssubroles(K,Subs,Role1),
       Feats1=[Lem1,Feat1,Cost1],
       Roles2 = obl-[Lem1/Role1/Feat1/Cost1]
       ;
       (Func1=vcomp;Func1=sv2),Role1=prop,
       Feats1=[Lem1,Feat1,Cost1],
       (member(per-_-_,Cost1),Role1=purpose;Role1=prop),
       Roles2 = vcomp-[Lem1/Role1/Feat1/Cost1]
       ;
       (Func1=obl;Func1=iobj),
       Feats1=[Lem1,Feat1,Cost1],
       getobladjrole(Cost1,Role1),
       Roles2 = obl-[Lem1/Role1/Feat1/Cost1]
       ;
       (Func1=obl;Func1=iobj),
       Feats1=[Lem1,Feat1,Word],atomic(Word),
       is_list(Lem1),member(Lemm,Lem1),
       Roles2 = obl-[Word/locat/Feat1/Lem1]
       ),
       selectrecursiveobl(K-Subs,Res,Roles),!
       ;
       RestC=[],Roles2=[],Roles=[]
       ;
       RestC\=[],Roles2=RestC,Roles=[]
       ),
      !.

selectbestsubcat(Lemmed,N-V-Lem,[],Head,LForms,[Role],[]):-
    (var(LForms),
     findall(K-L-M, cat_gramm(Lem,K,L,M), LFormss), LFormss\=[]
     ;
     LForms=[],
     findall(K-L-M, cat_gramm(Lem,K,L,M), LFormss), LFormss\=[]
     ;
     nonvar(LForms),LForms\=[],LFormss=LForms
     ;
     getcatsemasp(V,CatV,Scat,LForm,Lem), LForm\=[],LFormss=[CatV-Scat-LForm]),
    appiattisci(LFormss, LFormm),
    sort(LFormm,LForm),
    member(K-L-Subs,LForm),
    checksubjectssubroles(Subs,Role),
    !.
selectbestsubcat(Lemmed,N-V-Lem,Compls,Head,LForms,[Role|Roles],DepsAll):-
    (is_list(Compls),appiattisci(Compls, Compl)
      ; Compl=[Compls]),
    (var(LForms),
     findall(K-L-M, cat_gramm(Lem,K,L,M), LFormss), LFormss\=[]
     ;
     LForms=[],
     findall(K-L-M, cat_gramm(Lem,K,L,M), LFormss), LFormss\=[]
     ;
     nonvar(LForms),LForms\=[],LFormss=LForms     
     ;
     getcatsemasp(V,CatV,Scat,LForm,Lem), LForm\=[],LFormss=[CatV-Scat-LForm]),
    appiattisci(LFormss, LFormm),
    sort(LFormm,LForrm),
    remove(Func-Feats,Compl,RestC),
    member(K-L-Subs,LForrm),
    (Func=obj,
      checkobjectssubroles(K,Subs,Role0),
      Feats=[Lem0,Feat0,Cost],
      (K=cop,FunO=xcomp;FunO=obj),
      Roles1 = FunO-[Lem0/Role0/Feat0/Cost]
      ;
      (Func=xcomp;Func=xadj),
      checkxcompsubroles(Subs,Role0),
      Feats=[Lem0,Feat0,Cost],
      Roles1 = Func-[Lem0/Role0/Feat0/Cost]
      ;
      (Func=obl;Func=iobj),
      checkiobjectssubroles(K,Subs,Role0),
      Feats=[Lem0,Feat0,Cost],
      Roles1 = Func-[Lem0/Role0/Feat0/Cost]
      ;
      (Func=vcomp;Func=sv2),Role0=prop,
      Feats=[Lem0,Feat0,Cost],
      Roles1 = vcomp-[Lem0/Role0/Feat0/Cost]
      ),
     checksubjectssubroles(Subs,Role),
     selectrecursiveobl(K-Subs,RestC,Roles2),
      Roles=[Roles1,[adjs-[Roles2]]],
      createdepcompls(N,Lemmed,[Roles1,Roles2],DepsAll),
     !.
selectbestsubcat(Lemmed,N-V-Lem,Compls,Head,LForms,[Role|Roles],DepsAll):-
    (is_list(Compls),appiattisci(Compls, Compl)
      ; Compl=[Compls]),
    (var(LForms),
     findall(K-L-M, cat_gramm(Lem,K,L,M), LFormss), LFormss\=[]
     ;
     LForms=[],
     findall(K-L-M, cat_gramm(Lem,K,L,M), LFormss), LFormss\=[]
     ;
     nonvar(LForms),LForms\=[],LFormss=LForms
     ;
     getcatsemasp(V,CatV,Scat,LForm,Lem), LForm\=[],LFormss=[CatV-Scat-LForm]),
    appiattisci(LFormss, LFormm),
    sort(LFormm,LForrm),
    member(K-L-Subs,LForrm),
    checksubjectssubroles(Subs,Role),
     selectrecursiveobl(K-Subs,Compl,Roles2),
      Roles=[Role,[adjs-Roles2]],
      createdepcompls(N,Lemmed,Roles2,DepsAll),
    !.

selectbestsubcat(Lemmed,N-V-Lem,Compls,Head,LForms,[Role|Compls],[]):-
    (var(LForms),
     findall(K-L-M, cat_gramm(Lem,K,L,M), LFormss), LFormss\=[]
     ;
     LForms=[],
     findall(K-L-M, cat_gramm(Lem,K,L,M), LFormss), LFormss\=[]
     ;
     nonvar(LForms),LForms\=[],LFormss=LForms
     ;
     getcatsemasp(V,CatV,Scat,LForm,Lem), LForm\=[],LFormss=[CatV-Scat-LForm]),
    appiattisci(LFormss, LFormm),
    sort(LFormm,LForm),
    member(K-L-Subs,LForm),
    checksubjectssubroles(Subs,Role),
    !.

getpreprole(Cost1,Prep):-
         member(Prep-p-_,Cost1);
         member(Prepart-part-_,Cost1),prepart(Prep,Prepart,_);
         member(Prepd-pd-_,Cost1),Prep=di;
         member(Prepd-pda-_,Cost1),Prep=da;
         member(Prepd-partd-_,Cost1),Prep=di;
         member(Prepd-partda-_,Cost1),Prep=da,
         !.

inducedrole(Cost1,Role):-
       (member(Prep-p-_,Cost1);
         member(Prepart-part-_,Cost1),prepart(Prep,Prepart,_);
         member(Prepd-pd-_,Cost1),Prep=di;
         member(Prepd-pda-_,Cost1),Prep=da;
         member(Prepd-partd-_,Cost1),Prep=di;
         member(Prepd-partda-_,Cost1),Prep=da),
    findall(N-Ta-LCsp, 
            (tipo_agg(Ta,Prep,LCsp), length(LCsp, N)),Constrs),
    sort(Constrs, Constrs1),
    on(_-Role-ListaCatSP, Constrs1),
    !.
getobladjrole([],theme):-!.
getobladjrole(Cost,Role):-
    reverse(Cost,[Head-np-_|_]),
    getpreprole(Cost,Prep),
    inducedrole(Cost,locativo),
    (Prep=da,Role=loc_orig;Role=locat)
    ;
    reverse(Cost,[Head-nh-_|_]),
    getpreprole(Cost,Prep),
    inducedrole(Cost,beneficiario),
    (Prep=da,Role=agent;Role=beneficiary)
    ;
    reverse(Cost,[Head-nt-_|_]),
    inducedrole(Cost,temporale),Role=time,
   !.
getobladjrole(Cost1,Role):-
       (member(Prep-p-_,Cost1);
         member(Prepart-part-_,Cost1),prepart(Prep,Prepart,_);
         member(Prepd-pd-_,Cost1),Prep=di;
         member(Prepd-pda-_,Cost1),Prep=da;
         member(Prepd-partd-_,Cost1),Prep=di;
         member(Prepd-partda-_,Cost1),Prep=da),
    findall(N-Ta-LCsp, 
            (tipo_agg(Ta,Prep,LCsp), length(LCsp, N)),Constrs),
    sort(Constrs, Constrs1),
    on(_-Role-ListaCatSP, Constrs1),
    !.
    
createF2pas(Lemmed,N-V-Lem,[subj/Head-Id],Pol,Voice,[],Struct,PAS1,Deps):-
     member(i(N1,Head,Cat,SLem-Feat),Lemmed),
     (nouncats(Cat);proncat(Cat)),
     selectbestsubcat(Lemmed,N-V-Lem,[],Head,LForm,Roles,Deps),
     Roles=[Role],
     PAS1=pas(Pol,Voice,N-V-Lem,subj-[SLem-Id/Role/Feat],[]),
     !.
createF2pas(Lemmed,N-V-Lem,[subj/Head-Id],Pol,Voice,Compls,Struct,PAS1,[Deps,DepsC]):-
     member(i(N1,Head,Cat,SLem-Feat),Lemmed),
     (nouncats(Cat);proncat(Cat)),
     reverse(Compls,[Deps|RevComp]),
     reverse(RevComp,Compp),
     selectbestsubcat(Lemmed,N-V-Lem,Compp,Head,LForm,Roles,DepsC),
     (Roles=[Role|Rest],
      PAS1=pas(Pol,Voice,N-V-Lem,subj-[SLem-Id/subj/Role/Feat],Rest)
      ;
      Roles=[Role],
      PAS1=pas(Pol,Voice,N-V-Lem,subj-[SLem-Id/Role/Feat],[])),
     !.

/* Id e' l'indice del pronome relativo e Ind quello della testa*/
createF2pas11(Lemmed,N-V-Lem,Id-Head-Ind,Pol1,Voice1,Func-[SLem1/Role1/Feat1],Compls,Struct,PAS1,[Deps,DepsC]) :-    
     reverse(Compls,[Deps|RevComp]),
     reverse(RevComp,Compp),
     appiattisci(Compp,Obj1),
     (remove(subj-Subj,Obj1,Rest),
        (Subj=[SLem,Feat,NP],
         member(i(N1,Head,Cat,SLem1-Feat1),Lemmed),
         (nouncats(Cat);proncat(Cat))
         ;
         (Subj=[si_impers,Fea],SLem=si_impers,Feat=[Fea];
          Subj=[little_pro,Fea],SLem=little_pro,Feat=[Fea])),
         selectbestsubcat(Lemmed,N-V-Lem,Rest,Head,LForm,Roles,DepsC)
      ;
      Head=SLem1,
      selectbestsubcat(Lemmed,N-V-Lem,Obj1,Head,LForm,Roles,DepsC)),
     (Roles=[Role|Res],
      PAS1=pas(Pol1,Voice1,N-V-Lem,subj-[SLem/Role/Feat],[Func-[SLem1-Id/Role1/Feat1]|Res])
      ;
      Roles=[Role],
      PAS1=pas(Pol1,Voice1,N-V-Lem,subj-[SLem-Id/Role/Feat],[Func-[SLem1-Id/Role1/Feat1]])),
     !.

createF2pas1(Lemmed,N-V-Lem,Id-Func-Head-Subj,Pol1,Voice1,subj-[SLem/Role/Feat],Compls,Struct,PAS1,[Deps,DepsC]) :-    
     member(i(N,Head,Cat,SLem1-Feat1),Lemmed),
     (nouncats(Cat);proncat(Cat)),
     reverse(Compls,[Deps|RevComp]),
     reverse(RevComp,Compp),
     selectbestsubcat(Lemmed,N-V-Lem,Compls,Head,LForm,Roles,DepsC),
     (Roles=[Role|Rest],
      PAS1=pas(Pol1,Voice1,N-V-Lem,subj-[SLem/Role/Feat],[Func-[SLem1-Id/Role1/Feat1]|Rest])
      ;
      Roles=[Role],
      PAS1=pas(Pol1,Voice1,N-V-Lem,subj-[SLem-Id/Role/Feat],[])),
     !.
    
extractpol(Ibar,Pol):-
    remove(ibar-Ibar,ToLog,Rest),
    (member(Neg-neg-_,Ibar),Pol=neg
      ;
      Pol=pos),
      !.
extractvoice(Ibar,Voice):-
    funcs(voice,_,_,Voice-Ibar),
    !.
extractvoice(Ibar,active):-!.

getlemformsall(Lem,LForms):-
     findall(K-L-M, cat_gramm(Lem,K,L,M), LForms), LForms\=[]
     ;
     getcatsemasp(V,CatV,Scat,LForm,Lem), LForm\=[],LForms=[CatV-Scat-LForm],
     !.
     
extractibar(Lemmed,ToLog,Ibar,N-Verb-Lem-LForm,Rest):-
    (remove(ibar-Ibar,ToLog,Rest);
    remove(ir_infl-Ibar,ToLog,Rest)),
    reverse(Ibar,Revs),
    (Revs=[Verb-Cat-_|Rev],
     check_all_verbs(Cat)
     ;
     member(Verb-Cat-_,Revs),
     check_all_verbs(Cat)),     
    (member(i(N,Verb,Cat,Lem-Feat),Lemmed);
       member(i(N,Verb,Ca,Lem-Feat),Lemmed)),
    getlemformsall(Lem,LForm),
    !.
extractsubj(Lemmed,N-V-Verb-LForm,Ibar,ToLog,Subjs,Rest):-
    remove(subj-NP,ToLog,Rest),
    newprendi_testa(subj,NP,Noun),
    (member(i(N1,Noun,Cat,Lem-Feat),Lemmed);
    member(i(N1,Noun,Cat,[]),Lemmed),Lem=Noun),
    Subj=subj-[Lem,Feat,NP],
    tryextractF2(Lemmed,Noun,NP,F2),
    (F2=[],
     Subjs=Subj
     ;
     F2\=[],Subjs=[Subj,F2]),
    !.
extractsubj(Lemmed,N-V-Verb-LForm,Ibar,ToLog,Subj,ToLog):-
    \+ member(subj-NP,ToLog),
    member(Clit-clit-_,Ibar), (Clit='Si';Clit=si),
    \+ checkriflverb(Verb),
     Subj=subj-[si_impers],
    !.
extractsubj(Lemmed,N-V-Verb-LForm,Ibar,ToLog,Subj,Rest):-
    \+ member(subj-NP,ToLog),
    (remove(appos-NP,ToLog,Rest),nth(ToLog,Num,appos-NP)
       ;
     remove(sn-NP,ToLog,Rest),nth(ToLog,Num,sn-NP)),
    findall(Sn,member(Sn-Sub,ToLog),Costs),
    (
     (member(fc,Costs),Sn=fc;member(fs,Costs),Sn=fs),
     nth(ToLog,Num1,Sn-Cos),Num<Num1
     ;
     \+member(fc,Costs),\+member(fs,Costs)),
    newprendi_testa(subj,NP,Noun),
    member(i(N1,Noun,Cat,Lem-Feat),Lemmed),
    Subj=subj-[Lem,Feat,NP],
    !.   
extractsubj(Lemmed,N-V-Verb-LForm,Ibar,ToLog,Subj,ToLog):-
    \+ member(subj-NP,ToLog),
    member(Clit-clit-_,Ibar), (Clit='Ci';Clit=ci),
    coplbh(V),
    (remove(xcomp-NP,ToLog,Rest);remove(obj-NP,ToLog,Rest)),
    newprendi_testa(subj,NP,Noun),
    (member(i(N1,Noun,Cat,Lem-Feat),Lemmed);
    member(i(N1,Noun,Cat,[]),Lemmed),Lem=Noun),
    matchsubjectverb(Lemmed,V,Feat),
    Subj=subj-[Lem,Feat,NP],
    tryextractF2(Lemmed,Noun,NP,F2),
    (F2=[],
     Subjs=Subj
     ;
     F2\=[],Subjs=[Subj,F2]),
    !.
extractsubj(Lemmed,N-V-Verb-LForm,Ibar,ToLog,Subj,ToLog):-
    \+ member(subj-NP,ToLog),
     Subj=subj-[little_pro],
    !.
matchsubjectverb(Lemmed,V,Feat):-
    member(i(N1,V,Cat,Lem-Fea),Lemmed),
    member(mfeats=MFe,Fea),
    matchfeatvesdis(MFe,Feat),
    !.

make_listss([], []):-!.
make_listss([F-Fir|FunctsOut], Lists):-
   nonvar(Fir),
   (Fir=[subj-pro|Res];F-Fir=subj-pro, Res=[]),
   make_listss(FunctsOut, List),
   makelist1(Res,Lis),
   append(Lis,List,Lists),
   !.
make_listss([F-Fir|FunctsOut], Lists):-
   nonvar(Fir),
   (F-Fir=fac-[fac-[nil]|Res]
      ;F-Fir=fac-[fac-nil|Res]),
   make_listss(FunctsOut, List),
   makelist2(Res,Lis),
   append(Lis,List,Lists),
   !.
make_listss([dirsp-'"'|FunctsOut], ['"'|Lists]):-
   make_listss(FunctsOut, List),
   makelist2(Res,Lis),
   append(Lis,List,Lists),
   !.
make_listss([f2-Fir|FunctsOut], [W|Lists]):-
   nonvar(Fir),
   Fir=[W-_-_|Res],
   make_listss(FunctsOut, List),
   makelist2(Res,Lis),
   append(Lis,List,Lists),
   !.
make_listss([f2-Fir|FunctsOut], Listss):-
   nonvar(Fir),
   Fir=[Fu-Sec|Res],
   is_list(Sec),
   append(Sec,Res,Lists),
   makelist2(Lists,Lis),
   make_listss(FunctsOut, List),
   append(Lis,List,Listss),
   !.
make_listss([W-_-_|Res], [W|Lis]):-
   makelist2(Res,Lis),
   !.
make_listss([F-Fir|FunctsOut], List):-
   make_listss(FunctsOut, List),
   !.
makelist2([],[]):-!.
makelist2([W-_-_|Res],[W|Lis]):-
   nonvar(W),
   makelist2(Res,Lis),
   !.
makelist2([[F-Sec]],Lis):-
   F\=f2,F\=fs,F\=fp,
   make_list2(Sec,Lis),
   !.
makelist2([F-Sec|Res],Lis):-
   nonvar(F),
   F\=f2,F\=fs,F\=fp,
   is_list(Sec),
   append(Sec,Res,Lists),
   make_list2(Lists,Lis),
   !.
makelist2([f2-Sec|Res],[]):-!.
makelist2([fs-Sec|Res],[]):-!.
makelist2([fp-Sec|Res],[]):-!.
makelist2([F-Sec|Res],Lis):-
   nonvar(F),
   make_list2(Res,Lis),
   !.
make_list2([], []):-!.
make_list2([F-Fir|FunctsOut], Lists):-
   nonvar(Fir),
   (Fir=[subj-pro|Res];F-Fir=subj-pro, Res=[]
      ;F-Fir=fac-[fac-[nil]|Res]
      ;F-Fir=fac-[fac-nil|Res]),
   make_list2(FunctsOut, List),
   makelist2(Res,Lis),
   append(Lis,List,Lists),
   !.
make_list2([dirsp-'"'|FunctsOut], ['"'|Lists]):-
   make_list2(FunctsOut, List),
   makelist2(Res,Lis),
   append(Lis,List,Lists),
   !.
make_list2([F-Fir|FunctsOut], [W|Lists]):-
   F\=f2,F\=fs,F\=fp,
   nonvar(Fir),
   Fir=[W-_-_|Res],
   make_list2(FunctsOut, List),
   makelist2(Res,Lis),
   append(Lis,List,Lists),
   !.
make_list2([F-Fir|FunctsOut], Listss):-
   F\=f2,F\=fs,F\=fp,
   nonvar(Fir),
   Fir=[Fu-Sec|Res],
   Fu\=f2,F\=fs,F\=fp,
   is_list(Sec),
   append(Sec,Res,Lists),
   makelist2(Lists,Lis),
   make_list2(FunctsOut, List),
   append(Lis,List,Listss),
   !.
make_list2([W-_-_|Res], [W|Lis]):-
   makelist2(Res,Lis),
   !.
make_list2([f2-Fir|FunctsOut], []):-!.
make_list2([F-Fir|FunctsOut], List):-
   make_list2(FunctsOut, List),
   !.

make_list3([], [], []):-!.
make_list3([F-Fir|FunctsOut], Lists,Strucs):-
   nonvar(Fir),
   (Fir=[subj-pro|Res];F-Fir=subj-pro, Res=[]
      ;F-Fir=fac-[fac-[nil]|Res]
      ;F-Fir=fac-[fac-nil|Res]),
   make_list3(FunctsOut, List,Struc),
   makelist3(Res,Lis,Stru),
   append(Lis,List,Lists),
   append(Struc,Stru,Strucs),
   !.
make_list3([dirsp-'"'|FunctsOut], ['"'|Lists],Strucs):-
   make_list3(FunctsOut, List, Struc),
   makelist3(Res,Lis,Stru),
   append(Lis,List,Lists),
   append(Struc,Stru,Strucs),
   !.
make_list3([F-Fir|FunctsOut], [W|Lists],Strucs):-
   F\=f2,F\=fs,F\=fp,F\=vcomp,F\=sv2,F\=sv5,
   nonvar(Fir),
   Fir=[W-_-_|Res],
   make_list3(FunctsOut, List,Struc),
   makelist3(Res,Lis,Stru),
   append(Lis,List,Lists),
   append(Struc,Stru,Strucs),
   !.
make_list3([F-Fir|FunctsOut], Listss,Strucs):-
   F\=f2,F\=fs,F\=fp,F\=vcomp,F\=sv2,F\=sv5,
   nonvar(Fir),
   Fir=[Fu-Sec|Res],
   Fu\=f2,F\=fs,F\=fp,
   is_list(Sec),
   append(Sec,Res,Lists),
   makelist3(Lists,Lis,Struc),
   make_list3(FunctsOut, List,Stru),
   append(Lis,List,Listss),
   append(Struc,Stru,Strucs),
   !.
make_list3([W-_-_|Res], [W|Lis],Struc):-
   makelist3(Res,Lis,Struc),
   !.
make_list3([vcomp-Fir|FunctsOut], [],[vcomp-Fir|FunctsOut]):-!.
make_list3([sv2-Fir|FunctsOut], [],[vcomp-Fir|FunctsOut]):-!.
make_list3([sv5-Fir|FunctsOut], [],[sv5-Fir|FunctsOut]):-!.
%make_list3([f2-Fir|FunctsOut], [],[]):-!.
make_list3([f2-Fir|FunctsOut], [],[f2-Fir|FunctsOut]):-!.
make_list3([F-Fir|FunctsOut], List,Struc):-
   make_list3(FunctsOut, List,Struc),
   !.

makelist3([],[],[]):-!.
makelist3([W-_-_|Res],[W|Lis],Struc):-
   nonvar(W),
   makelist3(Res,Lis,Struc),
   !.
makelist3([[F-Sec]],Lis,Struc):-
   F\=f2,F\=fs,F\=fp,F\=vcomp,F\=sv2,F\=sv5,
   make_list3(Sec,Lis,Struc),
   !.
makelist3([F-Sec|Res],Lis,Struc):-
   nonvar(F),
   F\=f2,F\=fs,F\=fp,F\=vcomp,F\=sv2,F\=sv5,
   is_list(Sec),
   append(Sec,Res,Lists),
   make_list3(Lists,Lis,Struc),
   !.
makelist3([vcomp-Sec|Res],[],[vcomp-Sec|Res]):-!.
makelist3([sv2-Sec|Res],[],[vcomp-Sec|Res]):-!.
makelist3([sv5-Sec|Res],[],[sv5-Sec|Res]):-!.
%makelist3([f2-Sec|Res],[],[]):-!.
makelist3([f2-Sec|Res],[],[f2-Sec|Res]):-!.
makelist3([fs-Sec|Res],[],[fs-Sec|Res]):-!.
makelist3([fp-Sec|Res],[],[fp-Sec|Res]):-!.
makelist3([F-Sec|Res],Lis,Struc):-
   nonvar(F),
   make_list3(Res,Lis,Struc),
   !.


make_list1([], [], []):-!.
make_list1([F-Fir|FunctsOut], Lists,Strucs):-
   nonvar(Fir),
   (Fir=[subj-pro|Res];F-Fir=subj-pro, Res=[]
      ;F-Fir=fac-[fac-[nil]|Res]
      ;F-Fir=fac-[fac-nil|Res]),
   make_list1(FunctsOut, List,Struc),
   makelist1(Res,Lis,Stru),
   append(Lis,List,Lists),
   append(Struc,Stru,Strucs),
   !.
make_list1([dirsp-'"'|FunctsOut], ['"'|Lists],Strucs):-
   make_list1(FunctsOut, List, Struc),
   makelist1(Res,Lis,Stru),
   append(Lis,List,Lists),
   append(Struc,Stru,Strucs),
   !.
make_list1([F-Fir|FunctsOut], [W|Lists],Strucs):-
   F\=f2,F\=fs,F\=fp,F\=vcomp,
   nonvar(Fir),
   Fir=[W-_-_|Res],
   make_list1(FunctsOut, List,Struc),
   makelist1(Res,Lis,Stru),
   append(Lis,List,Lists),
   append(Struc,Stru,Strucs),
   !.
make_list1([F-Fir|FunctsOut], Listss,Strucs):-
   F\=f2,F\=fs,F\=fp,F\=vcomp,
   nonvar(Fir),
   Fir=[Fu-Sec|Res],
   Fu\=f2,F\=fs,F\=fp,
   is_list(Sec),
   append(Sec,Res,Lists),
   makelist1(Lists,Lis,Struc),
   make_list1(FunctsOut, List,Stru),
   append(Lis,List,Listss),
   append(Struc,Stru,Strucs),
   !.
make_list1([W-_-_|Res], [W|Lis],Struc):-
   makelist1(Res,Lis,Struc),
   !.
make_list1([f2-Fir|FunctsOut], [],[f2-Fir|FunctsOut]):-!.
make_list1([vcomp-Fir|FunctsOut], [],[vcomp-Fir|FunctsOut]):-!.
%make_list1([f2-Fir|FunctsOut], [],[]):-!.
make_list1([F-Fir|FunctsOut], List,Struc):-
   make_list1(FunctsOut, List,Struc),
   !.

makelist1([],[],[]):-!.
makelist1([W-_-_|Res],[W|Lis],Struc):-
   nonvar(W),
   makelist1(Res,Lis,Struc),
   !.
makelist1([[F-Sec]],Lis,Struc):-
   F\=f2,F\=fs,F\=fp,F\=vcomp,
   make_list1(Sec,Lis,Struc),
   !.
makelist1([F-Sec|Res],Lis,Struc):-
   nonvar(F),
   F\=f2,F\=fs,F\=fp,F\=vcomp,
   is_list(Sec),
   append(Sec,Res,Lists),
   make_list1(Lists,Lis,Struc),
   !.
makelist1([f2-Sec|Res],[],[f2-Sec|Res]):-!.
makelist1([vcomp-Sec|Res],[],[vcomp-Sec|Res]):-!.
%makelist1([f2-Sec|Res],[],[]):-!.
makelist1([fs-Sec|Res],[],[fs-Sec|Res]):-!.
makelist1([fp-Sec|Res],[],[fp-Sec|Res]):-!.
makelist1([F-Sec|Res],Lis,Struc):-
   nonvar(F),
   make_list1(Res,Lis,Struc),
   !.


checkproximity(ToLog,N,N1):-
    N\=N1,
    (N<N1,
     (N2 is N1 - 1, N=N2;
      N2 is N1 - 2, N=N2;
      N2 is N1 - 3, N=N2;
      N2 is N1 - 4, N=N2;
      N2 is N1 - 5, N=N2)
      ;
     N1<N,
     (N2 is N1 + 1, N=N2;
      N2 is N1 + 2, N=N2;
      N2 is N1 + 3, N=N2;
      N2 is N1 + 4, N=N2;
      N2 is N1 + 5, N=N2)
      ),
     !.
checkproximity(ToLog,N,N1):-
    N\=N1,
    N<N1,
    (nth(ToLog,N3, i(N2, _, pk, _-_));
      nth(ToLog,N3, i(N2, _, rel, _-_));
      nth(ToLog,N3,i(N2, _, congf, _-_))),
     N3<N1,
     N<N3,!.

checkremovelemw(N1,Lemmed,i(N,W,Cat,Lem-Feat),Lemres):-
     (remove(i(N,W,Cat,Lem-Feat),Lemmed,Lemres);
      remove(i(N,W,Cat,Lem),Lemmed,Lemres),Feat=[];
      remove(i(N,W,Cat,[]),Lemmed,Lemres),Feat=[],Lem=W),
      checkproximity(Lemmed,N,N1),
     !.
     
createdepcompls(N1,Lemmed,[],[]):-!.
createdepcompls(N1,Lemmed,[Subj|Rest],DepsAll):-
       Subj\=[],
       (\+ is_list(Subj),
        Subj=Func-_-_, integer(Func), Rests=Rest
        ;
        is_list(Subj),
        remove(Func-Body-Cost,Subj,Res),
        integer(Func), append(Res,Rest,Rests)),
    createdepcompls(N1,Lemmed,Rests,DepsAll),
    !.
createdepcompls(N1,Lemmed,[Subj|Rest],[i(N,W1,clitac,Lem,sn,Fea1,N1,Func/Role)|DepsAll]):-
       Subj\=[],
         \+ is_list(Subj),
     (Subj=Func-[Lem/Role/Fea/NP],Fea1=Fea;
      Subj=Func-[Lem,Feats,NP],Fea1=Feats,Role=theme),
     (is_list(NP),c_case(Lem,Case),W1=Lem;atomic(NP),c_case(NP,Case),W1=NP),
     (Case=acc;Case=dat),
    checkremovelemw(N1,Lemmed,i(N,W1,Cat,Lem1-Feat),Lemres),
    createdepcompls(N1,Lemmed,Rest,DepsAll),
    !.
createdepcompls(N1,Lemmed,[Subj|Rest],DepsAll):-
       Subj\=[],
         \+ is_list(Subj),
     (Subj=Func-[Lem/Role/Fea/NP];
      Subj=Func-[Lem,Feats,NP],nonvar(NP)),
     (is_list(NP),c_case(Lem,Case);atomic(NP),c_case(NP,Case)),
     Case\=acc,
    createdepcompls(N1,Lemmed,Rest,DepsAll),
    !.
createdepcompls(N1,Lemmed,[Subj,Rest],[i(N,W,Cat,Lem,Cos,Feat,N1,Func/Role)|DepsAll]):-
       Subj\=[],
      is_list(Subj),
     (remove(Func-[Lem,Feats,NP],Subj,Res);
      remove(Func-[Lem/Role/Fea/NP],Subj,Res),nonvar(NP)),
     (is_list(NP),c_case(Lem,Case);atomic(NP),c_case(NP,Case)),
    createdepcompls(N1,Lemmed,Rest,DepsAll),
    !.
createdepcompls(N1,Lemmed,Subj,[]):-
       Subj\=[],
         \+ is_list(Subj),
     (Subj=Func-[Lem/Role/Fea/NP];
      Subj=Func-[Lem,Feats,NP],nonvar(NP)),
     (is_list(NP),c_case(Lem,Case);atomic(NP),c_case(NP,Case)),
     !.
createdepcompls(N1,Lemmed,Subj,[i(N,W,Cat,Lem,Cos,Feat,N1,Func/Role)]):-
       Subj\=[],
    \+ is_list(Subj),
    ( Subj=Func-[Lem/Role/Fea/NP];
      Subj=Func-[Lem,Feats,NP],nonvar(NP)),
    NP=[W-_-_],
    checkremovelemw(N1,Lemmed,i(N,W,Cat,Lem-Feat),Lemres),
    !.
createdepcompls(N1,Lemmed,[Subj,Rest],[i(N,W,Cat,Lem,Cos,Feat,N1,Func/Role)|DepsAll]):-
       Subj\=[],
    (is_list(Subj),
     (remove(Func-[Lem,Feats,NP],Subj,Res);
      remove(Func-[Lem/Role/Fea/NP],Subj,Res))
      ;
         \+ is_list(Subj),
     (Subj=Func-[Lem/Role/Fea/NP],Res=[];
      Subj=Func-[Lem,Feats,NP],Res=[],nonvar(NP))
      ),
     NP=[W-_-_],
    checkremovelemw(N1,Lemmed,i(N,W,Cat,Lem-Feat),Lemres),
    append(Res,Rest,Rests),
    createdepcompls(N1,Lemres,Rests,DepsAll),
    !.
createdepcompls(N1,Lemmed,[Subj|Rest],[i(N,W,Cat,Lem,Cos,Feat,N1,Func/Role)|DepsAll]):-
       Subj\=[],
    (is_list(Subj),
     (remove(Func-[Lem,Feats,NP],Subj,Res);
      remove(Func-[Lem/Role/Fea/NP],Subj,Res))
      ;
         \+ is_list(Subj),
     (Subj=Func-[Lem/Role/Fea/NP],Res=[];
      Subj=Func-[Lem,Feats,NP],Res=[],nonvar(NP))
       ),
    NP=[W-_-_],
    checkremovelemw(N1,Lemmed,i(N,W,Cat,Lem-Feat),Lemres),
    append(Res,Rest,Rests),
    createdepcompls(N1,Lemres,Rests,DepsAll),
    !.
createdepcompls(N1,Lemmed,Subj,[i(N,W,Cat,Lem,Cos,Feat,N1,Func/Role)|RestVerb]):-
       Subj\=[],
    \+ is_list(Subj),
    (Subj=Func-[Lem/Role/Fea/NP];
     Subj=Func-[Lem,Feats,NP],nonvar(NP);
     Subj=Func-[Lem/Role/Fea/NP],nonvar(NP),(member(W,NP);W=Lem);
     Subj=Func-[Lem,Feats,NP],nonvar(NP),(member(W,NP);W=Lem)),
    checkremovelemw(N1,Lemmed,i(N,W,Cat,Lem-Feat),Lemres),
    make_list2(NP,List),
    remove(W,List,List1),
    length(List,L),
    depsrestsubj(L,N,Lemres,List1,RestVerb,Lems),
    !.
createdepcompls(N1,Lemmed,[Subj,Rest],[i(N,W,Cat,Lem,Cos,Feat,N1,Func/Role)|DepsAll]):-
       Subj\=[],
    (is_list(Subj),
     (remove(Func-[Lem,Feats,NP],Subj,Res);
      remove(Func-[Lem/Role/Fea/NP],Subj,Res))
      ;
         \+ is_list(Subj),
     (Subj=Func-[Lem/Role/Fea/NP],Res=[];
      Subj=Func-[Lem,Feats,NP],Res=[],nonvar(NP))
     ),
    checkremovelemw(N1,Lemmed,i(N,W,Cat,Lem-Feat),Lemres),
    make_list2(NP,List),
    remove(W,List,List1),
    length(List,L),
    depsrestsubj(L,N,Lemres,List1,RestVerb,Lems),
    append(Res,Rest,Rests),
    createdepcompls(N1,Lems,Rests,Deps),
    append(RestVerb,Deps,DepsAll),
    !.
createdepcompls(N1,Lemmed,[Subj|Rest],[i(N,W,Cat,Lem,Cos,Feat,N1,Func/Role)|DepsAll]):-
       Subj\=[],
    (is_list(Subj),
     (remove(Func-[Lem,Feats,NP],Subj,Res),NP\=[];
      remove(Func-[Lem/Role/Fea/NP],Subj,Res),NP\=[])
      ;
         \+ is_list(Subj),
     (Subj=Func-[Lem/Role/Fea/NP],Res=[];
      Subj=Func-[Lem,Feats,NP],Res=[],nonvar(NP),NP\=[])
     ),
    checkremovelemw(N1,Lemmed,i(N,W,Cat,Lem-Feat),Lemres),
    make_list2(NP,List),
    remove(W,List,List1),
    length(List,L),
    depsrestsubj(L,N,Lemres,List1,RestVerb,Lems),
    append(Res,Rest,Rests),
    createdepcompls(N1,Lems,Rests,Deps),
    append(RestVerb,Deps,DepsAll),
    !.
createdepcompls(N1,Lemmed,Subj,[i(N,W,Cat,Lem,Cos,Feat,N1,Func/Role)|RestVerb]):-
       Subj\=[],
    \+ is_list(Subj),
    (Subj=Func-[Lem/Role/Fea/NP],NP\=[];
     Subj=Func-[Lem,Feats,NP],nonvar(NP),NP\=[];
     Subj=Func-[Lem/Role/Fea/NP],nonvar(NP),NP\=[],(member(W,NP);W=Lem);
     Subj=Func-[Lem,Feats,NP],nonvar(NP),NP\=[],(member(W,NP);W=Lem)),
     Func=obl,N2 is N1 + 6,
    checkremovelemw(N2,Lemmed,i(N,W,Cat,Lem-Feat),Lemres),
    make_list2(NP,List),
    remove(W,List,List1),
    length(List,L),
    depsrestsubj(L,N,Lemres,List1,RestVerb,Lems),
    !.
/*
createdepcompls(N1,Lemmed,Subj,[i(N,W,Cat,Lem,Cos,Feat,N1,Func/Rol)|DepsAll]):-
       Subj\=[],
      is_list(Subj),
     (remove(Func-[Lem,Feats,NP],Subj,Res),NP\=[];
      remove(Func-[Lem/Role/Fea/NP],Subj,Res),NP\=[]),
     Func=obl,N2 is N1 + 6,
    checkremovelemw(N2,Lemmed,i(N,W,Cat,Lem-Feat),Lemres),
    make_list1(NP,List),
    remove(W,List,List1),
    length(List,L),
    depsrestsubj(L,N,Lemres,List1,RestVerb,Lems),
    createdepcompls(N1,Lems,Res,Deps),
    append(RestVerb,Deps,DepsAll),
    !.
*/
createdepcompls(N1,Lemmed,Subj,[i(N,W,Cat,Lem,Cos,Feat,N1,Func/Role)|DepsAll]):-
       Subj\=[],
      is_list(Subj),
     (remove(Func-[Lem,Feats,NP],Subj,Res),NP\=[];
      remove(Func-[Lem/Role/Fea/NP],Subj,Res),NP\=[];
      Subj=[Sub|Res],
      (remove(Func-[Lem,Feats,NP],Sub,Res);
       remove(Func-[Lem/Role/Fea/NP],Sub,Res))
      ),
    remove(i(N,W,Cat,Lem-Feat),Lemmed,Lemres),
    make_list2(NP,List),
    remove(W,List,List1),
    length(List,L),
    depsrestsubj(L,N,Lemres,List1,RestVerb,Lems),
    createdepcompls(N1,Lems,Res,Deps),
    append(RestVerb,Deps,DepsAll),
    !.
createdepcompls(N1,Lemmed,Rest,[]):-
    !.

depsrestsubj(1,N1,Lems,[],[],Lems):-!.
depsrestsubj(L,N1,Lemmed,[W|Ibar],[i(N,W,Cat,Lem,sn,Feat,N1,-)|RestVerb],Lems):-
    remove(i(N,W,Cat,Lem-Feat),Lemmed,Lemres),
    \+ nouncats(Cat), \+ proncat(Cat),
    checkproximity(Lemmed,N,N1),
    L1 is L - 1,
    depsrestsubj(L1,N1,Lemres,Ibar,RestVerb,Lems),
    !.
depsrestsubj(L,N1,Lemmed,[W|Ibar],[i(N,W,Cat,Lem,sn,Feat,N1,Fun/Rol)|RestVerb],Lems):-
    remove(i(N,W,Cat,Lem-Feat),Lemmed,Lemres),
    checkproximity(Lemmed,N,N1),
    L1 is L - 1,
    depsrestsubj(L1,N1,Lemres,Ibar,RestVerb,Lems),
    !.
depsrestsubj(L,N1,Lemmed,[W|Ibar],[i(N,W,Cat,Lem,sn,Feat,N1,-)|RestVerb],Lems):-
    remove(i(N,W,Cat,Lem),Lemmed,Lemres),
    checkproximity(Lemmed,N,N1),
    L1 is L - 1,
    depsrestsubj(L1,N1,Lemres,Ibar,RestVerb,Lems),
    !.
depsrestsubj(L,N1,Lemmed,[W],[i(N,W,Cat,Lem,sn,Feat,N1,Fun/Rol)],Lems):-
    remove(i(N,W,Cat,Lem-Feat),Lemmed,Lemres),
    checkproximity(Lemmed,N,N1),
    !.
depsrestsubj(L,N1,Lemmed,Ibar,[],Lemmed):-
    !.

checkinternmodifiers(Lemmed,NP,Mods,DepsMods):-
    remove(Func-Cost,NP,Rest),
    (Func=sv3;Func=obl),
    Cost=[Head-Ca-Co|Cos],
    append([Head-Ca-Co],Rest,Mods),
    remove(i(N,Head,Cat,Lem-Feat),Lemmed,Lemres),
    make_list2(Cos,List),
    length(List,L),
    depsrestsubj(L,N,Lemres,List,DepsMods,Lems),
    !.
checkinternmodifiers(Lemmed,NP,NP,[]):-
    !.
    
createdepsubj(Lemmed,DepsVerb,Subj,[i(N,W,Cat,Lem,Cos,Feat,0,subj/Rol)],Subj,Lemres):-
    Subj=subj-[subj/Lem/N],
    remove(i(N,W,Cat,Lem-Feat),Lemmed,Lemres),
    !.
createdepsubj(Lemmed,DepsVerb,Subj,[i(N,W,Cat,Lem,Cos,Feat,0,subj/Rol)],Subj,Lemres):-
    (member(subj-[Lem,Feats,NP],Subj);Subj=subj-[Lem,Feats,NP]),
    NP=[W-_-_],
    remove(i(N,W,Cat,Lem-Feat),Lemmed,Lemres),
    !.
createdepsubj(Lemmed,DepsVerb,Subj,[i(N,W,Cat,Lem,Cos,Feat,0,subj/Rol),DepsMods|RestVerb],Subj,Lems):-
    (member(subj-[Lem,Feats,NP],Subj);Subj=subj-[Lem,Feats,NP]),
    (remove(i(N,W,Cat,Lem-Feat),Lemmed,Lemres);remove(i(N,W,Cat,Feat),Lemmed,Lemres)),
    checkinternmodifiers(Lemmed,NP,Mods,DepsMods),
    make_list2(NP,List),
    remove(W,List,List1),
    length(List,L),
    depsrestsubj(L,N,Lemres,List1,RestVerb,Lems),
    !.
createdepsubj(Lemmed,DepsVerb,Subj,[i(N,little_pro,pro,pro,sn,Feat,N1,subj/Role)],Subj1,Lemmed):-
    (
     (member(subj-[little_pro],Subj);Subj=subj-[little_pro]);
     (member(subj-[little_pro,Fea],Subj);Subj=subj-[little_pro,Fea])),
    (member(i(N,Verb,Cat,Lem,ibar,Feat,N1,-),DepsVerb);
      member(i(N,Verb,Cat,Lem,ibar,Feat,N1,CatV/Scat),DepsVerb)),
    (member(mfeats=Num,Feat)
     ;
     member(num=Num,Feat),
     member(pers=Pers,Feat)
     ),
     Subj1=subj-[little_pro,[mfeats=Num]],
     !.
createdepsubj(Lemmed,DepsVerb,Subj,[i(N,si_impers,si,Cat,sn,Feat,N2,subj/Role)],Subj1,Lemmed):-
    (
     (member(subj-[si_impers],Subj);Subj=subj-[si_impers]);
     (member(subj-[si_impers,Fea],Subj);Subj=subj-[si_impers,Fea])
     ),
    (remove(i(N,si,Cat,Lem-Feat),Lemmed,Lemres);
      member(i(N,Verb,Cat,Lem,ibar,Feat,N2,-),DepsVerb);
      member(i(N,Verb,Cat,Lem,ibar,Feat,N2,CatV/Scat),DepsVerb)),
    (member(mfeats=Num,Feat)
     ;
     member(num=Num,Feat),
     member(pers=Pers,Feat)
     ),
     Subj1=subj-[si_impers,[mfeats=Num]],
     !.
     
checkriflverb(Verb):-
    getroot(Verb,Root,K),
    findall(Cat,v(Root,C,N,Cat),Cats),
    rifls(Rifls),
    on(Class,Cats),
    on(Class,Rifls),
    !.
    
rifls([rifl, intr_pron, inerg_rifl, inerg_rifl_prop_a, rifl_in, rifl_in-[con,per], rifl_in_prop, rifl_in_prop_di, rifl_in_prop_da, rifl_in_prop-[a,di], ditr_rifl_da, rifl_prop, rifl_prop-[a,per], rifl_prop_di, erg_rifl, erg_rifl_prop, erg_rifl_prop_a, erg_rifl_prop_di, erg_rifl_prop-[di,in], erg_rifl_prop-[a,di], rifl_prop-[a,di], erg_rifl_propop, erg_rifl-[a,di,per], erg_rifl_prop-[a], erg_rifl_1-con_2-[di,per]]).

%rifl, rifl_rec, 

createrelsubj(Lemmed,Verb,Ibar,ToLog,Subj,Rest):-
    remove(subj-pro,ToLog,Rest),
    \+ member(si-clit-_,Ibar),
    reverse(Ibar,[V-_-_|_]),
    member(i(N,V,Cat,Verb-Feat),Lemmed),
    (member(mfeats=Num,Feat),
     Subj=subj-[little_pro,mfeats=Num]
     ;
     member(num=Num,Feat),
     member(pers=Pers,Feat),
     Subj=subj-[little_pro,mfeats=Num]
     ),
    !.

createrelsubj(Lemmed,Verb,Ibar,ToLog,Subj,Rest):-
    remove(subj-NP,ToLog,Rest), NP\=pro,
    newprendi_testa(subj,NP,Noun),
    member(i(N,Noun,Cat,Lem-Feat),Lemmed),
    Subj=subj-[Lem,Feat,NP],
    !.

createrelsubj(Lemmed,Verb,Ibar,ToLog,Subj,Rest):-
%    \+ member(subj-NP,ToLog),
    member(Clit-clit-_,Ibar), (Clit='Si';Clit=si),
    reverse(Ibar,[V-_-_|_]),
    member(i(N,V,Cat,Verb-Feat),Lemmed),
    (member(mfeats=Num,Feat),
     Subj=subj-[si_impers,mfeats=Num]
     ;
     member(num=Num,Feat),
     member(pers=Pers,Feat),
     Subj=subj-[si_impers,mfeats=Num]
     ),
    (remove(subj-pro,ToLog,Rest);Rest=ToLog),
    !.
createrelsubj(Lemmed,Verb,Ibar,ToLog,Subj,Rest):-
    \+ member(subj-NP,ToLog),
    (remove(appos-NP,ToLog,Rest);remove(sn-NP,ToLog,Rest)),
    newprendi_testa(subj,NP,Noun),
    member(i(N,Noun,Cat,Lem-Feat),Lemmed),
    Subj=subj-[Lem,Feat,NP],
    !.   
createrelsubj(Lemmed,Verb,Ibar,ToLog,Subj,ToLog):-
    \+ member(subj-NP,ToLog),
    reverse(Ibar,[V-_-_|_]),
    member(i(N,V,Cat,Verb-Feat),Lemmed),
    (member(mfeats=Num,Feat),
     Subj=subj-[little_pro,mfeats=Num]
     ;
     member(num=Num,Feat),
     member(pers=Pers,Feat),
     Subj=subj-[little_pro,mfeats=Num]
     ),
    !.

processf2(Lemmed,Head,F2,Output):-
    member(i(Ind,Head,Cat,Lem-Feat),Lemmed),
    getindexrel(F2,A,Clause),
    member(i(Ind1,A,Ca,Le),Lemmed),Ind<Ind1,
    mcon(id,Ind1,Id),
    build_relativeclause(Lemmed,Ind,Head,F2,Rel,R),
    (Rel\=[],
     Output=Ind1-Rel-F2
     ;
     Output=[]),
    !.

buildbinderbindee(Lemmed,Ind-Head-Lem-Feat,Rel,[i(Ind1,W1,Ca,W1,f2,Fea,Ind,binder),i(N1,rel_pro,Ca,bindee,f2,Fea,ante=Head,Fun/Role)]):-
    Rel=Ind1-[N1-Verb-LemV-[Fun/Head/Ind]-Pol-Voice|_]-_,
    member(i(Ind1,W1,Ca,Fea),Lemmed),
    !.

getindexrel(Body,A,Clause):-
   Body=[A-B-C],Clause=[] 
   ;
   Body=[F2-Vp|VP], (F2=f2;F2=fac),
   Vp=[F2-F|Res], 
   F=[F2-Pron|Clause],Pron=[A-B-C],Clause\=[]
   ;
   Body=[f2-Vp|VP],
   (Sp=sp;Sp=spd;Sp=spda),
   Vp=[Sp-[F|Res]], 
   Res=[A-B-C],Clause=VP,Clause\=[]
   ;
   Body=[f2-Vp|VP],
   (Sp=sp;Sp=spd;Sp=spda),
   Vp=[Sp-[F|Res]],
   member(f2-Re,Res),
   Re=[A-B-C],Clause=VP,Clause\=[]
   ;
   Body=[f2-Vp|VP],
   (Sp=sp;Sp=spd;Sp=spda),
   Vp=[Sp-[F|Res],Fs], 
   Res=[f2-[A-B-C]],Clause=Fs,Clause\=[]
   ;
   Body=[F2-_|VP], (F2=f2;F2=fac),
   appiattisci(VP, Vp),
   Vp=[ibar-Ibar|Resto],Clause=Resto,Clause\=[],
   Resto=[F2-Pron|_], Pron\=[nil],Pron=[A-B-C]
   ;
   Body=[F2-Pron|VP], 
   (F2=f2;F2=fac),Clause=VP,Clause\=[],
   (Pron=[A-B-C]; Pron\=[C], A=Pron; Pron=[nil], A=nil)
   ;
   Body=[F2-F], 
   F2=f2,
   F=[F2-Pron|VP],Clause=VP,Clause\=[], 
   (Pron=[A-B-C]; Pron\=[C], A=Pron)
   ;
   Body=[F2-F], 
   F2=fac,
   F=[F2-Pron|VP],Pron=[A-B-C],Clause=VP,Clause\=[]
   ;
   Body=[F2-_|VP], (F2=f2;F2=fac),
   appiattisci(VP, Vp),
   remove(ibar-Ibar,Vp,Resto),
   Resto=[F2-Pron|_], 
   Pron\=[nil], Pron=[A-B-C],Clause=VP,Clause\=[]
   ;
   Body=[f2-F22|VP],
   (Sp=sp;Sp=spd;Sp=spda),
   F22=[Sp-Prons],
   member(A-rel-C,Prons),Clause=VP,Clause\=[]
   ;
   Body=[Sp-F22|VP],
   (Sp=sp;Sp=spd;Sp=spda),
   (member(A-rel-C,F22);member(A-relob-C,F22))
   ;
   Body=[f2-F22|VP],
   F22=[sn-Prons],
   (member(A-rel-C,Prons);member(A-relob-C,Prons)),
   Clause=VP,Clause\=[]
   ;
   Body=[F2-F22|VP], (F2=f2;F2=fac),
   (F22=[cui-_-_,SN], F2W=SN; F2W=F22),
   Resto=[F2-Pron|_], 
   Pron\=[nil], Pron=[A-B-C],Clause=VP,Clause\=[]
   ;
   Body=[F2-F22|VP], (F2=f2;F2=fac),
   (F22=[cui-_-_,SN], F2W=SN; F2W=F22),
   append(F22,VP,VP1),
   remove(f-F,VP1,VP2),
   VP2=[F2-Pron|_], Pron\=[nil],Pron=[A-B-C],Clause=F,Clause\=[]
   ;
   Body=[f2-F22|VP],
   F22=[f2-[A-R-S,SN]|VP1],Clause=VP,Clause\=[]
   ;
   Body=[F2-_|VP], (F2=f2;F2=fac),
   appiattisci(VP, Vp),
   remove(ibar-Ibar,Vp,Resto),
   Resto=[F2-Pron|_], Pron\=[nil], Pron=[A-B-C],Clause=VP,Clause\=[]
   ;
   Body=[F2-Pk|VP], F2=fac,
   Pk=[A-R-S|_],Clause=VP,Clause\=[],
   !.

tryextractF2(Lemmed,Head,NP,Output):-
    remove(f2-F2,NP,Rest),
    processf2(Lemmed,Head,F2,Output),
    !.
tryextractF2(Lemmed,Head,NP,Output):-
    remove(mod-Mod,NP,Rest1),
    remove(f2-F2,Mod,Rest),
    processf2(Lemmed,Head,F2,Output),
    !.
tryextractF2(Lemmed,Head,NP,[]):-!.

% matchagrfeats(Head,Testa,Feats,Feats1,subj)

recoverclitics(Lemmed,Verb,[],[]):-!.
recoverclitics(Lemmed,N-V-Lem-LF,Ibar,Clits):-
     findall(Clit,member(i(N,Clit,clit,L-Fe),Lemmed),Clits),Clits\=[],
     !.
recoverclitics(Lemmed,Verb,Ibar,Clits):-
    findall(Clit,member(Clit-clit-_,Ibar),Clits),
    Clits\=[],
    !.
recoverclitics(Lemmed,Verb,Ibar,[]):-!.

buildobjclit(Clits,Compls,ObjObl):-
      remove(Clit,Clits,Rest),Clit\=si,
      c_case(Clit,Case),
      (
      (on(acc,Case);Case=acc),
      p_cli(Clit,P,N,G),
      lemc(Lem,Clit,_,_),
      Obj=obj-[Lem,[pers=P,num=N,gen=G,case=Case],Clit],
      createobjobl(Obj,Compls,ObjObl)
      ;
      (
      (on(dat,Case);Case=dat,Func=iobj)
        ;
      (on(obl,Case);Case=obl,Func=obl)
      ),
      p_cli(Clit,P,N,G),
      lemc(Lem,Clit,_,_),
      Obj=Func-[Lem,[pers=P,num=N,gen=G,case=Case],Clit],
      createobjobl(Obj,Compls,ObjObl)
      ),!.
buildobjclit(Clits,[[],[]],[]):-
      !.
buildobjclit(Clits,[[],Obl],Obl):-
      !.
buildobjclit(Clits,[Obj,[]],Obj):-
      !.
buildobjclit(Clits,[Obj,Obl],[Obj,Obl]):-
      !.
buildobjclit([],Compls,Compls):-!.

createobjobl(Obj,[[],[]],[Obj]):-!.
createobjobl(Obj,[[],Obl],[Obj,Obl]):-!.
createobjobl(Obj1,[Obj,Obl],[Obj,Obl,Obj1]):-!.

extractcomplalls(Lemmed,Verb,Ibar,Subj,Rest,Objs,Rest2,Deps):-
    extractcompls(Lemmed,Verb,Ibar,Subj,Rest,Objs,Rest1,DepsC),
    extractopencompladjs(Verb,Lemmed,Subj,Rest1,Open,Rest2,DepsAdj),
    createdepverb(Lemmed,Ibar,Verb1,DepVerb,Lems),
    createdepsubj(Lems,DepVerb,Subj,DepSubj,Subj1,Lems1),
    appiattisci(Objs,Obj),
    append(Obj,Open,Outs),
    append(DepsC,DepsAdj,Depss),
    append(Depss,DepVerb,Deps1),
    append(Deps1,DepSubj,Deps),
    !.
extractcomplalls(Lemmed,Verb,Ibar,Subj,Rest,[],Rest,[]):-
    !.

extractcompls(Lemmed,Verb,Ibar,Subj,ToLog,[ObjClit,Comps],Rests,DepsAll):-
    recoverclitics(Lemmed,Verb,Ibar,Clits),
    (
     extractobj(Lemmed,Verb,ToLog,Obj,Rest2),Obj\=[]
     ;
     extractncomp(Lemmed,Verb,ToLog,Obj,Rest2)
     ),
    (
     extractiobj(Lemmed,Verb,Rest2,Obl,Rest4),Obl\=[]
     ;
     extractobls(Lemmed,Verb,Rest2,Obl,Rest4)
     ),
     buildobjclit(Clits,[Obj,Obl],ObjClit),
     extractvcomp(Lemmed,Verb,[Subj,Obj,Obl],Rest4,Vcomp,Rest5,DepsC),
     extractfac(Lemmed,Verb,Rest5,Fcomp,Rests,Deps),
     checkappend(Vcomp,Fcomp,Comps),
     append(DepsC,Deps,DepsAll),
    !.
extractcompls(Lemmed,Verb,Ibar,Subj,ToLog,[],[],[]):-
    !.

checkappend([],[],[]):-!.
checkappend([],Fcomp,Fcomp):-!.
checkappend(Vcomp,[],Vcomp):-!.
checkappend(Vcomp,Fcomp,Comps):-
    append([Vcomp],[Fcomp],Comps),
    !.

checksubjectssubroles([],nil):-!.
checksubjectssubroles(Subs,Role):-
    appiattisci(Subs, Sub),
    (on(np / subj1 / Role / Fea, Sub)
     ;
     on(sn/sogg/Role/Fea, Sub)
     ),!.
checksubjectssubroles(Subs,theme):-!.

checkobjectssubroles(Cat,[],nil):-!.
checkobjectssubroles(cop,Subs,Role):-
    appiattisci(Subs, Sub),
    (on(np / ncomp / Role / Fea, Sub)
     ;
     on(sn/ogg/Role/Fea, Sub)
     ),!.
checkobjectssubroles(Cat,Subs,Role):-
    appiattisci(Subs, Sub),
    (on(np / obj1 / Role / Fea, Sub)
     ;
     on(sn/ogg/Role/Fea, Sub)
     ),!.
checkxcompsubroles([],nil):-!.
checkxcompsubroles(Subs,Role):-
    appiattisci(Subs, Sub),
    (on(xcomp/Role/Fea, Sub)
     ;
     on(pcomp/Role/Fea,Sub)
     ;
     on(acomp/Role/Fea,Sub)
     ;
     on(ncomp/Role/Fea,Sub)
     ;
     on(Cos/acomp/Role/Fea,Sub)
     ;
     on(Cos/ncomp/Role/Fea,Sub)
     ;
     on(Cos/pcomp/Role/Fea,Sub)
     ;
     on(Cos/acomp/Role/Fea/_,Sub)
     ;
     on(Cos/ncomp/Role/Fea/_,Sub)
     ;
     on(Cos/pcomp/Role/Fea/_,Sub)
     ;
     on(Cos/pcomp/Role/Prep/Fea,Sub)
     ;
     on(Cos/vcomp/Role/Prep/Fea,Sub)
     ),!.

%s_bar/scomp/prop/[subj=subj1/x]

checkiobjectssubroles(Cat,[],nil):-!.
checkiobjectssubroles(cop,Subs,Role):-
    appiattisci(Subs, Sub),
    (on(pp/pcomp/Role/P/Fea-Contr, Sub)
     ;
     on(pp/pcomp/Role/P/Fea, Sub)
     ;
     on(pp/obl/Role/P/Fea, Sub)
     ;
     on(sp/ogg2/Role/P/Fea, Sub)
     ;
     on(sp/obl/Role/P/Fea, Sub)
     ;
     on(sp/obl1/Role/P/Fea, Sub)
     ),!.
checkiobjectssubroles(Cat,Subs,Role):-
    appiattisci(Subs, Sub),
    (on(pp/obj2/Role/P/Fea, Sub)
     ;
     on(pp/obl/Role/P/Fea, Sub)
     ;
     on(sp/ogg2/Role/P/Fea, Sub)
     ;
     on(sp/obl/Role/P/Fea, Sub)
     ;
     on(sp/obl1/Role/P/Fea, Sub)
     ),!.

takeverblem(Ibar,N-Verb-Lem-LForm):-
     reverse(Ibar,Revs),
    (Revs=[Verb-Cat-_|Rev],
     check_all_verbs(Cat)
     ;
     member(Verb-Cat-_,Revs),
     check_all_verbs(Cat)),     
    (member(i(N,Verb,Cat,Lem-Feat),Lemmed);
       member(i(N,Verb,Ca,Lem-Feat),Lemmed)),
    findall(K-L-M, cat_gramm(Lem,K,L,M), LForm),
    !.

/*
processfac(Lemmed,Head,F2,Output):-
    build_relativeclause(Lemmed,Ind,Head,F2,Rel,R),
    (Rel\=[],
     Output=Ind1-Rel-F2
     ;
     Output=[]),
    !.
tryextractfac(Lemmed,Head,NP,Output):-
    remove(fac-F2,NP,Rest),
    processfac(Lemmed,Head,F2,Output),
    !.
tryextractfac(Lemmed,Head,NP,[]):-!.
*/

extractfac(Lemmed,N-Verb-Lem-LForm,[fac-Claus|Rest],Subjs,Rest,Deps):-
    (\+member(fs-Fs,Rest);length(Rest,L),L<4),
    append(Claus,Rest,Clause),
    tryextractfac(Lemmed,N-Verb-Lem,Clause,Subjs,Deps),
    !.
extractfac(Lemmed,N-Verb-Lem-LForm,ToLog,Subjs,Rest,Deps):-
    remove(fac-Clause,ToLog,Rest),
    (member(Fac,Clause),
     (is_list(Fac),Fac\=[A],Claus=Clause;
      remove(fac-Claus,Clause,Re))
      ;
      Claus=Clause),
    tryextractfac(Lemmed,N-Verb-Lem,Claus,Subjs,Deps),
    !.
extractfac(Lemmed,Ibar,ToLog,[],ToLog,[]):-
    !.
addcompl(Lemmed,GovV,N2-V2-Lem2,DepVerb,Clause,[i(N,Comp,Cat,Comp,fcomp,[],N2,-),i(N2,W2,Cat2,Lem2,ibar,Feat2,N1,CatV/Scat)|Rest],Lemres):-
     (member(fc-Fac,Clause);member(fac-Fac,Clause)),
     is_list(Fac),Fac=[A],
     A=Comp-_-_,
     remove(i(N,Comp,Cat,Le),Lemmed,Lemres),
     GovV=N1-V1-Lem1,
     checkproximity(Lemmed,N,N1),
     getcatsemasp(Lem2,CatV,Scat,LArgsV,Le),
     remove(i(N2,W2,Cat2,Lem2,ibar,Feat2,0,CatV/Scat),DepVerb,Rest),
     !.
addcompl(Lemmed,GovV,N2-V2-Lem2,DepVerb,Clause,[i(N,Comp,Cat,Comp,fcomp,[],N2,-),i(N2,W2,Cat2,Lem2,ibar,Feat2,N3,CatV/Scat)|Rest],Lemres):-
     (member(fc-Fac,Clause);member(fac-Fac,Clause)),
     is_list(Fac),Fac=[A],
     A=Comp-_-_,
     remove(i(N,Comp,Cat,Le),Lemmed,Lemres),
     GovV=N1-V1-Lem1,
     N3 is N - 1,
     member(i(N3, Fatto, Nf, Lemf-Featf),Lemmed),
     (Nf=nf;nfs(Fatto);factiven(Fatto)),
     getcatsemasp(Lem2,CatV,Scat,LArgsV,Le),
     remove(i(N2,W2,Cat2,Lem2,ibar,Feat2,0,CatV/Scat),DepVerb,Rest),
     !.
addcompl(Lemmed,GovV,N2-V2-Lem2,DepVerb,Clause,[i(N,Comp,Cat,Comp,fcomp,[],N2,-),i(N2,W2,Cat2,Lem2,ibar,Feat2,N3,CatV/Scat)|Rest],Lemres):-
     (member(fc-Fac,Clause);member(fac-Fac,Clause)),
     is_list(Fac),Fac=[A],
     A=Comp-_-_,
     remove(i(N,Comp,Cat,Le),Lemmed,Lemres),
     GovV=N1-V1-Lem1,
     N3 is N - 1,
     member(i(N3, NewV, Vcat, Lemf-Featf),Lemmed),
     check_all_verbs(Vcat),
     remove(i(N2,W2,Cat2,Lem2,ibar,Feat2,0,CatV/Scat),DepVerb,Rest),
     !.

createdepverbfac(Lemmed,Ibar,Clause,GovV,Verb,DepVerb,Lems1,DepFac):-
    createdepverb(Lemmed,Ibar,Verb,DepVerb,Lems),
    Verb=N-V-Lem-LForms,
    addcompl(Lems,GovV,N-V-Lem,DepVerb,Clause,DepFac,Lems1),
    !.

tryextractfac(Lemmed,GovV,Clause,PAS,[DepFac,DepSubj1,DepsAll,DepsC,DepsAdjs,Depss]):-
    extractibar(Lemmed,Clause,Ibar,Verb,Rest),
    createdepverbfac(Lemmed,Ibar,Clause,GovV,Verb,DepVerb,Lems,DepFac),
    extractsubj(Lems,Verb,Ibar,Rest,Subj,Rest1),
    createdepsubj(Lems,DepVerb,Subj,DepSubj,Subj1,Lems1),
    extractcompls(Lems1,Verb,Ibar,DepSubj,Rest1,Objs,Rest22,DepsAll),
    extractopencompladjs(Verb,Lems1,Subj1,Rest22,Open,Rest2,DepsAdjs),
    appiattisci(Objs,Obj),
    append(Obj,Open,Outs),
    extractpol(Ibar,Pol),
    extractvoice(Ibar,Voice),
    Verb=N-V-Lem-LForms,
    appiattisci(LForms, LFormm),
    sort(LFormm,LForm),
    member(K-L-Subs,LForm),
    checksubjectssubroles(Subs,Role),
    assignrolesubj(N,DepSubj,Role,DepSubj1),
    selectbestsubcat(Lemmed,N-V-Lem,Outs,GovV,LForms,Roles,DepsC),
    continuecheckcreatefac(Lemmed,N-V-Lem,Rest2,Depss,Ress),
    PAS=pas(Pol,Voice,N-V-Lem,subj-Subj1,Outs),
    writepassnew(PAS-Ress),nl,nl,
    !.
continuecheckcreatefac(Lemmed,N-V-Lem,Rest2,Deps,RestCl):-
    remove(fac-Fac,Rest2,Rest),
    Fac=[A],
    (
     (member(ibar-Ibar,Rest);member(ir_infl-Ibar,Rest)),
      extractclause(Ibar,Rest,Clause,RestCl)
      ;
      getcosts(Rest,Costs),
     (member(ibar-Ibar,Costs);member(ir_infl-Ibar,Costs)),
      extractclause(Ibar,Costs,Clause,RestCl)
      ),
      tryextractfac(Lemmed,N-V-Lem,Clause,PAS,Deps),
    writepassnew(PAS-RestCl),nl,nl,
    !.
continuecheckcreatefac(Lemmed,N-V-Lem,Rest2,[],Rest2):-
    !.


% PAS1=pas(Pol1,Voice1,N-V-Lem,subj-[SLem/Role/Feat],[Func-[SLem1-Id/Role1/Feat1]|Res])
% ibar-[guardandolo-v-ibar]
% sv5-[facendo-vgt-sv5],obj-[un-art-sn,un-art-sn,po-np-sn, (mod)-[di-pd-spd,esercizio-n-sn]],

extractopencompladjs(GovV,Lemmed,Subj,Rest,[PAS,PASs],Rest2,[Deps,DepSubj1,Deps1,DepsAdjs]):-
    extractgerunds(Lemmed,Rest,Ibar,Subj,N-V-Lem-LForm,Gerundd,Rest2,Deps),
    appiattisci(Gerundd,Gerund),
    Gerund\=[],
    checkcontrols(GovV,sv3-N-V-Lem-LForm,Lemmed,[Subj,[],[]],Control,DepSubj),
    extractpol(Ibar,Pol),
    extractvoice(Ibar,Voice),
    member(K-L-Subs,LForm),
    checksubjectssubroles(Subs,Role),
    assignrolesubj(N,DepSubj,Role,DepSubj1),
    selectbestsubcat(Lemmed,N-V-Lem,Gerund,big_pPro,LForm,Roles,DepsC),
    searchF2gerund(Lemmed,Gerund,Role,Deps,PASs,DepsR),
    PAS=pas(Pol,Voice,N-V-Lem,Control,Gerund),
    writepassnew(PAS-Rests),nl,nl,
    checkdepadjsavv(N,Lemmed,Rest2,DepsAdjs,Rests),
    append(DepsC,DepsR,Deps1),
    !.
extractopencompladjs(N-V-Verb-LF,Lemmed,Subj,Rest,[],Rest2,[DepsAdjs]):-
    checkdepadjsavv(N,Lemmed,Rest,DepsAdjs,Rest2),
    !.

searchF2gerund(Lemmed,[],Role,Deps,[],[]):-!.
searchF2gerund(Lemmed,[Arg|Gerund],Role,Deps,[PAS1|PASs],[DepsRs|Rels]):-
    (Arg=[Compls,F2];Arg=[Obj,Compls,F2|Adjs]),
    F2\=[],F2=Pref-_-_,integer(Pref),
    (createallF2pas(F2,SLem/Role/Feat,PAS1,DepsRel);
      createallF2pas1(F2,SLem/Role/Feat,PAS1,DepsRel);
       createallF2pas2(F2,SLem/Role/Feat,PAS1,DepsRel)),
    buildbinderbindee(Lemmed,Ind-Head-SLem-Feat,F2,DepsR),
    append(DepsRel,DepsR,DepsRs),
    searchF2gerund(Lemmed,Gerund,Role,Deps,PASs,Rels),
    !.
searchF2gerund(Lemmed,Gerund,Role,Deps,[],[]):-
    !.

checkdepadjsavv(N,Lemmed,[],[],[]):-!.
checkdepadjsavv(N,Lemmed,[Func-Savv|Rest],[DepAv|DepsAdjs],Rest2):-
    reverse(Savv,[V-_-_|Rev]),
    (member(i(N1,V,Ca,Lem-Feat),Lemmed);
       member(i(N1,V,Ca,Lem-Feat),Lemmed)),
    DepAv=i(N1,V,Ca,Lem,Func,Feat,N,-),
    checkdepadjsavv(N,Lemmed,Rest,DepsAdjs,Rest2),
    !.
checkdepadjsavv(N,Lemmed,[fc-Savv|Rest],[DepAv|DepsAdjs],Rest2):-
    reverse(Savv,[V-_-_|Rev]),
    (member(i(N1,V,Ca,Lem-Feat),Lemmed);
       member(i(N1,V,Ca,Lem-Feat),Lemmed)),
    DepAv=i(N1,V,Ca,Lem,fc,Feat,N,-),
    checkdepadjsavv(N,Lemmed,Rest,DepsAdjs,Rest2),
    !.
checkdepadjsavv(N,Lemmed,[fs-Savv|Rest],[DepAv|DepsAdjs],Rest2):-
    reverse(Savv,[V-_-_|Rev]),
    (member(i(N1,V,Ca,Lem-Feat),Lemmed);
       member(i(N1,V,Ca,Lem-Feat),Lemmed)),
    DepAv=i(N1,V,Ca,Lem,fs,Feat,N,-),
    checkdepadjsavv(N,Lemmed,Rest,DepsAdjs,Rest2),
    !.
checkdepadjsavv(N,Lemmed,Rest,[],Rest):-!.

getgerundpartic(Lemmed,Sv-Ibar,Res,Ibars,N-V-Lemm-LForm):-
   (reverse(Ibar,[V-_-_|Rev]),Res=[]
     ;
     remove(F-Stru,Ibar,Iba),
     reverse(Iba,[V-_-_|Rev]),Res=[F-Stru]),
   (Sv=sv5,
    (member(i(N,V,Cat,Lem-Feat),Lemmed);
       member(i(N,V,Ca,Lem-Feat),Lemmed)),Ibars=Ibar
     ;
     Sv=sv3,
    (member(i(N,V,Cat,Lem-Feat),Lemmed);
       member(i(N,V,Ca,Lem-Feat),Lemmed)),Ibars=Ibar
     ;
     Sv=xadj,
    (member(i(N,V,Cat,Lem-Feat),Lemmed);
       member(i(N,V,Ca,Lem-Feat),Lemmed)),Ibars=Ibar
     ;
     Sv=ibar,
     analtoken(V,Anal),
     member(Lem-Feat,Anal),
     member(mood=Mood,Feat), Mood=ger,
     (member(encl=Cl,Feat),append(Ibar,[Cl-clit-ibar],Ibars);
       Ibars=Ibar)),    
     findall(K-L-M, cat_gramm(Lem,K,L,M), LForms),
     (LForms\=[],LForm=LForms,Lemm=Lem;LForms=[],getcatsemasp(Lem,CatV,Scat,LForm,Lemm)),
     !.

extractgerunds(Lemmed,[],[],Subj,[],[],[],[]):-!.
extractgerunds(Lemmed,[Sv-Ibar|Rest],Ibars,Subj,N-V-Lemm-LForm,Objs,Rest2,Deps):-
     getgerundpartic(Lemmed,Sv-Ibar,Res,Ibars,N-V-Lemm-LForm),
     extractrestcl(Rest,Clause,RestCll),
     append(Res,RestCll,RestCl),
     (Clause=[],Claus=RestCl;Clause\=[],Claus=Clause),
    extractcompls(Lemmed,N-V-Lemm-LForm,Ibar,Subj,Claus,Objs,Rest2,Deps),
    !.
extractgerunds(Lemmed,[Sv-Ibars|Rest],Ibar,Subj,Verb,Gerund,[Sv-Ibars|Rest2],Deps):-
    extractgerunds(Lemmed,Rest,Ibar,Subj,Verb,Gerund,Rest2,Deps),
    !.
extractrestcl([],[],[]):-!.
extractrestcl([Cos-SN|Rest],[Cos-SN|Clause],RestCl):-
    (Cos=obj;Cos=subj;Cos=obl;Cos=sp;Cos=savv;Cos=spda;Cos=sa;Cos=sq),
    extractrestcl(Rest,Clause,RestCl),
    !.
extractrestcl([Cos-SN|Rest],Clause,RestCl):-
    Cos=cp,SN=[Lex1-Cat-_],
    select_punct(Lex1,_),
    extractrestcl(Rest,Clause,RestCl),
    !.
extractrestcl(Rest,[],Rest):-
    !.

removecheckcompls([],ToLog,NP):-!.
removecheckcompls(Rest,ToLog,Ibar):-
   (nth(ToLog,N,obj-Ibar);
    nth(ToLog,N,sn-Ibar)),
    (nth(ToLog,N1,sv5-Ibar1);
     nth(ToLog,N1,sv2-Ibar1);
     nth(ToLog,N1,vcomp-Ibar1)),
          N<N1,!.
removecheckcompls(Rest,ToLog,Ibar):-
    \+ nth(ToLog,N,obj-Ibar),
    \+ nth(ToLog,N,sn-Ibar),
    !.
removecheckcompls(Rest,ToLog,Ibar):-
   (nth(ToLog,N,obj-Ibar);
    nth(ToLog,N,sn-Ibar)),
    \+nth(ToLog,N1,sv5-Ibar1),
    \+nth(ToLog,N1,sv2-Ibar1),
    \+nth(ToLog,N1,vcomp-Ibar1),
    !.

removecheckcomplobl([],ToLog,Ibar):-!.
removecheckcomplobl(Rest,ToLog,Ibar):-
    remove(fac-Fac,ToLog,Tol),Fac=[A],
    removecheckcomplobl(Rest,Tol,Ibar),
    !.
removecheckcomplobl(Rest,ToLog,Ibar):-
   (nth(ToLog,N,obl-Ibar);
    nth(ToLog,N,sp-Ibar)),
     (nth(ToLog,N1,sv5-Ibar1);
      nth(ToLog,N1,sv3-Ibar1);
      nth(ToLog,N1,xadj-Ibar1);
      nth(ToLog,N1,sv2-Ibar1);
      nth(ToLog,N1,vcomp-Ibar1)),
          N<N1,
      (nth(ToLog,N2,fac-Fac),
       N1<N2
       ;
       \+nth(ToLog,N2,fac-Fac)),
       !.
          
removecheckcomplobl(Rest,ToLog,Ibar):-
   \+nth(ToLog,N1,sv2-Ibar1),
   \+nth(ToLog,N1,sv5-Ibar1),
   \+nth(ToLog,N1,sv3-Ibar1),
   \+nth(ToLog,N1,vcomp-Ibar1),
    \+nth(ToLog,N1,xadj-Ibar1),
    !.
removecheckcomplobl(Rest,ToLog,Ibar):-
    (nth(ToLog,N,obl-Ibar);
      nth(ToLog,N,sp-Ibar)),
    \+nth(ToLog,N1,sv5-Ibar1),
    \+nth(ToLog,N1,sv2-Ibar1),
     \+nth(ToLog,N1,sv3-Ibar1),
     \+nth(ToLog,N1,xadj-Ibar1),
    \+nth(ToLog,N1,vcomp-Ibar1),
    !.
   
extractobj(Lemmed,Verb,ToLog,Subjs,Rest):-
    remove(obj-NP,ToLog,Rest),
    removecheckcompls(Rest,ToLog,NP),
    newprendi_testa(obj,NP,Noun),
    (member(i(N,Noun,Cat,Lem-Feat),Lemmed);
     member(i(N,Noun,Cat,[]),Lemmed),Lem=Noun,Feat=[]),
    Subj=obj-[Lem,Feat,NP],
    tryextractF2(Lemmed,Noun,NP,F2),
    (F2=[],
     Subjs=Subj
     ;
     F2\=[],Subjs=[Subj,F2]),
    !.
extractobj(Lemmed,Verb,ToLog,Subjs,Rest):-
    remove(sn-NP,ToLog,Rest),
    removecheckcompls(Rest,ToLog,NP),
    newprendi_testa(obj,NP,Noun),
    (member(i(N,Noun,Cat,Lem-Feat),Lemmed);
     member(i(N,Noun,Cat,[]),Lemmed),Lem=Noun,Feat=[]),
    Subj=obj-[Lem,Feat,NP],
    tryextractF2(Lemmed,Noun,NP,F2),
    (F2=[],
     Subjs=Subj
     ;
     F2\=[],Subjs=[Subj,F2]),
    !.
extractobj(Lemmed,Verb,ToLog,Subjs,[]):-
    remove(subj-NP,ToLog,[]),
    newprendi_testa(obj,NP,Noun),
    (member(i(N,Noun,Cat,Lem-Feat),Lemmed);
     member(i(N,Noun,Cat,[]),Lemmed),Lem=Noun,Feat=[]),
    Subj=obj-[Lem,Feat,NP],
    tryextractF2(Lemmed,Noun,NP,F2),
    (F2=[],
     Subjs=Subj
     ;
     F2\=[],Subjs=[Subj,F2]),
    !.
extractobj(Lemmed,Verb,Rest,[],Rest):-!.
extractncomp(Lemmed,Verb,ToLog,Subj,Rest):-
    (remove(xcomp-NP,ToLog,Rest);
%    remove(xadj-NP,ToLog,Rest);
    remove(acomp-NP,ToLog,Rest);
    remove(ncomp-NP,ToLog,Rest);
    remove(pcomp-NP,ToLog,Rest)),
    newprendi_testa(xcomp,NP,Noun),
    (member(i(N,Noun,Cat,Lem-Feat),Lemmed);
     member(i(N,Noun,Cat,[]),Lemmed),Lem=Noun,Feat=[]),
    Subj=xcomp-[Lem,Feat,NP],
    !.
extractncomp(Lemmed,Verb,Rest,[],Rest):-!.
extractiobj(Lemmed,Verb,ToLog,Subj,Rest):-
    remove(iobj-NP,ToLog,Rest),
    newprendi_testa(iobj,NP,Noun),
    (member(i(N,Noun,Cat,Lem-Feat),Lemmed);
     member(i(N,Noun,Cat,[]),Lemmed),Lem=Noun,Feat=[]),
    Subj=iobj-[Lem,Feat,NP],
    !.
extractiobj(Lemmed,Verb,ToLog,Subj,Rest):-
    remove(obl-[Prep-P-_|NP],ToLog,Rest),
    checkprepa(Prep),
    newprendi_testa(iobj,NP,Noun),
    (member(i(N,Noun,Cat,Lem-Feat),Lemmed);
     member(i(N,Noun,Cat,[]),Lemmed),Lem=Noun,Feat=[]),
    (\+ gi(Noun,Loc,Clas,Se);Cat=nh),
    Subj=iobj-[Lem,Feat,[Prep-P-_|NP]],
    !.
extractiobj(Lemmed,Verb,Rest,[],Rest):-!.

checkprepa(Prep):-
    Prep=a
    ;
    prepart(a,Prep,_),!.
    
extractobls(Lemmed,Verb,ToLog,[Obl|Obls],Rest):-
   extractobl(Lemmed,Verb,ToLog,Obl,Rest1),
   extractobls(Lemmed,Verb,Rest1,Obls,Rest),
   !.
extractobls(Lemmed,Verb,Rest,[],Rest):-!.
extractobl(Lemmed,Verb,ToLog,Subjs,Rest):-
    (remove(obl-NP,ToLog,Rest);
      remove(sp-NP,ToLog,Rest)),
    removecheckcomplobl(Rest,ToLog,NP),
    newprendi_testa(obl,NP,Noun),
    (member(i(N,Noun,Cat,Lem-Feat),Lemmed);
     member(i(N,Noun,Cat,[]),Lemmed),Lem=Noun,Feat=[]),
    Subj=obl-[Lem,Feat,NP],
    tryextractF2(Lemmed,Noun,NP,F2),
    (F2=[],
     Subjs=Subj
     ;
     F2\=[],Subjs=[Subj,F2]),
    !.

newprendi_testa(Fun,NP,Noun):-
   NP=[A],
   A=Noun-Cat-_,
   \+select_punct(Noun,K),
   (nouncats(Cat);allpreps(Cat);preposcats(Noun,Cat);
    Cat=ppas;Cat=ag;proncat(Cat);Cat=avv;
   Noun=no;Noun='No';Noun=sì),
   !.
   
newprendi_testa(Fun,NP,Head):-
   NP\=[A], is_list(NP),
   NP=[_-art-_,Head-Ca-sn,Appos-n-sn],
   nouncats(Ca),
   !.
newprendi_testa(Fun,NP,N):-
   NP\=[A], is_list(NP),
   length(NP,L), L < 10,
   prendi_testa(Fun,NP,Noun),
   (atomic(Noun),N=Noun;
    is_list(Noun),Noun=[_,N]),
   !.
newprendi_testa(Fun,NP,Noun):-
   NP\=[A],
   reverse(NP,Rev),
   Rev=[Noun-_-_|_],
   !.
newprendi_testa(Fun,NP,Noun):-
   NP\=[A],
   reverse(NP,Rev),
   NP=[mod-[Noun-ag-_]|_],
   !.
newprendi_testa(Ibar,NP,Noun):-
   (Ibar=ibar;Ibar=vcomp;Ibar=sv2;Ibar=sv5;Ibar=sv3;Ibar=ir_infl),
   reverse(NP,Rev),
   (Rev=[Noun-Cat-_|_],
    check_vcat(Cat)
    ;
    NP=[Noun-Cat-_|_],
    check_vcat(Cat)
    ),   
   !.
   
   
extrvcomp(Lemmed,Ibar,N-V-Lemm-LForm):-
    reverse(Ibar,Revs),
    (Revs=[V-Cat-_|Rev],
     check_vcat(Cat)
%     check_all_verbs(Cat)
     ;
     member(V-Cat-_,Revs),
     check_all_verbs(Cat)),     
    (member(i(N,V,Cat,Lem-Feat),Lemmed);
       member(i(N,V,Ca,Lem-Feat),Lemmed)),
%    findall(K-L-M, cat_gramm(Lem,K,L,M), LForm),
    getcatsemasp(V,K,L,LForm,Lemm),
    !.

%extractobl(Lemmed,Verb,Rest,[],Rest):-!.
extractvcomp(Lemmed,Verb,[Subj,Obj,Obl],ToLogs,PAS,Rests,[DepVerb,DepSubj,Deps,DepsC]):-
    (ToLogs=[Vcomp-NP|ToLo],
      (Vcomp=vcomp;Vcomp=sv2;Vcomp=sv3),ToLog=ToLo
      ;
      ToLogs=[First,Vcomp-NP|ToLo],
      (Vcomp=vcomp;Vcomp=sv2;Vcomp=sv3),
      append([First],ToLo,ToLog)
      ;
      ToLogs=[First,Sec,Vcomp-NP|ToLo],
      (Vcomp=vcomp;Vcomp=sv2;Vcomp=sv3),
      append([First],[Sec],Secs),
      append(Secs,ToLo,ToLog)),
    extrvcomp(Lemmed,NP,Verb1),
    createdepverbrest(Lemmed,NP,Verb1,DepVerb,Lems,ResComp),
    Verb1=N-V-Lem-LForm,
    extractrestcl(ToLog,Clause,RestCl),
    (Clause=[],Claus=RestCl;Clause\=[],Claus=Clause),
    append(Claus,ResComp,Clauss),
    extractcompls(Lems,N-V-Lem-LForm,NP,Subj,Clauss,Oblss,Rest2,Deps),
    append(RestCl,Rest2,Rests),
    appiattisci(Oblss,Obls),
    checkcontrols(Verb,Vcomp-N-V-Lem-LForm,Lemmed,[Subj,Obj,Obls],Control,DepSubj),
    extractpol(NP,Pol),
    extractvoice(NP,Voice),
    mapsemrols(Lems,[Pol,Voice,N-V-Lem-LForm,subj-[big_pPro,Feat],Obls],DepSubj,PAS,DepsC),
    writepassnew(PAS-Rest2),nl,nl,
%    PAS=pas(Pol,Voice,N-Noun-Lem,Control,Objs),
    !.
/*
extractvcomp(Lemmed,Verb,Compls,[Vcomp-NP|ToLog],PAS,Rest2,Deps):-
    extractvcomp(Lemmed,Verb,Compls,ToLog,PAS,Rest2,Deps),
    !.
*/
extractvcomp(Lemmed,Verb,Controls,Rest,[],Rest,[]):-!.

buildbigpro(nil,N-Verb-Lem-LemForm,N1,DepSubj,LemFormm):-
    DepSubj=[i(N,big_pPro,pro,pPro,sn,[mfeats='3s'],N1,subj/Role),i(N,Verb,v,Lemm,ibar,Feat,N1,CatV/Scat)],
    (var(LemForm),getcatsemasp(Lem,CatV,Scat,LemForm,Lemm);
      LemForm=[],getcatsemasp(Lem,CatV,Scat,LemForm,Lemm);
      nonvar(LemForm),member(CatV-Scat-LFs,LemForm),Lemm=Lem;
      getcatsemasp(Lem,CatV,Scat,LemFor,Lemm)),
    !.
buildbigpro(Id-V-Le-LForm,N-Verb-Lem-Feat,N1,DepSubj,LemForm):-
    DepSubj=[i(N,big_pPro,pro,pPro,sn,[mfeats='3s'],N1,subj/Role),i(N,Verb,v,Lemm,ibar,Feat,Id,CatV/Scat)],
    (var(LemForm),getcatsemasp(Lem,CatV,Scat,LemForm,Lemm);
      LemForm=[],getcatsemasp(Lem,CatV,Scat,LemForm,Lemm);
      nonvar(LemForm),member(CatV-Scat-LFs,LemForm),Lemm=Lem;
      getcatsemasp(Lem,CatV,Scat,LemFor,Lemm)),
    !.
    
checkcontrols(GovV,sv3-N-Verb-Lem-LemForm,Lemmed,[Subj,Obj,Obl],Contr,DepSubj):-
    Obl=[Fun-[Lem1,Fea,[_-_-spda|_]]|_],Contr=Obl,
    remove(i(N1,Head,Cat,Lem1-Fea),Lemmed,Lemres),
    checkproximity(Lemmed,N,N1),
    buildbigpro(nil,N-Verb-Lem-Feat,N1,DepSubj,LemForm),
    !.
checkcontrols(GovV,Vcomp-N-Verb-Lem-LemForm,Lemmed,[Subj,[],[]],Subj,DepSubj):-
    (Subj=[Fun-[Lem1,Fea,Cos]|_],Contr=Subj,
     remove(i(N1,Head,Cat,Lem1-Fea),Lemmed,Lemres),
     checkproximity(Lemmed,N,N1)
     ;
     Subj=subj-[si_impers,Feat],
     remove(i(N1,si,Cat,si-Feat),Lemmed,Lemres)
     ;
     Subj=subj-[little_pro,Feat],N1=N
     ;
     member(i(N1,Head,Cat,Lem1,Cos,Fea,Ante,subj/Rol),Subj)),
     buildbigpro(GovV,N-Verb-Lem-Feat,N1,DepSubj,LemForm),
    !.
checkcontrols(GovV,Vcomp-N-Verb-Lem-LemForm,Lemmed,[Subj,Obj,[]],Obj,DepSubj):-
    Obj=[Fun-[Lem1,Fea,Cos]|_],Contr=Obj,
    remove(i(N1,Head,Cat,Lem1-Fea),Lemmed,Lemres),
    checkproximity(Lemmed,N,N1),
    buildbigpro(GovV,N-Verb-Lem-Feat,N1,DepSubj,LemForm),
    !.
checkcontrols(GovV,sv3-N-Verb-Lem-LemForm,Lemmed,[Subj,[],Obl],[big_pPro/Fun/N1/Obl],DepSubj):-
    (Obl=[Fun-[Lem1,Fea,Cos]|_],Contr=Obl,
     remove(i(N1,Head,Cat,Lem1-Fea),Lemmed,Lemres),
     checkproximity(Lemmed,N,N1)
     ;
     member(i(N1,Head,Cat,Lem1,Cos,Fea,Ante,subj/Rol),Subj)),
    buildbigpro(nil,N-Verb-Lem-Feat,N1,DepSubj,LemForm),
    !.
checkcontrols(GovV,Vcomp-N-Verb-Lem-LemForm,Lemmed,[Subj,[],Obl],Contr,DepSubj):-
    (Obl=iobj-Obj,Contr=Obl
     ;
     member(iobj-Obj,Obl),Contr=iobj-Obj
     ;
     Contr=Subj),
     (
      (Contr=[Fun-[Lem1,Fea,Cos]|_];
       Contr=Fun-[Lem1,Fea,Cos]),
      remove(i(N1,Head,Cat,Lem1-Fea),Lemmed,Lemres),
      checkproximity(Lemmed,N,N1)
      ;
     member(i(N1,Head,Cat,Lem1,Cos,Fea,Ante,subj/Rol),Subj)),
    buildbigpro(GovV,N-Verb-Lem-Feat,N1,DepSubj,LemForm),
    !.
checkcontrols(GovV,Vcomp-N-Verb-Lem-LemForm,Lemmed,[Subj,[],Obl],Contr,DepSubj):-
    ((nonvar(N),N1 is N - 1;true),
     remove(i(N1,Head,Cat,Lem1-Fea),Lemmed,Lemres),
     (nouncats(Cat);proncat(Cat)),
     checkproximity(Lemmed,N,N1)
    ;
     (nonvar(N),N1 is N - 2;true),
     remove(i(N1,Head,Cat,Lem1-Fea),Lemmed,Lemres),
     (nouncats(Cat);proncat(Cat)),
     checkproximity(Lemmed,N,N1)
    ),
    buildbigpro(GovV,N-Verb-Lem-Feat,N1,DepSubj,LemForm),
    !.
    
    
/*
find_functs(File, Types, Functs)
specify_main(File, Cat-V-Feat, Parse, [V, Mood, Tense, Lexs])
write_lexform(File, L, Feats, Ind, [lex_form=[Lform, Ind]])

find_functs(File, Types, [Parse, Lexs|Functs]):-
   remove(ibar-main-Feat, Types, Type),
   specify_main(File, Feat, Parse, Lexs),
        write_lexform(File, Root, Fe, Ind, Lexs)

subcategorization comes either from explicit lex_forms in pv(

write_lexform(File, L, Feats, Ind, [lex_form=[Lform, Ind]]):-
   findall(L-S-A-C-Args, pv(L,_,S,A,C,Args), LForm),
   (LForm\=[],
   reverse(LForm, Lform),
   writeseq(File, [lex_form=Lform])
   ;LForm=[nil]),   
   !.

or it comes from inferred ones from v_lexz

corr(Sub, S, Args),
   on(v(Root,C,P,Sub), Lexs),

grammatical functions and features come from
assertaag(File, [], true):-!.

assertaag(File, cp-nil, true):-
    call_new_prop(File),!.

assertaag(File, f-nil, true):-
    call_new_prop(File),!.

assertaag(File, fs-P-Feats, true):-
    asserisci_struc(cue, P, F, Feats),
    call_new_prop(File),!.

assertaag(File, fint-nil, true):-
    call_new_prop(File),!.

assertaag(File, dirsp-nil, true):-
    call_new_prop(File),!.

assertaag(File, fc-nil, true):-
   one(sr(ibar, main, Ind)),
   assert_frase_corrente,
   spot_head(Ind, Head),
   append([gov_pred=Head-Cost], F, F1),
   (on(w=P, F1), List=[P-F1];List=F1),
   asserisci_struc(fcomp, Agr, F1, List),!.

assertaag(File, sv2-Agr-F, true):-
   one(sr(Cost, OAgr, List)),
   Cost=ibar, 
   OAgr=comp,
   rass_struc(sn, Cost, OAgr, List, List, Agr, F),!.

subject is asserted only if
assertaag(File, sn-Agr-F, true):-
   one(sr(Cost, OAgr, Ind)),
   (Cost=f;Cost=fcomp),
   (on(w=P, F), List=[P-F];List=F),
   frase_corrente(I),
   append([subj-Agr-I], List, NList),
   writeagr(File, subj, Ind, Agr),
   asserisci_struc(sn, Agr, F, NList),

   find_functs(File, Type, Functs).
   remove(voice-Funct-Feat, Types, Type),
   remove(f-neg-Feat, Types, Type),
   remove(sn-Funct-Feat, Types, Typess),
   remove(subj-Agr-Trat, Typess, Type),
   remove(subj-_-_, Feat, Fea),
   remove(obj-Funct-Feat, Types, Type),
   remove(top-Funct-Feat, Types, Type),
   remove(obj2-Funct-Feat, Types, Type),
   remove(origin-Funct-Feat, Types, Type),
   remove(adj-Funct-Feat, Types, Type),
   remove(cue-Funct-Feat, Types, Type),
   remove(sn-Agr-Feat, Types, Type),
   Parse=[coord/sn-Feat],
   remove(vcomp-Funct-Feat, Types, Type),
   on(cue-Funct-Feat, Functs), Type=[clause=subord, cue=Feat]
   ; Type=[clause=assert]),

*/

/*
multiwords calls

mlt([a,meno,dell], a_meno_dell,php).
pw(['Pubblica','Sicurezza'],'Pubblica_Sicurezza').
g(work_station, [n], [[work], [station]]).
g(tecnico_industriale, [ag], [[tecnico-tecnic], [industriale-industrial, industriale-industriarsi-industri-[virt]-[le-[clitac, clitdat]-[pers=_197589, num=p, gen=f, case=[dat, acc]], industria-industriarsi-industri-[virt]-[mood=imp, tense=pres, pers=2, num=s, scat=rifl]]]]).
fty('A_favore_del', php, a_favore_del-php).
l('Ammesso_che',  ['cosu:conc']). 
t('Emilia_Romagna',      ['s:geo:f:s']).
de('pesce-martello',[n:'m-sing':1]).
vlm('co-finanziati', [sono], co-finanziare).
s(baby_sitter, n, 1).
fs(garden_party, fw, 1).
uniqdis('tele-encefalogramma',[n]).

*/

%itmults(Frase,Frase,Mults):-!.

itmults([],[], []):-!.
itmults([Lex1|RestoFrase],[Lex1|NuovaFrase],Mults):-
   select_punct(Lex1,_),
   itmults(RestoFrase,NuovaFrase,Mults),
   !.
/*
itmults([Lex1,Lex2,Lex3,Lex4,Lex5,Lex6,Lex7|RestoFrase],[E|NuovaFrase], [t(E, [Lex1,Lex2,Lex3,Lex4,Lex5,Lex6,Lex7], T)|Mults]):-
   \+ fct(Lex1), \+ select_punct(Lex7,_), \+ fct(Lex7),
   itmults7(Lex1,Lex2,Lex3,Lex4,Lex5,Lex6,Lex7,E,T),
   E\=[],
   itmults(RestoFrase,NuovaFrase,Mults),
   !.
itmults([Lex1,Lex2,Lex3,Lex4,Lex5,Lex6|RestoFrase],[E|NuovaFrase], [t(E, [Lex1,Lex2,Lex3,Lex4,Lex5,Lex6], T)|Mults]):-
   \+ fct(Lex1), \+ select_punct(Lex6,_), \+ fct(Lex6),
   itmults6(Lex1,Lex2,Lex3,Lex4,Lex5,Lex6,E,T),
   E\=[],
   itmults(RestoFrase,NuovaFrase,Mults),
   !.
*/
itmults([Lex1,Lex2|RestoFrase],[Lex1,Lex2|NuovaFrase], Mults):-
   select_punct(Lex2,_),
   itmults(RestoFrase,NuovaFrase,Mults),
   !.
itmults([Lex1,Lex2,Lex3|RestoFrase],[C,Lex3|NuovaFrase], [t(C, [Lex1,Lex2], T)|Mults]):-
   select_punct(Lex3,_),
%   \+ fct(Lex1), 
   itmults2(Lex1,Lex2,C,T),
   C\=[],
   itmults(RestoFrase,NuovaFrase,Mults),
   !.
itmults([Lex1,Lex2,Lex3,Lex4|RestoFrase],[D,Lex4|NuovaFrase], [t(D, [Lex1,Lex2,Lex3], T)|Mults]):-
   select_punct(Lex4,_),
%   \+ fct(Lex1), 
   itmults3(Lex1,Lex2,Lex3,D,T),
   D\=[],
   itmults(RestoFrase,NuovaFrase,Mults),
   !.
itmults([Lex1,Lex2,Lex3,Lex4,Lex5|RestoFrase],[E,Lex5|NuovaFrase], [t(E, [Lex1,Lex2,Lex3,Lex4,Lex5], T)|Mults]):-
   select_punct(Lex5,_),
%   \+ fct(Lex1), 
   itmults4(Lex1,Lex2,Lex3,Lex4,E,T),
   E\=[],
   itmults(RestoFrase,NuovaFrase,Mults),
   !.
itmults([Lex1,Lex2,Lex3,Lex4,Lex5|RestoFrase],[E|NuovaFrase], [t(E, [Lex1,Lex2,Lex3,Lex4,Lex5], T)|Mults]):-
   \+ select_punct(Lex5,_),
%   \+ fct(Lex1), 
   itmults5(Lex1,Lex2,Lex3,Lex4,Lex5,E,T),
   E\=[],
   itmults(RestoFrase,NuovaFrase,Mults),
   !.
itmults([Lex1,Lex2,Lex3,Lex4|RestoFrase],[E|NuovaFrase], [t(E, [Lex1,Lex2,Lex3,Lex4], T)|Mults]):-
   \+ select_punct(Lex4,_), 
%   \+ fct(Lex1), 
   itmults4(Lex1,Lex2,Lex3,Lex4,E,T),
   E\=[],
   itmults(RestoFrase,NuovaFrase,Mults),
   !.
itmults([Lex1,Lex2,Lex3|RestoFrase],[D|NuovaFrase], [t(D, [Lex1,Lex2,Lex3], T)|Mults]):-
   \+ select_punct(Lex3,_),
%   \+ fct(Lex1), 
   itmults3(Lex1,Lex2,Lex3,D,T),
   D\=[],
   itmults(RestoFrase,NuovaFrase,Mults),
   !.
itmults([Lex1,Lex2|RestoFrase],[C|NuovaFrase], [t(C, [Lex1,Lex2], T)|Mults]):-
   \+ select_punct(Lex2,_),
%   \+ fct(Lex1), 
   itmults2(Lex1,Lex2,C,T),
   C\=[],
   itmults(RestoFrase,NuovaFrase,Mults),
   !.
itmults([Lex1|RestoFrase],[Lex1|NuovaFrase],Mults):-
   itmults(RestoFrase,NuovaFrase,Mults),
   !.

% mwec([acquisti,da,casa],acquisti_da_casa).


itmults2(A,B,C,4):-
   mlt([A,B], C, Cat)
   ;
   wndang([A,B],C),Sem=[med,dang]
   ;
   wnmed([A,B],C),Sem=[med,animl]
   ;
   wnrol([A,B],C),Sem=[social,role,hum]
   ;
   wnwar([A,B],C),Sem=[social,dang,milit]
   ;
   wnist([A,B],C),Sem=[legal,instit]
   ;
   jrc([A,B], Ca, Cat),
   concat(A,'_',Bb),
   concat(Bb,B,C)
   ;
   pw([A,B],C)
   ;
   mwec([A,B],C)
   ;
   concat(A,'_',Bb),
   concat(Bb,B,C),
   tolower(C,Low),
   psl(C,e,_,_,_,_),
   !.
itmults2(A,B,C1,4):-
   atomic(A),atomic(B),
   check_underscore(A,New),
   concat(New,'_',Bb),
   concat(Bb,B,C),
   spy_lower(B,Lowb,Polb),
   spy_lower(C,Low,Pol),
   (matchmult(C,Low,Pol),
     tolower(B,Lo),
      (B\=Lo,
     \+fct(A),\+prepos(A),\+prepart(A,_,_)
     ;
     B=Lo),C1=C
     ;
     if_first_name(A),Pol=1,Polb=1,
     \+gi(A,Loc,Clas,Sem),
     tolower(A,Aa),\+fct(Aa),\+prepos(Aa),\+prepart(Aa,_,_),C1=C
     ;
     if_first_name(B),Pol=1,Polb=1,
     \+gi(B,Loc,Clas,Sem),\+if_first_name(A),
     tolower(A,Aa),\+fct(Aa),\+prepos(Aa),\+prepart(Aa,_,_),C1=C
     ;
     Pol=1,
     \+ firstword(A),
     (gi(A,Loc,Clas,Sem),
      gi(B,Loc1,Clas1,Sem1),C1=C;
      gi(C,Loc,Clas,Sem),C1=C;
      makeupper(A,B,C1),
      gi(C1,Loc,Clas,Sem))
     ),
   !.

makeupper(A,B,C):-
   spy_lower(B,Lowb,Polb),
   spy_lower(A,Low,Pol),
   toupper(Low,Up),
   toupper(Lowb,Bb),
   concat(Up,'_',Ba),
   concat(Ba,Bb,C),
   !.   

itmults3(A,B,C,D,4):-
   concat(A,'_',B1),
   concat(B1,B,C1),
   check_underscore(C1,New),
   concat(New,'_',C2),
   concat(C2,C,D),
   (mlt([A,B,C], D, Cat)
   ;
   wndang([A,B,C],D),Sem=[med,dang]
   ;
   wnmed([A,B,C],D),Sem=[med,animl]
   ;
   wnrol([A,B,C],D),Sem=[social,role,hum]
   ;
   wnwar([A,B,C],D),Sem=[social,dang,milit]
   ;
   wnist([A,B,C],D),Sem=[legal,instit]
   ;
   jrc([A,B,C], De, Cat)
   ;
   pw([A,B,C],D)
   ;
   mwec([A,B,C],D)
   ;
   tolower(B,Bb),
   atomic(A),atomic(B),
   concat(A,'_',B1),
   concat(B1,Bb,C1),
   check_underscore(C1,New),
   concat(New,'_',C2),
   concat(C2,C,D),
   (  
    jrc([A,Bb,C], De, Cat)
    ;   
   spy_lower(D,Low,Pol),
   (matchmult(D,Low,Pol),
   (B\=Bb,
     \+fct(A),\+prepos(A),\+prepart(A,_,_)
     ;
     B=Bb)
     ;
    if_first_name(A),
    tolower(A,Aa),
    \+fct(Aa),\+prepos(Aa),\+prepart(Aa,_,_),
    B\=Bb,tolower(C,Co),C\=Co
    ;
    psl(Low,e,_,_,_,_)))
   ),
   !.
itmults3(A,B,C,D,_):-
   atomic(A),atomic(B),
   atomic(C),
   check_underscore(A,New),
   concat(New,'_',B1),
   concat(B1,B,C1),
   check_underscore(C1,New),
   concat(New,'_',C2),
   concat(C2,C,D),
   spy_lower(D,Low,Pol),
   matchmult(D,Low,Pol),
   !.
itmults4(A,B,C,D,E,4):-
   mlt([A,B,C,D], E, Cat)
   ;
   wndang([A,B,C,D],E),Sem=[med,dang]
   ;
   wnmed([A,B,C,D],E),Sem=[med,animl]
   ;
   wnrol([A,B,C,D],E),Sem=[social,role,hum]
   ;
   wnwar([A,B,C,D],E),Sem=[social,dang,milit]
   ;
   wnist([A,B,C,D],E),Sem=[legal,instit]
   ;
   jrc([A,B,C,D], Ee, Cat),
   atomic(A),atomic(B),
   atomic(C),
   concat(A,'_',B1),
   concat(B1,B,C1),
   check_underscore(C1,New),
   concat(New,'_',C2),
   concat(C2,C,D1),
   concat(D1,'_',D2),
   concat(D2,D,E)
   ;
   mwec([A,B,C,D],E)
   ;
   pw([A,B,C,D],E),
   !.
itmults4(A,B,C,D,E,44):-
   atomic(A),atomic(B),
   atomic(C),atomic(D),
   concat(A,'_',B1),
   concat(B1,B,C1),
   check_underscore(C1,New),
   concat(New,'_',C2),
   concat(C2,C,D1),
   concat(D1,'_',D2),
   concat(D2,D,E),
   spy_lower(E,Low,Pol),
   matchmult(E,Low,Pol),
   !.
itmults5(A,B,C,D,E,F,4):-
   mlt([A,B,C,D,E], F, Cat)
   ;
   wndang([A,B,C,D,E],F),Sem=[med,dang]
   ;
   wnmed([A,B,C,D,E],F),Sem=[med,animl]
   ;
   wnrol([A,B,C,D,E],F),Sem=[social,role,hum]
   ;
   wnwar([A,B,C,D,E],F),Sem=[social,dang,milit]
   ;
   wnist([A,B,C,D,E],F),Sem=[legal,instit]
   ;
   jrc([A,B,C,D,E], Fe, Cat),
   atomic(A),atomic(B),
   atomic(C),atomic(D),
   concat(A,'_',B1),
   concat(B1,B,C1),
   check_underscore(C1,New),
   concat(New,'_',C2),
   concat(C2,C,D1),
   concat(D1,'_',D2),
   concat(D2,D,E1),
   concat(E1,'_',E2),
   concat(E2,E,F)
   ;
   mwec([A,B,C,D,E],F)
   ;
   pw([A,B,C,D,E],F),
   !.
itmults5(A,B,C,D,E,F,4):-
   atomic(A),atomic(B),
   atomic(C),atomic(D),
   atomic(E),
   concat(A,'_',B1),
   concat(B1,B,C1),
   check_underscore(C1,New),
   concat(New,'_',C2),
   concat(C2,C,D1),
   concat(D1,'_',D2),
   concat(D2,D,E1),
   concat(E1,'_',E2),
   concat(E2,E,F),
   spy_lower(F,Low,Pol),
   matchmult(F,Low,Pol),
   !.
itmults6(A,B,C,D,E,F,G,4):-
   mlt([A,B,C,D,E,F], G, Cat)
   ;
   wndang([A,B,C,D,E,F],G),Sem=[med,dang]
   ;
   wnmed([A,B,C,D,E,F],G),Sem=[med,animl]
   ;
   wnrol([A,B,C,D,E,F],G),Sem=[social,role,hum]
   ;
   wnwar([A,B,C,D,E,F],G),Sem=[social,dang,milit]
   ;
   wnist([A,B,C,D,E,F],G),Sem=[legal,instit]
   ;
   jrc([A,B,C,D,E,F], Ge, Cat),
   atomic(A),atomic(B),
   atomic(C),atomic(D),
   atomic(E),
   concat(A,'_',B1),
   concat(B1,B,C1),
   check_underscore(C1,New),
   concat(New,'_',C2),
   concat(C2,C,D1),
   concat(D1,'_',D2),
   concat(D2,D,E1),
   concat(E1,'_',E2),
   concat(E2,E,F1),
   concat(F1,'_',F2),
   concat(F2,F,G)
   ;
   mwec([A,B,C,D,E,F],G)
   ;
   pw([A,B,C,D,E,F],G),
   !.
itmults6(A,B,C,D,E,F,G,4):-
   atomic(A),atomic(B),
   atomic(C),atomic(D),
   atomic(E),atomic(F),
   concat(A,'_',B1),
   concat(B1,B,C1),
   check_underscore(C1,New),
   concat(New,'_',C2),
   concat(C2,C,D1),
   concat(D1,'_',D2),
   concat(D2,D,E1),
   concat(E1,'_',E2),
   concat(E2,E,F1),
   concat(F1,'_',F2),
   concat(F2,F,G),
   spy_lower(G,Low,Pol),
   matchmult(G,Low,Pol),
   !.
itmults7(A,B,C,D,E,F,G,H,4):-
   mlt([A,B,C,D,E,F,G], H, Cat)
   ;
   wndang([A,B,C,D,E,F,G],H),Sem=[med,dang]
   ;
   wnmed([A,B,C,D,E,F,G],H),Sem=[med,animl]
   ;
   wnrol([A,B,C,D,E,F,G],H),Sem=[social,role,hum]
   ;
   wnwar([A,B,C,D,E,F,G],H),Sem=[social,dang,milit]
   ;
   wnist([A,B,C,D,E,F,G],H),Sem=[legal,instit]
   ;
   jrc([A,B,C,D,E,F,G], He, Cat),
   atomic(A),atomic(B),
   atomic(C),atomic(D),
   atomic(E),atomic(F),
   concat(A,'_',B1),
   concat(B1,B,C1),
   check_underscore(C1,New),
   concat(New,'_',C2),
   concat(C2,C,D1),
   concat(D1,'_',D2),
   concat(D2,D,E1),
   concat(E1,'_',E2),
   concat(E2,E,F1),
   concat(F1,'_',F2),
   concat(F2,F,G1),
   concat(G1,'_',G2),
   concat(G2,G,H)
   ;
   mwec([A,B,C,D,E,F,G],H)
   ;
   pw([A,B,C,D,E,F,G],H),
   !.
itmults7(A,B,C,D,E,F,G,H,4):-
   atomic(A),atomic(B),
   atomic(C),atomic(D),
   atomic(E),atomic(F),
   atomic(G),
   concat(A,'_',B1),
   concat(B1,B,C1),
   check_underscore(C1,New),
   concat(New,'_',C2),
   concat(C2,C,D1),
   concat(D1,'_',D2),
   concat(D2,D,E1),
   concat(E1,'_',E2),
   concat(E2,E,F1),
   concat(F1,'_',F2),
   concat(F2,F,G1),
   concat(G1,'_',G2),
   concat(G2,G,H),
   spy_lower(H,Low,Pol),
   matchmult(H,Low,Pol),
   !.
/*   
matchmult(C,Low,1):-
   l(C, Cats)
   ;
   t(C, Cats)
   ;
   de(C, Cats)
   ;
   vlm(C, _, Lem)
   ;
   s(C, Cats, Fr)
   ;
   fs(C, Cats, Fr)
   ;
   uniqdis(C, Cats),
   !.
*/
matchmult(_,C,Pol):-
   l(C, Cats)
   ;
   gi(C,Loc,Clas,Sem)
   ;
   wlw(C, Cats)
   ;
   sst(C,Cats,Se)
   ;
   wnit(C, Cats, L)
   ;
   ecwn(C,_),Sem=ecnm
   ;
   dmc(C), Sem=med
   ;
   t(C, Cats)
   ;
   tml(C,Cats)
   ;
   de(C, Cats)
   ;
   vlm(C, _, Lem)
   ;
   s(C, Cats, Fr)
   ;
   fs(C, Cats, Fr)
   ;
   nclp(C,Po,Sem)
   ;
   uniqdis(C, Cats),
   !.

tabellaref(pr_int,chi,[+ref,-pro,-ana,+me]).
tabellaref(pr_int,cosa,[+ref,-pro,-ana,+me]).
tabellaref(pro_expl,form,[-ref,-pro,-ana,-me]).
tabellaref(rel,pro,[+ref,-pro,-ana,-me]).
tabellaref(rel,quale,[+ref,-pro,-ana,+me]).
tabellaref(rel,pPro,[+ref,-pro,-ana,-me]).
tabellaref(rel,chi,[+ref,-pro,-ana,+me]).
tabellaref(rel,_,[+ref,-pro,-ana,-me]).
tabellaref(poss,proprio,[-ref,+pro,+ana,+me,-subj]).
tabellaref(poss,sé,[-ref,+pro,+ana,+me,-subj]).
tabellaref(pers,_,[+ref,+pro,-ana,+me]).                          
tabellaref(pro_n,_,[+ref,-pro,-ana,-me]).
tabellaref(pron,little_pro,[+ref,+pro,-ana,-me]).
tabellaref(pron,bigPro,[+ref,+pro,+ana,-me]).
tabellaref(coord,_,[+ref,-pro,-ana,+class]).
tabellaref(poss,Pred,[+ref,+pro,-ana,+me]) :- Pred \= proprio.
tabellaref(int,Pro,[+ref,-pro,-ana,+me]).
tabellaref(_,esso,[-ref,-pro,-ana,-me]).
tabellaref(n,_,[+ref,-pro,-ana,+class]).
tabellaref(ng,_,[+ref,-pro,-ana,+class]).
tabellaref(noun,_,[+ref,-pro,-ana,+class]).
tabellaref(vbl,_,[+ref,-pro,-ana,-me]).
tabellaref(nh,_,[+ref,-pro,-ana,-class]).
tabellaref(nt,_,[+ref,-pro,-ana,-class]).
tabellaref(np,_,[+ref,-pro,-ana,-class]).
tabellaref(num,_,[+ref,-pro,-ana,-class]).
tabellaref(npro,_,[+ref,-pro,-ana,-class]).
tabellaref(dim,_,[+ref,+pro,-ana,+class]).
tabellaref(deit,_,[+ref,+pro,-ana,+class]).
tabellaref(deittico,_,[+ref,+pro,-ana,+class]).
tabellaref(clit,_,[+ref,+pro,+ana,+me]).
tabellaref(enclit,_,[+ref,+pro,+ana,+me]).
tabellaref(clitico,_,[+ref,+pro,+ana,+me]).
tabellaref(enclitico,_,[+ref,+pro,+ana,+me]).
tabellaref(rifl_lungo,_,[-ref,+pro,+ana,+me,+subj]).
tabellaref(pr_quantif,_,[+ref,-pro,-ana,+me]).
tabellaref(quant,_,[+ref,-pro,-ana,+me]).
tabellaref(q,_,[+ref,-pro,-ana,+me]).
tabellaref(pro_imp,_,[+ref,-pro,-ana,+me]).
tabellaref(ana_clit,_,[+ref,+pro,+ana,+me]).
tabellaref(enfatico,_,[+ref,+pro,+ana,+me]).
tabellaref(ag,_,[-ref,+pro,+ana,+me]).
tabellaref(rifl_corto,_,[-ref,-pro,+ana,+me,-subj]) :-
   gr(romance).
tabellaref(pron,_,[+ref,+pro,-ana,+me]).


findantes_all([],Args, Refs, [],[]):-!.
findantes_all([[]|Prons],Args, Refs, Antes,B1):-
    findantes_all(Prons,Args, Refs, Antes,B1),
    !.
findantes_all([[W-0-F/I]|Prons],Args, Refs, [Ante|Antes],[Pros|B1]):-
    check_argument_pron(W,Refs,F,F1),
    findantes(W-0-F1/I,Args,Refs, Ante,Pros),
    findantes_all(Prons,Args, Refs, Antes,B1),
    !.

findantes_all([[W-0-F/I|Prons]],Args, Refs, [Ante|Antes],[Pros|B1]):-
    findantes(W-0-F/I,Args,Refs, Ante,Pros),
    (Prons=[[W-0-F/I]|Pro],
      findantes_all(Prons,Args, Refs, Antes,B1);
      Prons\=[[_-0-_/_]|Pro],
      findantes_all_Cl(Prons,Args, Refs, Antes,B1)),
    !.

findantes_all([[W-0-F/I|Prons]|Rest],Args, Refs, AnteAll,ProAll):-
     findantes(W-0-F/I,Args,Refs, Ante,Pros),
     Prons=[W1-0-F1/I1|Pro],
     findantes_all([W1-0-F1/I1],Args, Refs, Antes,B1),
    findantes_all(Rest,Args, Refs, Antess,B2),
    append([Ante],Antes,Ante1),
    append([Pros],B1,B11),
    append(Ante1,Antess,AnteAll),
    append(B11,B2,ProAlls),
    appiattisci(ProAlls,ProAll),
    !.

findantes_all_Cl([],Args, Refs, [],[]):-!.
findantes_all_Cl([W-0-F/I|Prons],Args, Refs, [Ante|Antes],[Pros|B1]):-
    findantes(W-0-F/I,Args,Refs, Ante,Pros),
    findantes_all(Prons,Args, Refs, Antes,B1),
    !.

/* Ind è l'indice della ref_ex possibile Ante e V del suo Predicato Head*/

check_main_subord(Deps,Ind-V1,Pron,Id,Role):-
    member(i(Id,Pron,Ca,Lem1,Infl,Feat1,V,Fun/Role),Deps),
    (member(i(V,Verb,Cat,Lem,ibar,Feat,X,CatV/Scat),Deps);
      member(i(V,Verb,Cat,Lem,ir_infl,Feat,X,CatV/Scat),Deps)),
    V1<V,
   !.

check_main_subord(Deps,Ind-V1,Pron,Id,Role):-
    member(i(Ind,Pron,Ca,Lem1,Infl,Feat1,V,Fun/Role),Deps),
    (member(i(V,Verb,Cat,Lem,ibar,Feat,X,CatV/Scat),Deps);
      member(i(V,Verb,Cat,Lem,ir_infl,Feat,X,CatV/Scat),Deps)),
    V<V1,
   !.

/* Id ind del pronome, Ind ind dell'ante */
check_obviation_mains(Id-Pron,Ind,Deps,Lemp):-
    (member(i(Ind,Head,Ca2,Lem2,Infl2,Feat2,V1,Fun2/Role2),Deps);
    member(i(Ind,Head,Ca2,Lem2,Infl2,Feat2,V1,Fun2Role2),Deps)),
    (member(i(V1,Pred,Catp,Lemp,ibar,Featp,Xp,CatVp/Scatp),Deps);
      member(i(V1,Pred,Catp,Lemp,ir_infl,Featp,Xp,CatVp/Scatp),Deps);
      member(i(V1,Pred,Catp,Lemp,Cos,Featp,Xp,CatVpScatp),Deps)
      ),
    member(i(Id,Pron,Ca,Lem1,Infl,Feat1,V,Fun/Role),Deps),
    (member(i(V,Verb,Cat,Lem,ibar,Feat,X,CatV/Scat),Deps);
      member(i(V,Verb,Cat,Lem,ir_infl,Feat,X,CatV/Scat),Deps)),
    V1<V,
    !.

/*
check_main_subord(Deps,Ind-V,Pron,Id,Role):-
   term_to_atom(cmod-subord,Fun),
   (Dgrs=..[Fun,Sem,nil,Pred1-Ind1];
     Dgrs=..[Fun,Sem,Pred1-Ind1]),
   dgrs(N,Dgrs),
   firstword(Sem),
   term_to_atom(subj-Role,Func),
   Dgrs1=..[Func,Pred-Ind,Pron-Id],
   dgrs(N,Dgrs1),
   !.
check_main_subord(Deps,Ind-V,Pron,Id,Role):-
   term_to_atom(ccomp-prop,Fun),
   (Dgrs=..[Fun,Sem,Pred-Ind,Pred1-Ind1];
    Dgrs=..[Fun,Sem,Pred-Ind,Pred1];
    Dgrs=..[Fun,Sem,Pred1-Ind,Pred-Ind1];
    Dgrs=..[Fun,Sem,Pred1-Ind,Pred];
     Dgrs=..[Fun,Pred1-Ind,Pred-Ind1];
     Dgrs=..[Fun,Sem,Pred1,Pred-Ind1];
     Dgrs=..[Fun,Sem,Pred1,Pred];
     Dgrs=..[Fun,Pred-Ind,Pred1-Ind1];
     Dgrs=..[Fun,Sem,Pred,Pred1-Ind1];
     Dgrs=..[Fun,Sem,Pred,Pred1]),
   dgrs(N,Dgrs),
   term_to_atom(subj-Role,Func),
   Dgrs1=..[Func,Pred-Ind,Pron-Id],
   dgrs(N2,Dgrs1),
   !.
check_main_dirs(Deps,Ind-V,Pron,Ante-Ix,Id,Role):-
   term_to_atom(cmod-dirsp,Fun),
   Dgrs=..[Fun,Sem,Pre-I,Pred-Ind],
   dgrs(N,Dgrs),
   dgrs(N,Dgrs1),
   Dgrs1=..[Func,Pred-In,Pron-Id],
   term_to_atom(subj-Role,Func),
   dgrs(N1,Dgrs2),
   Dgrs2=..[Funct,Pre-I,Ante-Ix],
   term_to_atom(subj-Rol,Funct),
   !.
*/

filter_pers(W, Fea, L):-
   pr(personale,Part,W,Pers,Gen,Num,Fea)
   ;
   W=little_pro,!.
   
getpredpron(Deps,Ref,P,V,Verb):-
    Ref=..[ref_ex,P|_],
    member(i(P,Head,Ca,Lem1,Infl,Feat1,V,Fun/Role),Deps),
    (member(i(V,Verb,Cat,Lem,ibar,Feat,X,CatV/Scat),Deps);
      member(i(V,Verb,Cat,Lem,ir_infl,Feat,X,CatV/Scat),Deps)),
    !.

findantes(Pron,Args, [], [],Pron):-!.
findantes(W-0-F/I, OldArgs,[Ref/Score-P|RefList], [],[W-0-F/I]):-
   (atomic(W),Ww=W;is_list(W),on(Ww,W)),
    reverse(F,FRev),
    FRev=[Fun/_|_], (Fun=sogg;Fun=subj),
    getpredpron(OldArgs,Ref,Ind,V,Pred),
    filter_pers(Ww, Fea, L),
    \+ check_main_subord(OldArgs,Ind-V,Ww,I,Role),
%    extractspeakerspron(Ww,Pred,I,Fea,S),
    !.
findantes(W-0-F/I, OldArgs,[Ref/Score-P|RefList], [],[W-0-F/I]):-
    Cl=1,
   (atomic(W),Ww=W;is_list(W),on(Ww,W)),
    reverse(F,FRev),
    FRev=[Fun/_|_], (Fun=sogg;Fun=subj),
    getpredpron(OldArgs,Ref,Ind,V,Pred),
    proncheckfirstword(Pred,Ww,I,Role),
%    extractspeakerspron(Ww,Pred,I,Fea,S),
    !.
/*
findantes(W-0-F/I, OldArgs,RefList, [],[W-0-F/I]):-
   (atomic(W),Ww=W;is_list(W),on(Ww,W)),
    reverse(F,FRev),
    FRev=[Fun/_|_], (Fun=sogg;Fun=subj),
    getpredpron(OldArgs,Ref,Ind,V),
    (filter_pers(Ww, Fea, L);filter_pers(_, Fea, Ww)),
    on(num=Num,Fea), Num=sing,
    \+ check_main_subord(OldArgs,Ind-V,Ww,I,Role),
    !.
*/
findantes(W-0-F/I, OldArgs,[Ref/Score-P|RefList], [],[W-0-F/I]):-
   (atomic(W),Ww=W;is_list(W),on(Ww,W)),
     Ref=..[ref_ex,Ind,Ww,Tab,Per,Ge,Nu,Cat,Fu/Ro],
     (Fu=sogg;Fu=subj), Nu=sing,
    getpredpron(OldArgs,Ref,Ind,V,Pred),
    (filter_pers(Ww, Fea, L);filter_pers(_, Fea, Ww)),
    \+ check_main_subord(OldArgs,Ind-V,Ww,I,Role),
    !.
findantes(W-0-F/I, OldArgs,[Ref/Score-P|RefList], [Ind-I-W1-Pred|Antes],Pros):-
   (atomic(W),Ww=W;is_list(W),on(Ww,W)),
     nonvar(Ref),
     Ref=..[ref_ex,Ind,W1,Tab,Per,Ge,Nu,Cat,Fu/Ro],
     F1=[Per,Ge,Nu,Cat],
     I\=Ind,
     checkreftab(OldArgs,Ind,Tab,Ww,W1),
     check_obviation_mains(I-Ww,Ind,OldArgs,Pred),
%     match_feats_cats(F, F1),
    (match_feats_cats(F, F1);
      filter_pos_ag(Ww,Fea,L),
      check_poss_feats(Ww,Fea,F1);
      check_main_dirs(Pred,Ww,W1-Ind,I,Role)),
%      on(_-Pred-Args,OldArgs),
     \+possin_subj(Pred,Ww,I,Ind),
     disjoint_chain(W,W1,Ind),
    findantes(W-0-F/I,OldArgs,RefList, Antes,Pros),
    !.
findantes(W-0-F/I, OldArgs, [Ref/Score-P|RefList], [Ind-I-W1-Pred|Antes],Pros):-
   (atomic(W),Ww=W;is_list(W),on(Ww,W)),
     nonvar(Ref),
     Ref=..[ref_ex,Ind,W1,Tab,Per,Ge,Nu,Cat,Fu/Ro],
     F1=[Per,Ge,Nu,Cat],
     I\=Ind,
     checkreftab(OldArgs,Ind,Tab,Ww,W1),
     check_obviation_mains(I-Ww,Ind,OldArgs,Pred),
     get_T(Tab,T),
     match_feats_cats(F, T), Cat=[],
%      on(_-Pred-Args,OldArgs),
     \+possin_subj(Pred,Ww,I,Ind),
     disjoint_chain(W,W1,Ind),
   findantes(W-0-F/I, OldArgs,RefList, Antes,Pros),
    !.
findantes(W-0-F/I, OldArgs,[Ref/Score-P|RefList], [Ind-I-W1-Pred|Antes],Pros):-
   (atomic(W),Ww=W;is_list(W),on(Ww,W)),
     nonvar(Ref),
     Ref=..[ref_ex,Ind,W1,Tab,Per,Ge,Nu,Cat,Fu/Ro],
     F1=[Per,Ge,Nu,Cat],
     I\=Ind,
     checkreftab(OldArgs,Ind,Tab,Ww,W1),
     check_obviation_mains(I-Ww,Ind,OldArgs,Pred),
     F=[Pe,Gen,N,Tratti|_],
      Nu=sing, N=plur,
     (generic_head1(W1,CatSem);recover_descs(W1,Names), on(and,Names)),
     F2=[Per,Ge,plur,Cat],
      match_feats_cats(F, F2),
%      on(_-Pred-Args,OldArgs),
     \+possin_subj(Pred,Ww,I,Ind),
     disjoint_chain(W,W1,Ind),
    findantes(W-0-F/I, OldArgs,RefList, Antes,Pros),
    !.
findantes(W-0-F/I, OldArgs,[Ref/Score-P|RefList], [Ind-I-W1-Pred|Antes],Pros):-
   (atomic(W),Ww=W;is_list(W),on(Ww,W)),
     nonvar(Ref),
     Ref=..[ref_ex,Ind,W1,Tab,Per,Ge,Nu,Cat,Fu/Role],
     F1=[Per,Ge,Nu,Cat],
     I\=Ind,
     checkreftab(OldArgs,Ind,Tab,Ww,W1),
     check_obviation_mains(I-Ww,Ind,OldArgs,Pred),
     Cat=nil,
     (pbrol(Role,Score,_,Feats);Feats=[any]),
      F2=[Per,Ge,Nu,Feats], 
     match_feats_cats(F, F2),
%      on(_-Pred-Args,OldArgs),
     \+possin_subj(Pred,Ww,I,Ind),
     disjoint_chain(W,W1,Ind),
    findantes(W-0-F/I, OldArgs,RefList, Antes,Pros),
    !.

findantes(W-0-F/I, OldArgs,[Ref/Score-P|RefList], [Ind-Ww-W1-Pred],Pros):-
   (atomic(W),Ww=W;is_list(W),on(Ww,W)),
     nonvar(Ref),
     Ref=..[ref_ex,Ind,W1,Tab,Per,Ge,Nu,Cat,Fu/Ro],
    F1=[Per,Ge,Nu,Cat],
    Ww\=W1,
    checkreftab(OldArgs,Ind,Tab,Ww,W1),
    filter_pos_ag(Ww,Fea,L),
    W1\=proprio,
    on(pred=Pro,F), pred_p(pro, Pro, nil,Cats, []),
    append(F,Cats,FCats),
    (match_feats_cats(FCats, F1);
    check_poss_feats(Ww,Fea,F1)),
%    on(I-Pred-Args,OldArgs),
     Fu/Ro\=xcomp/prop,
    check_disj(W-F-I, W1-Ind),
    \+possin_subj(Pred,W,I,Ind),
    !.

findantes(W-0-F/I, OldArgs,[Ref/Score-P|RefList], [Ind-Ww-W1-Pred],Pros):-
   (atomic(W),Ww=W;is_list(W),on(Ww,W)),
     nonvar(Ref),
     Ref=..[ref_ex,Ind,W1,Tab,Per,Ge,Nu,Cat,Fu/Ro],
    F1=[Per,Ge,Nu,Cat],
    Ww\=W1,
    checkreftab(OldArgs,Ind,Tab,Ww,W1),
    filter_pos_ag(Ww,Fea,L),
    W1\=proprio,
    on(pred=Pro,F), pred_p(pro, Pro, nil,Cats, []),
    append(F,Cats,FCats),
    on(num=plur,F), Nu=sing,
    (generic_head1(W1,CatSem);recover_descs(W1,Names), on(and,Names)),
     F2=[Per,Ge,plur,Cat],
    (match_feats_cats(FCats, F2);
    check_poss_feats(Ww,Fea,F2)),
%    on(I-Pred-Args,OldArgs),
     Fu/Ro\=xcomp/prop,
    check_disj(W-F-I, W1-Ind),
    \+possin_subj(Pred,W1,I,Ind),
    !.

findantes(W-0-F/Id, OldArgs,[Ref/Score-P|RefList], [Ind-Id-W1-Pred],Pros):-
   (atomic(W),Ww=W;is_list(W),on(Ww,W)),
     nonvar(Ref),
     Ref=..[ref_ex,Ind,W1,Tab,Per,Ge,Nu,Cat,Fu/Ro],
    F1=[Per,Ge,Nu,Cat],
    Ww\=W1,
    checkreftab(OldArgs,Ind,Tab,Ww,W1),
    filter_pos_ag(Ww,Fea,L),
    W1\=proprio,
    on(Cats,F), list(Cats),
    on(umano,Cats),
    (match_feats_cats(Cats, F1);
      check_poss_feats(Ww,Fea,F1)),
%    on(I-Pred-Args,OldArgs),
     Fu/Ro\=xcomp/prop,
    check_disj(W-F-I, W1-Ind),
    \+possin_subj(Pred,W1,Id,Ind),
    !.

findantes(W-0-F/I, OldArgs,[Ref/Score-P|RefList], [Ind-I-W1-Pred|Antes],Pros):-
   (atomic(W),Ww=W;is_list(W),on(Ww,W)),
     nonvar(Ref),
     Ref=..[ref_ex,Ind,W1,Tab,Per,Ge,Nu,Cat,Fu/Ro],
    F1=[Per,Ge,Nu,Cat],
    Ww\=W1,
    checkreftab(OldArgs,Ind,Tab,Ww,W1),
    \+ filter_pos_ag(Ww,Fea,L),
    check_argumentality_pron(F),
    match_feats_cats(F, F1),
%    on(I-Pred-Args,OldArgs),
     Fu/Ro\=xcomp/prop,
    check_disj(W-F-I, W1-Ind),
    \+possin_subj(Pred,W1,I,Ind),
    findantes(W-0-F/I,OldArgs,RefList, Antes,Pros),
    !.

findantes(Prons, OldArgs,[Ref/S-I1|RefList], Ante,Pros):-
   findantes(Prons, OldArgs, RefList, Ante,Pros),
    !.
findantes(Prons, OldArgs,RefList, Ante,Prons).
